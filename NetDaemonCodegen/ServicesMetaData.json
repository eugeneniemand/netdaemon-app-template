{
  "homeassistant": {
    "save_persistent_states": {
      "name": "Save Persistent States",
      "description": "Save the persistent states (for entities derived from RestoreEntity) immediately. Maintain the normal periodic saving interval.",
      "fields": {}
    },
    "turn_off": {
      "name": "Generic turn off",
      "description": "Generic service to turn devices off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "turn_on": {
      "name": "Generic turn on",
      "description": "Generic service to turn devices on under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "toggle": {
      "name": "Generic toggle",
      "description": "Generic service to toggle devices on/off under any domain",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stop the Home Assistant service.",
      "fields": {}
    },
    "restart": {
      "name": "Restart",
      "description": "Restart the Home Assistant service.",
      "fields": {}
    },
    "check_config": {
      "name": "Check configuration",
      "description": "Check the Home Assistant configuration files for errors. Errors will be displayed in the Home Assistant log.",
      "fields": {}
    },
    "update_entity": {
      "name": "Update entity",
      "description": "Force one or more entities to update its data",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "reload_core_config": {
      "name": "Reload core configuration",
      "description": "Reload the core configuration.",
      "fields": {}
    },
    "set_location": {
      "name": "Set location",
      "description": "Update the Home Assistant location.",
      "fields": {
        "latitude": {
          "name": "Latitude",
          "description": "Latitude of your location.",
          "required": true,
          "example": 32.87336,
          "selector": {
            "text": null
          }
        },
        "longitude": {
          "name": "Longitude",
          "description": "Longitude of your location.",
          "required": true,
          "example": 117.22743,
          "selector": {
            "text": null
          }
        }
      }
    },
    "reload_custom_templates": {
      "name": "Reload custom Jinja2 templates",
      "description": "Reload Jinja2 templates found in the custom_templates folder in your config. New values will be applied on the next render of the template.",
      "fields": {}
    },
    "reload_config_entry": {
      "name": "Reload config entry",
      "description": "Reload a config entry that matches a target.",
      "fields": {
        "entry_id": {
          "advanced": true,
          "name": "Config entry id",
          "description": "A configuration entry id",
          "required": false,
          "example": "8955375327824e14ba89e4b29cc3ec9a",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {}
        ],
        "device": [
          {}
        ]
      }
    },
    "reload_all": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "persistent_notification": {
    "create": {
      "name": "Create",
      "description": "Show a notification in the frontend.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification. [Templates accepted]",
          "required": true,
          "example": "Please check your configuration.yaml.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Optional title for your notification. [Templates accepted]",
          "example": "Test notification",
          "selector": {
            "text": null
          }
        },
        "notification_id": {
          "name": "Notification ID",
          "description": "Target ID of the notification, will replace a notification with the same ID.",
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      }
    },
    "dismiss": {
      "name": "Dismiss",
      "description": "Remove a notification from the frontend.",
      "fields": {
        "notification_id": {
          "name": "Notification ID",
          "description": "Target ID of the notification, which should be removed.",
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "system_log": {
    "clear": {
      "name": "Clear all",
      "description": "Clear all log entries.",
      "fields": {}
    },
    "write": {
      "name": "Write",
      "description": "Write log entry.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message to log.",
          "required": true,
          "example": "Something went wrong",
          "selector": {
            "text": null
          }
        },
        "level": {
          "name": "Level",
          "description": "Log level.",
          "default": "error",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Debug",
                  "value": "debug"
                },
                {
                  "label": "Info",
                  "value": "info"
                },
                {
                  "label": "Warning",
                  "value": "warning"
                },
                {
                  "label": "Error",
                  "value": "error"
                },
                {
                  "label": "Critical",
                  "value": "critical"
                }
              ]
            }
          }
        },
        "logger": {
          "name": "Logger",
          "description": "Logger name under which to log the message. Defaults to \u0027system_log.external\u0027.",
          "example": "mycomponent.myplatform",
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "logger": {
    "set_default_level": {
      "name": "Set default level",
      "description": "Set the default log level for integrations.",
      "fields": {
        "level": {
          "name": "Level",
          "description": "Default severity level for all integrations.",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Debug",
                  "value": "debug"
                },
                {
                  "label": "Info",
                  "value": "info"
                },
                {
                  "label": "Warning",
                  "value": "warning"
                },
                {
                  "label": "Error",
                  "value": "error"
                },
                {
                  "label": "Fatal",
                  "value": "fatal"
                },
                {
                  "label": "Critical",
                  "value": "critical"
                }
              ]
            }
          }
        }
      }
    },
    "set_level": {
      "name": "Set level",
      "description": "Set log level for integrations.",
      "fields": {}
    }
  },
  "person": {
    "reload": {
      "name": "Reload",
      "description": "Reload the person configuration.",
      "fields": {}
    }
  },
  "frontend": {
    "set_theme": {
      "name": "Set theme",
      "description": "Set a theme unless the client selected per-device theme.",
      "fields": {
        "name": {
          "name": "Theme",
          "description": "Name of a predefined theme",
          "required": true,
          "example": "default",
          "selector": {
            "theme": null
          }
        },
        "mode": {
          "name": "Mode",
          "description": "The mode the theme is for.",
          "default": "light",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Dark",
                  "value": "dark"
                },
                {
                  "label": "Light",
                  "value": "light"
                }
              ]
            }
          }
        }
      }
    },
    "reload_themes": {
      "name": "Reload themes",
      "description": "Reload themes from YAML configuration.",
      "fields": {}
    }
  },
  "recorder": {
    "purge": {
      "name": "Purge",
      "description": "Start purge task - to clean up old data from your database.",
      "fields": {
        "keep_days": {
          "name": "Days to keep",
          "description": "Number of history days to keep in database after purge.",
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          }
        },
        "repack": {
          "name": "Repack",
          "description": "Attempt to save disk space by rewriting the entire database file.",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "apply_filter": {
          "name": "Apply filter",
          "description": "Apply entity_id and event_type filter in addition to time based purge.",
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "purge_entities": {
      "name": "Purge Entities",
      "description": "Start purge task to remove specific entities from your database.",
      "fields": {
        "domains": {
          "name": "Domains to remove",
          "description": "List the domains that need to be removed from the recorder database.",
          "example": "sun",
          "required": false,
          "default": [],
          "selector": {
            "object": null
          }
        },
        "entity_globs": {
          "name": "Entity Globs to remove",
          "description": "List the glob patterns to select entities for removal from the recorder database.",
          "example": "domain*.object_id*",
          "required": false,
          "default": [],
          "selector": {
            "object": null
          }
        },
        "keep_days": {
          "name": "Days to keep",
          "description": "Number of history days to keep in database of matching rows. The default of 0 days will remove all matching rows.",
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          }
        }
      },
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "enable": {
      "name": "Enable",
      "description": "Start the recording of events and state changes",
      "fields": {}
    },
    "disable": {
      "name": "Disable",
      "description": "Stop the recording of events and state changes",
      "fields": {}
    }
  },
  "cloud": {
    "remote_connect": {
      "name": "Remote connect",
      "description": "Make instance UI available outside over NabuCasa cloud",
      "fields": {}
    },
    "remote_disconnect": {
      "name": "Remote disconnect",
      "description": "Disconnect UI from NabuCasa cloud",
      "fields": {}
    }
  },
  "ping": {
    "reload": {
      "name": "Reload",
      "description": "Reload all ping entities.",
      "fields": {}
    }
  },
  "template": {
    "reload": {
      "name": "Reload",
      "description": "Reload all template entities.",
      "fields": {}
    }
  },
  "conversation": {
    "process": {
      "name": "Process",
      "description": "Launch a conversation from a transcribed text.",
      "fields": {
        "text": {
          "name": "Text",
          "description": "Transcribed text",
          "example": "Turn all lights on",
          "selector": {
            "text": null
          }
        },
        "language": {
          "name": "Language",
          "description": "Language of text. Defaults to server language",
          "example": "NL",
          "selector": {
            "text": null
          }
        },
        "agent_id": {
          "name": "Agent",
          "description": "Assist engine to process your request",
          "example": "homeassistant",
          "selector": {
            "text": null
          }
        }
      }
    },
    "reload": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "select": {
    "select_first": {
      "name": "First",
      "description": "Select the first option of an select entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Select the last option of an select entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Select the next options of an select entity.",
      "fields": {
        "cycle": {
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Select an option of an select entity.",
      "fields": {
        "option": {
          "name": "Option",
          "description": "Option to be selected.",
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Select the previous options of an select entity.",
      "fields": {
        "cycle": {
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    }
  },
  "localtuya": {
    "reload": {
      "name": "",
      "description": "Reload localtuya and reconnect to all devices.",
      "fields": {}
    },
    "set_dp": {
      "name": "",
      "description": "Change the value of a datapoint (DP)",
      "fields": {
        "device_id": {
          "description": "Device ID of device to change datapoint value for",
          "example": "11100118278aab4de001"
        },
        "dp": {
          "description": "Datapoint index",
          "example": 1
        },
        "value": {
          "description": "New value to set",
          "example": false
        }
      }
    }
  },
  "light": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on one or more lights and adjust properties of the light, even when they are turned on already.\n",
      "fields": {
        "transition": {
          "name": "Transition",
          "description": "Duration it takes to get to next state.",
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "rgb_color": {
          "name": "Color",
          "description": "The color for the light (based on RGB - red, green, blue).",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_rgb": null
          }
        },
        "rgbw_color": {
          "name": "RGBW-color",
          "description": "A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[255, 100, 100, 50]",
          "selector": {
            "object": null
          }
        },
        "rgbww_color": {
          "name": "RGBWW-color",
          "description": "A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[255, 100, 100, 50, 70]",
          "selector": {
            "object": null
          }
        },
        "color_name": {
          "name": "Color name",
          "description": "A human readable color name.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                "homeassistant",
                "aliceblue",
                "antiquewhite",
                "aqua",
                "aquamarine",
                "azure",
                "beige",
                "bisque",
                "blanchedalmond",
                "blue",
                "blueviolet",
                "brown",
                "burlywood",
                "cadetblue",
                "chartreuse",
                "chocolate",
                "coral",
                "cornflowerblue",
                "cornsilk",
                "crimson",
                "cyan",
                "darkblue",
                "darkcyan",
                "darkgoldenrod",
                "darkgray",
                "darkgreen",
                "darkgrey",
                "darkkhaki",
                "darkmagenta",
                "darkolivegreen",
                "darkorange",
                "darkorchid",
                "darkred",
                "darksalmon",
                "darkseagreen",
                "darkslateblue",
                "darkslategray",
                "darkslategrey",
                "darkturquoise",
                "darkviolet",
                "deeppink",
                "deepskyblue",
                "dimgray",
                "dimgrey",
                "dodgerblue",
                "firebrick",
                "floralwhite",
                "forestgreen",
                "fuchsia",
                "gainsboro",
                "ghostwhite",
                "gold",
                "goldenrod",
                "gray",
                "green",
                "greenyellow",
                "grey",
                "honeydew",
                "hotpink",
                "indianred",
                "indigo",
                "ivory",
                "khaki",
                "lavender",
                "lavenderblush",
                "lawngreen",
                "lemonchiffon",
                "lightblue",
                "lightcoral",
                "lightcyan",
                "lightgoldenrodyellow",
                "lightgray",
                "lightgreen",
                "lightgrey",
                "lightpink",
                "lightsalmon",
                "lightseagreen",
                "lightskyblue",
                "lightslategray",
                "lightslategrey",
                "lightsteelblue",
                "lightyellow",
                "lime",
                "limegreen",
                "linen",
                "magenta",
                "maroon",
                "mediumaquamarine",
                "mediumblue",
                "mediumorchid",
                "mediumpurple",
                "mediumseagreen",
                "mediumslateblue",
                "mediumspringgreen",
                "mediumturquoise",
                "mediumvioletred",
                "midnightblue",
                "mintcream",
                "mistyrose",
                "moccasin",
                "navajowhite",
                "navy",
                "navyblue",
                "oldlace",
                "olive",
                "olivedrab",
                "orange",
                "orangered",
                "orchid",
                "palegoldenrod",
                "palegreen",
                "paleturquoise",
                "palevioletred",
                "papayawhip",
                "peachpuff",
                "peru",
                "pink",
                "plum",
                "powderblue",
                "purple",
                "red",
                "rosybrown",
                "royalblue",
                "saddlebrown",
                "salmon",
                "sandybrown",
                "seagreen",
                "seashell",
                "sienna",
                "silver",
                "skyblue",
                "slateblue",
                "slategray",
                "slategrey",
                "snow",
                "springgreen",
                "steelblue",
                "tan",
                "teal",
                "thistle",
                "tomato",
                "turquoise",
                "violet",
                "wheat",
                "white",
                "whitesmoke",
                "yellow",
                "yellowgreen"
              ]
            }
          }
        },
        "hs_color": {
          "name": "Hue/Sat color",
          "description": "Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[300, 70]",
          "selector": {
            "object": null
          }
        },
        "xy_color": {
          "name": "XY-color",
          "description": "Color for the light in XY-format.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[0.52, 0.43]",
          "selector": {
            "object": null
          }
        },
        "color_temp": {
          "name": "Color temperature",
          "description": "Color temperature for the light in mireds.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "min_mireds": 153,
              "max_mireds": 500
            }
          }
        },
        "kelvin": {
          "name": "Color temperature (Kelvin)",
          "description": "Color temperature for the light in Kelvin.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 2000,
              "max": 6500,
              "step": 100,
              "unit_of_measurement": "K"
            }
          }
        },
        "brightness": {
          "name": "Brightness value",
          "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          }
        },
        "brightness_pct": {
          "name": "Brightness",
          "description": "Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        },
        "brightness_step": {
          "name": "Brightness step value",
          "description": "Change brightness by an amount.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": -225,
              "max": 255
            }
          }
        },
        "brightness_step_pct": {
          "name": "Brightness step",
          "description": "Change brightness by a percentage.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": -100,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        },
        "white": {
          "name": "White",
          "description": "Set the light to white mode.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "white"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "constant": {
              "value": true,
              "label": "Enabled"
            }
          }
        },
        "profile": {
          "name": "Profile",
          "description": "Name of a light profile to use.",
          "advanced": true,
          "example": "relax",
          "selector": {
            "text": null
          }
        },
        "flash": {
          "name": "Flash",
          "description": "If the light should flash.",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Long",
                  "value": "long"
                },
                {
                  "label": "Short",
                  "value": "short"
                }
              ]
            }
          }
        },
        "effect": {
          "name": "Effect",
          "description": "Light effect.",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off one or more lights.",
      "fields": {
        "transition": {
          "name": "Transition",
          "description": "Duration it takes to get to next state.",
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "flash": {
          "name": "Flash",
          "description": "If the light should flash.",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Long",
                  "value": "long"
                },
                {
                  "label": "Short",
                  "value": "short"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles one or more lights, from on to off, or, off to on, based on their current state.\n",
      "fields": {
        "transition": {
          "name": "Transition",
          "description": "Duration it takes to get to next state.",
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "rgb_color": {
          "name": "RGB-color",
          "description": "Color for the light in RGB-format.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[255, 100, 100]",
          "selector": {
            "object": null
          }
        },
        "color_name": {
          "name": "Color name",
          "description": "A human readable color name.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                "homeassistant",
                "aliceblue",
                "antiquewhite",
                "aqua",
                "aquamarine",
                "azure",
                "beige",
                "bisque",
                "blanchedalmond",
                "blue",
                "blueviolet",
                "brown",
                "burlywood",
                "cadetblue",
                "chartreuse",
                "chocolate",
                "coral",
                "cornflowerblue",
                "cornsilk",
                "crimson",
                "cyan",
                "darkblue",
                "darkcyan",
                "darkgoldenrod",
                "darkgray",
                "darkgreen",
                "darkgrey",
                "darkkhaki",
                "darkmagenta",
                "darkolivegreen",
                "darkorange",
                "darkorchid",
                "darkred",
                "darksalmon",
                "darkseagreen",
                "darkslateblue",
                "darkslategray",
                "darkslategrey",
                "darkturquoise",
                "darkviolet",
                "deeppink",
                "deepskyblue",
                "dimgray",
                "dimgrey",
                "dodgerblue",
                "firebrick",
                "floralwhite",
                "forestgreen",
                "fuchsia",
                "gainsboro",
                "ghostwhite",
                "gold",
                "goldenrod",
                "gray",
                "green",
                "greenyellow",
                "grey",
                "honeydew",
                "hotpink",
                "indianred",
                "indigo",
                "ivory",
                "khaki",
                "lavender",
                "lavenderblush",
                "lawngreen",
                "lemonchiffon",
                "lightblue",
                "lightcoral",
                "lightcyan",
                "lightgoldenrodyellow",
                "lightgray",
                "lightgreen",
                "lightgrey",
                "lightpink",
                "lightsalmon",
                "lightseagreen",
                "lightskyblue",
                "lightslategray",
                "lightslategrey",
                "lightsteelblue",
                "lightyellow",
                "lime",
                "limegreen",
                "linen",
                "magenta",
                "maroon",
                "mediumaquamarine",
                "mediumblue",
                "mediumorchid",
                "mediumpurple",
                "mediumseagreen",
                "mediumslateblue",
                "mediumspringgreen",
                "mediumturquoise",
                "mediumvioletred",
                "midnightblue",
                "mintcream",
                "mistyrose",
                "moccasin",
                "navajowhite",
                "navy",
                "navyblue",
                "oldlace",
                "olive",
                "olivedrab",
                "orange",
                "orangered",
                "orchid",
                "palegoldenrod",
                "palegreen",
                "paleturquoise",
                "palevioletred",
                "papayawhip",
                "peachpuff",
                "peru",
                "pink",
                "plum",
                "powderblue",
                "purple",
                "red",
                "rosybrown",
                "royalblue",
                "saddlebrown",
                "salmon",
                "sandybrown",
                "seagreen",
                "seashell",
                "sienna",
                "silver",
                "skyblue",
                "slateblue",
                "slategray",
                "slategrey",
                "snow",
                "springgreen",
                "steelblue",
                "tan",
                "teal",
                "thistle",
                "tomato",
                "turquoise",
                "violet",
                "wheat",
                "white",
                "whitesmoke",
                "yellow",
                "yellowgreen"
              ]
            }
          }
        },
        "hs_color": {
          "name": "Hue/Sat color",
          "description": "Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[300, 70]",
          "selector": {
            "object": null
          }
        },
        "xy_color": {
          "name": "XY-color",
          "description": "Color for the light in XY-format.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[0.52, 0.43]",
          "selector": {
            "object": null
          }
        },
        "color_temp": {
          "name": "Color temperature (mireds)",
          "description": "Color temperature for the light in mireds.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "color_temp": null
          }
        },
        "kelvin": {
          "name": "Color temperature (Kelvin)",
          "description": "Color temperature for the light in Kelvin.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 2000,
              "max": 6500,
              "step": 100,
              "unit_of_measurement": "K"
            }
          }
        },
        "brightness": {
          "name": "Brightness value",
          "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          }
        },
        "brightness_pct": {
          "name": "Brightness",
          "description": "Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        },
        "white": {
          "name": "White",
          "description": "Set the light to white mode.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "white"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "constant": {
              "value": true,
              "label": "Enabled"
            }
          }
        },
        "profile": {
          "name": "Profile",
          "description": "Name of a light profile to use.",
          "advanced": true,
          "example": "relax",
          "selector": {
            "text": null
          }
        },
        "flash": {
          "name": "Flash",
          "description": "If the light should flash.",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Long",
                  "value": "long"
                },
                {
                  "label": "Short",
                  "value": "short"
                }
              ]
            }
          }
        },
        "effect": {
          "name": "Effect",
          "description": "Light effect.",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "logbook": {
    "log": {
      "name": "Log",
      "description": "Create a custom entry in your logbook.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "Custom name for an entity, can be referenced with entity_id.",
          "required": true,
          "example": "Kitchen",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "Message",
          "description": "Message of the custom logbook entry.",
          "required": true,
          "example": "is being used",
          "selector": {
            "text": null
          }
        },
        "entity_id": {
          "name": "Entity ID",
          "description": "Entity to reference in custom logbook entry.",
          "selector": {
            "entity": null
          }
        },
        "domain": {
          "name": "Domain",
          "description": "Icon of domain to display in custom logbook entry.",
          "example": "light",
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "counter": {
    "increment": {
      "name": "Increment",
      "description": "Increment a counter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrement a counter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "reset": {
      "name": "Reset",
      "description": "Reset a counter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "set_value": {
      "name": "Set",
      "description": "Set the counter value",
      "fields": {
        "value": {
          "name": "Value",
          "required": true,
          "description": "The new counter value the entity should be set to.",
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "configure": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "timer": {
    "reload": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "start": {
      "name": "Start",
      "description": "Start a timer",
      "fields": {
        "duration": {
          "description": "Duration the timer requires to finish. [optional]",
          "example": "00:01:00 or 60",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pause a timer.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "cancel": {
      "name": "Cancel",
      "description": "Cancel a timer.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "finish": {
      "name": "Finish",
      "description": "Finish a timer.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "change": {
      "name": "Change",
      "description": "Change a timer",
      "fields": {
        "duration": {
          "description": "Duration to add or subtract to the running timer",
          "default": 0,
          "required": true,
          "example": "00:01:00, 60 or -60",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    }
  },
  "utility_meter": {
    "reset": {
      "name": "Reset",
      "description": "Resets all counters of a utility meter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "calibrate": {
      "name": "Calibrate",
      "description": "Calibrates a utility meter sensor.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "Value to which set the meter",
          "example": "100",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "integration": "utility_meter"
          }
        ]
      }
    }
  },
  "webrtc": {
    "create_link": {
      "name": "Create Link",
      "description": "Create a temporary or permanent link to a stream (enter \u0022url\u0022 or \u0022entity\u0022)",
      "fields": {
        "link_id": {
          "description": "Create a random or permanent ID for your link",
          "example": "fd0a53ca-e9ab-4e7a-86a2-441642b16ae1",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "url": {
          "description": "Link to RTSP-stream",
          "example": "rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0",
          "selector": {
            "text": null
          }
        },
        "entity": {
          "description": "Camera entity",
          "example": "camera.generic_stream",
          "selector": {
            "entity": {
              "domain": "camera"
            }
          }
        },
        "open_limit": {
          "description": "How many times a link can be opened (0 - unlimit)",
          "example": 1,
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "times"
            }
          }
        },
        "time_to_live": {
          "description": "How many seconds will the link live (0 - unlimit)",
          "example": 60,
          "default": 60,
          "selector": {
            "number": {
              "min": 0,
              "max": 100000,
              "unit_of_measurement": "seconds"
            }
          }
        }
      }
    },
    "dash_cast": {
      "name": "DashCast",
      "description": "Cast stream to Chromecast device via DashCast application",
      "fields": {
        "entity_id": {
          "description": "Media player entity",
          "example": "media_player.mibox4",
          "required": true,
          "selector": {
            "entity": {
              "integration": "cast",
              "domain": "media_player"
            }
          }
        },
        "url": {
          "description": "Link to RTSP-stream",
          "example": "rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0",
          "selector": {
            "text": null
          }
        },
        "entity": {
          "description": "Camera entity",
          "example": "camera.generic_stream",
          "selector": {
            "entity": {
              "domain": "camera"
            }
          }
        }
      }
    }
  },
  "schedule": {
    "reload": {
      "name": "Reload",
      "description": "Reload the schedule configuration",
      "fields": {}
    }
  },
  "climate": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn climate device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn climate device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_hvac_mode": {
      "name": "Set HVAC mode",
      "description": "Set HVAC operation mode for climate device.",
      "fields": {
        "hvac_mode": {
          "name": "HVAC mode",
          "description": "New value of operation mode.",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "off"
                },
                {
                  "label": "Auto",
                  "value": "auto"
                },
                {
                  "label": "Cool",
                  "value": "cool"
                },
                {
                  "label": "Dry",
                  "value": "dry"
                },
                {
                  "label": "Fan Only",
                  "value": "fan_only"
                },
                {
                  "label": "Heat/Cool",
                  "value": "heat_cool"
                },
                {
                  "label": "Heat",
                  "value": "heat"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Set preset mode for climate device.",
      "fields": {
        "preset_mode": {
          "name": "Preset mode",
          "description": "New value of preset mode.",
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "set_aux_heat": {
      "name": "Turn on/off auxiliary heater",
      "description": "Turn auxiliary heater on/off for climate device.",
      "fields": {
        "aux_heat": {
          "name": "Auxiliary heating",
          "description": "New value of auxiliary heater.",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set temperature",
      "description": "Set target temperature of climate device.",
      "fields": {
        "temperature": {
          "name": "Temperature",
          "description": "New target temperature for HVAC.",
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          }
        },
        "target_temp_high": {
          "name": "Target temperature high",
          "description": "New target high temperature for HVAC.",
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          }
        },
        "target_temp_low": {
          "name": "Target temperature low",
          "description": "New target low temperature for HVAC.",
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          }
        },
        "hvac_mode": {
          "name": "HVAC mode",
          "description": "HVAC operation mode to set temperature to.",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "off"
                },
                {
                  "label": "Auto",
                  "value": "auto"
                },
                {
                  "label": "Cool",
                  "value": "cool"
                },
                {
                  "label": "Dry",
                  "value": "dry"
                },
                {
                  "label": "Fan Only",
                  "value": "fan_only"
                },
                {
                  "label": "Heat/Cool",
                  "value": "heat_cool"
                },
                {
                  "label": "Heat",
                  "value": "heat"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              1,
              2
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set target humidity",
      "description": "Set target humidity of climate device.",
      "fields": {
        "humidity": {
          "name": "Humidity",
          "description": "New target humidity for climate device.",
          "required": true,
          "selector": {
            "number": {
              "min": 30,
              "max": 99,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_fan_mode": {
      "name": "Set fan mode",
      "description": "Set fan operation for climate device.",
      "fields": {
        "fan_mode": {
          "name": "Fan mode",
          "description": "New value of fan mode.",
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_swing_mode": {
      "name": "Set swing mode",
      "description": "Set swing operation for climate device.",
      "fields": {
        "swing_mode": {
          "name": "Swing mode",
          "description": "New value of swing mode.",
          "required": true,
          "example": "horizontal",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    }
  },
  "group": {
    "reload": {
      "name": "Reload",
      "description": "Reload group configuration, entities, and notify services.",
      "fields": {}
    },
    "set": {
      "name": "Set",
      "description": "Create/Update a user group.",
      "fields": {
        "object_id": {
          "name": "Object ID",
          "description": "Group id and part of entity id.",
          "required": true,
          "example": "test_group",
          "selector": {
            "text": null
          }
        },
        "name": {
          "name": "Name",
          "description": "Name of group",
          "example": "My test group",
          "selector": {
            "text": null
          }
        },
        "icon": {
          "name": "Icon",
          "description": "Name of icon for the group.",
          "example": "mdi:camera",
          "selector": {
            "icon": null
          }
        },
        "entities": {
          "name": "Entities",
          "description": "List of all members in the group. Not compatible with \u0027delta\u0027.",
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "object": null
          }
        },
        "add_entities": {
          "name": "Add Entities",
          "description": "List of members that will change on group listening.",
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "object": null
          }
        },
        "remove_entities": {
          "name": "Remove Entities",
          "description": "List of members that will be removed from group listening.",
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "object": null
          }
        },
        "all": {
          "name": "All",
          "description": "Enable this option if the group should only turn on when all entities are on.",
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Remove a user group.",
      "fields": {
        "object_id": {
          "name": "Object ID",
          "description": "Group id and part of entity id.",
          "required": true,
          "example": "test_group",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "zone": {
    "reload": {
      "name": "Reload",
      "description": "Reload the YAML-based zone configuration.",
      "fields": {}
    }
  },
  "media_player": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn a media player power on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn a media player power off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a media player power state.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "volume_up": {
      "name": "Turn up volume",
      "description": "Turn a media player volume up.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "volume_down": {
      "name": "Turn down volume",
      "description": "Turn a media player volume down.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_play_pause": {
      "name": "Play/Pause",
      "description": "Toggle media player play/pause state.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_play": {
      "name": "Play",
      "description": "Send the media player the command for play.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_pause": {
      "name": "Pause",
      "description": "Send the media player the command for pause.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_stop": {
      "name": "Stop",
      "description": "Send the media player the stop command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_next_track": {
      "name": "Next",
      "description": "Send the media player the command for next track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_previous_track": {
      "name": "Previous",
      "description": "Send the media player the command for previous track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "clear_playlist": {
      "name": "Clear playlist",
      "description": "Send the media player the command to clear players playlist.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "volume_set": {
      "name": "Set volume",
      "description": "Set a media player\u0027s volume level.",
      "fields": {
        "volume_level": {
          "name": "Level",
          "description": "Volume level to set as float.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "volume_mute": {
      "name": "Mute volume",
      "description": "Mute a media player\u0027s volume.",
      "fields": {
        "is_volume_muted": {
          "name": "Muted",
          "description": "True/false for mute/unmute.",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_seek": {
      "name": "Seek",
      "description": "Send the media player the command to seek in current playing media.",
      "fields": {
        "seek_position": {
          "name": "Position",
          "description": "Position to seek to. The format is platform dependent.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.01,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "join": {
      "name": "Join",
      "description": "Group players together. Only works on platforms with support for player groups.",
      "fields": {
        "group_members": {
          "name": "Group members",
          "description": "The players which will be synced with the target player.",
          "required": true,
          "example": "- media_player.multiroom_player2\n- media_player.multiroom_player3\n",
          "selector": {
            "entity": {
              "multiple": true,
              "domain": "media_player"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "select_source": {
      "name": "Select source",
      "description": "Send the media player the command to change input source.",
      "fields": {
        "source": {
          "name": "Source",
          "description": "Name of the source to switch to. Platform dependent.",
          "required": true,
          "example": "video1",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "select_sound_mode": {
      "name": "Select sound mode",
      "description": "Send the media player the command to change sound mode.",
      "fields": {
        "sound_mode": {
          "name": "Sound mode",
          "description": "Name of the sound mode to switch to.",
          "example": "Music",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Send the media player the command for playing media.",
      "fields": {
        "media_content_id": {
          "name": "Content ID",
          "description": "The ID of the content to play. Platform dependent.",
          "required": true,
          "example": "https://home-assistant.io/images/cast/splash.png",
          "selector": {
            "text": null
          }
        },
        "media_content_type": {
          "name": "Content type",
          "description": "The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist.",
          "required": true,
          "example": "music",
          "selector": {
            "text": null
          }
        },
        "enqueue": {
          "name": "Enqueue",
          "description": "If the content should be played now or be added to the queue.",
          "required": false,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Play now",
                  "value": "play"
                },
                {
                  "label": "Play next",
                  "value": "next"
                },
                {
                  "label": "Add to queue",
                  "value": "add"
                },
                {
                  "label": "Play now and clear queue",
                  "value": "replace"
                }
              ]
            }
          }
        },
        "announce": {
          "name": "Announce",
          "description": "If the media should be played as an announcement.",
          "required": false,
          "example": "true",
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "shuffle_set": {
      "name": "Shuffle",
      "description": "Set shuffling state.",
      "fields": {
        "shuffle": {
          "name": "Shuffle",
          "description": "True/false for enabling/disabling shuffle.",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "unjoin": {
      "name": "Unjoin",
      "description": "Unjoin the player from a group. Only works on platforms with support for player groups.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "repeat_set": {
      "name": "Repeat",
      "description": "Set repeat mode",
      "fields": {
        "repeat": {
          "name": "Repeat mode",
          "description": "Repeat mode to set.",
          "required": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "off"
                },
                {
                  "label": "Repeat all",
                  "value": "all"
                },
                {
                  "label": "Repeat one",
                  "value": "one"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    }
  },
  "scheduler": {
    "add": {
      "name": "Add",
      "description": "Create a new schedule entity",
      "fields": {
        "weekdays": {
          "name": "Weekdays",
          "description": "Days of the week for which the schedule should be repeated",
          "example": "[\u0022daily\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "start_date": {
          "name": "Start date",
          "description": "Date from which schedule should be executed",
          "example": "[\u00222021-01-01\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "end_date": {
          "name": "End date",
          "description": "Date until which schedule should be executed",
          "example": "[\u00222021-12-31\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "timeslots": {
          "name": "Timeslots",
          "description": "list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots)",
          "example": "[{start: \u002212:00\u0022, stop: \u002213:00\u0022, actions: [{service: \u0022light.turn_on\u0022, entity_id: \u0022light.my_lamp\u0022, service_data: {brightness: 200}}]}]",
          "required": true,
          "selector": {
            "object": null
          }
        },
        "repeat_type": {
          "name": "Repeat Type",
          "description": "Control what happens after the schedule is triggered",
          "example": "\u0022repeat\u0022",
          "required": true,
          "selector": {
            "select": {
              "options": [
                "repeat",
                "single",
                "pause"
              ]
            }
          }
        },
        "name": {
          "name": "Name",
          "description": "Friendly name for the schedule",
          "required": false,
          "example": "My schedule",
          "selector": {
            "text": null
          }
        }
      }
    },
    "edit": {
      "name": "Edit",
      "description": "Edit a schedule entity",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Identifier of the scheduler entity.",
          "example": "switch.schedule_abcdef",
          "required": true,
          "selector": {
            "entity": {
              "integration": "scheduler",
              "domain": "switch"
            }
          }
        },
        "weekdays": {
          "name": "Weekdays",
          "description": "Days of the week for which the schedule should be repeated",
          "example": "[\u0022daily\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "start_date": {
          "name": "Start date",
          "description": "Date from which schedule should be executed",
          "example": "[\u00222021-01-01\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "end_date": {
          "name": "End date",
          "description": "Date until which schedule should be executed",
          "example": "[\u00222021-12-31\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "timeslots": {
          "name": "Timeslots",
          "description": "list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots)",
          "example": "[{start: \u002212:00\u0022, stop: \u002213:00\u0022, actions: [{service: \u0022light.turn_on\u0022, entity_id: \u0022light.my_lamp\u0022, service_data: {brightness: 200}}]}]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "repeat_type": {
          "name": "Repeat Type",
          "description": "Control what happens after the schedule is triggered",
          "example": "\u0022repeat\u0022",
          "required": false,
          "selector": {
            "select": {
              "options": [
                "repeat",
                "single",
                "pause"
              ]
            }
          }
        },
        "name": {
          "name": "Name",
          "description": "Friendly name for the schedule",
          "required": false,
          "example": "My schedule",
          "selector": {
            "text": null
          }
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Remove a schedule entity",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Identifier of the scheduler entity.",
          "example": "switch.schedule_abcdef",
          "required": true,
          "selector": {
            "entity": {
              "integration": "scheduler",
              "domain": "switch"
            }
          }
        }
      }
    },
    "copy": {
      "name": "Copy",
      "description": "Duplicate a schedule entity",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Identifier of the scheduler entity.",
          "example": "switch.schedule_abcdef",
          "required": true,
          "selector": {
            "entity": {
              "integration": "scheduler",
              "domain": "switch"
            }
          }
        },
        "name": {
          "name": "Name",
          "description": "Friendly name for the copied schedule",
          "required": false,
          "example": "My schedule",
          "selector": {
            "text": null
          }
        }
      }
    },
    "run_action": {
      "name": "Run Action",
      "description": "Execute the action of a schedule, optionally at a given time.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Identifier of the scheduler entity.",
          "example": "switch.schedule_abcdef",
          "required": true,
          "selector": {
            "entity": {
              "integration": "scheduler",
              "domain": "switch"
            }
          }
        },
        "time": {
          "name": "Time",
          "description": "Time for which to evaluate the action (only useful for schedules with multiple timeslot)",
          "example": "\u002212:00\u0022",
          "required": false,
          "selector": {
            "time": null
          }
        }
      }
    }
  },
  "input_datetime": {
    "reload": {
      "name": "Reload",
      "description": "Reload the input_datetime configuration.",
      "fields": {}
    },
    "set_datetime": {
      "name": "Set",
      "description": "This can be used to dynamically set the date and/or time.",
      "fields": {
        "date": {
          "name": "Date",
          "description": "The target date the entity should be set to.",
          "example": "\u00222019-04-20\u0022",
          "selector": {
            "text": null
          }
        },
        "time": {
          "name": "Time",
          "description": "The target time the entity should be set to.",
          "example": "\u002205:04:20\u0022",
          "selector": {
            "time": null
          }
        },
        "datetime": {
          "name": "Date \u0026 Time",
          "description": "The target date \u0026 time the entity should be set to.",
          "example": "\u00222019-04-20 05:04:20\u0022",
          "selector": {
            "text": null
          }
        },
        "timestamp": {
          "name": "Timestamp",
          "description": "The target date \u0026 time the entity should be set to as expressed by a UNIX timestamp.",
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_datetime"
            ]
          }
        ]
      }
    }
  },
  "input_button": {
    "reload": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "press": {
      "name": "Press",
      "description": "Press the input button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_button"
            ]
          }
        ]
      }
    }
  },
  "input_number": {
    "reload": {
      "name": "Reload",
      "description": "Reload the input_number configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Set the value of an input number entity.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "The target value the entity should be set to.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.001,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "increment": {
      "name": "Increment",
      "description": "Increment the value of an input number entity by its stepping.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrement the value of an input number entity by its stepping.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    }
  },
  "input_text": {
    "reload": {
      "name": "Reload",
      "description": "Reload the input_text configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Set the value of an input text entity.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "The target value the entity should be set to.",
          "required": true,
          "example": "This is an example text",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_text"
            ]
          }
        ]
      }
    }
  },
  "input_select": {
    "reload": {
      "name": "Reload",
      "description": "Reload the input_select configuration.",
      "fields": {}
    },
    "select_first": {
      "name": "First",
      "description": "Select the first option of an input select entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Select the last option of an input select entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Select the next options of an input select entity.",
      "fields": {
        "cycle": {
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Select an option of an input select entity.",
      "fields": {
        "option": {
          "name": "Option",
          "description": "Option to be selected.",
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Select the previous options of an input select entity.",
      "fields": {
        "cycle": {
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "set_options": {
      "name": "Set options",
      "description": "Set the options of an input select entity.",
      "fields": {
        "options": {
          "name": "Options",
          "description": "Options for the input select entity.",
          "required": true,
          "example": "[\u0022Item A\u0022, \u0022Item B\u0022, \u0022Item C\u0022]",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    }
  },
  "input_boolean": {
    "reload": {
      "name": "Reload",
      "description": "Reload the input_boolean configuration",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on an input boolean",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn off an input boolean",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle an input boolean",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    }
  },
  "telegram_bot": {
    "send_message": {
      "name": "Send message",
      "description": "Send a notification.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Optional title for your notification. Will be composed as \u0027%title\\n%message\u0027",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the notification to. If not present, first allowed chat_id is the default.",
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          }
        },
        "parse_mode": {
          "name": "Parse mode",
          "description": "Parser for the message text.",
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          }
        },
        "disable_notification": {
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
          "selector": {
            "boolean": null
          }
        },
        "disable_web_page_preview": {
          "name": "Disable web page preview",
          "description": "Disables link previews for links in the message.",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for send message. Will help with timeout errors (poor internet connection, etc)s",
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "keyboard": {
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard. Empty list clears a previously set keyboard.",
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [\u0022Text button1:/button1, Text button2:/button2\u0022, \u0022Text button3:/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        },
        "message_tag": {
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}",
          "example": "msg_to_edit",
          "selector": {
            "text": null
          }
        }
      }
    },
    "send_photo": {
      "name": "Send photo",
      "description": "Send a photo.",
      "fields": {
        "url": {
          "name": "URL",
          "description": "Remote path to an image.",
          "example": "http://example.org/path/to/the/image.png",
          "selector": {
            "text": null
          }
        },
        "file": {
          "name": "File",
          "description": "Local path to an image.",
          "example": "/path/to/the/image.png",
          "selector": {
            "text": null
          }
        },
        "caption": {
          "name": "Caption",
          "description": "The title of the image.",
          "example": "My image",
          "selector": {
            "text": null
          }
        },
        "username": {
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication.",
          "example": "myuser",
          "selector": {
            "text": null
          }
        },
        "password": {
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication.",
          "example": "myuser_pwd",
          "selector": {
            "text": null
          }
        },
        "authentication": {
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060.",
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          }
        },
        "parse_mode": {
          "name": "Parse mode",
          "description": "Parser for the message text.",
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          }
        },
        "disable_notification": {
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
          "selector": {
            "boolean": null
          }
        },
        "verify_ssl": {
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server.",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for send photo. Will help with timeout errors (poor internet connection, etc)",
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "keyboard": {
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        },
        "message_tag": {
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}",
          "example": "msg_to_edit",
          "selector": {
            "text": null
          }
        }
      }
    },
    "send_sticker": {
      "name": "Send sticker",
      "description": "Send a sticker.",
      "fields": {
        "url": {
          "name": "URL",
          "description": "Remote path to a static .webp or animated .tgs sticker.",
          "example": "http://example.org/path/to/the/sticker.webp",
          "selector": {
            "text": null
          }
        },
        "file": {
          "name": "File",
          "description": "Local path to a static .webp or animated .tgs sticker.",
          "example": "/path/to/the/sticker.webp",
          "selector": {
            "text": null
          }
        },
        "sticker_id": {
          "name": "Sticker ID",
          "description": "ID of a sticker that exists on telegram servers",
          "example": "CAACAgIAAxkBAAEDDldhZD-hqWclr6krLq-FWSfCrGNmOQAC9gAD9HsZAAFeYY-ltPYnrCEE",
          "selector": {
            "text": null
          }
        },
        "username": {
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication.",
          "example": "myuser",
          "selector": {
            "text": null
          }
        },
        "password": {
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication.",
          "example": "myuser_pwd",
          "selector": {
            "text": null
          }
        },
        "authentication": {
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060.",
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          }
        },
        "disable_notification": {
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
          "selector": {
            "boolean": null
          }
        },
        "verify_ssl": {
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server.",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for send sticker. Will help with timeout errors (poor internet connection, etc)",
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "keyboard": {
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        },
        "message_tag": {
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}",
          "example": "msg_to_edit",
          "selector": {
            "text": null
          }
        }
      }
    },
    "send_animation": {
      "name": "Send animation",
      "description": "Send an anmiation.",
      "fields": {
        "url": {
          "name": "URL",
          "description": "Remote path to a GIF or H.264/MPEG-4 AVC video without sound.",
          "example": "http://example.org/path/to/the/animation.gif",
          "selector": {
            "text": null
          }
        },
        "file": {
          "name": "File",
          "description": "Local path to a GIF or H.264/MPEG-4 AVC video without sound.",
          "example": "/path/to/the/animation.gif",
          "selector": {
            "text": null
          }
        },
        "caption": {
          "name": "Caption",
          "description": "The title of the animation.",
          "example": "My animation",
          "selector": {
            "text": null
          }
        },
        "username": {
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication.",
          "example": "myuser",
          "selector": {
            "text": null
          }
        },
        "password": {
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication.",
          "example": "myuser_pwd",
          "selector": {
            "text": null
          }
        },
        "authentication": {
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060.",
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          }
        },
        "parse_mode": {
          "name": "Parse Mode",
          "description": "Parser for the message text.",
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          }
        },
        "disable_notification": {
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
          "selector": {
            "boolean": null
          }
        },
        "verify_ssl": {
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server.",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for send sticker. Will help with timeout errors (poor internet connection, etc)",
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "keyboard": {
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        }
      }
    },
    "send_video": {
      "name": "Send video",
      "description": "Send a video.",
      "fields": {
        "url": {
          "name": "URL",
          "description": "Remote path to a video.",
          "example": "http://example.org/path/to/the/video.mp4",
          "selector": {
            "text": null
          }
        },
        "file": {
          "name": "File",
          "description": "Local path to a video.",
          "example": "/path/to/the/video.mp4",
          "selector": {
            "text": null
          }
        },
        "caption": {
          "name": "Caption",
          "description": "The title of the video.",
          "example": "My video",
          "selector": {
            "text": null
          }
        },
        "username": {
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication.",
          "example": "myuser",
          "selector": {
            "text": null
          }
        },
        "password": {
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication.",
          "example": "myuser_pwd",
          "selector": {
            "text": null
          }
        },
        "authentication": {
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060.",
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          }
        },
        "parse_mode": {
          "name": "Parse mode",
          "description": "Parser for the message text.",
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          }
        },
        "disable_notification": {
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
          "selector": {
            "boolean": null
          }
        },
        "verify_ssl": {
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server.",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for send video. Will help with timeout errors (poor internet connection, etc)",
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "keyboard": {
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        },
        "message_tag": {
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}",
          "example": "msg_to_edit",
          "selector": {
            "text": null
          }
        }
      }
    },
    "send_voice": {
      "name": "Send voice",
      "description": "Send a voice message.",
      "fields": {
        "url": {
          "name": "URL",
          "description": "Remote path to a voice message.",
          "example": "http://example.org/path/to/the/voice.opus",
          "selector": {
            "text": null
          }
        },
        "file": {
          "name": "File",
          "description": "Local path to a voice message.",
          "example": "/path/to/the/voice.opus",
          "selector": {
            "text": null
          }
        },
        "caption": {
          "name": "Caption",
          "description": "The title of the voice message.",
          "example": "My microphone recording",
          "selector": {
            "text": null
          }
        },
        "username": {
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication.",
          "example": "myuser",
          "selector": {
            "text": null
          }
        },
        "password": {
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication.",
          "example": "myuser_pwd",
          "selector": {
            "text": null
          }
        },
        "authentication": {
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060.",
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          }
        },
        "disable_notification": {
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
          "selector": {
            "boolean": null
          }
        },
        "verify_ssl": {
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server.",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for send voice. Will help with timeout errors (poor internet connection, etc)",
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "keyboard": {
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        },
        "message_tag": {
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}",
          "example": "msg_to_edit",
          "selector": {
            "text": null
          }
        }
      }
    },
    "send_document": {
      "name": "Send document",
      "description": "Send a document.",
      "fields": {
        "url": {
          "name": "URL",
          "description": "Remote path to a document.",
          "example": "http://example.org/path/to/the/document.odf",
          "selector": {
            "text": null
          }
        },
        "file": {
          "name": "File",
          "description": "Local path to a document.",
          "example": "/tmp/whatever.odf",
          "selector": {
            "text": null
          }
        },
        "caption": {
          "name": "Caption",
          "description": "The title of the document.",
          "example": "Document Title xy",
          "selector": {
            "text": null
          }
        },
        "username": {
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication.",
          "example": "myuser",
          "selector": {
            "text": null
          }
        },
        "password": {
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication.",
          "example": "myuser_pwd",
          "selector": {
            "text": null
          }
        },
        "authentication": {
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060.",
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default.",
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          }
        },
        "parse_mode": {
          "name": "Parse mode",
          "description": "Parser for the message text.",
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          }
        },
        "disable_notification": {
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
          "selector": {
            "boolean": null
          }
        },
        "verify_ssl": {
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server.",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for send document. Will help with timeout errors (poor internet connection, etc)",
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "keyboard": {
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        },
        "message_tag": {
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}",
          "example": "msg_to_edit",
          "selector": {
            "text": null
          }
        }
      }
    },
    "send_location": {
      "name": "Send location",
      "description": "Send a location.",
      "fields": {
        "latitude": {
          "name": "Latitude",
          "description": "The latitude to send.",
          "required": true,
          "selector": {
            "number": {
              "min": -90,
              "max": 90,
              "step": 0.001,
              "unit_of_measurement": "\u00B0"
            }
          }
        },
        "longitude": {
          "name": "Longitude",
          "description": "The longitude to send.",
          "required": true,
          "selector": {
            "number": {
              "min": -180,
              "max": 180,
              "step": 0.001,
              "unit_of_measurement": "\u00B0"
            }
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default.",
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          }
        },
        "disable_notification": {
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for send photo. Will help with timeout errors (poor internet connection, etc)",
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "keyboard": {
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard.",
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        },
        "message_tag": {
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}",
          "example": "msg_to_edit",
          "selector": {
            "text": null
          }
        }
      }
    },
    "send_poll": {
      "name": "Send poll",
      "description": "Send a poll.",
      "fields": {
        "target": {
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default.",
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          }
        },
        "question": {
          "name": "Question",
          "description": "Poll question, 1-300 characters",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "options": {
          "name": "Options",
          "description": "List of answer options, 2-10 strings 1-100 characters each",
          "required": true,
          "selector": {
            "object": null
          }
        },
        "is_anonymous": {
          "name": "Is Anonymous",
          "description": "If the poll needs to be anonymous, defaults to True",
          "selector": {
            "boolean": null
          }
        },
        "allows_multiple_answers": {
          "name": "Allow Multiple Answers",
          "description": "If the poll allows multiple answers, defaults to False",
          "selector": {
            "boolean": null
          }
        },
        "open_period": {
          "name": "Open Period",
          "description": "Amount of time in seconds the poll will be active after creation, 5-600.",
          "selector": {
            "number": {
              "min": 5,
              "max": 600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "disable_notification": {
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for send poll. Will help with timeout errors (poor internet connection, etc)",
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        }
      }
    },
    "edit_message": {
      "name": "Edit message",
      "description": "Edit a previously sent message.",
      "fields": {
        "message_id": {
          "name": "Message ID",
          "description": "id of the message to edit.",
          "required": true,
          "example": "{{ trigger.event.data.message.message_id }}",
          "selector": {
            "text": null
          }
        },
        "chat_id": {
          "name": "Chat ID",
          "description": "The chat_id where to edit the message.",
          "required": true,
          "example": 12345,
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Optional title for your notification. Will be composed as \u0027%title\\n%message\u0027",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "parse_mode": {
          "name": "Parse mode",
          "description": "Parser for the message text.",
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          }
        },
        "disable_web_page_preview": {
          "name": "Disable web page preview",
          "description": "Disables link previews for links in the message.",
          "selector": {
            "boolean": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        }
      }
    },
    "edit_caption": {
      "name": "Edit caption",
      "description": "Edit the caption of a previously sent message.",
      "fields": {
        "message_id": {
          "name": "Message ID",
          "description": "id of the message to edit.",
          "required": true,
          "example": "{{ trigger.event.data.message.message_id }}",
          "selector": {
            "text": null
          }
        },
        "chat_id": {
          "name": "Chat ID",
          "description": "The chat_id where to edit the caption.",
          "required": true,
          "example": 12345,
          "selector": {
            "text": null
          }
        },
        "caption": {
          "name": "Caption",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        }
      }
    },
    "edit_replymarkup": {
      "name": "Edit reply markup",
      "description": "Edit the inline keyboard of a previously sent message.",
      "fields": {
        "message_id": {
          "name": "Message ID",
          "description": "id of the message to edit.",
          "required": true,
          "example": "{{ trigger.event.data.message.message_id }}",
          "selector": {
            "text": null
          }
        },
        "chat_id": {
          "name": "Chat ID",
          "description": "The chat_id where to edit the reply_markup.",
          "required": true,
          "example": 12345,
          "selector": {
            "text": null
          }
        },
        "inline_keyboard": {
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data.",
          "required": true,
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          }
        }
      }
    },
    "answer_callback_query": {
      "name": "Answer callback query",
      "description": "Respond to a callback query originated by clicking on an online keyboard button. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Unformatted text message body of the notification.",
          "required": true,
          "example": "OK, I\u0027m listening",
          "selector": {
            "text": null
          }
        },
        "callback_query_id": {
          "name": "Callback query ID",
          "description": "Unique id of the callback response.",
          "required": true,
          "example": "{{ trigger.event.data.id }}",
          "selector": {
            "text": null
          }
        },
        "show_alert": {
          "name": "Show alert",
          "description": "Show a permanent notification.",
          "required": true,
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for sending the answer. Will help with timeout errors (poor internet connection, etc)",
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        }
      }
    },
    "delete_message": {
      "name": "Delete message",
      "description": "Delete a previously sent message.",
      "fields": {
        "message_id": {
          "name": "Message ID",
          "description": "id of the message to delete.",
          "required": true,
          "example": "{{ trigger.event.data.message.message_id }}",
          "selector": {
            "text": null
          }
        },
        "chat_id": {
          "name": "Chat ID",
          "description": "The chat_id where to delete the message.",
          "required": true,
          "example": 12345,
          "selector": {
            "text": null
          }
        }
      }
    },
    "leave_chat": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "update": {
    "install": {
      "name": "Install update",
      "description": "Install an update for this device or service",
      "fields": {
        "version": {
          "name": "Version",
          "description": "Version to install, if omitted, the latest version will be installed.",
          "required": false,
          "example": "1.0.0",
          "selector": {
            "text": null
          }
        },
        "backup": {
          "name": "Backup",
          "description": "Backup before installing the update, if supported by the integration.",
          "required": false,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "skip": {
      "name": "Skip update",
      "description": "Mark currently available update as skipped.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "clear_skipped": {
      "name": "Clear skipped update",
      "description": "Removes the skipped version marker from an update.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    }
  },
  "device_tracker": {
    "see": {
      "name": "See",
      "description": "Control tracked device.",
      "fields": {
        "mac": {
          "name": "MAC address",
          "description": "MAC address of device",
          "example": "FF:FF:FF:FF:FF:FF",
          "selector": {
            "text": null
          }
        },
        "dev_id": {
          "name": "Device ID",
          "description": "Id of device (find id in known_devices.yaml).",
          "example": "phonedave",
          "selector": {
            "text": null
          }
        },
        "host_name": {
          "name": "Host name",
          "description": "Hostname of device",
          "example": "Dave",
          "selector": {
            "text": null
          }
        },
        "location_name": {
          "name": "Location name",
          "description": "Name of location where device is located (not_home is away).",
          "example": "home",
          "selector": {
            "text": null
          }
        },
        "gps": {
          "name": "GPS coordinates",
          "description": "GPS coordinates where device is located (latitude, longitude).",
          "example": "[51.509802, -0.086692]",
          "selector": {
            "object": null
          }
        },
        "gps_accuracy": {
          "name": "GPS accuracy",
          "description": "Accuracy of GPS coordinates.",
          "selector": {
            "number": {
              "min": 1,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        },
        "battery": {
          "name": "Battery level",
          "description": "Battery level of device.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      }
    }
  },
  "netdaemon": {
    "register_service": {
      "name": "",
      "description": "Register a new service for netdaemon, used by the daemon and not to be used by users",
      "fields": {
        "service": {
          "description": "The name of the service to register"
        },
        "class": {
          "description": "The class that implements the service call"
        },
        "method": {
          "description": "The method to call"
        }
      }
    },
    "reload_apps": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "entity_create": {
      "name": "",
      "description": "Create an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_update": {
      "name": "",
      "description": "Update an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_remove": {
      "name": "",
      "description": "Remove an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        }
      }
    }
  },
  "telegram": {
    "reload": {
      "name": "Reload",
      "description": "Reload telegram notify services.",
      "fields": {}
    }
  },
  "scene": {
    "reload": {
      "name": "Reload",
      "description": "Reload the scene configuration.",
      "fields": {}
    },
    "apply": {
      "name": "Apply",
      "description": "Activate a scene with configuration.",
      "fields": {
        "entities": {
          "name": "Entities state",
          "description": "The entities and the state that they need to be.",
          "required": true,
          "example": "light.kitchen: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 80\n",
          "selector": {
            "object": null
          }
        },
        "transition": {
          "name": "Transition",
          "description": "Transition duration it takes to bring devices to the state defined in the scene.",
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        }
      }
    },
    "create": {
      "name": "Create",
      "description": "Creates a new scene.",
      "fields": {
        "scene_id": {
          "name": "Scene entity ID",
          "description": "The entity_id of the new scene.",
          "required": true,
          "example": "all_lights",
          "selector": {
            "text": null
          }
        },
        "entities": {
          "name": "Entities state",
          "description": "The entities to control with the scene.",
          "example": "light.tv_back_light: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 200\n",
          "selector": {
            "object": null
          }
        },
        "snapshot_entities": {
          "name": "Snapshot entities",
          "description": "The entities of which a snapshot is to be taken",
          "example": "- light.ceiling\n- light.kitchen\n",
          "selector": {
            "object": null
          }
        }
      }
    },
    "turn_on": {
      "name": "Activate",
      "description": "Activate a scene.",
      "fields": {
        "transition": {
          "name": "Transition",
          "description": "Transition duration it takes to bring devices to the state defined in the scene.",
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "scene"
            ]
          }
        ]
      }
    }
  },
  "notify": {
    "persistent_notification": {
      "name": "Send a persistent notification",
      "description": "Sends a notification that is visible in the front-end.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        }
      }
    },
    "alexa_media_bose_qc35_ii": {
      "name": "Send a notification via alexa_media_bose_qc35_ii",
      "description": "Sends a notification message using the alexa_media_bose_qc35_ii integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_downstairs": {
      "name": "Send a notification via alexa_media_downstairs",
      "description": "Sends a notification message using the alexa_media_downstairs integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_upstairs": {
      "name": "Send a notification via alexa_media_upstairs",
      "description": "Sends a notification message using the alexa_media_upstairs integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_master_tv_alexa": {
      "name": "Send a notification via alexa_media_master_tv_alexa",
      "description": "Sends a notification message using the alexa_media_master_tv_alexa integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_s_fire": {
      "name": "Send a notification via alexa_media_eugene_s_fire",
      "description": "Sends a notification message using the alexa_media_eugene_s_fire integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_office": {
      "name": "Send a notification via alexa_media_office",
      "description": "Sends a notification message using the alexa_media_office integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_aaron": {
      "name": "Send a notification via alexa_media_aaron",
      "description": "Sends a notification message using the alexa_media_aaron integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_s_2nd_echo_dot": {
      "name": "Send a notification via alexa_media_eugene_s_2nd_echo_dot",
      "description": "Sends a notification message using the alexa_media_eugene_s_2nd_echo_dot integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_dining": {
      "name": "Send a notification via alexa_media_dining",
      "description": "Sends a notification message using the alexa_media_dining integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_everywhere_2": {
      "name": "Send a notification via alexa_media_everywhere_2",
      "description": "Sends a notification message using the alexa_media_everywhere_2 integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_playroom": {
      "name": "Send a notification via alexa_media_playroom",
      "description": "Sends a notification message using the alexa_media_playroom integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_master": {
      "name": "Send a notification via alexa_media_master",
      "description": "Sends a notification message using the alexa_media_master integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_jayden": {
      "name": "Send a notification via alexa_media_jayden",
      "description": "Sends a notification message using the alexa_media_jayden integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_s_sonos_arc": {
      "name": "Send a notification via alexa_media_eugene_s_sonos_arc",
      "description": "Sends a notification message using the alexa_media_eugene_s_sonos_arc integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_lounge_sonos": {
      "name": "Send a notification via alexa_media_lounge_sonos",
      "description": "Sends a notification message using the alexa_media_lounge_sonos integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_s_lg_oled_webos_2021_tv": {
      "name": "Send a notification via alexa_media_eugene_s_lg_oled_webos_2021_tv",
      "description": "Sends a notification message using the alexa_media_eugene_s_lg_oled_webos_2021_tv integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_s_5th_echo_dot": {
      "name": "Send a notification via alexa_media_eugene_s_5th_echo_dot",
      "description": "Sends a notification message using the alexa_media_eugene_s_5th_echo_dot integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_kitchen": {
      "name": "Send a notification via alexa_media_kitchen",
      "description": "Sends a notification message using the alexa_media_kitchen integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_this_device_3": {
      "name": "Send a notification via alexa_media_this_device_3",
      "description": "Sends a notification message using the alexa_media_this_device_3 integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_this_device": {
      "name": "Send a notification via alexa_media_this_device",
      "description": "Sends a notification message using the alexa_media_this_device integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media": {
      "name": "Send a notification with alexa_media",
      "description": "Sends a notification message using the alexa_media service.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_haileys_macbook_air": {
      "name": "Send a notification via mobile_app_haileys_macbook_air",
      "description": "Sends a notification message using the mobile_app_haileys_macbook_air integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_iphone": {
      "name": "Send a notification via mobile_app_iphone",
      "description": "Sends a notification message using the mobile_app_iphone integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_jayden_s_iphone": {
      "name": "Send a notification via mobile_app_jayden_s_iphone",
      "description": "Sends a notification message using the mobile_app_jayden_s_iphone integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_eugene_s_iphone": {
      "name": "Send a notification via mobile_app_eugene_s_iphone",
      "description": "Sends a notification message using the mobile_app_eugene_s_iphone integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_hailey_s_iphone": {
      "name": "Send a notification via mobile_app_hailey_s_iphone",
      "description": "Sends a notification message using the mobile_app_hailey_s_iphone integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_jayden_s_ipad": {
      "name": "Send a notification via mobile_app_jayden_s_ipad",
      "description": "Sends a notification message using the mobile_app_jayden_s_ipad integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_ml_nx07kg671n": {
      "name": "Send a notification via mobile_app_ml_nx07kg671n",
      "description": "Sends a notification message using the mobile_app_ml_nx07kg671n integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "notify": {
      "name": "Send a notification with notify",
      "description": "Sends a notification message using the notify service.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "lounge_tv": {
      "name": "Send a notification with lounge_tv",
      "description": "Sends a notification message using the lounge_tv service.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "master_tv": {
      "name": "Send a notification with master_tv",
      "description": "Sends a notification message using the master_tv service.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "eugene": {
      "name": "Send a notification with eugene",
      "description": "Sends a notification message using the eugene service.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "twinstead": {
      "name": "Send a notification with twinstead",
      "description": "Sends a notification message using the twinstead service.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "hailey": {
      "name": "Send a notification with hailey",
      "description": "Sends a notification message using the hailey service.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_iphone8p": {
      "name": "Send a notification via mobile_app_iphone8p",
      "description": "Sends a notification message using the mobile_app_iphone8p integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_last_called": {
      "name": "Send a notification via alexa_media_last_called",
      "description": "Sends a notification message using the alexa_media_last_called integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "script": {
    "activate_alexa_actionable_notification": {
      "name": "activate_alexa_actionable_notification",
      "description": "Activates an actionable notification on a specific echo device",
      "fields": {
        "text": {
          "description": "The text you would like alexa to speak.",
          "example": "What would you like the thermostat set to?",
          "advanced": false,
          "required": false
        },
        "event_id": {
          "description": "Correlation ID for event responses",
          "example": "ask_for_temperature",
          "advanced": false,
          "required": false
        },
        "alexa_device": {
          "description": "Alexa device you want to trigger",
          "example": "media_player.bedroom_echo",
          "advanced": false,
          "required": false
        }
      }
    },
    "arrive_home": {
      "name": "arrive_home",
      "description": "",
      "fields": {}
    },
    "im_text": {
      "name": "im_text",
      "description": "",
      "fields": {}
    },
    "play_youtube_on_lg": {
      "name": "Play YouTube on LG",
      "description": "",
      "fields": {}
    },
    "ring_mqtt_interval": {
      "name": "Set Ring Mqtt Snapshot Interval",
      "description": "",
      "fields": {}
    },
    "tts": {
      "name": "tts",
      "description": "",
      "fields": {}
    },
    "tts_text": {
      "name": "tts_text",
      "description": "",
      "fields": {}
    },
    "turn_on_lg_tele_lounge": {
      "name": "turn_on_lg_tele_lounge",
      "description": "",
      "fields": {}
    },
    "turn_on_lg_tele_master": {
      "name": "turn_on_lg_tele_master",
      "description": "",
      "fields": {}
    },
    "weather": {
      "name": "weather",
      "description": "",
      "fields": {}
    },
    "reload": {
      "name": "Reload",
      "description": "Reload all the available scripts",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on script",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn off script",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle script",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    }
  },
  "automation": {
    "trigger": {
      "name": "Trigger",
      "description": "Trigger the actions of an automation.",
      "fields": {
        "skip_condition": {
          "name": "Skip conditions",
          "description": "Whether or not the conditions will be skipped.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle (enable / disable) an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Enable an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Disable an automation.",
      "fields": {
        "stop_actions": {
          "name": "Stop actions",
          "description": "Stop currently running actions.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reload the automation configuration.",
      "fields": {}
    }
  },
  "lock": {
    "unlock": {
      "name": "Unlock",
      "description": "Unlock all or specified locks.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to unlock the lock with.",
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Lock all or specified locks.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to lock the lock with.",
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "open": {
      "name": "Open",
      "description": "Open all or specified locks.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to open the lock with.",
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    }
  },
  "fan": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn fan on.",
      "fields": {
        "speed": {
          "name": "Speed",
          "description": "Speed setting.",
          "example": "high",
          "selector": {
            "text": null
          }
        },
        "percentage": {
          "name": "Percentage",
          "description": "Percentage speed setting.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        },
        "preset_mode": {
          "name": "Preset mode",
          "description": "Preset mode setting.",
          "example": "auto",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn fan off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle the fan on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "increase_speed": {
      "name": "Increase speed",
      "description": "Increase the speed of the fan by one speed or a percentage_step.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "description": "Increase speed by a percentage.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "decrease_speed": {
      "name": "Decrease speed",
      "description": "Decrease the speed of the fan by one speed or a percentage_step.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "description": "Decrease speed by a percentage.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "oscillate": {
      "name": "Oscillate",
      "description": "Oscillate the fan.",
      "fields": {
        "oscillating": {
          "name": "Oscillating",
          "description": "Flag to turn on/off oscillation.",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "set_direction": {
      "name": "Set direction",
      "description": "Set the fan rotation.",
      "fields": {
        "direction": {
          "name": "Direction",
          "description": "The direction to rotate.",
          "required": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Forward",
                  "value": "forward"
                },
                {
                  "label": "Reverse",
                  "value": "reverse"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "set_percentage": {
      "name": "Set speed percentage",
      "description": "Set fan speed percentage.",
      "fields": {
        "percentage": {
          "name": "Percentage",
          "description": "Percentage speed setting.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Set preset mode for a fan device.",
      "fields": {
        "preset_mode": {
          "name": "Preset mode",
          "description": "New value of preset mode.",
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    }
  },
  "cover": {
    "open_cover": {
      "name": "Open",
      "description": "Open all or specified cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "close_cover": {
      "name": "Close",
      "description": "Close all or specified cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "set_cover_position": {
      "name": "Set position",
      "description": "Move to specific position all or specified cover.",
      "fields": {
        "position": {
          "name": "Position",
          "description": "Position of the cover",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "stop_cover": {
      "name": "Stop",
      "description": "Stop all or specified cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle a cover open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "open_cover_tilt": {
      "name": "Open tilt",
      "description": "Open all or specified cover tilt.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "close_cover_tilt": {
      "name": "Close tilt",
      "description": "Close all or specified cover tilt.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "stop_cover_tilt": {
      "name": "Stop tilt",
      "description": "Stop all or specified cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "set_cover_tilt_position": {
      "name": "Set tilt position",
      "description": "Move to specific position all or specified cover tilt.",
      "fields": {
        "tilt_position": {
          "name": "Tilt position",
          "description": "Tilt position of the cover.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "toggle_cover_tilt": {
      "name": "Toggle tilt",
      "description": "Toggle a cover tilt open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    }
  },
  "text": {
    "set_value": {
      "name": "Set value",
      "description": "Set value of a text entity.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "Value to set.",
          "required": true,
          "example": "Hello world!",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "text"
            ]
          }
        ]
      }
    }
  },
  "octopus_energy": {
    "update_target_config": {
      "name": "Update target rate config",
      "description": "Updates a given target rate\u0027s config. Please note this is temporary and will not persist between restarts.",
      "fields": {
        "target_hours": {
          "name": "Hours",
          "description": "The optional number of hours the target rate sensor should come on during a 24 hour period.",
          "example": "1.5",
          "selector": {
            "text": null
          }
        },
        "target_start_time": {
          "name": "Start time",
          "description": "The optional time the evaluation period should start.",
          "example": "06:00",
          "selector": {
            "text": null
          }
        },
        "target_end_time": {
          "name": "End time",
          "description": "The optional time the evaluation period should end.",
          "example": "19:00",
          "selector": {
            "text": null
          }
        },
        "target_offset": {
          "name": "Offset",
          "description": "The optional offset to apply to the target rate when it starts",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "octopus_energy",
            "domain": [
              "binary_sensor"
            ]
          }
        ]
      }
    }
  },
  "zha": {
    "permit": {
      "name": "Permit",
      "description": "Allow nodes to join the Zigbee network.",
      "fields": {
        "duration": {
          "name": "Duration",
          "description": "Time to permit joins, in seconds",
          "default": 60,
          "selector": {
            "number": {
              "min": 0,
              "max": 254,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "ieee": {
          "name": "IEEE",
          "description": "IEEE address of the node permitting new joins",
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          }
        },
        "source_ieee": {
          "name": "Source IEEE",
          "description": "IEEE address of the joining device (must be used with install code)",
          "example": "00:0a:bf:00:01:10:23:35",
          "selector": {
            "text": null
          }
        },
        "install_code": {
          "name": "Install Code",
          "description": "Install code of the joining device (must be used with source_ieee)",
          "example": "1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF",
          "selector": {
            "text": null
          }
        },
        "qr_code": {
          "name": "QR Code",
          "description": "value of the QR install code (different between vendors)",
          "example": "Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051",
          "selector": {
            "text": null
          }
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Remove a node from the Zigbee network.",
      "fields": {
        "ieee": {
          "name": "IEEE",
          "description": "IEEE address of the node to remove",
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          }
        }
      }
    },
    "set_zigbee_cluster_attribute": {
      "name": "Set zigbee cluster attribute",
      "description": "Set attribute value for the specified cluster on the specified entity.",
      "fields": {
        "ieee": {
          "name": "IEEE",
          "description": "IEEE address for the device",
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          }
        },
        "endpoint_id": {
          "name": "Endpoint ID",
          "description": "Endpoint id for the cluster",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535,
              "mode": "box"
            }
          }
        },
        "cluster_id": {
          "name": "Cluster ID",
          "description": "ZCL cluster to retrieve attributes for",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          }
        },
        "cluster_type": {
          "name": "Cluster Type",
          "description": "type of the cluster",
          "default": "in",
          "selector": {
            "select": {
              "options": [
                "in",
                "out"
              ]
            }
          }
        },
        "attribute": {
          "name": "Attribute",
          "description": "id of the attribute to set",
          "required": true,
          "example": 0,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          }
        },
        "value": {
          "name": "Value",
          "description": "value to write to the attribute",
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          }
        },
        "manufacturer": {
          "name": "Manufacturer",
          "description": "manufacturer code",
          "example": 252,
          "selector": {
            "text": null
          }
        }
      }
    },
    "issue_zigbee_cluster_command": {
      "name": "Issue zigbee cluster command",
      "description": "Issue command on the specified cluster on the specified entity.",
      "fields": {
        "ieee": {
          "name": "IEEE",
          "description": "IEEE address for the device",
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          }
        },
        "endpoint_id": {
          "name": "Endpoint ID",
          "description": "Endpoint id for the cluster",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          }
        },
        "cluster_id": {
          "name": "Cluster ID",
          "description": "ZCL cluster to retrieve attributes for",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          }
        },
        "cluster_type": {
          "name": "Cluster Type",
          "description": "type of the cluster",
          "default": "in",
          "selector": {
            "select": {
              "options": [
                "in",
                "out"
              ]
            }
          }
        },
        "command": {
          "name": "Command",
          "description": "id of the command to execute",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          }
        },
        "command_type": {
          "name": "Command Type",
          "description": "type of the command to execute",
          "required": true,
          "selector": {
            "select": {
              "options": [
                "client",
                "server"
              ]
            }
          }
        },
        "args": {
          "name": "Args",
          "description": "args to pass to the command",
          "example": "[arg1, arg2, argN]",
          "selector": {
            "object": null
          }
        },
        "params": {
          "name": "Params",
          "description": "parameters to pass to the command",
          "selector": {
            "object": null
          }
        },
        "manufacturer": {
          "name": "Manufacturer",
          "description": "manufacturer code",
          "example": 252,
          "selector": {
            "text": null
          }
        }
      }
    },
    "issue_zigbee_group_command": {
      "name": "Issue zigbee group command",
      "description": "Issue command on the specified cluster on the specified group.",
      "fields": {
        "group": {
          "name": "Group",
          "description": "Hexadecimal address of the group",
          "required": true,
          "example": 546,
          "selector": {
            "text": null
          }
        },
        "cluster_id": {
          "name": "Cluster ID",
          "description": "ZCL cluster to send command to",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          }
        },
        "cluster_type": {
          "name": "Cluster Type",
          "description": "type of the cluster",
          "default": "in",
          "selector": {
            "select": {
              "options": [
                "in",
                "out"
              ]
            }
          }
        },
        "command": {
          "name": "Command",
          "description": "id of the command to execute",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          }
        },
        "args": {
          "name": "Args",
          "description": "args to pass to the command",
          "example": "[arg1, arg2, argN]",
          "selector": {
            "object": null
          }
        },
        "manufacturer": {
          "name": "Manufacturer",
          "description": "manufacturer code",
          "example": 252,
          "selector": {
            "text": null
          }
        }
      }
    },
    "warning_device_squawk": {
      "name": "Warning device squawk",
      "description": "This service uses the WD capabilities to emit a quick audible/visible pulse called a \u0022squawk\u0022. The squawk command has no effect if the WD is currently active (warning in progress).",
      "fields": {
        "ieee": {
          "name": "IEEE",
          "description": "IEEE address for the device",
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          }
        },
        "mode": {
          "name": "Mode",
          "description": "The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD \u201Csquawks\u201D) is implementation specific.",
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          }
        },
        "strobe": {
          "name": "Strobe",
          "description": "The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.",
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          }
        },
        "level": {
          "name": "Level",
          "description": "The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.",
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          }
        }
      }
    },
    "warning_device_warn": {
      "name": "Warning device warn",
      "description": "This service starts the WD operation. The WD alerts the surrounding area by audible (siren) and visual (strobe) signals.",
      "fields": {
        "ieee": {
          "name": "IEEE",
          "description": "IEEE address for the device",
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          }
        },
        "mode": {
          "name": "Mode",
          "description": "The Warning Mode field is used as an 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the WD device in each mode is according to the relevant security standards.",
          "default": 3,
          "selector": {
            "number": {
              "min": 0,
              "max": 6,
              "mode": "box"
            }
          }
        },
        "strobe": {
          "name": "Strobe",
          "description": "The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. \u00220\u0022 means no strobe, \u00221\u0022 means strobe. If the strobe field is \u201C1\u201D and the Warning Mode is \u201C0\u201D (\u201CStop\u201D) then only the strobe is activated.",
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          }
        },
        "level": {
          "name": "Level",
          "description": "The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.",
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          }
        },
        "duration": {
          "name": "Duration",
          "description": "Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are \u00220\u0022 this field SHALL be ignored.",
          "default": 5,
          "selector": {
            "number": {
              "min": 0,
              "max": 65535,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "duty_cycle": {
          "name": "Duty cycle",
          "description": "Indicates the length of the flash cycle. This provides a means of varying the flash duration for different alarm types (e.g., fire, police, burglar). Valid range is 0-100 in increments of 10. All other values SHALL be rounded to the nearest valid value. Strobe SHALL calculate duty cycle over a duration of one second. The ON state SHALL precede the OFF state. For example, if Strobe Duty Cycle Field specifies \u201C40,\u201D then the strobe SHALL flash ON for 4/10ths of a second and then turn OFF for 6/10ths of a second.",
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 10
            }
          }
        },
        "intensity": {
          "name": "Intensity",
          "description": "Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.",
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          }
        }
      }
    },
    "set_lock_user_code": {
      "name": "Set lock user code",
      "description": "Set a user code on a lock",
      "fields": {
        "code_slot": {
          "name": "Code slot",
          "description": "Code slot to set the code in",
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          }
        },
        "user_code": {
          "name": "Code",
          "description": "Code to set",
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    },
    "enable_lock_user_code": {
      "name": "Enable lock user",
      "description": "Enable a user code on a lock",
      "fields": {
        "code_slot": {
          "name": "Code slot",
          "description": "Code slot to enable",
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    },
    "disable_lock_user_code": {
      "name": "Disable lock user",
      "description": "Disable a user code on a lock",
      "fields": {
        "code_slot": {
          "name": "Code slot",
          "description": "Code slot to disable",
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    },
    "clear_lock_user_code": {
      "name": "Clear lock user",
      "description": "Clear a user code from a lock",
      "fields": {
        "code_slot": {
          "name": "Code slot",
          "description": "Code slot to clear code from",
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    }
  },
  "alarm_control_panel": {
    "alarm_disarm": {
      "name": "Disarm",
      "description": "Send the alarm the command for disarm.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to disarm the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_home": {
      "name": "Arm home",
      "description": "Send the alarm the command for arm home.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to arm home the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_away": {
      "name": "Arm away",
      "description": "Send the alarm the command for arm away.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to arm away the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_night": {
      "name": "Arm night",
      "description": "Send the alarm the command for arm night.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to arm night the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_vacation": {
      "name": "Arm vacation",
      "description": "Send the alarm the command for arm vacation.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to arm vacation the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_custom_bypass": {
      "name": "Arm with custom bypass",
      "description": "Send arm custom bypass command.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to arm custom bypass the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_trigger": {
      "name": "Trigger",
      "description": "Send the alarm the command for trigger.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to trigger the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    }
  },
  "number": {
    "set_value": {
      "name": "Set",
      "description": "Set the value of a Number entity.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "The target value the entity should be set to.",
          "example": 42,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    }
  },
  "button": {
    "press": {
      "name": "Press",
      "description": "Press the button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "button"
            ]
          }
        ]
      }
    }
  },
  "siren": {
    "turn_on": {
      "name": "",
      "description": "Turn siren on.",
      "fields": {
        "tone": {
          "description": "The tone to emit when turning the siren on. When \u0060available_tones\u0060 property is a map, either the key or the value can be used. Must be supported by the integration.",
          "example": "fire",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "volume_level": {
          "description": "The volume level of the noise to emit when turning the siren on. Must be supported by the integration.",
          "example": 0.5,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.05
            }
          }
        },
        "duration": {
          "description": "The duration in seconds of the noise to emit when turning the siren on. Must be supported by the integration.",
          "example": 15,
          "required": false,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "",
      "description": "Turn siren off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "",
      "description": "Toggles a siren.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ]
          }
        ]
      }
    }
  },
  "camera": {
    "enable_motion_detection": {
      "name": "Enable motion detection",
      "description": "Enable the motion detection in a camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "disable_motion_detection": {
      "name": "Disable motion detection",
      "description": "Disable the motion detection in a camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn off camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "snapshot": {
      "name": "Take snapshot",
      "description": "Take a snapshot from a camera.",
      "fields": {
        "filename": {
          "name": "Filename",
          "description": "Template of a Filename. Variable is entity_id.",
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "play_stream": {
      "name": "Play stream",
      "description": "Play camera stream on supported media player.",
      "fields": {
        "media_player": {
          "name": "Media Player",
          "description": "Name(s) of media player to stream to.",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "format": {
          "name": "Format",
          "description": "Stream format supported by media player.",
          "default": "hls",
          "selector": {
            "select": {
              "options": [
                "hls"
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "record": {
      "name": "Record",
      "description": "Record live camera feed.",
      "fields": {
        "filename": {
          "name": "Filename",
          "description": "Template of a Filename. Variable is entity_id. Must be mp4.",
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
          "selector": {
            "text": null
          }
        },
        "duration": {
          "name": "Duration",
          "description": "Target recording length.",
          "default": 30,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "lookback": {
          "name": "Lookback",
          "description": "Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.",
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    }
  },
  "ffmpeg": {
    "start": {
      "name": "Start",
      "description": "Send a start command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name of entity that will start. Platform dependent.",
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          }
        }
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Send a stop command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name of entity that will stop. Platform dependent.",
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          }
        }
      }
    },
    "restart": {
      "name": "Restart",
      "description": "Send a restart command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name of entity that will restart. Platform dependent.",
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          }
        }
      }
    }
  },
  "mqtt": {
    "publish": {
      "name": "Publish",
      "description": "Publish a message to an MQTT topic.",
      "fields": {
        "topic": {
          "name": "Topic",
          "description": "Topic to publish payload.",
          "required": true,
          "example": "/homeassistant/hello",
          "selector": {
            "text": null
          }
        },
        "payload": {
          "name": "Payload",
          "description": "Payload to publish.",
          "example": "This is great",
          "selector": {
            "text": null
          }
        },
        "payload_template": {
          "name": "Payload Template",
          "description": "Template to render as payload value. Ignored if payload given.",
          "advanced": true,
          "example": "{{ states(\u0027sensor.temperature\u0027) }}",
          "selector": {
            "object": null
          }
        },
        "qos": {
          "name": "QoS",
          "description": "Quality of Service to use.",
          "advanced": true,
          "default": 0,
          "selector": {
            "select": {
              "options": [
                "0",
                "1",
                "2"
              ]
            }
          }
        },
        "retain": {
          "name": "Retain",
          "description": "If message should have the retain flag set.",
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "dump": {
      "name": "Dump",
      "description": "Dump messages on a topic selector to the \u0027mqtt_dump.txt\u0027 file in your configuration folder.",
      "fields": {
        "topic": {
          "name": "Topic",
          "description": "topic to listen to",
          "example": "OpenZWave/#",
          "selector": {
            "text": null
          }
        },
        "duration": {
          "name": "Duration",
          "description": "how long we should listen for messages in seconds",
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        }
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reload all MQTT entities from YAML.",
      "fields": {}
    }
  },
  "vacuum": {
    "turn_on": {
      "name": "Turn on",
      "description": "Start a new cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Stop the current cleaning task and return to home.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "start_pause": {
      "name": "Start/Pause",
      "description": "Start, pause, or resume the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "start": {
      "name": "Start",
      "description": "Start or resume the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pause the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "return_to_base": {
      "name": "Return to base",
      "description": "Tell the vacuum cleaner to return to its dock.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "clean_spot": {
      "name": "Clean spot",
      "description": "Tell the vacuum cleaner to do a spot clean-up.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "locate": {
      "name": "Locate",
      "description": "Locate the vacuum cleaner robot.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stop the current cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "set_fan_speed": {
      "name": "Set fan speed",
      "description": "Set the fan speed of the vacuum cleaner.",
      "fields": {
        "fan_speed": {
          "name": "Fan speed",
          "description": "Platform dependent vacuum cleaner fan speed, with speed steps, like \u0027medium\u0027 or by percentage, between 0 and 100.",
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Send a raw command to the vacuum cleaner.",
      "fields": {
        "command": {
          "name": "Command",
          "description": "Command to execute.",
          "required": true,
          "example": "set_dnd_timer",
          "selector": {
            "text": null
          }
        },
        "params": {
          "name": "Parameters",
          "description": "Parameters for the command.",
          "example": "{ \u0022key\u0022: \u0022value\u0022 }",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    }
  },
  "humidifier": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn humidifier device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn humidifier device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a humidifier device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "set_mode": {
      "name": "Set mode",
      "description": "Set mode for humidifier device.",
      "fields": {
        "mode": {
          "description": "New mode",
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set humidity",
      "description": "Set target humidity of humidifier device.",
      "fields": {
        "humidity": {
          "description": "New target humidity for humidifier device.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    }
  },
  "alexa_media": {
    "update_last_called": {
      "name": "",
      "description": "Forces update of last_called echo device for each Alexa account.",
      "fields": {
        "email": {
          "description": "List of Alexa accounts to update. If empty, will update all known accounts.",
          "example": "my_email@alexa.com"
        }
      }
    },
    "clear_history": {
      "name": "",
      "description": "Clear last entries from Alexa history for each Alexa account.",
      "fields": {
        "email": {
          "description": "List of Alexa accounts to update. If empty, will delete from all known accounts.",
          "example": "my_email@alexa.com"
        },
        "entries": {
          "description": "Number of entries to clear from 1 to 50. If empty, clear 50.",
          "example": 50
        }
      }
    },
    "force_logout": {
      "name": "",
      "description": "Force logout of Alexa Login account and deletion of .pickle. Intended for debugging use.",
      "fields": {
        "email": {
          "description": "List of Alexa accounts to log out. If empty, will log out from all known accounts.",
          "example": "my_email@alexa.com"
        }
      }
    }
  },
  "wake_on_lan": {
    "send_magic_packet": {
      "name": "Send magic packet",
      "description": "Send a \u0027magic packet\u0027 to wake up a device with \u0027Wake-On-LAN\u0027 capabilities.",
      "fields": {
        "mac": {
          "name": "MAC address",
          "description": "MAC address of the device to wake up.",
          "required": true,
          "example": "aa:bb:cc:dd:ee:ff",
          "selector": {
            "text": null
          }
        },
        "broadcast_address": {
          "name": "Broadcast address",
          "description": "Broadcast IP where to send the magic packet.",
          "example": "192.168.255.255",
          "selector": {
            "text": null
          }
        },
        "broadcast_port": {
          "name": "Broadcast port",
          "description": "Port where to send the magic packet.",
          "default": 9,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          }
        }
      }
    }
  },
  "calendar": {
    "create_event": {
      "name": "Create event",
      "description": "Add a new calendar event.",
      "fields": {
        "summary": {
          "name": "Summary",
          "description": "Defines the short summary or subject for the event",
          "required": true,
          "example": "Department Party",
          "selector": {
            "text": null
          }
        },
        "description": {
          "name": "Description",
          "description": "A more complete description of the event than that provided by the summary.",
          "example": "Meeting to provide technical review for \u0027Phoenix\u0027 design.",
          "selector": {
            "text": null
          }
        },
        "start_date_time": {
          "name": "Start time",
          "description": "The date and time the event should start.",
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          }
        },
        "end_date_time": {
          "name": "End time",
          "description": "The date and time the event should end.",
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          }
        },
        "start_date": {
          "name": "Start date",
          "description": "The date the all-day event should start.",
          "example": "2022-03-22",
          "selector": {
            "date": null
          }
        },
        "end_date": {
          "name": "End date",
          "description": "The date the all-day event should end (exclusive).",
          "example": "2022-03-23",
          "selector": {
            "date": null
          }
        },
        "in": {
          "name": "In",
          "description": "Days or weeks that you want to create the event in.",
          "example": "{\u0022days\u0022: 2} or {\u0022weeks\u0022: 2}"
        },
        "location": {
          "name": "Location",
          "description": "The location of the event.",
          "example": "Conference Room - F123, Bldg. 002",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ]
          }
        ]
      }
    }
  },
  "tts": {
    "google_translate_say": {
      "name": "Say a TTS message with google_translate",
      "description": "Say something using text-to-speech on a media player with google_translate.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name(s) of media player entities.",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Text to speak on devices.",
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "name": "Cache",
          "description": "Control file cache of this message.",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "name": "Language",
          "description": "Language to use for speech generation.",
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "name": "Options",
          "description": "A dictionary containing platform-specific options. Optional depending on the platform.",
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "speak": {
      "name": "Speak",
      "description": "Speak something using text-to-speech on a media player.",
      "fields": {
        "media_player_entity_id": {
          "name": "Media Player Entity",
          "description": "Name(s) of media player entities.",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Text to speak on devices.",
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "name": "Cache",
          "description": "Control file cache of this message.",
          "default": true,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "name": "Language",
          "description": "Language to use for speech generation.",
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "name": "Options",
          "description": "A dictionary containing platform-specific options. Optional depending on the platform.",
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "tts"
            ]
          }
        ]
      }
    },
    "clear_cache": {
      "name": "Clear TTS cache",
      "description": "Remove all text-to-speech cache files and RAM cache.",
      "fields": {}
    },
    "cloud_say": {
      "name": "Say a TTS message with cloud",
      "description": "Say something using text-to-speech on a media player with cloud.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name(s) of media player entities.",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Text to speak on devices.",
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "name": "Cache",
          "description": "Control file cache of this message.",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "name": "Language",
          "description": "Language to use for speech generation.",
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "name": "Options",
          "description": "A dictionary containing platform-specific options. Optional depending on the platform.",
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "home_connect": {
    "set_option_active": {
      "name": "Set active program option",
      "description": "Sets an option for the active program.",
      "fields": {
        "device_id": {
          "name": "Device ID",
          "description": "Id of the device.",
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          }
        },
        "key": {
          "name": "Key",
          "description": "Key of the option.",
          "example": "LaundryCare.Dryer.Option.DryingTarget",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "value": {
          "name": "Value",
          "description": "Value of the option.",
          "example": "LaundryCare.Dryer.EnumType.DryingTarget.IronDry",
          "required": true,
          "selector": {
            "object": null
          }
        }
      }
    },
    "set_option_selected": {
      "name": "Set selected program option",
      "description": "Sets an option for the selected program.",
      "fields": {
        "device_id": {
          "name": "Device ID",
          "description": "Id of the device.",
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          }
        },
        "key": {
          "name": "Key",
          "description": "Key of the option.",
          "example": "LaundryCare.Dryer.Option.DryingTarget",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "value": {
          "name": "Value",
          "description": "Value of the option.",
          "example": "LaundryCare.Dryer.EnumType.DryingTarget.IronDry",
          "required": true,
          "selector": {
            "object": null
          }
        }
      }
    },
    "change_setting": {
      "name": "Change setting",
      "description": "Changes a setting.",
      "fields": {
        "device_id": {
          "name": "Device ID",
          "description": "Id of the device.",
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          }
        },
        "key": {
          "name": "Key",
          "description": "Key of the setting.",
          "example": "BSH.Common.Setting.ChildLock",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "value": {
          "name": "Value",
          "description": "Value of the setting.",
          "example": "true",
          "required": true,
          "selector": {
            "object": null
          }
        }
      }
    },
    "pause_program": {
      "name": "Pause program",
      "description": "Pauses the current running program.",
      "fields": {
        "device_id": {
          "name": "Device ID",
          "description": "Id of the device.",
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          }
        }
      }
    },
    "resume_program": {
      "name": "Resume program",
      "description": "Resumes a paused program.",
      "fields": {
        "device_id": {
          "name": "Device ID",
          "description": "Id of the device.",
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          }
        }
      }
    },
    "select_program": {
      "name": "Select program",
      "description": "Selects a program without starting it.",
      "fields": {
        "device_id": {
          "name": "Device ID",
          "description": "Id of the device.",
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          }
        },
        "program": {
          "name": "Program",
          "description": "Program to select",
          "example": "Dishcare.Dishwasher.Program.Auto2",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "key": {
          "name": "Option key",
          "description": "Key of the option.",
          "example": "BSH.Common.Option.StartInRelative",
          "selector": {
            "text": null
          }
        },
        "value": {
          "name": "Option value",
          "description": "Value of the option.",
          "example": 1800,
          "selector": {
            "object": null
          }
        },
        "unit": {
          "name": "Option unit",
          "description": "Unit for the option.",
          "example": "seconds",
          "selector": {
            "text": null
          }
        }
      }
    },
    "start_program": {
      "name": "Start program",
      "description": "Selects a program and starts it.",
      "fields": {
        "device_id": {
          "name": "Device ID",
          "description": "Id of the device.",
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          }
        },
        "program": {
          "name": "Program",
          "description": "Program to select",
          "example": "Dishcare.Dishwasher.Program.Auto2",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "key": {
          "name": "Option key",
          "description": "Key of the option.",
          "example": "BSH.Common.Option.StartInRelative",
          "selector": {
            "text": null
          }
        },
        "value": {
          "name": "Option value",
          "description": "Value of the option.",
          "example": 1800,
          "selector": {
            "object": null
          }
        },
        "unit": {
          "name": "Option unit",
          "description": "Unit for the option.",
          "example": "seconds",
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "webostv": {
    "button": {
      "name": "Button",
      "description": "Send a button press command.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name(s) of the webostv entities where to run the API method.",
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          }
        },
        "button": {
          "name": "Button",
          "description": "Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9",
          "required": true,
          "example": "LEFT",
          "selector": {
            "text": null
          }
        }
      }
    },
    "command": {
      "name": "Command",
      "description": "Send a command.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name(s) of the webostv entities where to run the API method.",
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          }
        },
        "command": {
          "name": "Command",
          "description": "Endpoint of the command.",
          "required": true,
          "example": "system.launcher/open",
          "selector": {
            "text": null
          }
        },
        "payload": {
          "name": "Payload",
          "description": "An optional payload to provide to the endpoint in the format of key value pair(s).",
          "example": "target: https://www.google.com",
          "advanced": true,
          "selector": {
            "object": null
          }
        }
      }
    },
    "select_sound_output": {
      "name": "Select Sound Output",
      "description": "Send the TV the command to change sound output.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name(s) of the webostv entities to change sound output on.",
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          }
        },
        "sound_output": {
          "name": "Sound Output",
          "description": "Name of the sound output to switch to.",
          "required": true,
          "example": "external_speaker",
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "switch": {
    "turn_off": {
      "name": "Turn off",
      "description": "Turn a switch off",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turn a switch on",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a switch state",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "wiser": {
    "get_schedule": {
      "name": "Save Schedule to File",
      "description": "Read the schedule from a room or device and write to an output file in yaml\n",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser entity",
          "required": true,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        },
        "filename": {
          "name": "Filename",
          "description": "The filename to write out the yaml. See README.MD if running within a docker container\n",
          "required": false,
          "example": "config/schedules/{{ entity_id.name }}.yaml",
          "selector": {
            "text": null
          }
        }
      }
    },
    "set_schedule": {
      "name": "Set Schedule From File",
      "description": "Read in the yaml schedule file and set the schedule",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser entity",
          "required": true,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        },
        "filename": {
          "name": "Filename",
          "description": "The filename to read the yaml schedule from.",
          "required": true,
          "example": "schedules/schedule1.yaml",
          "selector": {
            "text": null
          }
        }
      }
    },
    "set_schedule_from_string": {
      "name": "Set Schedule From String",
      "description": "Set a schedule from a template supported string",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser entity",
          "required": true,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        },
        "schedule": {
          "name": "Schedule",
          "description": "The schedule data (supports templates)",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "copy_schedule": {
      "name": "Copy Schedule",
      "description": "Copy the schedule from one to another in the same type",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser entity",
          "required": true,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        },
        "to_entity_id": {
          "name": "To Entity",
          "description": "Enter the entity_id for the room to copy the schedule to.",
          "required": true,
          "example": "climate.wiser_kitchen",
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        }
      }
    },
    "assign_schedule": {
      "name": "Assign Schedule",
      "description": "Assign the schedule to other rooms or devices in the same type",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser entity",
          "required": false,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        },
        "schedule_id": {
          "name": "Schedule Id",
          "description": "A wiser schedule id",
          "required": false,
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "schedule_name": {
          "name": "Schedule Name",
          "description": "A wiser schedule name",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "to_entity_id": {
          "name": "To Entity",
          "description": "Enter the entity_id for the room or device to assign the same schedule to.",
          "required": true,
          "example": "climate.wiser_kitchen",
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        }
      }
    },
    "set_device_mode": {
      "name": "Set Device Mode",
      "description": "Sets the device mode to auto or manual",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser mode entity",
          "required": true,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": "select"
            }
          }
        },
        "mode": {
          "name": "Mode",
          "description": "Enter the mode which can be manual or auto.",
          "required": true,
          "example": "auto",
          "selector": {
            "select": {
              "options": [
                "Auto",
                "Manual"
              ]
            }
          }
        }
      }
    },
    "boost_hotwater": {
      "name": "Boost Hot Water",
      "description": "Boost the hot water for time specified\n",
      "fields": {
        "time_period": {
          "name": "Time period",
          "description": "Set the time period for the boost",
          "example": 60,
          "default": 60,
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 1440,
              "step": 1,
              "mode": "box",
              "unit_of_measurement": "minutes"
            }
          }
        },
        "hub": {
          "name": "Hub",
          "description": "Only needs to be set if you have multiple Wiser hubs",
          "required": false,
          "selector": {
            "config_entry": {
              "integration": "wiser"
            }
          }
        }
      }
    },
    "set_opentherm_parameter": {
      "name": "Set Opentherm Parameter",
      "description": "Allows changing of opentherm parameters on the Wiser Hub",
      "fields": {
        "endpoint": {
          "name": "Endpoint",
          "description": "Endpoint if not at opentherm root.  Ie. preDefinedRemoteBoilerParameters",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "parameter": {
          "name": "Parameter",
          "description": "Parameter to change",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "parameter_value": {
          "name": "Value",
          "description": "Parameter value to set",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "hub": {
          "name": "Hub",
          "description": "Only needs to be set if you have multiple Wiser hubs",
          "required": false,
          "selector": {
            "config_entry": {
              "integration": "wiser"
            }
          }
        }
      }
    },
    "boost_heating": {
      "name": "Boost Heating",
      "description": "Boost the temperature in the selected rooms/areas\n",
      "fields": {
        "time_period": {
          "name": "Time period",
          "description": "Set the time period for the boost in minutes",
          "example": 60,
          "default": 60,
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 9999,
              "step": 1,
              "mode": "box"
            }
          }
        },
        "temperature_delta": {
          "name": "Temperature Increase",
          "description": "Set the increase in temperature for the boost period",
          "example": 3.0,
          "default": 3.0,
          "required": false,
          "selector": {
            "number": {
              "min": 0.5,
              "max": 5,
              "step": 0.5,
              "unit_of_measurement": "\u00B0C"
            }
          }
        },
        "temperature": {
          "name": "Temperature",
          "description": "Set the room target temperature for the boost period",
          "example": 21.0,
          "default": 21.0,
          "required": false,
          "selector": {
            "number": {
              "min": 5,
              "max": 30,
              "step": 0.5,
              "unit_of_measurement": "\u00B0C"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "wiser",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    }
  },
  "water_heater": {
    "set_away_mode": {
      "name": "Set away mode",
      "description": "Turn away mode on/off for water_heater device.",
      "fields": {
        "away_mode": {
          "name": "Away mode",
          "description": "New value of away mode.",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set temperature",
      "description": "Set target temperature of water_heater device.",
      "fields": {
        "temperature": {
          "name": "Temperature",
          "description": "New target temperature for water heater.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "\u00B0"
            }
          }
        },
        "operation_mode": {
          "name": "Operation mode",
          "description": "New value of operation mode.",
          "example": "eco",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_operation_mode": {
      "name": "Set operation mode",
      "description": "Set operation mode for water_heater device.",
      "fields": {
        "operation_mode": {
          "name": "Operation mode",
          "description": "New value of operation mode.",
          "required": true,
          "example": "eco",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "turn_on": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "history_stats": {
    "reload": {
      "name": "Reload",
      "description": "Reload all history_stats entities.",
      "fields": {}
    }
  },
  "min_max": {
    "reload": {
      "name": "Reload",
      "description": "Reload all min_max entities.",
      "fields": {}
    }
  },
  "pi_hole": {
    "disable": {
      "name": "Disable",
      "description": "Disable configured Pi-hole(s) for an amount of time",
      "fields": {
        "duration": {
          "name": "Duration",
          "description": "Time that the Pi-hole should be disabled for",
          "required": true,
          "example": "00:00:15",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "pi_hole",
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "adaptive_lighting": {
    "apply": {
      "name": "",
      "description": "Applies the current Adaptive Lighting settings to lights.",
      "fields": {
        "entity_id": {
          "description": "The \u0060entity_id\u0060 of the switch with the settings to apply. \uD83D\uDCDD",
          "selector": {
            "entity": {
              "integration": "adaptive_lighting",
              "domain": "switch",
              "multiple": false
            }
          }
        },
        "lights": {
          "description": "A light (or list of lights) to apply the settings to. \uD83D\uDCA1",
          "selector": {
            "entity": {
              "domain": "light",
              "multiple": true
            }
          }
        },
        "transition": {
          "description": "Duration of transition when lights change, in seconds. \uD83D\uDD51",
          "example": 10,
          "selector": {
            "text": null
          }
        },
        "adapt_brightness": {
          "description": "Whether to adapt the brightness of the light. \uD83C\uDF1E",
          "example": true,
          "selector": {
            "boolean": null
          }
        },
        "adapt_color": {
          "description": "Whether to adapt the color on supporting lights. \uD83C\uDF08",
          "example": true,
          "selector": {
            "boolean": null
          }
        },
        "prefer_rgb_color": {
          "description": "Whether to prefer RGB color adjustment over light color temperature when possible. \uD83C\uDF08",
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "turn_on_lights": {
          "description": "Whether to turn on lights that are currently off. \uD83D\uDD06",
          "example": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "set_manual_control": {
      "name": "",
      "description": "Mark whether a light is \u0027manually controlled\u0027.",
      "fields": {
        "entity_id": {
          "description": "The \u0060entity_id\u0060 of the switch in which to (un)mark the light as being \u0060manually controlled\u0060. \uD83D\uDCDD",
          "selector": {
            "entity": {
              "integration": "adaptive_lighting",
              "domain": "switch",
              "multiple": false
            }
          }
        },
        "lights": {
          "description": "entity_id(s) of lights, if not specified, all lights in the switch are selected. \uD83D\uDCA1",
          "selector": {
            "entity": {
              "domain": "light",
              "multiple": true
            }
          }
        },
        "manual_control": {
          "description": "Whether to add (\u0022true\u0022) or remove (\u0022false\u0022) the light from the \u0022manual_control\u0022 list. \uD83D\uDD12",
          "example": true,
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "change_switch_settings": {
      "name": "",
      "description": "Change any settings you\u0027d like in the switch. All options here are the same as in the config flow.",
      "fields": {
        "entity_id": {
          "description": "Entity ID of the switch. \uD83D\uDCDD",
          "required": true,
          "selector": {
            "entity": {
              "domain": "switch"
            }
          }
        },
        "use_defaults": {
          "description": "Sets the default values not specified in this service call. Options: \u0022current\u0022 (default, retains current values), \u0022factory\u0022 (resets to documented defaults), or \u0022configuration\u0022 (reverts to switch config defaults). \u2699\uFE0F",
          "example": "current",
          "required": false,
          "default": "current",
          "selector": {
            "select": {
              "options": [
                "current",
                "configuration",
                "factory"
              ]
            }
          }
        },
        "include_config_in_attributes": {
          "description": "Show all options as attributes on the switch in Home Assistant when set to \u0060true\u0060. \uD83D\uDCDD",
          "required": false,
          "selector": {
            "boolean": null
          }
        },
        "turn_on_lights": {
          "description": "Whether to turn on lights that are currently off. \uD83D\uDD06",
          "example": false,
          "required": false,
          "selector": {
            "boolean": null
          }
        },
        "initial_transition": {
          "description": "Duration of the first transition when lights turn from \u0060off\u0060 to \u0060on\u0060 in seconds. \u23F2\uFE0F",
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          }
        },
        "sleep_transition": {
          "description": "Duration of transition when \u0022sleep mode\u0022 is toggled in seconds. \uD83D\uDE34",
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          }
        },
        "max_brightness": {
          "description": "Maximum brightness percentage. \uD83D\uDCA1",
          "required": false,
          "example": 100,
          "selector": {
            "text": null
          }
        },
        "max_color_temp": {
          "description": "Coldest color temperature in Kelvin. \u2744\uFE0F",
          "required": false,
          "example": 5500,
          "selector": {
            "text": null
          }
        },
        "min_brightness": {
          "description": "Minimum brightness percentage. \uD83D\uDCA1",
          "required": false,
          "example": 1,
          "selector": {
            "text": null
          }
        },
        "min_color_temp": {
          "description": "Warmest color temperature in Kelvin. \uD83D\uDD25",
          "required": false,
          "example": 2000,
          "selector": {
            "text": null
          }
        },
        "only_once": {
          "description": "Adapt lights only when they are turned on (\u0060true\u0060) or keep adapting them (\u0060false\u0060). \uD83D\uDD04",
          "example": false,
          "required": false,
          "selector": {
            "boolean": null
          }
        },
        "prefer_rgb_color": {
          "description": "Whether to prefer RGB color adjustment over light color temperature when possible. \uD83C\uDF08",
          "required": false,
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "separate_turn_on_commands": {
          "description": "Use separate \u0060light.turn_on\u0060 calls for color and brightness, needed for some light types. \uD83D\uDD00",
          "required": false,
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "send_split_delay": {
          "description": "Delay (ms) between \u0060separate_turn_on_commands\u0060 for lights that don\u0027t support simultaneous brightness and color setting. \u23F2\uFE0F",
          "required": false,
          "example": 0,
          "selector": {
            "boolean": null
          }
        },
        "sleep_brightness": {
          "description": "Brightness percentage of lights in sleep mode. \uD83D\uDE34",
          "required": false,
          "example": 1,
          "selector": {
            "text": null
          }
        },
        "sleep_rgb_or_color_temp": {
          "description": "Use either \u0060\u0022rgb_color\u0022\u0060 or \u0060\u0022color_temp\u0022\u0060 in sleep mode. \uD83C\uDF19",
          "required": false,
          "example": "color_temp",
          "selector": {
            "select": {
              "options": [
                "rgb_color",
                "color_temp"
              ]
            }
          }
        },
        "sleep_rgb_color": {
          "description": "RGB color in sleep mode (used when \u0060sleep_rgb_or_color_temp\u0060 is \u0022rgb_color\u0022). \uD83C\uDF08",
          "required": false,
          "selector": {
            "color_rgb": null
          }
        },
        "sleep_color_temp": {
          "description": "Color temperature in sleep mode (used when \u0060sleep_rgb_or_color_temp\u0060 is \u0060color_temp\u0060) in Kelvin. \uD83D\uDE34",
          "required": false,
          "example": 1000,
          "selector": {
            "text": null
          }
        },
        "sunrise_offset": {
          "description": "Adjust sunrise time with a positive or negative offset in seconds. \u23F0",
          "required": false,
          "example": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 86300
            }
          }
        },
        "sunrise_time": {
          "description": "Set a fixed time (HH:MM:SS) for sunrise. \uD83C\uDF05",
          "required": false,
          "example": "",
          "selector": {
            "time": null
          }
        },
        "sunset_offset": {
          "description": "Adjust sunset time with a positive or negative offset in seconds. \u23F0",
          "required": false,
          "example": "",
          "selector": {
            "number": {
              "min": 0,
              "max": 86300
            }
          }
        },
        "sunset_time": {
          "description": "Set a fixed time (HH:MM:SS) for sunset. \uD83C\uDF07",
          "example": "",
          "required": false,
          "selector": {
            "time": null
          }
        },
        "max_sunrise_time": {
          "description": "Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier real sunrises. \uD83C\uDF05",
          "example": "",
          "required": false,
          "selector": {
            "time": null
          }
        },
        "min_sunset_time": {
          "description": "Set the earliest virtual sunset time (HH:MM:SS), allowing for later real sunsets. \uD83C\uDF07",
          "example": "",
          "required": false,
          "selector": {
            "time": null
          }
        },
        "take_over_control": {
          "description": "Disable Adaptive Lighting if another source calls \u0060light.turn_on\u0060 while lights are on and being adapted. Note that this calls \u0060homeassistant.update_entity\u0060 every \u0060interval\u0060! \uD83D\uDD12",
          "required": false,
          "example": true,
          "selector": {
            "boolean": null
          }
        },
        "detect_non_ha_changes": {
          "description": "Detect non-\u0060light.turn_on\u0060 state changes and stop adapting lights. Requires \u0060take_over_control\u0060. \uD83D\uDD75\uFE0F",
          "required": false,
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "transition": {
          "description": "Duration of transition when lights change, in seconds. \uD83D\uDD51",
          "required": false,
          "example": 45,
          "selector": {
            "text": null
          }
        },
        "adapt_delay": {
          "description": "Wait time (seconds) between light turn on and Adaptive Lighting applying changes. Might help to avoid flickering. \u23F2\uFE0F",
          "required": false,
          "example": 0,
          "selector": {
            "text": null
          }
        },
        "autoreset_control_seconds": {
          "description": "Automatically reset the manual control after a number of seconds. Set to 0 to disable. \u23F2\uFE0F",
          "required": false,
          "example": 0,
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "melcloud": {
    "set_vane_horizontal": {
      "name": "Set vane horizontal",
      "description": "Sets horizontal vane position.",
      "fields": {
        "position": {
          "name": "Position",
          "description": "Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute.\n",
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "melcloud",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_vane_vertical": {
      "name": "Set vane vertical",
      "description": "Sets vertical vane position.",
      "fields": {
        "position": {
          "name": "Position",
          "description": "Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute.\n",
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "melcloud",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    }
  },
  "generic_thermostat": {
    "reload": {
      "name": "Reload",
      "description": "Reload all generic_thermostat entities.",
      "fields": {}
    }
  },
  "alarmo": {
    "enable_user": {
      "name": "Enable User",
      "description": "Allow a user to arm/disarm alarmo.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "Name of the user to enable.",
          "example": "Frank",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "disable_user": {
      "name": "Disable User",
      "description": "Block a user from arming/disarming alarmo.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "Name of the user to disable.",
          "example": "Frank",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "arm": {
      "name": "Arm",
      "description": "Arm an Alarmo entity with custom settings.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "Name of entity that should be armed.",
          "example": "alarm_control_panel.alarm",
          "required": true,
          "selector": {
            "entity": {
              "integration": "alarmo",
              "domain": "alarm_control_panel"
            }
          }
        },
        "code": {
          "name": "Code",
          "description": "Code to arm the alarm with.",
          "example": "1234",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "mode": {
          "name": "Mode",
          "description": "Mode to arm the alarm in.",
          "example": "away",
          "required": false,
          "default": "away",
          "selector": {
            "select": {
              "options": [
                "away",
                "night",
                "home",
                "vacation",
                "custom"
              ]
            }
          }
        },
        "skip_delay": {
          "name": "Skip Delay",
          "description": "Skip the exit delay.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "force": {
          "name": "Force",
          "description": "Automatically bypass all sensors that prevent the arming operation.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "disarm": {
      "name": "Disarm",
      "description": "Disarm an Alarmo entity.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "Name of entity that should be disarmed.",
          "example": "alarm_control_panel.alarm",
          "required": true,
          "selector": {
            "entity": {
              "integration": "alarmo",
              "domain": "alarm_control_panel"
            }
          }
        },
        "code": {
          "name": "Code",
          "description": "Code to disarm the alarm with.",
          "example": "1234",
          "required": false,
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "sonos": {
    "snapshot": {
      "name": "Snapshot",
      "description": "Take a snapshot of the media player.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name of entity that will be snapshot.",
          "selector": {
            "entity": {
              "integration": "sonos",
              "domain": "media_player"
            }
          }
        },
        "with_group": {
          "name": "With group",
          "description": "True or False. Also snapshot the group layout.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "restore": {
      "name": "Restore",
      "description": "Restore a snapshot of the media player.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name of entity that will be restored.",
          "selector": {
            "entity": {
              "integration": "sonos",
              "domain": "media_player"
            }
          }
        },
        "with_group": {
          "name": "With group",
          "description": "True or False. Also restore the group layout.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "set_sleep_timer": {
      "name": "Set timer",
      "description": "Set a Sonos timer.",
      "fields": {
        "sleep_time": {
          "name": "Sleep Time",
          "description": "Number of seconds to set the timer.",
          "selector": {
            "number": {
              "min": 0,
              "max": 7200,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "clear_sleep_timer": {
      "name": "Clear timer",
      "description": "Clear a Sonos timer.",
      "fields": {},
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "update_alarm": {
      "name": "Update alarm",
      "description": "Updates an alarm with new time and volume settings.",
      "fields": {
        "alarm_id": {
          "name": "Alarm ID",
          "description": "ID for the alarm to be updated.",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 1440,
              "mode": "box"
            }
          }
        },
        "time": {
          "name": "Time",
          "description": "Set time for the alarm.",
          "example": "07:00",
          "selector": {
            "time": null
          }
        },
        "volume": {
          "name": "Volume",
          "description": "Set alarm volume level.",
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          }
        },
        "enabled": {
          "name": "Alarm enabled",
          "description": "Enable or disable the alarm.",
          "selector": {
            "boolean": null
          }
        },
        "include_linked_zones": {
          "name": "Include linked zones",
          "description": "Enable or disable including grouped rooms.",
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "play_queue": {
      "name": "Play queue",
      "description": "Start playing the queue from the first item.",
      "fields": {
        "queue_position": {
          "name": "Queue position",
          "description": "Position of the song in the queue to start playing from.",
          "selector": {
            "number": {
              "min": 0,
              "max": 10000,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "remove_from_queue": {
      "name": "Remove from queue",
      "description": "Removes an item from the queue.",
      "fields": {
        "queue_position": {
          "name": "Queue position",
          "description": "Position in the queue to remove.",
          "selector": {
            "number": {
              "min": 0,
              "max": 10000,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    }
  },
  "backup": {
    "create": {
      "name": "Create backup",
      "description": "Create a new backup.",
      "fields": {}
    }
  },
  "powercalc": {
    "reset_energy": {
      "name": "Reset energy sensor",
      "description": "Reset an energy sensor to zero kWh",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "device_class": [
              "energy"
            ]
          }
        ]
      }
    },
    "calibrate_utility_meter": {
      "name": "Calibrate utility meter",
      "description": "Calibrates a utility meter sensor.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "Value to which set the meter",
          "example": "100",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ]
          }
        ]
      }
    },
    "calibrate_energy": {
      "name": "Calibrate energy sensor",
      "description": "Sets the energy sensor to a given kWh value.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "Value to which set the meter",
          "example": "100",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "device_class": [
              "energy"
            ]
          }
        ]
      }
    },
    "increase_daily_energy": {
      "name": "Increase daily energy sensor",
      "description": "Increases the sensor with a given amount",
      "fields": {
        "value": {
          "name": "Value",
          "description": "Amount to add to the sensor",
          "example": "100",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "integration": "powercalc",
            "device_class": [
              "energy"
            ]
          }
        ]
      }
    },
    "activate_playbook": {
      "name": "Activate playbook",
      "description": "Activate playbook",
      "fields": {
        "playbook_id": {
          "name": "Playbook",
          "description": "Playbook identifier",
          "required": true,
          "example": "program1",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "integration": "powercalc",
            "device_class": [
              "power"
            ]
          }
        ]
      }
    },
    "stop_playbook": {
      "name": "Stop playbook",
      "description": "Stop active playbook",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "integration": "powercalc",
            "device_class": [
              "power"
            ]
          }
        ]
      }
    }
  },
  "ring": {
    "update": {
      "name": "Update",
      "description": "Updates the data we have for all your ring devices",
      "fields": {}
    }
  },
  "remote": {
    "turn_off": {
      "name": "Turn Off",
      "description": "Sends the Power Off Command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn On",
      "description": "Sends the Power On Command.",
      "fields": {
        "activity": {
          "name": "Activity",
          "description": "Activity ID or Activity Name to start.",
          "example": "BedroomTV",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send Command",
      "description": "Sends a command or a list of commands to a device.",
      "fields": {
        "device": {
          "name": "Device",
          "description": "Device ID to send command to.",
          "example": "32756745",
          "selector": {
            "text": null
          }
        },
        "command": {
          "name": "Command",
          "description": "A single command or a list of commands to send.",
          "required": true,
          "example": "Play",
          "selector": {
            "object": null
          }
        },
        "num_repeats": {
          "name": "Repeats",
          "description": "The number of times you want to repeat the command(s).",
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          }
        },
        "delay_secs": {
          "name": "Delay Seconds",
          "description": "The time you want to wait in between repeated commands.",
          "default": 0.4,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "hold_secs": {
          "name": "Hold Seconds",
          "description": "The time you want to have it held before the release is send.",
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "learn_command": {
      "name": "Learn Command",
      "description": "Learns a command or a list of commands from a device.",
      "fields": {
        "device": {
          "name": "Device",
          "description": "Device ID to learn command from.",
          "example": "television",
          "selector": {
            "text": null
          }
        },
        "command": {
          "name": "Command",
          "description": "A single command or a list of commands to learn.",
          "example": "Turn on",
          "selector": {
            "object": null
          }
        },
        "command_type": {
          "name": "Command Type",
          "description": "The type of command to be learned.",
          "default": "ir",
          "selector": {
            "select": {
              "options": [
                "ir",
                "rf"
              ]
            }
          }
        },
        "alternative": {
          "name": "Alternative",
          "description": "If code must be stored as alternative (useful for discrete remotes).",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for the command to be learned.",
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 5,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "delete_command": {
      "name": "Delete Command",
      "description": "Deletes a command or a list of commands from the database.",
      "fields": {
        "device": {
          "name": "Device",
          "description": "Name of the device from which commands will be deleted.",
          "example": "television",
          "selector": {
            "text": null
          }
        },
        "command": {
          "name": "Command",
          "description": "A single command or a list of commands to delete.",
          "required": true,
          "example": "Mute",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    }
  },
  "unifi": {
    "reconnect_client": {
      "name": "Reconnect wireless client",
      "description": "Try to get wireless client to reconnect to UniFi Network",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "Try reconnect client to wireless network",
          "required": true,
          "selector": {
            "device": {
              "integration": "unifi"
            }
          }
        }
      }
    },
    "remove_clients": {
      "name": "Remove clients from the UniFi Network",
      "description": "Clean up clients that has only been associated with the controller for a short period of time.",
      "fields": {}
    }
  }
}