{
  "homeassistant": {
    "save_persistent_states": {
      "name": "Save persistent states",
      "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
      "fields": {}
    },
    "turn_off": {
      "name": "Generic turn off",
      "description": "Generic service to turn devices off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "turn_on": {
      "name": "Generic turn on",
      "description": "Generic service to turn devices on under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "toggle": {
      "name": "Generic toggle",
      "description": "Generic service to toggle devices on/off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops Home Assistant.",
      "fields": {}
    },
    "restart": {
      "name": "Restart",
      "description": "Restarts Home Assistant.",
      "fields": {}
    },
    "check_config": {
      "name": "Check configuration",
      "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
      "fields": {}
    },
    "update_entity": {
      "name": "Update entity",
      "description": "Forces one or more entities to update its data.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "reload_core_config": {
      "name": "Reload core configuration",
      "description": "Reloads the core configuration from the YAML-configuration.",
      "fields": {}
    },
    "set_location": {
      "name": "Set location",
      "description": "Updates the Home Assistant location.",
      "fields": {
        "latitude": {
          "required": true,
          "example": 32.87336,
          "selector": {
            "text": null
          },
          "name": "Latitude",
          "description": "Latitude of your location."
        },
        "longitude": {
          "required": true,
          "example": 117.22743,
          "selector": {
            "text": null
          },
          "name": "Longitude",
          "description": "Longitude of your location."
        }
      }
    },
    "reload_custom_templates": {
      "name": "Reload custom Jinja2 templates",
      "description": "Reloads Jinja2 templates found in the \u0060custom_templates\u0060 folder in your config. New values will be applied on the next render of the template.",
      "fields": {}
    },
    "reload_config_entry": {
      "name": "Reload config entry",
      "description": "Reloads the specified config entry.",
      "fields": {
        "entry_id": {
          "advanced": true,
          "required": false,
          "example": "8955375327824e14ba89e4b29cc3ec9a",
          "selector": {
            "text": null
          },
          "name": "Config entry ID",
          "description": "The configuration entry ID of the entry to be reloaded."
        }
      },
      "target": {
        "entity": [
          {}
        ],
        "device": [
          {}
        ]
      }
    },
    "reload_all": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "persistent_notification": {
    "create": {
      "name": "Create",
      "description": "Shows a notification on the **Notifications** panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "Please check your configuration.yaml.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Test notification",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Optional title of the notification."
        },
        "notification_id": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID."
        }
      }
    },
    "dismiss": {
      "name": "Dismiss",
      "description": "Removes a notification from the **Notifications** panel.",
      "fields": {
        "notification_id": {
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification to be removed."
        }
      }
    },
    "dismiss_all": {
      "name": "Dismiss all",
      "description": "Removes all notifications from the **Notifications** panel.",
      "fields": {}
    }
  },
  "system_log": {
    "clear": {
      "name": "Clear all",
      "description": "Clears all log entries.",
      "fields": {}
    },
    "write": {
      "name": "Write",
      "description": "Write log entry.",
      "fields": {
        "message": {
          "required": true,
          "example": "Something went wrong",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message to log."
        },
        "level": {
          "default": "error",
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Log level."
        },
        "logger": {
          "example": "mycomponent.myplatform",
          "selector": {
            "text": null
          },
          "name": "Logger",
          "description": "Logger name under which to log the message. Defaults to \u0060system_log.external\u0060."
        }
      }
    }
  },
  "logger": {
    "set_default_level": {
      "name": "Set default level",
      "description": "Sets the default log level for integrations.",
      "fields": {
        "level": {
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "fatal",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Default severity level for all integrations."
        }
      }
    },
    "set_level": {
      "name": "Set level",
      "description": "Sets the log level for one or more integrations.",
      "fields": {}
    }
  },
  "person": {
    "reload": {
      "name": "Reload",
      "description": "Reloads persons from the YAML-configuration.",
      "fields": {}
    }
  },
  "frontend": {
    "set_theme": {
      "name": "Set the default theme",
      "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
      "fields": {
        "name": {
          "required": true,
          "example": "default",
          "selector": {
            "theme": {
              "include_default": true
            }
          },
          "name": "Theme",
          "description": "Name of a theme."
        },
        "mode": {
          "default": "light",
          "selector": {
            "select": {
              "options": [
                "dark",
                "light"
              ],
              "translation_key": "mode"
            }
          },
          "name": "Mode",
          "description": "Theme mode."
        }
      }
    },
    "reload_themes": {
      "name": "Reload themes",
      "description": "Reloads themes from the YAML-configuration.",
      "fields": {}
    }
  },
  "recorder": {
    "purge": {
      "name": "Purge",
      "description": "Starts purge task - to clean up old data from your database.",
      "fields": {
        "keep_days": {
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged."
        },
        "repack": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Repack",
          "description": "Attempt to save disk space by rewriting the entire database file."
        },
        "apply_filter": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Apply filter",
          "description": "Applys \u0060entity_id\u0060 and \u0060event_type\u0060 filters in addition to time-based purge."
        }
      }
    },
    "purge_entities": {
      "name": "Purge entities",
      "description": "Starts a purge task to remove the data related to specific entities from your database.",
      "fields": {
        "domains": {
          "example": "sun",
          "required": false,
          "default": [],
          "selector": {
            "object": null
          },
          "name": "Domains to remove",
          "description": "List of domains for which the data needs to be removed from the recorder database."
        },
        "entity_globs": {
          "example": "domain*.object_id*",
          "required": false,
          "default": [],
          "selector": {
            "object": null
          },
          "name": "Entity globs to remove",
          "description": "List of glob patterns used to select the entities for which the data is to be removed from the recorder database."
        },
        "keep_days": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately."
        }
      },
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "enable": {
      "name": "Enable",
      "description": "Starts the recording of events and state changes.",
      "fields": {}
    },
    "disable": {
      "name": "Disable",
      "description": "Stops the recording of events and state changes.",
      "fields": {}
    }
  },
  "cloud": {
    "remote_connect": {
      "name": "Remote connect",
      "description": "Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.",
      "fields": {}
    },
    "remote_disconnect": {
      "name": "Remote disconnect",
      "description": "Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.",
      "fields": {}
    }
  },
  "conversation": {
    "process": {
      "name": "Process",
      "description": "Launches a conversation from a transcribed text.",
      "fields": {
        "text": {
          "example": "Turn all lights on",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Text",
          "description": "Transcribed text input."
        },
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language of text. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands."
        }
      },
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "localtuya": {
    "reload": {
      "name": "",
      "description": "Reload localtuya and reconnect to all devices.",
      "fields": {}
    },
    "set_dp": {
      "name": "",
      "description": "Change the value of a datapoint (DP)",
      "fields": {
        "device_id": {
          "description": "Device ID of device to change datapoint value for",
          "example": "11100118278aab4de001"
        },
        "dp": {
          "description": "Datapoint index",
          "example": 1
        },
        "value": {
          "description": "New value to set",
          "example": false
        }
      }
    }
  },
  "select": {
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    }
  },
  "light": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on one or more lights and adjust properties of the light, even when they are turned on already.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "rgbw_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[255, 100, 100, 50]",
          "selector": {
            "object": null
          },
          "name": "RGBW-color",
          "description": "The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white."
        },
        "rgbww_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[255, 100, 100, 50, 70]",
          "selector": {
            "object": null
          },
          "name": "RGBWW-color",
          "description": "The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white."
        },
        "color_name": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "select": {
              "translation_key": "color_name",
              "options": [
                "homeassistant",
                "aliceblue",
                "antiquewhite",
                "aqua",
                "aquamarine",
                "azure",
                "beige",
                "bisque",
                "blanchedalmond",
                "blue",
                "blueviolet",
                "brown",
                "burlywood",
                "cadetblue",
                "chartreuse",
                "chocolate",
                "coral",
                "cornflowerblue",
                "cornsilk",
                "crimson",
                "cyan",
                "darkblue",
                "darkcyan",
                "darkgoldenrod",
                "darkgray",
                "darkgreen",
                "darkgrey",
                "darkkhaki",
                "darkmagenta",
                "darkolivegreen",
                "darkorange",
                "darkorchid",
                "darkred",
                "darksalmon",
                "darkseagreen",
                "darkslateblue",
                "darkslategray",
                "darkslategrey",
                "darkturquoise",
                "darkviolet",
                "deeppink",
                "deepskyblue",
                "dimgray",
                "dimgrey",
                "dodgerblue",
                "firebrick",
                "floralwhite",
                "forestgreen",
                "fuchsia",
                "gainsboro",
                "ghostwhite",
                "gold",
                "goldenrod",
                "gray",
                "green",
                "greenyellow",
                "grey",
                "honeydew",
                "hotpink",
                "indianred",
                "indigo",
                "ivory",
                "khaki",
                "lavender",
                "lavenderblush",
                "lawngreen",
                "lemonchiffon",
                "lightblue",
                "lightcoral",
                "lightcyan",
                "lightgoldenrodyellow",
                "lightgray",
                "lightgreen",
                "lightgrey",
                "lightpink",
                "lightsalmon",
                "lightseagreen",
                "lightskyblue",
                "lightslategray",
                "lightslategrey",
                "lightsteelblue",
                "lightyellow",
                "lime",
                "limegreen",
                "linen",
                "magenta",
                "maroon",
                "mediumaquamarine",
                "mediumblue",
                "mediumorchid",
                "mediumpurple",
                "mediumseagreen",
                "mediumslateblue",
                "mediumspringgreen",
                "mediumturquoise",
                "mediumvioletred",
                "midnightblue",
                "mintcream",
                "mistyrose",
                "moccasin",
                "navajowhite",
                "navy",
                "navyblue",
                "oldlace",
                "olive",
                "olivedrab",
                "orange",
                "orangered",
                "orchid",
                "palegoldenrod",
                "palegreen",
                "paleturquoise",
                "palevioletred",
                "papayawhip",
                "peachpuff",
                "peru",
                "pink",
                "plum",
                "powderblue",
                "purple",
                "red",
                "rosybrown",
                "royalblue",
                "saddlebrown",
                "salmon",
                "sandybrown",
                "seagreen",
                "seashell",
                "sienna",
                "silver",
                "skyblue",
                "slateblue",
                "slategray",
                "slategrey",
                "snow",
                "springgreen",
                "steelblue",
                "tan",
                "teal",
                "thistle",
                "tomato",
                "turquoise",
                "violet",
                "wheat",
                "white",
                "whitesmoke",
                "yellow",
                "yellowgreen"
              ]
            }
          },
          "name": "Color name",
          "description": "A human-readable color name."
        },
        "hs_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[300, 70]",
          "selector": {
            "object": null
          },
          "name": "Hue/Sat color",
          "description": "Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100."
        },
        "xy_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[0.52, 0.43]",
          "selector": {
            "object": null
          },
          "name": "XY-color",
          "description": "Color in XY-format. A list of two decimal numbers between 0 and 1."
        },
        "color_temp": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "min_mireds": 153,
              "max_mireds": 500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in mireds."
        },
        "kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 2000,
              "max": 6500,
              "step": 100,
              "unit_of_measurement": "K"
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          },
          "name": "Brightness value",
          "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "brightness_step": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": -225,
              "max": 255
            }
          },
          "name": "Brightness step value",
          "description": "Change brightness by an amount."
        },
        "brightness_step_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": -100,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness step",
          "description": "Change brightness by a percentage."
        },
        "white": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "white"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "constant": {
              "value": true,
              "label": "Enabled"
            }
          },
          "name": "White",
          "description": "Set the light to white mode."
        },
        "profile": {
          "advanced": true,
          "example": "relax",
          "selector": {
            "text": null
          },
          "name": "Profile",
          "description": "Name of a light profile to use."
        },
        "flash": {
          "filter": {
            "supported_features": [
              8
            ]
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Long",
                  "value": "long"
                },
                {
                  "label": "Short",
                  "value": "short"
                }
              ]
            }
          },
          "name": "Flash",
          "description": "Tell light to flash, can be either value short or long."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn off one or more lights.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "flash": {
          "filter": {
            "supported_features": [
              8
            ]
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Long",
                  "value": "long"
                },
                {
                  "label": "Short",
                  "value": "short"
                }
              ]
            }
          },
          "name": "Flash",
          "description": "Tell light to flash, can be either value short or long."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles one or more lights, from on to off, or, off to on, based on their current state.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[255, 100, 100]",
          "selector": {
            "object": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "color_name": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "select": {
              "translation_key": "color_name",
              "options": [
                "homeassistant",
                "aliceblue",
                "antiquewhite",
                "aqua",
                "aquamarine",
                "azure",
                "beige",
                "bisque",
                "blanchedalmond",
                "blue",
                "blueviolet",
                "brown",
                "burlywood",
                "cadetblue",
                "chartreuse",
                "chocolate",
                "coral",
                "cornflowerblue",
                "cornsilk",
                "crimson",
                "cyan",
                "darkblue",
                "darkcyan",
                "darkgoldenrod",
                "darkgray",
                "darkgreen",
                "darkgrey",
                "darkkhaki",
                "darkmagenta",
                "darkolivegreen",
                "darkorange",
                "darkorchid",
                "darkred",
                "darksalmon",
                "darkseagreen",
                "darkslateblue",
                "darkslategray",
                "darkslategrey",
                "darkturquoise",
                "darkviolet",
                "deeppink",
                "deepskyblue",
                "dimgray",
                "dimgrey",
                "dodgerblue",
                "firebrick",
                "floralwhite",
                "forestgreen",
                "fuchsia",
                "gainsboro",
                "ghostwhite",
                "gold",
                "goldenrod",
                "gray",
                "green",
                "greenyellow",
                "grey",
                "honeydew",
                "hotpink",
                "indianred",
                "indigo",
                "ivory",
                "khaki",
                "lavender",
                "lavenderblush",
                "lawngreen",
                "lemonchiffon",
                "lightblue",
                "lightcoral",
                "lightcyan",
                "lightgoldenrodyellow",
                "lightgray",
                "lightgreen",
                "lightgrey",
                "lightpink",
                "lightsalmon",
                "lightseagreen",
                "lightskyblue",
                "lightslategray",
                "lightslategrey",
                "lightsteelblue",
                "lightyellow",
                "lime",
                "limegreen",
                "linen",
                "magenta",
                "maroon",
                "mediumaquamarine",
                "mediumblue",
                "mediumorchid",
                "mediumpurple",
                "mediumseagreen",
                "mediumslateblue",
                "mediumspringgreen",
                "mediumturquoise",
                "mediumvioletred",
                "midnightblue",
                "mintcream",
                "mistyrose",
                "moccasin",
                "navajowhite",
                "navy",
                "navyblue",
                "oldlace",
                "olive",
                "olivedrab",
                "orange",
                "orangered",
                "orchid",
                "palegoldenrod",
                "palegreen",
                "paleturquoise",
                "palevioletred",
                "papayawhip",
                "peachpuff",
                "peru",
                "pink",
                "plum",
                "powderblue",
                "purple",
                "red",
                "rosybrown",
                "royalblue",
                "saddlebrown",
                "salmon",
                "sandybrown",
                "seagreen",
                "seashell",
                "sienna",
                "silver",
                "skyblue",
                "slateblue",
                "slategray",
                "slategrey",
                "snow",
                "springgreen",
                "steelblue",
                "tan",
                "teal",
                "thistle",
                "tomato",
                "turquoise",
                "violet",
                "wheat",
                "white",
                "whitesmoke",
                "yellow",
                "yellowgreen"
              ]
            }
          },
          "name": "Color name",
          "description": "A human-readable color name."
        },
        "hs_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[300, 70]",
          "selector": {
            "object": null
          },
          "name": "Hue/Sat color",
          "description": "Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100."
        },
        "xy_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[0.52, 0.43]",
          "selector": {
            "object": null
          },
          "name": "XY-color",
          "description": "Color in XY-format. A list of two decimal numbers between 0 and 1."
        },
        "color_temp": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "color_temp": null
          },
          "name": "Color temperature",
          "description": "Color temperature in mireds."
        },
        "kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 2000,
              "max": 6500,
              "step": 100,
              "unit_of_measurement": "K"
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          },
          "name": "Brightness value",
          "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "white": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "white"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "constant": {
              "value": true,
              "label": "Enabled"
            }
          },
          "name": "White",
          "description": "Set the light to white mode."
        },
        "profile": {
          "advanced": true,
          "example": "relax",
          "selector": {
            "text": null
          },
          "name": "Profile",
          "description": "Name of a light profile to use."
        },
        "flash": {
          "filter": {
            "supported_features": [
              8
            ]
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Long",
                  "value": "long"
                },
                {
                  "label": "Short",
                  "value": "short"
                }
              ]
            }
          },
          "name": "Flash",
          "description": "Tell light to flash, can be either value short or long."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "logbook": {
    "log": {
      "name": "Log",
      "description": "Creates a custom entry in the logbook.",
      "fields": {
        "name": {
          "required": true,
          "example": "Kitchen",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Custom name for an entity, can be referenced using an \u0060entity_id\u0060."
        },
        "message": {
          "required": true,
          "example": "is being used",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message of the logbook entry."
        },
        "entity_id": {
          "selector": {
            "entity": null
          },
          "name": "Entity ID",
          "description": "Entity to reference in the logbook entry."
        },
        "domain": {
          "example": "light",
          "selector": {
            "text": null
          },
          "name": "Domain",
          "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry."
        }
      }
    }
  },
  "counter": {
    "increment": {
      "name": "Increment",
      "description": "Increments a counter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements a counter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "reset": {
      "name": "Reset",
      "description": "Resets a counter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the counter value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The new counter value the entity should be set to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "configure": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "timer": {
    "reload": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "start": {
      "name": "Start",
      "description": "Starts a timer.",
      "fields": {
        "duration": {
          "example": "00:01:00 or 60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Duration the timer requires to finish. [optional]."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses a timer.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "cancel": {
      "name": "Cancel",
      "description": "Cancels a timer.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "finish": {
      "name": "Finish",
      "description": "Finishes a timer.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "change": {
      "name": "Change",
      "description": "Changes a timer.",
      "fields": {
        "duration": {
          "default": 0,
          "required": true,
          "example": "00:01:00, 60 or -60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Duration to add or subtract to the running timer."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    }
  },
  "webrtc": {
    "create_link": {
      "name": "Create Link",
      "description": "Create a temporary or permanent link to a stream (enter \u0022url\u0022 or \u0022entity\u0022)",
      "fields": {
        "link_id": {
          "description": "Create a random or permanent ID for your link",
          "example": "fd0a53ca-e9ab-4e7a-86a2-441642b16ae1",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "url": {
          "description": "Link to RTSP-stream",
          "example": "rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0",
          "selector": {
            "text": null
          }
        },
        "entity": {
          "description": "Camera entity",
          "example": "camera.generic_stream",
          "selector": {
            "entity": {
              "domain": "camera"
            }
          }
        },
        "open_limit": {
          "description": "How many times a link can be opened (0 - unlimit)",
          "example": 1,
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "times"
            }
          }
        },
        "time_to_live": {
          "description": "How many seconds will the link live (0 - unlimit)",
          "example": 60,
          "default": 60,
          "selector": {
            "number": {
              "min": 0,
              "max": 100000,
              "unit_of_measurement": "seconds"
            }
          }
        }
      }
    },
    "dash_cast": {
      "name": "DashCast",
      "description": "Cast stream to Chromecast device via DashCast application",
      "fields": {
        "entity_id": {
          "description": "Media player entity",
          "example": "media_player.mibox4",
          "required": true,
          "selector": {
            "entity": {
              "integration": "cast",
              "domain": "media_player"
            }
          }
        },
        "url": {
          "description": "Link to RTSP-stream",
          "example": "rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0",
          "selector": {
            "text": null
          }
        },
        "force": {
          "description": "Force restart DashCast application",
          "selector": {
            "boolean": null
          }
        },
        "entity": {
          "description": "Camera entity",
          "example": "camera.generic_stream",
          "selector": {
            "entity": {
              "domain": "camera"
            }
          }
        }
      }
    }
  },
  "schedule": {
    "reload": {
      "name": "Reload",
      "description": "Reloads schedules from the YAML-configuration.",
      "fields": {}
    }
  },
  "wake_on_lan": {
    "send_magic_packet": {
      "name": "Send magic packet",
      "description": "Sends a \u0027magic packet\u0027 to wake up a device with \u0027Wake-On-LAN\u0027 capabilities.",
      "fields": {
        "mac": {
          "required": true,
          "example": "aa:bb:cc:dd:ee:ff",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device to wake up."
        },
        "broadcast_address": {
          "example": "192.168.255.255",
          "selector": {
            "text": null
          },
          "name": "Broadcast address",
          "description": "Broadcast IP where to send the magic packet."
        },
        "broadcast_port": {
          "default": 9,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Broadcast port",
          "description": "Port where to send the magic packet."
        }
      }
    }
  },
  "climate": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns climate device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns climate device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_hvac_mode": {
      "name": "Set HVAC mode",
      "description": "Sets HVAC operation mode.",
      "fields": {
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "set_aux_heat": {
      "name": "Turn on/off auxiliary heater",
      "description": "Turns auxiliary heater on/off.",
      "fields": {
        "aux_heat": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Auxiliary heating",
          "description": "New value of auxiliary heater."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set target temperature",
      "description": "Sets target temperature.",
      "fields": {
        "temperature": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Temperature",
          "description": "Target temperature."
        },
        "target_temp_high": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Target temperature high",
          "description": "High target temperature."
        },
        "target_temp_low": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Target temperature low",
          "description": "Low target temperature."
        },
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              1,
              2
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set target humidity",
      "description": "Sets target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 30,
              "max": 99,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_fan_mode": {
      "name": "Set fan mode",
      "description": "Sets fan operation mode.",
      "fields": {
        "fan_mode": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan mode",
          "description": "Fan operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_swing_mode": {
      "name": "Set swing mode",
      "description": "Sets swing operation mode.",
      "fields": {
        "swing_mode": {
          "required": true,
          "example": "horizontal",
          "selector": {
            "text": null
          },
          "name": "Swing mode",
          "description": "Swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    }
  },
  "group": {
    "reload": {
      "name": "Reload",
      "description": "Reloads group configuration, entities, and notify services from YAML-configuration.",
      "fields": {}
    },
    "set": {
      "name": "Set",
      "description": "Creates/Updates a user group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "text": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        },
        "name": {
          "example": "My test group",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Name of the group."
        },
        "icon": {
          "example": "mdi:camera",
          "selector": {
            "icon": null
          },
          "name": "Icon",
          "description": "Name of the icon for the group."
        },
        "entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "object": null
          },
          "name": "Entities",
          "description": "List of all members in the group. Cannot be used in combination with \u0060Add entities\u0060 or \u0060Remove entities\u0060."
        },
        "add_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "object": null
          },
          "name": "Add entities",
          "description": "List of members to be added to the group. Cannot be used in combination with \u0060Entities\u0060 or \u0060Remove entities\u0060."
        },
        "remove_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "object": null
          },
          "name": "Remove entities",
          "description": "List of members to be removed from a group. Cannot be used in combination with \u0060Entities\u0060 or \u0060Add entities\u0060."
        },
        "all": {
          "selector": {
            "boolean": null
          },
          "name": "All",
          "description": "Enable this option if the group should only be used when all entities are in state \u0060on\u0060."
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Removes a group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "object": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        }
      }
    }
  },
  "scheduler": {
    "add": {
      "name": "Add",
      "description": "Create a new schedule entity",
      "fields": {
        "weekdays": {
          "name": "Weekdays",
          "description": "Days of the week for which the schedule should be repeated",
          "example": "[\u0022daily\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "start_date": {
          "name": "Start date",
          "description": "Date from which schedule should be executed",
          "example": "[\u00222021-01-01\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "end_date": {
          "name": "End date",
          "description": "Date until which schedule should be executed",
          "example": "[\u00222021-12-31\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "timeslots": {
          "name": "Timeslots",
          "description": "list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots)",
          "example": "[{start: \u002212:00\u0022, stop: \u002213:00\u0022, actions: [{service: \u0022light.turn_on\u0022, entity_id: \u0022light.my_lamp\u0022, service_data: {brightness: 200}}]}]",
          "required": true,
          "selector": {
            "object": null
          }
        },
        "repeat_type": {
          "name": "Repeat Type",
          "description": "Control what happens after the schedule is triggered",
          "example": "\u0022repeat\u0022",
          "required": true,
          "selector": {
            "select": {
              "options": [
                "repeat",
                "single",
                "pause"
              ]
            }
          }
        },
        "name": {
          "name": "Name",
          "description": "Friendly name for the schedule",
          "required": false,
          "example": "My schedule",
          "selector": {
            "text": null
          }
        }
      }
    },
    "edit": {
      "name": "Edit",
      "description": "Edit a schedule entity",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Identifier of the scheduler entity.",
          "example": "switch.schedule_abcdef",
          "required": true,
          "selector": {
            "entity": {
              "integration": "scheduler",
              "domain": "switch"
            }
          }
        },
        "weekdays": {
          "name": "Weekdays",
          "description": "Days of the week for which the schedule should be repeated",
          "example": "[\u0022daily\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "start_date": {
          "name": "Start date",
          "description": "Date from which schedule should be executed",
          "example": "[\u00222021-01-01\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "end_date": {
          "name": "End date",
          "description": "Date until which schedule should be executed",
          "example": "[\u00222021-12-31\u0022]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "timeslots": {
          "name": "Timeslots",
          "description": "list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots)",
          "example": "[{start: \u002212:00\u0022, stop: \u002213:00\u0022, actions: [{service: \u0022light.turn_on\u0022, entity_id: \u0022light.my_lamp\u0022, service_data: {brightness: 200}}]}]",
          "required": false,
          "selector": {
            "object": null
          }
        },
        "repeat_type": {
          "name": "Repeat Type",
          "description": "Control what happens after the schedule is triggered",
          "example": "\u0022repeat\u0022",
          "required": false,
          "selector": {
            "select": {
              "options": [
                "repeat",
                "single",
                "pause"
              ]
            }
          }
        },
        "name": {
          "name": "Name",
          "description": "Friendly name for the schedule",
          "required": false,
          "example": "My schedule",
          "selector": {
            "text": null
          }
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Remove a schedule entity",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Identifier of the scheduler entity.",
          "example": "switch.schedule_abcdef",
          "required": true,
          "selector": {
            "entity": {
              "integration": "scheduler",
              "domain": "switch"
            }
          }
        }
      }
    },
    "copy": {
      "name": "Copy",
      "description": "Duplicate a schedule entity",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Identifier of the scheduler entity.",
          "example": "switch.schedule_abcdef",
          "required": true,
          "selector": {
            "entity": {
              "integration": "scheduler",
              "domain": "switch"
            }
          }
        },
        "name": {
          "name": "Name",
          "description": "Friendly name for the copied schedule",
          "required": false,
          "example": "My schedule",
          "selector": {
            "text": null
          }
        }
      }
    },
    "run_action": {
      "name": "Run Action",
      "description": "Execute the action of a schedule, optionally at a given time.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Identifier of the scheduler entity.",
          "example": "switch.schedule_abcdef",
          "required": true,
          "selector": {
            "entity": {
              "integration": "scheduler",
              "domain": "switch"
            }
          }
        },
        "time": {
          "name": "Time",
          "description": "Time for which to evaluate the action (only useful for schedules with multiple timeslot)",
          "example": "\u002212:00\u0022",
          "required": false,
          "selector": {
            "time": null
          }
        }
      }
    }
  },
  "media_player": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a media player on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              384
            ]
          }
        ]
      }
    },
    "volume_up": {
      "name": "Turn up volume",
      "description": "Turns up the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "volume_down": {
      "name": "Turn down volume",
      "description": "Turns down the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "media_play_pause": {
      "name": "Play/Pause",
      "description": "Toggles play/pause.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16385
            ]
          }
        ]
      }
    },
    "media_play": {
      "name": "Play",
      "description": "Starts playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16384
            ]
          }
        ]
      }
    },
    "media_pause": {
      "name": "Pause",
      "description": "Pauses.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "media_stop": {
      "name": "Stop",
      "description": "Stops playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4096
            ]
          }
        ]
      }
    },
    "media_next_track": {
      "name": "Next",
      "description": "Selects the next track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "media_previous_track": {
      "name": "Previous",
      "description": "Selects the previous track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clear_playlist": {
      "name": "Clear playlist",
      "description": "Clears the playlist.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "volume_set": {
      "name": "Set volume",
      "description": "Sets the volume level.",
      "fields": {
        "volume_level": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Level",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "volume_mute": {
      "name": "Mute/unmute volume",
      "description": "Mutes or unmutes the media player.",
      "fields": {
        "is_volume_muted": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Muted",
          "description": "Defines whether or not it is muted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "media_seek": {
      "name": "Seek",
      "description": "Allows you to go to a different part of the media that is currently playing.",
      "fields": {
        "seek_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.01,
              "mode": "box"
            }
          },
          "name": "Position",
          "description": "Target position in the currently playing media. The format is platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "join": {
      "name": "Join",
      "description": "Groups media players together for synchronous playback. Only works on supported multiroom audio systems.",
      "fields": {
        "group_members": {
          "required": true,
          "example": "- media_player.multiroom_player2\n- media_player.multiroom_player3\n",
          "selector": {
            "entity": {
              "multiple": true,
              "domain": "media_player"
            }
          },
          "name": "Group members",
          "description": "The players which will be synced with the playback specified in \u0060target\u0060."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "select_source": {
      "name": "Select source",
      "description": "Sends the media player the command to change input source.",
      "fields": {
        "source": {
          "required": true,
          "example": "video1",
          "selector": {
            "text": null
          },
          "name": "Source",
          "description": "Name of the source to switch to. Platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2048
            ]
          }
        ]
      }
    },
    "select_sound_mode": {
      "name": "Select sound mode",
      "description": "Selects a specific sound mode.",
      "fields": {
        "sound_mode": {
          "example": "Music",
          "selector": {
            "text": null
          },
          "name": "Sound mode",
          "description": "Name of the sound mode to switch to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              65536
            ]
          }
        ]
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Starts playing specified media.",
      "fields": {
        "media_content_id": {
          "required": true,
          "example": "https://home-assistant.io/images/cast/splash.png",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to play. Platform dependent."
        },
        "media_content_type": {
          "required": true,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist."
        },
        "enqueue": {
          "filter": {
            "supported_features": [
              2097152
            ]
          },
          "required": false,
          "selector": {
            "select": {
              "options": [
                "play",
                "next",
                "add",
                "replace"
              ],
              "translation_key": "enqueue"
            }
          },
          "name": "Enqueue",
          "description": "If the content should be played now or be added to the queue."
        },
        "announce": {
          "filter": {
            "supported_features": [
              1048576
            ]
          },
          "required": false,
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Announce",
          "description": "If the media should be played as an announcement."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "shuffle_set": {
      "name": "Shuffle",
      "description": "Playback mode that selects the media in randomized order.",
      "fields": {
        "shuffle": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Shuffle",
          "description": "Whether or not shuffle mode is enabled."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32768
            ]
          }
        ]
      }
    },
    "unjoin": {
      "name": "Unjoin",
      "description": "Removes the player from a group. Only works on platforms which support player groups.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "repeat_set": {
      "name": "Repeat",
      "description": "Playback mode that plays the media in a loop.",
      "fields": {
        "repeat": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "off",
                "all",
                "one"
              ],
              "translation_key": "repeat"
            }
          },
          "name": "Repeat mode",
          "description": "Repeat mode to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              262144
            ]
          }
        ]
      }
    }
  },
  "zone": {
    "reload": {
      "name": "Reload",
      "description": "Reloads zones from the YAML-configuration.",
      "fields": {}
    }
  },
  "input_datetime": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_datetime": {
      "name": "Set",
      "description": "Sets the date and/or time.",
      "fields": {
        "date": {
          "example": "\u00222019-04-20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date",
          "description": "The target date."
        },
        "time": {
          "example": "\u002205:04:20\u0022",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The target time."
        },
        "datetime": {
          "example": "\u00222019-04-20 05:04:20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date \u0026 time",
          "description": "The target date \u0026 time."
        },
        "timestamp": {
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Timestamp",
          "description": "The target date \u0026 time, expressed by a UNIX timestamp."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_datetime"
            ]
          }
        ]
      }
    }
  },
  "input_text": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "This is an example text",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_text"
            ]
          }
        ]
      }
    }
  },
  "input_button": {
    "reload": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "press": {
      "name": "Press",
      "description": "Mimics the physical button press on the device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_button"
            ]
          }
        ]
      }
    }
  },
  "input_select": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Select the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "set_options": {
      "name": "Set options",
      "description": "Sets the options.",
      "fields": {
        "options": {
          "required": true,
          "example": "[\u0022Item A\u0022, \u0022Item B\u0022, \u0022Item C\u0022]",
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "List of options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    }
  },
  "camera": {
    "enable_motion_detection": {
      "name": "Enable motion detection",
      "description": "Enables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "disable_motion_detection": {
      "name": "Disable motion detection",
      "description": "Disables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "snapshot": {
      "name": "Take snapshot",
      "description": "Takes a snapshot from a camera.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Template of a filename. Variable available is \u0060entity_id\u0060."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "play_stream": {
      "name": "Play stream",
      "description": "Plays the camera stream on a supported media player.",
      "fields": {
        "media_player": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player",
          "description": "Media players to stream to."
        },
        "format": {
          "default": "hls",
          "selector": {
            "select": {
              "options": [
                "hls"
              ]
            }
          },
          "name": "Format",
          "description": "Stream format supported by the media player."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "record": {
      "name": "Record",
      "description": "Creates a recording of a live camera feed.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Template of a filename. Variable available is \u0060entity_id\u0060. Must be mp4."
        },
        "duration": {
          "default": 30,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Planned duration of the recording. The actual duration may vary."
        },
        "lookback": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Lookback",
          "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    }
  },
  "input_number": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.001,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "increment": {
      "name": "Increment",
      "description": "Increments the value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    }
  },
  "input_boolean": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the helper on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    }
  },
  "device_tracker": {
    "see": {
      "name": "See",
      "description": "Records a seen tracked device.",
      "fields": {
        "mac": {
          "example": "FF:FF:FF:FF:FF:FF",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device."
        },
        "dev_id": {
          "example": "phonedave",
          "selector": {
            "text": null
          },
          "name": "Device ID",
          "description": "ID of the device (find the ID in \u0060known_devices.yaml\u0060)."
        },
        "host_name": {
          "example": "Dave",
          "selector": {
            "text": null
          },
          "name": "Hostname",
          "description": "Hostname of the device."
        },
        "location_name": {
          "example": "home",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "Name of the location where the device is located. The options are: \u0060home\u0060, \u0060not_home\u0060, or the name of the zone."
        },
        "gps": {
          "example": "[51.509802, -0.086692]",
          "selector": {
            "object": null
          },
          "name": "GPS coordinates",
          "description": "GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539])."
        },
        "gps_accuracy": {
          "selector": {
            "number": {
              "min": 1,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "GPS accuracy",
          "description": "Accuracy of the GPS coordinates."
        },
        "battery": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Battery level",
          "description": "Battery level of the device."
        }
      }
    }
  },
  "scene": {
    "reload": {
      "name": "Reload",
      "description": "Reloads the scenes from the YAML-configuration.",
      "fields": {}
    },
    "apply": {
      "name": "Apply",
      "description": "Activates a scene with configuration.",
      "fields": {
        "entities": {
          "required": true,
          "example": "light.kitchen: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 80\n",
          "selector": {
            "object": null
          },
          "name": "Entities state",
          "description": "List of entities and their target state."
        },
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      }
    },
    "create": {
      "name": "Create",
      "description": "Creates a new scene.",
      "fields": {
        "scene_id": {
          "required": true,
          "example": "all_lights",
          "selector": {
            "text": null
          },
          "name": "Scene entity ID",
          "description": "The entity ID of the new scene."
        },
        "entities": {
          "example": "light.tv_back_light: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 200\n",
          "selector": {
            "object": null
          },
          "name": "Entities state",
          "description": "List of entities and their target state. If your entities are already in the target state right now, use \u0060snapshot_entities\u0060 instead."
        },
        "snapshot_entities": {
          "example": "- light.ceiling\n- light.kitchen\n",
          "selector": {
            "object": null
          },
          "name": "Snapshot entities",
          "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the \u0060snapshot_entities\u0060 with \u0060entities\u0060."
        }
      }
    },
    "turn_on": {
      "name": "Activate",
      "description": "Activates a scene.",
      "fields": {
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "scene"
            ]
          }
        ]
      }
    }
  },
  "script": {
    "activate_alexa_actionable_notification": {
      "name": "activate_alexa_actionable_notification",
      "description": "Activates an actionable notification on a specific echo device",
      "fields": {
        "text": {
          "description": "The text you would like alexa to speak.",
          "example": "What would you like the thermostat set to?",
          "advanced": false,
          "required": false
        },
        "event_id": {
          "description": "Correlation ID for event responses",
          "example": "ask_for_temperature",
          "advanced": false,
          "required": false
        },
        "alexa_device": {
          "description": "Alexa device you want to trigger",
          "example": "media_player.bedroom_echo",
          "advanced": false,
          "required": false
        }
      },
      "response": {
        "optional": true
      }
    },
    "arrive_home": {
      "name": "arrive_home",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "im_text": {
      "name": "im_text",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "play_youtube_on_lg": {
      "name": "Play YouTube on LG",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "ring_mqtt_interval": {
      "name": "Set Ring Mqtt Snapshot Interval",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "tts": {
      "name": "tts",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "tts_text": {
      "name": "tts_text",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "turn_on_lg_tele_lounge": {
      "name": "turn_on_lg_tele_lounge",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "turn_on_lg_tele_master": {
      "name": "turn_on_lg_tele_master",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "weather": {
      "name": "weather",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads all the available scripts.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Runs the sequence of actions defined in a script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Stops a running script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle a script. Starts it, if isn\u0027t running, stops it otherwise.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    }
  },
  "wiser": {
    "get_schedule": {
      "name": "Save Schedule to File",
      "description": "Read the schedule from a room or device and write to an output file in yaml\n",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser entity",
          "required": true,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        },
        "filename": {
          "name": "Filename",
          "description": "The filename to write out the yaml. See README.MD if running within a docker container\n",
          "required": false,
          "example": "config/schedules/{{ entity_id.name }}.yaml",
          "selector": {
            "text": null
          }
        }
      }
    },
    "set_schedule": {
      "name": "Set Schedule From File",
      "description": "Read in the yaml schedule file and set the schedule",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser entity",
          "required": true,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        },
        "filename": {
          "name": "Filename",
          "description": "The filename to read the yaml schedule from.",
          "required": true,
          "example": "schedules/schedule1.yaml",
          "selector": {
            "text": null
          }
        }
      }
    },
    "set_schedule_from_string": {
      "name": "Set Schedule From String",
      "description": "Set a schedule from a template supported string",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser entity",
          "required": true,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        },
        "schedule": {
          "name": "Schedule",
          "description": "The schedule data (supports templates)",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "copy_schedule": {
      "name": "Copy Schedule",
      "description": "Copy the schedule from one to another in the same type",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser entity",
          "required": true,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        },
        "to_entity_id": {
          "name": "To Entity",
          "description": "Enter the entity_id for the room to copy the schedule to.",
          "required": true,
          "example": "climate.wiser_kitchen",
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        }
      }
    },
    "assign_schedule": {
      "name": "Assign Schedule",
      "description": "Assign the schedule to other rooms or devices in the same type",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser entity",
          "required": false,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        },
        "schedule_id": {
          "name": "Schedule Id",
          "description": "A wiser schedule id",
          "required": false,
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "schedule_name": {
          "name": "Schedule Name",
          "description": "A wiser schedule name",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "to_entity_id": {
          "name": "To Entity",
          "description": "Enter the entity_id for the room or device to assign the same schedule to.",
          "required": true,
          "example": "climate.wiser_kitchen",
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": [
                "climate",
                "select"
              ]
            }
          }
        }
      }
    },
    "set_device_mode": {
      "name": "Set Device Mode",
      "description": "Sets the device mode to auto or manual",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "A wiser mode entity",
          "required": true,
          "selector": {
            "entity": {
              "integration": "wiser",
              "domain": "select"
            }
          }
        },
        "mode": {
          "name": "Mode",
          "description": "Enter the mode which can be manual or auto.",
          "required": true,
          "example": "auto",
          "selector": {
            "select": {
              "options": [
                "Auto",
                "Manual"
              ]
            }
          }
        }
      }
    },
    "boost_hotwater": {
      "name": "Boost Hot Water",
      "description": "Boost the hot water for time specified\n",
      "fields": {
        "time_period": {
          "name": "Time period",
          "description": "Set the time period for the boost",
          "example": 60,
          "default": 60,
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 1440,
              "step": 1,
              "mode": "box",
              "unit_of_measurement": "minutes"
            }
          }
        },
        "hub": {
          "name": "Hub",
          "description": "Only needs to be set if you have multiple Wiser hubs",
          "required": false,
          "selector": {
            "config_entry": {
              "integration": "wiser"
            }
          }
        }
      }
    },
    "set_opentherm_parameter": {
      "name": "Set Opentherm Parameter",
      "description": "Allows changing of opentherm parameters on the Wiser Hub",
      "fields": {
        "endpoint": {
          "name": "Endpoint",
          "description": "Endpoint if not at opentherm root.  Ie. preDefinedRemoteBoilerParameters",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "parameter": {
          "name": "Parameter",
          "description": "Parameter to change",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "parameter_value": {
          "name": "Value",
          "description": "Parameter value to set",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "hub": {
          "name": "Hub",
          "description": "Only needs to be set if you have multiple Wiser hubs",
          "required": false,
          "selector": {
            "config_entry": {
              "integration": "wiser"
            }
          }
        }
      }
    },
    "boost_heating": {
      "name": "Boost Heating",
      "description": "Boost the temperature in the selected rooms/areas\n",
      "fields": {
        "time_period": {
          "name": "Time period",
          "description": "Set the time period for the boost in minutes",
          "example": 60,
          "default": 60,
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 9999,
              "step": 1,
              "mode": "box"
            }
          }
        },
        "temperature_delta": {
          "name": "Temperature Increase",
          "description": "Set the increase in temperature for the boost period",
          "example": 3.0,
          "default": 3.0,
          "required": false,
          "selector": {
            "number": {
              "min": 0.5,
              "max": 5,
              "step": 0.5,
              "unit_of_measurement": "\u00B0C"
            }
          }
        },
        "temperature": {
          "name": "Temperature",
          "description": "Set the room target temperature for the boost period",
          "example": 21.0,
          "default": 21.0,
          "required": false,
          "selector": {
            "number": {
              "min": 5,
              "max": 30,
              "step": 0.5,
              "unit_of_measurement": "\u00B0C"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "wiser",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    }
  },
  "ping": {
    "reload": {
      "name": "Reload",
      "description": "Reloads ping sensors from the YAML-configuration.",
      "fields": {}
    }
  },
  "button": {
    "press": {
      "name": "Press",
      "description": "Press the button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "button"
            ]
          }
        ]
      }
    }
  },
  "number": {
    "set_value": {
      "name": "Set",
      "description": "Sets the value of a number.",
      "fields": {
        "value": {
          "example": 42,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    }
  },
  "cover": {
    "open_cover": {
      "name": "Open",
      "description": "Opens a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "close_cover": {
      "name": "Close",
      "description": "Closes a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_cover_position": {
      "name": "Set position",
      "description": "Moves a cover to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "stop_cover": {
      "name": "Stop",
      "description": "Stops the cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a cover open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    },
    "open_cover_tilt": {
      "name": "Open tilt",
      "description": "Tilts a cover open.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "close_cover_tilt": {
      "name": "Close tilt",
      "description": "Tilts a cover to close.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "stop_cover_tilt": {
      "name": "Stop tilt",
      "description": "Stops a tilting cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_cover_tilt_position": {
      "name": "Set tilt position",
      "description": "Moves a cover tilt to a specific position.",
      "fields": {
        "tilt_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Tilt position",
          "description": "Target tilt positition."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle_cover_tilt": {
      "name": "Toggle tilt",
      "description": "Toggles a cover tilt open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              48
            ]
          }
        ]
      }
    }
  },
  "mqtt": {
    "publish": {
      "name": "Publish",
      "description": "Publishes a message to an MQTT topic.",
      "fields": {
        "topic": {
          "required": true,
          "example": "/homeassistant/hello",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to publish to."
        },
        "payload": {
          "example": "This is great",
          "selector": {
            "text": null
          },
          "name": "Payload",
          "description": "The payload to publish."
        },
        "payload_template": {
          "advanced": true,
          "example": "{{ states(\u0027sensor.temperature\u0027) }}",
          "selector": {
            "object": null
          },
          "name": "Payload template",
          "description": "Template to render as a payload value. If a payload is provided, the template is ignored."
        },
        "qos": {
          "advanced": true,
          "default": 0,
          "selector": {
            "select": {
              "options": [
                "0",
                "1",
                "2"
              ]
            }
          },
          "name": "QoS",
          "description": "Quality of Service to use. O. At most once. 1: At least once. 2: Exactly once."
        },
        "retain": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Retain",
          "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic."
        }
      }
    },
    "dump": {
      "name": "Export",
      "description": "Writes all messages on a specific topic into the \u0060mqtt_dump.txt\u0060 file in your configuration folder.",
      "fields": {
        "topic": {
          "example": "OpenZWave/#",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to listen to."
        },
        "duration": {
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "How long we should listen for messages in seconds."
        }
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads MQTT entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "update": {
    "install": {
      "name": "Install update",
      "description": "Installs an update for this device or service.",
      "fields": {
        "version": {
          "required": false,
          "example": "1.0.0",
          "selector": {
            "text": null
          },
          "name": "Version",
          "description": "The version to install. If omitted, the latest version will be installed."
        },
        "backup": {
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Backup",
          "description": "If supported by the integration, this creates a backup before starting the update ."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "skip": {
      "name": "Skip update",
      "description": "Marks currently available update as skipped.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "clear_skipped": {
      "name": "Clear skipped update",
      "description": "Removes the skipped version marker from an update.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    }
  },
  "utility_meter": {
    "reset": {
      "name": "Reset",
      "description": "Resets all counters of a utility meter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "calibrate": {
      "name": "Calibrate",
      "description": "Calibrates a utility meter sensor.",
      "fields": {
        "value": {
          "example": "100",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Value to which set the meter."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "integration": "utility_meter"
          }
        ]
      }
    }
  },
  "alarm_control_panel": {
    "alarm_disarm": {
      "name": "Disarm",
      "description": "Disarms the alarm.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to disarm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_home": {
      "name": "Arm home",
      "description": "Sets the alarm to: _armed, but someone is home_.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "alarm_arm_away": {
      "name": "Arm away",
      "description": "Sets the alarm to: _armed, no one home_.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "alarm_arm_night": {
      "name": "Arm night",
      "description": "Sets the alarm to: _armed for the night_.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "alarm_arm_vacation": {
      "name": "Arm vacation",
      "description": "Sets the alarm to: _armed for vacation_.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "alarm_arm_custom_bypass": {
      "name": "Arm with custom bypass",
      "description": "Arms the alarm while allowing to bypass a custom area.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "alarm_trigger": {
      "name": "Trigger",
      "description": "Enables an external alarm trigger.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "humidifier": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the humidifier on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the humidifier off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the humidifier on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "set_mode": {
      "name": "Set mode",
      "description": "Sets the humidifier operation mode.",
      "fields": {
        "mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Mode",
          "description": "Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set humidity",
      "description": "Sets the target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    }
  },
  "fan": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns fan on.",
      "fields": {
        "percentage": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        },
        "preset_mode": {
          "example": "auto",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns fan off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the fan on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "increase_speed": {
      "name": "Increase speed",
      "description": "Increases the speed of the fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Increment",
          "description": "Increases the speed by a percentage step."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "decrease_speed": {
      "name": "Decrease speed",
      "description": "Decreases the speed of the fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Decrement",
          "description": "Decreases the speed by a percentage step."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "oscillate": {
      "name": "Oscillate",
      "description": "Controls oscillatation of the fan.",
      "fields": {
        "oscillating": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Oscillating",
          "description": "Turn on/off oscillation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_direction": {
      "name": "Set direction",
      "description": "Sets the fan rotation direction.",
      "fields": {
        "direction": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "forward",
                "reverse"
              ],
              "translation_key": "direction"
            }
          },
          "name": "Direction",
          "description": "Direction to rotate."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_percentage": {
      "name": "Set speed",
      "description": "Sets the fan speed.",
      "fields": {
        "percentage": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "siren": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the siren on.",
      "fields": {
        "tone": {
          "example": "fire",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Tone",
          "description": "The tone to emit. When \u0060available_tones\u0060 property is a map, either the key or the value can be used. Must be supported by the integration."
        },
        "volume_level": {
          "example": 0.5,
          "filter": {
            "supported_features": [
              8
            ]
          },
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.05
            }
          },
          "name": "Volume",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration."
        },
        "duration": {
          "example": 15,
          "filter": {
            "supported_features": [
              16
            ]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Number of seconds the sound is played. Must be supported by the integration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the siren off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the siren on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    }
  },
  "lock": {
    "unlock": {
      "name": "Unlock",
      "description": "Unlocks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to unlock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Locks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to lock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "open": {
      "name": "Open",
      "description": "Opens a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to open the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    }
  },
  "water_heater": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns water heater on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns water heater off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_away_mode": {
      "name": "Set away mode",
      "description": "Turns away mode on/off.",
      "fields": {
        "away_mode": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Away mode",
          "description": "New value of away mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set temperature",
      "description": "Sets the target temperature.",
      "fields": {
        "temperature": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "\u00B0"
            }
          },
          "name": "Temperature",
          "description": "New target temperature for the water heater."
        },
        "operation_mode": {
          "example": "eco",
          "selector": {
            "text": null
          },
          "name": "Operation mode",
          "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_operation_mode": {
      "name": "Set operation mode",
      "description": "Sets the operation mode.",
      "fields": {
        "operation_mode": {
          "required": true,
          "example": "eco",
          "selector": {
            "text": null
          },
          "name": "Operation mode",
          "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    }
  },
  "vacuum": {
    "turn_on": {
      "name": "Turn on",
      "description": "Starts a new cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Stops the current cleaning task and returns to its dock.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "start_pause": {
      "name": "Start/pause",
      "description": "Starts, pauses, or resumes the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "start": {
      "name": "Start",
      "description": "Starts or resumes the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "return_to_base": {
      "name": "Return to dock",
      "description": "Tells the vacuum cleaner to return to its dock.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clean_spot": {
      "name": "Clean spot",
      "description": "Tells the vacuum cleaner to do a spot clean-up.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "locate": {
      "name": "Locate",
      "description": "Locates the vacuum cleaner robot.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops the current cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_fan_speed": {
      "name": "Set fan speed",
      "description": "Sets the fan speed of the vacuum cleaner.",
      "fields": {
        "fan_speed": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan speed",
          "description": "Fan speed. The value depends on the integration. Some integrations have speed steps, like \u0027medium\u0027. Some use a percentage, between 0 and 100."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command to the vacuum cleaner.",
      "fields": {
        "command": {
          "required": true,
          "example": "set_dnd_timer",
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Command to execute. The commands are integration-specific."
        },
        "params": {
          "example": "{ \u0022key\u0022: \u0022value\u0022 }",
          "selector": {
            "object": null
          },
          "name": "Parameters",
          "description": "Parameters for the command. The parameters are integration-specific."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    }
  },
  "text": {
    "set_value": {
      "name": "Set value",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "Hello world!",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Enter your text."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "text"
            ]
          }
        ]
      }
    }
  },
  "netdaemon": {
    "register_service": {
      "name": "",
      "description": "Register a new service for netdaemon, used by the daemon and not to be used by users",
      "fields": {
        "service": {
          "description": "The name of the service to register"
        },
        "class": {
          "description": "The class that implements the service call"
        },
        "method": {
          "description": "The method to call"
        }
      }
    },
    "reload_apps": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "entity_create": {
      "name": "",
      "description": "Create an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_update": {
      "name": "",
      "description": "Update an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_remove": {
      "name": "",
      "description": "Remove an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        }
      }
    }
  },
  "ffmpeg": {
    "start": {
      "name": "Start",
      "description": "Sends a start command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will start. Platform dependent."
        }
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Sends a stop command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will stop. Platform dependent."
        }
      }
    },
    "restart": {
      "name": "Restart",
      "description": "Sends a restart command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will restart. Platform dependent."
        }
      }
    }
  },
  "calendar": {
    "create_event": {
      "name": "Create event",
      "description": "Adds a new calendar event.",
      "fields": {
        "summary": {
          "required": true,
          "example": "Department Party",
          "selector": {
            "text": null
          },
          "name": "Summary",
          "description": "Defines the short summary or subject for the event."
        },
        "description": {
          "example": "Meeting to provide technical review for \u0027Phoenix\u0027 design.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the event than the one provided by the summary."
        },
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "The date and time the event should start."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "The date and time the event should end."
        },
        "start_date": {
          "example": "2022-03-22",
          "selector": {
            "date": null
          },
          "name": "Start date",
          "description": "The date the all-day event should start."
        },
        "end_date": {
          "example": "2022-03-23",
          "selector": {
            "date": null
          },
          "name": "End date",
          "description": "The date the all-day event should end (exclusive)."
        },
        "in": {
          "example": "{\u0022days\u0022: 2} or {\u0022weeks\u0022: 2}",
          "name": "In",
          "description": "Days or weeks that you want to create the event in."
        },
        "location": {
          "example": "Conference Room - F123, Bldg. 002",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "The location of the event."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "list_events": {
      "name": "List event",
      "description": "Lists events on a calendar within a time range.",
      "fields": {
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "Returns active events after this time (exclusive). When not set, defaults to now."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "Returns active events before this time (exclusive). Cannot be used with \u0027duration\u0027."
        },
        "duration": {
          "selector": {
            "duration": null
          },
          "name": "Duration",
          "description": "Returns active events from start_date_time until the specified duration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "tts": {
    "google_translate_say": {
      "name": "Say a TTS message with google_translate",
      "description": "Say something using text-to-speech on a media player with google_translate.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "speak": {
      "name": "Speak",
      "description": "Speaks something using text-to-speech on a media player.",
      "fields": {
        "media_player_entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player entity",
          "description": "Media players to play the message."
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The text you want to convert into speech so that you can listen to it on your device."
        },
        "cache": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cache",
          "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly."
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to use for speech generation."
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "A dictionary containing integration-specific options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "tts"
            ]
          }
        ]
      }
    },
    "clear_cache": {
      "name": "Clear TTS cache",
      "description": "Removes all cached text-to-speech files and purges the memory.",
      "fields": {}
    },
    "cloud_say": {
      "name": "Say a TTS message with cloud",
      "description": "Say something using text-to-speech on a media player with cloud.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "telegram_bot": {
    "send_message": {
      "name": "Send message",
      "description": "Sends a notification.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Optional title for your notification. Will be composed as \u0027%title\n%message\u0027."
        },
        "target": {
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          },
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the notification to. If not present, first allowed chat_id is the default."
        },
        "parse_mode": {
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          },
          "name": "Parse mode",
          "description": "Parser for the message text."
        },
        "disable_notification": {
          "selector": {
            "boolean": null
          },
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound."
        },
        "disable_web_page_preview": {
          "selector": {
            "boolean": null
          },
          "name": "Disable web page preview",
          "description": "Disables link previews for links in the message."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for send message. Will help with timeout errors (poor internet connection, etc)s."
        },
        "keyboard": {
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          },
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard. Empty list clears a previously set keyboard."
        },
        "inline_keyboard": {
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [\u0022Text button1:/button1, Text button2:/button2\u0022, \u0022Text button3:/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        },
        "message_tag": {
          "example": "msg_to_edit",
          "selector": {
            "text": null
          },
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}."
        }
      }
    },
    "send_photo": {
      "name": "Send photo",
      "description": "Sends a photo.",
      "fields": {
        "url": {
          "example": "http://example.org/path/to/the/image.png",
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "Remote path to an image."
        },
        "file": {
          "example": "/path/to/the/image.png",
          "selector": {
            "text": null
          },
          "name": "File",
          "description": "Local path to an image."
        },
        "caption": {
          "example": "My image",
          "selector": {
            "text": null
          },
          "name": "Caption",
          "description": "The title of the image."
        },
        "username": {
          "example": "myuser",
          "selector": {
            "text": null
          },
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication."
        },
        "password": {
          "example": "myuser_pwd",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication."
        },
        "authentication": {
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          },
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060."
        },
        "target": {
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          },
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default."
        },
        "parse_mode": {
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          },
          "name": "Parse mode",
          "description": "Parser for the message text."
        },
        "disable_notification": {
          "selector": {
            "boolean": null
          },
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound."
        },
        "verify_ssl": {
          "selector": {
            "boolean": null
          },
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for send photo. Will help with timeout errors (poor internet connection, etc)."
        },
        "keyboard": {
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          },
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard."
        },
        "inline_keyboard": {
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        },
        "message_tag": {
          "example": "msg_to_edit",
          "selector": {
            "text": null
          },
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}."
        }
      }
    },
    "send_sticker": {
      "name": "Send sticker",
      "description": "Sends a sticker.",
      "fields": {
        "url": {
          "example": "http://example.org/path/to/the/sticker.webp",
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "Remote path to a static .webp or animated .tgs sticker."
        },
        "file": {
          "example": "/path/to/the/sticker.webp",
          "selector": {
            "text": null
          },
          "name": "File",
          "description": "Local path to a static .webp or animated .tgs sticker."
        },
        "sticker_id": {
          "example": "CAACAgIAAxkBAAEDDldhZD-hqWclr6krLq-FWSfCrGNmOQAC9gAD9HsZAAFeYY-ltPYnrCEE",
          "selector": {
            "text": null
          },
          "name": "Sticker ID",
          "description": "ID of a sticker that exists on telegram servers."
        },
        "username": {
          "example": "myuser",
          "selector": {
            "text": null
          },
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication."
        },
        "password": {
          "example": "myuser_pwd",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication."
        },
        "authentication": {
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          },
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060."
        },
        "target": {
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          },
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default."
        },
        "disable_notification": {
          "selector": {
            "boolean": null
          },
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound."
        },
        "verify_ssl": {
          "selector": {
            "boolean": null
          },
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for send sticker. Will help with timeout errors (poor internet connection, etc)."
        },
        "keyboard": {
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          },
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard."
        },
        "inline_keyboard": {
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        },
        "message_tag": {
          "example": "msg_to_edit",
          "selector": {
            "text": null
          },
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}."
        }
      }
    },
    "send_animation": {
      "name": "Send animation",
      "description": "Sends an animation.",
      "fields": {
        "url": {
          "example": "http://example.org/path/to/the/animation.gif",
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "Remote path to a GIF or H.264/MPEG-4 AVC video without sound."
        },
        "file": {
          "example": "/path/to/the/animation.gif",
          "selector": {
            "text": null
          },
          "name": "File",
          "description": "Local path to a GIF or H.264/MPEG-4 AVC video without sound."
        },
        "caption": {
          "example": "My animation",
          "selector": {
            "text": null
          },
          "name": "Caption",
          "description": "The title of the animation."
        },
        "username": {
          "example": "myuser",
          "selector": {
            "text": null
          },
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication."
        },
        "password": {
          "example": "myuser_pwd",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication."
        },
        "authentication": {
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          },
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060."
        },
        "target": {
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          },
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default."
        },
        "parse_mode": {
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          },
          "name": "Parse Mode",
          "description": "Parser for the message text."
        },
        "disable_notification": {
          "selector": {
            "boolean": null
          },
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound."
        },
        "verify_ssl": {
          "selector": {
            "boolean": null
          },
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for send sticker. Will help with timeout errors (poor internet connection, etc)."
        },
        "keyboard": {
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          },
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard."
        },
        "inline_keyboard": {
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        }
      }
    },
    "send_video": {
      "name": "Send video",
      "description": "Sends a video.",
      "fields": {
        "url": {
          "example": "http://example.org/path/to/the/video.mp4",
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "Remote path to a video."
        },
        "file": {
          "example": "/path/to/the/video.mp4",
          "selector": {
            "text": null
          },
          "name": "File",
          "description": "Local path to a video."
        },
        "caption": {
          "example": "My video",
          "selector": {
            "text": null
          },
          "name": "Caption",
          "description": "The title of the video."
        },
        "username": {
          "example": "myuser",
          "selector": {
            "text": null
          },
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication."
        },
        "password": {
          "example": "myuser_pwd",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication."
        },
        "authentication": {
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          },
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060."
        },
        "target": {
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          },
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default."
        },
        "parse_mode": {
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          },
          "name": "Parse mode",
          "description": "Parser for the message text."
        },
        "disable_notification": {
          "selector": {
            "boolean": null
          },
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound."
        },
        "verify_ssl": {
          "selector": {
            "boolean": null
          },
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for send video. Will help with timeout errors (poor internet connection, etc)."
        },
        "keyboard": {
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          },
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard."
        },
        "inline_keyboard": {
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        },
        "message_tag": {
          "example": "msg_to_edit",
          "selector": {
            "text": null
          },
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}."
        }
      }
    },
    "send_voice": {
      "name": "Send voice",
      "description": "Sends a voice message.",
      "fields": {
        "url": {
          "example": "http://example.org/path/to/the/voice.opus",
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "Remote path to a voice message."
        },
        "file": {
          "example": "/path/to/the/voice.opus",
          "selector": {
            "text": null
          },
          "name": "File",
          "description": "Local path to a voice message."
        },
        "caption": {
          "example": "My microphone recording",
          "selector": {
            "text": null
          },
          "name": "Caption",
          "description": "The title of the voice message."
        },
        "username": {
          "example": "myuser",
          "selector": {
            "text": null
          },
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication."
        },
        "password": {
          "example": "myuser_pwd",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication."
        },
        "authentication": {
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          },
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060."
        },
        "target": {
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          },
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default."
        },
        "disable_notification": {
          "selector": {
            "boolean": null
          },
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound."
        },
        "verify_ssl": {
          "selector": {
            "boolean": null
          },
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for send voice. Will help with timeout errors (poor internet connection, etc)."
        },
        "keyboard": {
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          },
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard."
        },
        "inline_keyboard": {
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        },
        "message_tag": {
          "example": "msg_to_edit",
          "selector": {
            "text": null
          },
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}."
        }
      }
    },
    "send_document": {
      "name": "Send document",
      "description": "Sends a document.",
      "fields": {
        "url": {
          "example": "http://example.org/path/to/the/document.odf",
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "Remote path to a document."
        },
        "file": {
          "example": "/tmp/whatever.odf",
          "selector": {
            "text": null
          },
          "name": "File",
          "description": "Local path to a document."
        },
        "caption": {
          "example": "Document Title xy",
          "selector": {
            "text": null
          },
          "name": "Caption",
          "description": "The title of the document."
        },
        "username": {
          "example": "myuser",
          "selector": {
            "text": null
          },
          "name": "Username",
          "description": "Username for a URL which require HTTP authentication."
        },
        "password": {
          "example": "myuser_pwd",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password (or bearer token) for a URL which require HTTP authentication."
        },
        "authentication": {
          "default": "digest",
          "selector": {
            "select": {
              "options": [
                "digest",
                "bearer_token"
              ]
            }
          },
          "name": "Authentication method",
          "description": "Define which authentication method to use. Set to \u0060digest\u0060 to use HTTP digest authentication, or \u0060bearer_token\u0060 for OAuth 2.0 bearer token authentication. Defaults to \u0060basic\u0060."
        },
        "target": {
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          },
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default."
        },
        "parse_mode": {
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          },
          "name": "Parse mode",
          "description": "Parser for the message text."
        },
        "disable_notification": {
          "selector": {
            "boolean": null
          },
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound."
        },
        "verify_ssl": {
          "selector": {
            "boolean": null
          },
          "name": "Verify SSL",
          "description": "Enable or disable SSL certificate verification. Set to false if you\u0027re downloading the file from a URL and you don\u0027t want to validate the SSL certificate of the server."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for send document. Will help with timeout errors (poor internet connection, etc)."
        },
        "keyboard": {
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          },
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard."
        },
        "inline_keyboard": {
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        },
        "message_tag": {
          "example": "msg_to_edit",
          "selector": {
            "text": null
          },
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}."
        }
      }
    },
    "send_location": {
      "name": "Send location",
      "description": "Sends a location.",
      "fields": {
        "latitude": {
          "required": true,
          "selector": {
            "number": {
              "min": -90,
              "max": 90,
              "step": 0.001,
              "unit_of_measurement": "\u00B0"
            }
          },
          "name": "Latitude",
          "description": "The latitude to send."
        },
        "longitude": {
          "required": true,
          "selector": {
            "number": {
              "min": -180,
              "max": 180,
              "step": 0.001,
              "unit_of_measurement": "\u00B0"
            }
          },
          "name": "Longitude",
          "description": "The longitude to send."
        },
        "target": {
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          },
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default."
        },
        "disable_notification": {
          "selector": {
            "boolean": null
          },
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for send photo. Will help with timeout errors (poor internet connection, etc)."
        },
        "keyboard": {
          "example": "[\u0022/command1, /command2\u0022, \u0022/command3\u0022]",
          "selector": {
            "object": null
          },
          "name": "Keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom keyboard."
        },
        "inline_keyboard": {
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        },
        "message_tag": {
          "example": "msg_to_edit",
          "selector": {
            "text": null
          },
          "name": "Message tag",
          "description": "Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}}."
        }
      }
    },
    "send_poll": {
      "name": "Send poll",
      "description": "Sends a poll.",
      "fields": {
        "target": {
          "example": "[12345, 67890] or 12345",
          "selector": {
            "object": null
          },
          "name": "Target",
          "description": "An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default."
        },
        "question": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Question",
          "description": "Poll question, 1-300 characters."
        },
        "options": {
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "List of answer options, 2-10 strings 1-100 characters each."
        },
        "is_anonymous": {
          "selector": {
            "boolean": null
          },
          "name": "Is anonymous",
          "description": "If the poll needs to be anonymous, defaults to True."
        },
        "allows_multiple_answers": {
          "selector": {
            "boolean": null
          },
          "name": "Allow multiple answers",
          "description": "If the poll allows multiple answers, defaults to False."
        },
        "open_period": {
          "selector": {
            "number": {
              "min": 5,
              "max": 600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Open period",
          "description": "Amount of time in seconds the poll will be active after creation, 5-600."
        },
        "disable_notification": {
          "selector": {
            "boolean": null
          },
          "name": "Disable notification",
          "description": "Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for send poll. Will help with timeout errors (poor internet connection, etc)."
        }
      }
    },
    "edit_message": {
      "name": "Edit message",
      "description": "Edits a previously sent message.",
      "fields": {
        "message_id": {
          "required": true,
          "example": "{{ trigger.event.data.message.message_id }}",
          "selector": {
            "text": null
          },
          "name": "Message ID",
          "description": "Id of the message to edit."
        },
        "chat_id": {
          "required": true,
          "example": 12345,
          "selector": {
            "text": null
          },
          "name": "Chat ID",
          "description": "The chat_id where to edit the message."
        },
        "message": {
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Optional title for your notification. Will be composed as \u0027%title\n%message\u0027."
        },
        "parse_mode": {
          "selector": {
            "select": {
              "options": [
                "html",
                "markdown",
                "markdown2"
              ]
            }
          },
          "name": "Parse mode",
          "description": "Parser for the message text."
        },
        "disable_web_page_preview": {
          "selector": {
            "boolean": null
          },
          "name": "Disable web page preview",
          "description": "Disables link previews for links in the message."
        },
        "inline_keyboard": {
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        }
      }
    },
    "edit_caption": {
      "name": "Edit caption",
      "description": "Edits the caption of a previously sent message.",
      "fields": {
        "message_id": {
          "required": true,
          "example": "{{ trigger.event.data.message.message_id }}",
          "selector": {
            "text": null
          },
          "name": "Message ID",
          "description": "Id of the message to edit."
        },
        "chat_id": {
          "required": true,
          "example": 12345,
          "selector": {
            "text": null
          },
          "name": "Chat ID",
          "description": "The chat_id where to edit the caption."
        },
        "caption": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          },
          "name": "Caption",
          "description": "Message body of the notification."
        },
        "inline_keyboard": {
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        }
      }
    },
    "edit_replymarkup": {
      "name": "Edit reply markup",
      "description": "Edit the inline keyboard of a previously sent message.",
      "fields": {
        "message_id": {
          "required": true,
          "example": "{{ trigger.event.data.message.message_id }}",
          "selector": {
            "text": null
          },
          "name": "Message ID",
          "description": "Id of the message to edit."
        },
        "chat_id": {
          "required": true,
          "example": 12345,
          "selector": {
            "text": null
          },
          "name": "Chat ID",
          "description": "The chat_id where to edit the reply_markup."
        },
        "inline_keyboard": {
          "required": true,
          "example": "[\u0022/button1, /button2\u0022, \u0022/button3\u0022] or [[[\u0022Text button1\u0022, \u0022/button1\u0022], [\u0022Text button2\u0022, \u0022/button2\u0022]], [[\u0022Text button3\u0022, \u0022/button3\u0022]]]",
          "selector": {
            "object": null
          },
          "name": "Inline keyboard",
          "description": "List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data."
        }
      }
    },
    "answer_callback_query": {
      "name": "Answer callback query",
      "description": "Responds to a callback query originated by clicking on an online keyboard button. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.",
      "fields": {
        "message": {
          "required": true,
          "example": "OK, I\u0027m listening",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Unformatted text message body of the notification."
        },
        "callback_query_id": {
          "required": true,
          "example": "{{ trigger.event.data.id }}",
          "selector": {
            "text": null
          },
          "name": "Callback query ID",
          "description": "Unique id of the callback response."
        },
        "show_alert": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Show alert",
          "description": "Show a permanent notification."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for sending the answer. Will help with timeout errors (poor internet connection, etc)."
        }
      }
    },
    "delete_message": {
      "name": "Delete message",
      "description": "Deletes a previously sent message.",
      "fields": {
        "message_id": {
          "required": true,
          "example": "{{ trigger.event.data.message.message_id }}",
          "selector": {
            "text": null
          },
          "name": "Message ID",
          "description": "Id of the message to delete."
        },
        "chat_id": {
          "required": true,
          "example": 12345,
          "selector": {
            "text": null
          },
          "name": "Chat ID",
          "description": "The chat_id where to delete the message."
        }
      }
    },
    "leave_chat": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "telegram": {
    "reload": {
      "name": "Reload",
      "description": "Reloads telegram notify services.",
      "fields": {}
    }
  },
  "home_connect": {
    "set_option_active": {
      "name": "Set active program option",
      "description": "Sets an option for the active program.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "Id of the device."
        },
        "key": {
          "example": "LaundryCare.Dryer.Option.DryingTarget",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Key",
          "description": "Key of the option."
        },
        "value": {
          "example": "LaundryCare.Dryer.EnumType.DryingTarget.IronDry",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Value",
          "description": "Value of the option."
        }
      }
    },
    "set_option_selected": {
      "name": "Set selected program option",
      "description": "Sets an option for the selected program.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "Id of the device."
        },
        "key": {
          "example": "LaundryCare.Dryer.Option.DryingTarget",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Key",
          "description": "Key of the option."
        },
        "value": {
          "example": "LaundryCare.Dryer.EnumType.DryingTarget.IronDry",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Value",
          "description": "Value of the option."
        }
      }
    },
    "change_setting": {
      "name": "Change setting",
      "description": "Changes a setting.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "Id of the device."
        },
        "key": {
          "example": "BSH.Common.Setting.ChildLock",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Key",
          "description": "Key of the setting."
        },
        "value": {
          "example": "true",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Value",
          "description": "Value of the setting."
        }
      }
    },
    "pause_program": {
      "name": "Pause program",
      "description": "Pauses the current running program.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "Id of the device."
        }
      }
    },
    "resume_program": {
      "name": "Resume program",
      "description": "Resumes a paused program.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "Id of the device."
        }
      }
    },
    "select_program": {
      "name": "Select program",
      "description": "Selects a program without starting it.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "Id of the device."
        },
        "program": {
          "example": "Dishcare.Dishwasher.Program.Auto2",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Program",
          "description": "Program to select."
        },
        "key": {
          "example": "BSH.Common.Option.StartInRelative",
          "selector": {
            "text": null
          },
          "name": "Option key",
          "description": "Key of the option."
        },
        "value": {
          "example": 1800,
          "selector": {
            "object": null
          },
          "name": "Option value",
          "description": "Value of the option."
        },
        "unit": {
          "example": "seconds",
          "selector": {
            "text": null
          },
          "name": "Option unit",
          "description": "Unit for the option."
        }
      }
    },
    "start_program": {
      "name": "Start program",
      "description": "Selects a program and starts it.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "Id of the device."
        },
        "program": {
          "example": "Dishcare.Dishwasher.Program.Auto2",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Program",
          "description": "Program to select."
        },
        "key": {
          "example": "BSH.Common.Option.StartInRelative",
          "selector": {
            "text": null
          },
          "name": "Option key",
          "description": "Key of the option."
        },
        "value": {
          "example": 1800,
          "selector": {
            "object": null
          },
          "name": "Option value",
          "description": "Value of the option."
        },
        "unit": {
          "example": "seconds",
          "selector": {
            "text": null
          },
          "name": "Option unit",
          "description": "Unit for the option."
        }
      }
    }
  },
  "webostv": {
    "button": {
      "name": "Button",
      "description": "Sends a button press command.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name(s) of the webostv entities where to run the API method."
        },
        "button": {
          "required": true,
          "example": "LEFT",
          "selector": {
            "text": null
          },
          "name": "Button",
          "description": "Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9."
        }
      }
    },
    "command": {
      "name": "Command",
      "description": "Sends a command.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name(s) of the webostv entities where to run the API method."
        },
        "command": {
          "required": true,
          "example": "system.launcher/open",
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Endpoint of the command."
        },
        "payload": {
          "example": "target: https://www.google.com",
          "advanced": true,
          "selector": {
            "object": null
          },
          "name": "Payload",
          "description": "An optional payload to provide to the endpoint in the format of key value pair(s)."
        }
      }
    },
    "select_sound_output": {
      "name": "Select sound output",
      "description": "Sends the TV the command to change sound output.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name(s) of the webostv entities to change sound output on."
        },
        "sound_output": {
          "required": true,
          "example": "external_speaker",
          "selector": {
            "text": null
          },
          "name": "Sound output",
          "description": "Name of the sound output to switch to."
        }
      }
    }
  },
  "notify": {
    "eugene": {
      "name": "Send a notification with eugene",
      "description": "Sends a notification message using the eugene service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "hailey": {
      "name": "Send a notification with hailey",
      "description": "Sends a notification message using the hailey service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "twinstead": {
      "name": "Send a notification with twinstead",
      "description": "Sends a notification message using the twinstead service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "persistent_notification": {
      "name": "Send a persistent notification",
      "description": "Sends a notification that is visible in the **Notifications** panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Title of the notification."
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Data",
          "description": "Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.."
        }
      }
    },
    "mobile_app_haileys_macbook_air": {
      "name": "Send a notification via mobile_app_haileys_macbook_air",
      "description": "Sends a notification message using the mobile_app_haileys_macbook_air integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_iphone": {
      "name": "Send a notification via mobile_app_iphone",
      "description": "Sends a notification message using the mobile_app_iphone integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_jayden_s_iphone": {
      "name": "Send a notification via mobile_app_jayden_s_iphone",
      "description": "Sends a notification message using the mobile_app_jayden_s_iphone integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_eugene_s_iphone": {
      "name": "Send a notification via mobile_app_eugene_s_iphone",
      "description": "Sends a notification message using the mobile_app_eugene_s_iphone integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_hailey_s_iphone": {
      "name": "Send a notification via mobile_app_hailey_s_iphone",
      "description": "Sends a notification message using the mobile_app_hailey_s_iphone integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_jayden_s_ipad": {
      "name": "Send a notification via mobile_app_jayden_s_ipad",
      "description": "Sends a notification message using the mobile_app_jayden_s_ipad integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_ml_nx07kg671n": {
      "name": "Send a notification via mobile_app_ml_nx07kg671n",
      "description": "Sends a notification message using the mobile_app_ml_nx07kg671n integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_iphone8p": {
      "name": "Send a notification via mobile_app_iphone8p",
      "description": "Sends a notification message using the mobile_app_iphone8p integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_g3061wm904": {
      "name": "Send a notification via mobile_app_g3061wm904",
      "description": "Sends a notification message using the mobile_app_g3061wm904 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_aarons_ipad": {
      "name": "Send a notification via mobile_app_aarons_ipad",
      "description": "Sends a notification message using the mobile_app_aarons_ipad integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "notify": {
      "name": "Send a notification with notify",
      "description": "Sends a notification message using the notify service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "lounge_tv": {
      "name": "Send a notification with lounge_tv",
      "description": "Sends a notification message using the lounge_tv service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "master_tv": {
      "name": "Send a notification with master_tv",
      "description": "Sends a notification message using the master_tv service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_bose_qc35_ii": {
      "name": "Send a notification via alexa_media_bose_qc35_ii",
      "description": "Sends a notification message using the alexa_media_bose_qc35_ii integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_downstairs": {
      "name": "Send a notification via alexa_media_downstairs",
      "description": "Sends a notification message using the alexa_media_downstairs integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_upstairs": {
      "name": "Send a notification via alexa_media_upstairs",
      "description": "Sends a notification message using the alexa_media_upstairs integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_master_tv_alexa": {
      "name": "Send a notification via alexa_media_master_tv_alexa",
      "description": "Sends a notification message using the alexa_media_master_tv_alexa integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_s_fire": {
      "name": "Send a notification via alexa_media_eugene_s_fire",
      "description": "Sends a notification message using the alexa_media_eugene_s_fire integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_office": {
      "name": "Send a notification via alexa_media_office",
      "description": "Sends a notification message using the alexa_media_office integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_aaron": {
      "name": "Send a notification via alexa_media_aaron",
      "description": "Sends a notification message using the alexa_media_aaron integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_s_2nd_echo_dot": {
      "name": "Send a notification via alexa_media_eugene_s_2nd_echo_dot",
      "description": "Sends a notification message using the alexa_media_eugene_s_2nd_echo_dot integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_dining": {
      "name": "Send a notification via alexa_media_dining",
      "description": "Sends a notification message using the alexa_media_dining integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_everywhere_2": {
      "name": "Send a notification via alexa_media_everywhere_2",
      "description": "Sends a notification message using the alexa_media_everywhere_2 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_playroom": {
      "name": "Send a notification via alexa_media_playroom",
      "description": "Sends a notification message using the alexa_media_playroom integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_master": {
      "name": "Send a notification via alexa_media_master",
      "description": "Sends a notification message using the alexa_media_master integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_jayden": {
      "name": "Send a notification via alexa_media_jayden",
      "description": "Sends a notification message using the alexa_media_jayden integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_s_sonos_arc": {
      "name": "Send a notification via alexa_media_eugene_s_sonos_arc",
      "description": "Sends a notification message using the alexa_media_eugene_s_sonos_arc integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_lounge_sonos": {
      "name": "Send a notification via alexa_media_lounge_sonos",
      "description": "Sends a notification message using the alexa_media_lounge_sonos integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_s_lg_oled_webos_2021_tv": {
      "name": "Send a notification via alexa_media_eugene_s_lg_oled_webos_2021_tv",
      "description": "Sends a notification message using the alexa_media_eugene_s_lg_oled_webos_2021_tv integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_s_5th_echo_dot": {
      "name": "Send a notification via alexa_media_eugene_s_5th_echo_dot",
      "description": "Sends a notification message using the alexa_media_eugene_s_5th_echo_dot integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_kitchen": {
      "name": "Send a notification via alexa_media_kitchen",
      "description": "Sends a notification message using the alexa_media_kitchen integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_eugene_desktop": {
      "name": "Send a notification via alexa_media_eugene_desktop",
      "description": "Sends a notification message using the alexa_media_eugene_desktop integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_this_device_3": {
      "name": "Send a notification via alexa_media_this_device_3",
      "description": "Sends a notification message using the alexa_media_this_device_3 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_this_device": {
      "name": "Send a notification via alexa_media_this_device",
      "description": "Sends a notification message using the alexa_media_this_device integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media": {
      "name": "Send a notification with alexa_media",
      "description": "Sends a notification message using the alexa_media service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_last_called": {
      "name": "Send a notification via alexa_media_last_called",
      "description": "Sends a notification message using the alexa_media_last_called integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "switch": {
    "turn_off": {
      "name": "Turn off",
      "description": "Turns a switch off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns a switch on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a switch on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "template": {
    "reload": {
      "name": "Reload",
      "description": "Reloads template entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "automation": {
    "trigger": {
      "name": "Trigger",
      "description": "Triggers the actions of an automation.",
      "fields": {
        "skip_condition": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Skip conditions",
          "description": "Defines whether or not the conditions will be skipped."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles (enable / disable) an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Enables an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Disables an automation.",
      "fields": {
        "stop_actions": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Stop actions",
          "description": "Stops currently running actions."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the automation configuration.",
      "fields": {}
    }
  },
  "melcloud": {
    "set_vane_horizontal": {
      "name": "Set vane horizontal",
      "description": "Sets horizontal vane position.",
      "fields": {
        "position": {
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          },
          "name": "Position",
          "description": "Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "melcloud",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_vane_vertical": {
      "name": "Set vane vertical",
      "description": "Sets vertical vane position.",
      "fields": {
        "position": {
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          },
          "name": "Position",
          "description": "Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "melcloud",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    }
  },
  "history_stats": {
    "reload": {
      "name": "Reload",
      "description": "Reloads history stats sensors from the YAML-configuration.",
      "fields": {}
    }
  },
  "min_max": {
    "reload": {
      "name": "Reload",
      "description": "Reloads min/max sensors from the YAML-configuration.",
      "fields": {}
    }
  },
  "pi_hole": {
    "disable": {
      "name": "Disable",
      "description": "Disables configured Pi-hole(s) for an amount of time.",
      "fields": {
        "duration": {
          "required": true,
          "example": "00:00:15",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Time that the Pi-hole should be disabled for."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "pi_hole",
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "adaptive_lighting": {
    "apply": {
      "name": "apply",
      "description": "Applies the current Adaptive Lighting settings to lights.",
      "fields": {
        "entity_id": {
          "description": "The \u0060entity_id\u0060 of the switch with the settings to apply. \uD83D\uDCDD",
          "selector": {
            "entity": {
              "integration": "adaptive_lighting",
              "domain": "switch",
              "multiple": false
            }
          },
          "name": "entity_id"
        },
        "lights": {
          "description": "A light (or list of lights) to apply the settings to. \uD83D\uDCA1",
          "selector": {
            "entity": {
              "domain": "light",
              "multiple": true
            }
          },
          "name": "lights"
        },
        "transition": {
          "description": "Duration of transition when lights change, in seconds. \uD83D\uDD51",
          "example": 10,
          "selector": {
            "text": null
          },
          "name": "transition"
        },
        "adapt_brightness": {
          "description": "Whether to adapt the brightness of the light. \uD83C\uDF1E",
          "example": true,
          "selector": {
            "boolean": null
          },
          "name": "adapt_brightness"
        },
        "adapt_color": {
          "description": "Whether to adapt the color on supporting lights. \uD83C\uDF08",
          "example": true,
          "selector": {
            "boolean": null
          },
          "name": "adapt_color"
        },
        "prefer_rgb_color": {
          "description": "Whether to prefer RGB color adjustment over light color temperature when possible. \uD83C\uDF08",
          "example": false,
          "selector": {
            "boolean": null
          },
          "name": "prefer_rgb_color"
        },
        "turn_on_lights": {
          "description": "Whether to turn on lights that are currently off. \uD83D\uDD06",
          "example": false,
          "selector": {
            "boolean": null
          },
          "name": "turn_on_lights"
        }
      }
    },
    "set_manual_control": {
      "name": "set_manual_control",
      "description": "Mark whether a light is \u0027manually controlled\u0027.",
      "fields": {
        "entity_id": {
          "description": "The \u0060entity_id\u0060 of the switch in which to (un)mark the light as being \u0060manually controlled\u0060. \uD83D\uDCDD",
          "selector": {
            "entity": {
              "integration": "adaptive_lighting",
              "domain": "switch",
              "multiple": false
            }
          },
          "name": "entity_id"
        },
        "lights": {
          "description": "entity_id(s) of lights, if not specified, all lights in the switch are selected. \uD83D\uDCA1",
          "selector": {
            "entity": {
              "domain": "light",
              "multiple": true
            }
          },
          "name": "lights"
        },
        "manual_control": {
          "description": "Whether to add (\u0022true\u0022) or remove (\u0022false\u0022) the light from the \u0022manual_control\u0022 list. \uD83D\uDD12",
          "example": true,
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "manual_control"
        }
      }
    },
    "change_switch_settings": {
      "name": "change_switch_settings",
      "description": "Change any settings you\u0027d like in the switch. All options here are the same as in the config flow.",
      "fields": {
        "entity_id": {
          "description": "Entity ID of the switch. \uD83D\uDCDD",
          "required": true,
          "selector": {
            "entity": {
              "domain": "switch"
            }
          },
          "name": "entity_id"
        },
        "use_defaults": {
          "description": "Sets the default values not specified in this service call. Options: \u0022current\u0022 (default, retains current values), \u0022factory\u0022 (resets to documented defaults), or \u0022configuration\u0022 (reverts to switch config defaults). \u2699\uFE0F",
          "example": "current",
          "required": false,
          "default": "current",
          "selector": {
            "select": {
              "options": [
                "current",
                "configuration",
                "factory"
              ]
            }
          },
          "name": "use_defaults"
        },
        "include_config_in_attributes": {
          "description": "Show all options as attributes on the switch in Home Assistant when set to \u0060true\u0060. \uD83D\uDCDD",
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "include_config_in_attributes"
        },
        "turn_on_lights": {
          "description": "Whether to turn on lights that are currently off. \uD83D\uDD06",
          "example": false,
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "turn_on_lights"
        },
        "initial_transition": {
          "description": "Duration of the first transition when lights turn from \u0060off\u0060 to \u0060on\u0060 in seconds. \u23F2\uFE0F",
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "initial_transition"
        },
        "sleep_transition": {
          "description": "Duration of transition when \u0022sleep mode\u0022 is toggled in seconds. \uD83D\uDE34",
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "sleep_transition"
        },
        "max_brightness": {
          "description": "Maximum brightness percentage. \uD83D\uDCA1",
          "required": false,
          "example": 100,
          "selector": {
            "text": null
          },
          "name": "max_brightness"
        },
        "max_color_temp": {
          "description": "Coldest color temperature in Kelvin. \u2744\uFE0F",
          "required": false,
          "example": 5500,
          "selector": {
            "text": null
          },
          "name": "max_color_temp"
        },
        "min_brightness": {
          "description": "Minimum brightness percentage. \uD83D\uDCA1",
          "required": false,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "min_brightness"
        },
        "min_color_temp": {
          "description": "Warmest color temperature in Kelvin. \uD83D\uDD25",
          "required": false,
          "example": 2000,
          "selector": {
            "text": null
          },
          "name": "min_color_temp"
        },
        "only_once": {
          "description": "Adapt lights only when they are turned on (\u0060true\u0060) or keep adapting them (\u0060false\u0060). \uD83D\uDD04",
          "example": false,
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "only_once"
        },
        "prefer_rgb_color": {
          "description": "Whether to prefer RGB color adjustment over light color temperature when possible. \uD83C\uDF08",
          "required": false,
          "example": false,
          "selector": {
            "boolean": null
          },
          "name": "prefer_rgb_color"
        },
        "separate_turn_on_commands": {
          "description": "Use separate \u0060light.turn_on\u0060 calls for color and brightness, needed for some light types. \uD83D\uDD00",
          "required": false,
          "example": false,
          "selector": {
            "boolean": null
          },
          "name": "separate_turn_on_commands"
        },
        "send_split_delay": {
          "description": "Delay (ms) between \u0060separate_turn_on_commands\u0060 for lights that don\u0027t support simultaneous brightness and color setting. \u23F2\uFE0F",
          "required": false,
          "example": 0,
          "selector": {
            "boolean": null
          },
          "name": "send_split_delay"
        },
        "sleep_brightness": {
          "description": "Brightness percentage of lights in sleep mode. \uD83D\uDE34",
          "required": false,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "sleep_brightness"
        },
        "sleep_rgb_or_color_temp": {
          "description": "Use either \u0060\u0022rgb_color\u0022\u0060 or \u0060\u0022color_temp\u0022\u0060 in sleep mode. \uD83C\uDF19",
          "required": false,
          "example": "color_temp",
          "selector": {
            "select": {
              "options": [
                "rgb_color",
                "color_temp"
              ]
            }
          },
          "name": "sleep_rgb_or_color_temp"
        },
        "sleep_rgb_color": {
          "description": "RGB color in sleep mode (used when \u0060sleep_rgb_or_color_temp\u0060 is \u0022rgb_color\u0022). \uD83C\uDF08",
          "required": false,
          "selector": {
            "color_rgb": null
          },
          "name": "sleep_rgb_color"
        },
        "sleep_color_temp": {
          "description": "Color temperature in sleep mode (used when \u0060sleep_rgb_or_color_temp\u0060 is \u0060color_temp\u0060) in Kelvin. \uD83D\uDE34",
          "required": false,
          "example": 1000,
          "selector": {
            "text": null
          },
          "name": "sleep_color_temp"
        },
        "sunrise_offset": {
          "description": "Adjust sunrise time with a positive or negative offset in seconds. \u23F0",
          "required": false,
          "example": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 86300
            }
          },
          "name": "sunrise_offset"
        },
        "sunrise_time": {
          "description": "Set a fixed time (HH:MM:SS) for sunrise. \uD83C\uDF05",
          "required": false,
          "example": "",
          "selector": {
            "time": null
          },
          "name": "sunrise_time"
        },
        "sunset_offset": {
          "description": "Adjust sunset time with a positive or negative offset in seconds. \u23F0",
          "required": false,
          "example": "",
          "selector": {
            "number": {
              "min": 0,
              "max": 86300
            }
          },
          "name": "sunset_offset"
        },
        "sunset_time": {
          "description": "Set a fixed time (HH:MM:SS) for sunset. \uD83C\uDF07",
          "example": "",
          "required": false,
          "selector": {
            "time": null
          },
          "name": "sunset_time"
        },
        "max_sunrise_time": {
          "description": "Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier sunrises. \uD83C\uDF05",
          "example": "",
          "required": false,
          "selector": {
            "time": null
          },
          "name": "max_sunrise_time"
        },
        "min_sunset_time": {
          "description": "Set the earliest virtual sunset time (HH:MM:SS), allowing for later sunsets. \uD83C\uDF07",
          "example": "",
          "required": false,
          "selector": {
            "time": null
          },
          "name": "min_sunset_time"
        },
        "take_over_control": {
          "description": "Disable Adaptive Lighting if another source calls \u0060light.turn_on\u0060 while lights are on and being adapted. Note that this calls \u0060homeassistant.update_entity\u0060 every \u0060interval\u0060! \uD83D\uDD12",
          "required": false,
          "example": true,
          "selector": {
            "boolean": null
          },
          "name": "take_over_control"
        },
        "detect_non_ha_changes": {
          "description": "Detects and halts adaptations for non-\u0060light.turn_on\u0060 state changes. Needs \u0060take_over_control\u0060 enabled. \uD83D\uDD75\uFE0F Caution: \u26A0\uFE0F Some lights might falsely indicate an \u0027on\u0027 state, which could result in lights turning on unexpectedly. Disable this feature if you encounter such issues.",
          "required": false,
          "example": false,
          "selector": {
            "boolean": null
          },
          "name": "detect_non_ha_changes"
        },
        "transition": {
          "description": "Duration of transition when lights change, in seconds. \uD83D\uDD51",
          "required": false,
          "example": 45,
          "selector": {
            "text": null
          },
          "name": "transition"
        },
        "adapt_delay": {
          "description": "Wait time (seconds) between light turn on and Adaptive Lighting applying changes. Might help to avoid flickering. \u23F2\uFE0F",
          "required": false,
          "example": 0,
          "selector": {
            "text": null
          },
          "name": "adapt_delay"
        },
        "autoreset_control_seconds": {
          "description": "Automatically reset the manual control after a number of seconds. Set to 0 to disable. \u23F2\uFE0F",
          "required": false,
          "example": 0,
          "selector": {
            "text": null
          },
          "name": "autoreset_control_seconds"
        }
      }
    }
  },
  "generic_thermostat": {
    "reload": {
      "name": "Reload",
      "description": "Reloads generic thermostats from the YAML-configuration.",
      "fields": {}
    }
  },
  "sonos": {
    "snapshot": {
      "name": "Snapshot",
      "description": "Takes a snapshot of the media player.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "sonos",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will be snapshot."
        },
        "with_group": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "With group",
          "description": "True or False. Also snapshot the group layout."
        }
      }
    },
    "restore": {
      "name": "Restore",
      "description": "Restores a snapshot of the media player.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "sonos",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will be restored."
        },
        "with_group": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "With group",
          "description": "True or False. Also restore the group layout."
        }
      }
    },
    "set_sleep_timer": {
      "name": "Set timer",
      "description": "Sets a Sonos timer.",
      "fields": {
        "sleep_time": {
          "selector": {
            "number": {
              "min": 0,
              "max": 7200,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Sleep Time",
          "description": "Number of seconds to set the timer."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "clear_sleep_timer": {
      "name": "Clear timer",
      "description": "Clears a Sonos timer.",
      "fields": {},
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "update_alarm": {
      "name": "Update alarm",
      "description": "Updates an alarm with new time and volume settings.",
      "fields": {
        "alarm_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 1440,
              "mode": "box"
            }
          },
          "name": "Alarm ID",
          "description": "ID for the alarm to be updated."
        },
        "time": {
          "example": "07:00",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "Set time for the alarm."
        },
        "volume": {
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Volume",
          "description": "Set alarm volume level."
        },
        "enabled": {
          "selector": {
            "boolean": null
          },
          "name": "Alarm enabled",
          "description": "Enable or disable the alarm."
        },
        "include_linked_zones": {
          "selector": {
            "boolean": null
          },
          "name": "Include linked zones",
          "description": "Enable or disable including grouped rooms."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "play_queue": {
      "name": "Play queue",
      "description": "Start playing the queue from the first item.",
      "fields": {
        "queue_position": {
          "selector": {
            "number": {
              "min": 0,
              "max": 10000,
              "mode": "box"
            }
          },
          "name": "Queue position",
          "description": "Position of the song in the queue to start playing from."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "remove_from_queue": {
      "name": "Remove from queue",
      "description": "Removes an item from the queue.",
      "fields": {
        "queue_position": {
          "selector": {
            "number": {
              "min": 0,
              "max": 10000,
              "mode": "box"
            }
          },
          "name": "Queue position",
          "description": "Position in the queue to remove."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    }
  },
  "alarmo": {
    "enable_user": {
      "name": "Enable User",
      "description": "Allow a user to arm/disarm alarmo.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "Name of the user to enable.",
          "example": "Frank",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "disable_user": {
      "name": "Disable User",
      "description": "Block a user from arming/disarming alarmo.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "Name of the user to disable.",
          "example": "Frank",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "arm": {
      "name": "Arm",
      "description": "Arm an Alarmo entity with custom settings.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "Name of entity that should be armed.",
          "example": "alarm_control_panel.alarm",
          "required": true,
          "selector": {
            "entity": {
              "integration": "alarmo",
              "domain": "alarm_control_panel"
            }
          }
        },
        "code": {
          "name": "Code",
          "description": "Code to arm the alarm with.",
          "example": "1234",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "mode": {
          "name": "Mode",
          "description": "Mode to arm the alarm in.",
          "example": "away",
          "required": false,
          "default": "away",
          "selector": {
            "select": {
              "options": [
                "away",
                "night",
                "home",
                "vacation",
                "custom"
              ]
            }
          }
        },
        "skip_delay": {
          "name": "Skip Delay",
          "description": "Skip the exit delay.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "force": {
          "name": "Force",
          "description": "Automatically bypass all sensors that prevent the arming operation.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "disarm": {
      "name": "Disarm",
      "description": "Disarm an Alarmo entity.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "Name of entity that should be disarmed.",
          "example": "alarm_control_panel.alarm",
          "required": true,
          "selector": {
            "entity": {
              "integration": "alarmo",
              "domain": "alarm_control_panel"
            }
          }
        },
        "code": {
          "name": "Code",
          "description": "Code to disarm the alarm with.",
          "example": "1234",
          "required": false,
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "remote": {
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Sends the power on command.",
      "fields": {
        "activity": {
          "example": "BedroomTV",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Activity",
          "description": "Activity ID or activity name to be started."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a device on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command or a list of commands to a device.",
      "fields": {
        "device": {
          "example": "32756745",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to send command to."
        },
        "command": {
          "required": true,
          "example": "Play",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to send."
        },
        "num_repeats": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          },
          "name": "Repeats",
          "description": "The number of times you want to repeat the commands."
        },
        "delay_secs": {
          "default": 0.4,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Delay seconds",
          "description": "The time you want to wait in between repeated commands."
        },
        "hold_secs": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Hold seconds",
          "description": "The time you want to have it held before the release is send."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "learn_command": {
      "name": "Learn command",
      "description": "Learns a command or a list of commands from a device.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to learn command from."
        },
        "command": {
          "example": "Turn on",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to learn."
        },
        "command_type": {
          "default": "ir",
          "selector": {
            "select": {
              "options": [
                "ir",
                "rf"
              ]
            }
          },
          "name": "Command type",
          "description": "The type of command to be learned."
        },
        "alternative": {
          "selector": {
            "boolean": null
          },
          "name": "Alternative",
          "description": "If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won\u0027t change the state."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 5,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for the command to be learned."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "delete_command": {
      "name": "Delete command",
      "description": "Deletes a command or a list of commands from the database.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device from which commands will be deleted."
        },
        "command": {
          "required": true,
          "example": "Mute",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "The single command or the list of commands to be deleted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    }
  },
  "smartthinq_sensors": {
    "set_sleep_time": {
      "name": "Set sleep time",
      "description": "Set sleep time.",
      "fields": {
        "sleep_time": {
          "name": "Timeout",
          "description": "Timeout for sleep mode in minutes",
          "default": 60,
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 720,
              "mode": "box",
              "unit_of_measurement": "minutes"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "smartthinq_sensors",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_fan_mode": {
      "name": "Set fan mode",
      "description": "Set fan operation for dehumidifier device.",
      "fields": {
        "fan_mode": {
          "name": "Fan mode",
          "description": "New value of fan mode.",
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "smartthinq_sensors",
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "remote_start": {
      "name": "Remote Start",
      "description": "Send to ThinQ device the remote start command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "smartthinq_sensors",
            "domain": [
              "sensor"
            ]
          }
        ]
      }
    },
    "wake_up": {
      "name": "WakeUp",
      "description": "Send to ThinQ device the wakeup command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "smartthinq_sensors",
            "domain": [
              "sensor"
            ]
          }
        ]
      }
    },
    "set_time": {
      "name": "Set time",
      "description": "Set time device.",
      "fields": {
        "time_wanted": {
          "name": "time",
          "description": "Time (if not set will use Home-Assistant time)",
          "required": false,
          "selector": {
            "time": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "smartthinq_sensors",
            "domain": [
              "sensor"
            ]
          }
        ]
      }
    }
  },
  "backup": {
    "create": {
      "name": "Create backup",
      "description": "Creates a new backup.",
      "fields": {}
    }
  },
  "powercalc": {
    "reset_energy": {
      "name": "Reset energy sensor",
      "description": "Reset an energy sensor to zero kWh.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "device_class": [
              "energy"
            ]
          }
        ]
      }
    },
    "calibrate_utility_meter": {
      "name": "Calibrate utility meter",
      "description": "Calibrates a utility meter sensor.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "The value to set.",
          "example": "100",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ]
          }
        ]
      }
    },
    "calibrate_energy": {
      "name": "Calibrate energy sensor",
      "description": "Sets the energy sensor to a given kWh value.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "The value to set.",
          "example": "100",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "device_class": [
              "energy"
            ]
          }
        ]
      }
    },
    "increase_daily_energy": {
      "name": "Increase daily energy sensor",
      "description": "Increases the sensor with a given amount.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "Amount to add to the sensor.",
          "example": "100",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "integration": "powercalc",
            "device_class": [
              "energy"
            ]
          }
        ]
      }
    },
    "activate_playbook": {
      "name": "Activate playbook",
      "description": "Start execution of a playbook.",
      "fields": {
        "playbook_id": {
          "name": "Playbook",
          "description": "Playbook identifier.",
          "required": true,
          "example": "program1",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "integration": "powercalc",
            "device_class": [
              "power"
            ]
          }
        ]
      }
    },
    "stop_playbook": {
      "name": "Stop playbook",
      "description": "Stop currently active playbook.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "integration": "powercalc",
            "device_class": [
              "power"
            ]
          }
        ]
      }
    },
    "switch_sub_profile": {
      "name": "Switch to another sub profile",
      "description": "Some profiles in the library has different sub profiles. This service allows you to switch to another one.",
      "fields": {
        "profile": {
          "name": "Sub profile",
          "description": "Define one of the possible sub profiles",
          "example": "nigh_vision",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "integration": "powercalc",
            "device_class": [
              "power"
            ]
          }
        ]
      }
    }
  },
  "ring": {
    "update": {
      "name": "Update",
      "description": "Updates the data we have for all your ring devices.",
      "fields": {}
    }
  },
  "alexa_media": {
    "update_last_called": {
      "name": "Update Last Called Sensor",
      "description": "Forces update of last_called echo device for each Alexa account.",
      "fields": {
        "email": {
          "description": "List of Alexa accounts to update. If empty, will update all known accounts.",
          "example": "my_email@alexa.com",
          "name": "Email address"
        }
      }
    },
    "clear_history": {
      "name": "Clear Amazon Voice History",
      "description": "Clear last entries from Alexa Voice history for each Alexa account.",
      "fields": {
        "email": {
          "description": "Accounts to clear. Empty will clear all.",
          "example": "my_email@alexa.com",
          "name": "Email address"
        },
        "entries": {
          "description": "Number of entries to clear from 1 to 50. If empty, clear 50.",
          "example": 50,
          "name": "Number of Entries"
        }
      }
    },
    "force_logout": {
      "name": "Force Logout",
      "description": "Force account to logout. Used mainly for debugging.",
      "fields": {
        "email": {
          "description": "Accounts to clear. Empty will clear all.",
          "example": "my_email@alexa.com",
          "name": "Email address"
        }
      }
    }
  },
  "octopus_energy": {
    "update_target_config": {
      "name": "Update target rate config",
      "description": "Updates a given target rate\u0027s config. Please note this is temporary and will not persist between restarts.",
      "fields": {
        "target_hours": {
          "name": "Hours",
          "description": "The optional number of hours the target rate sensor should come on during a 24 hour period.",
          "example": "1.5",
          "selector": {
            "text": null
          }
        },
        "target_start_time": {
          "name": "Start time",
          "description": "The optional time the evaluation period should start.",
          "example": "06:00",
          "selector": {
            "text": null
          }
        },
        "target_end_time": {
          "name": "End time",
          "description": "The optional time the evaluation period should end.",
          "example": "19:00",
          "selector": {
            "text": null
          }
        },
        "target_offset": {
          "name": "Offset",
          "description": "The optional offset to apply to the target rate when it starts",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "octopus_energy",
            "domain": [
              "binary_sensor"
            ]
          }
        ]
      }
    }
  },
  "time": {
    "set_value": {
      "name": "Set Time",
      "description": "Sets the time.",
      "fields": {
        "time": {
          "required": true,
          "example": "22:15",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The time to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "time"
            ]
          }
        ]
      }
    }
  },
  "zha": {
    "permit": {
      "name": "Permit",
      "description": "Allows nodes to join the Zigbee network.",
      "fields": {
        "duration": {
          "default": 60,
          "selector": {
            "number": {
              "min": 0,
              "max": 254,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Time to permit joins."
        },
        "ieee": {
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address of the node permitting new joins."
        },
        "source_ieee": {
          "example": "00:0a:bf:00:01:10:23:35",
          "selector": {
            "text": null
          },
          "name": "Source IEEE",
          "description": "IEEE address of the joining device (must be used with the install code)."
        },
        "install_code": {
          "example": "1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF",
          "selector": {
            "text": null
          },
          "name": "Install code",
          "description": "Install code of the joining device (must be used with the source_ieee)."
        },
        "qr_code": {
          "example": "Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051",
          "selector": {
            "text": null
          },
          "name": "QR code",
          "description": "Value of the QR install code (different between vendors)."
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Removes a node from the Zigbee network.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address of the node to remove."
        }
      }
    },
    "set_zigbee_cluster_attribute": {
      "name": "Set zigbee cluster attribute",
      "description": "Sets an attribute value for the specified cluster on the specified entity.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "endpoint_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535,
              "mode": "box"
            }
          },
          "name": "Endpoint ID",
          "description": "Endpoint ID for the cluster."
        },
        "cluster_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Cluster ID",
          "description": "ZCL cluster to retrieve attributes for."
        },
        "cluster_type": {
          "default": "in",
          "selector": {
            "select": {
              "options": [
                "in",
                "out"
              ]
            }
          },
          "name": "Cluster Type",
          "description": "Type of the cluster."
        },
        "attribute": {
          "required": true,
          "example": 0,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Attribute",
          "description": "ID of the attribute to set."
        },
        "value": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Value to write to the attribute."
        },
        "manufacturer": {
          "example": 252,
          "selector": {
            "text": null
          },
          "name": "Manufacturer",
          "description": "Manufacturer code."
        }
      }
    },
    "issue_zigbee_cluster_command": {
      "name": "Issue zigbee cluster command",
      "description": "Issues a command on the specified cluster on the specified entity.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "endpoint_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Endpoint ID",
          "description": "Endpoint ID for the cluster."
        },
        "cluster_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Cluster ID",
          "description": "ZCL cluster to retrieve attributes for."
        },
        "cluster_type": {
          "default": "in",
          "selector": {
            "select": {
              "options": [
                "in",
                "out"
              ]
            }
          },
          "name": "Cluster Type",
          "description": "Type of the cluster."
        },
        "command": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Command",
          "description": "ID of the command to execute."
        },
        "command_type": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "client",
                "server"
              ]
            }
          },
          "name": "Command Type",
          "description": "Type of the command to execute."
        },
        "args": {
          "example": "[arg1, arg2, argN]",
          "selector": {
            "object": null
          },
          "name": "Args",
          "description": "Arguments to pass to the command."
        },
        "params": {
          "selector": {
            "object": null
          },
          "name": "Params",
          "description": "Parameters to pass to the command."
        },
        "manufacturer": {
          "example": 252,
          "selector": {
            "text": null
          },
          "name": "Manufacturer",
          "description": "Manufacturer code."
        }
      }
    },
    "issue_zigbee_group_command": {
      "name": "Issue zigbee group command",
      "description": "Issue command on the specified cluster on the specified group.",
      "fields": {
        "group": {
          "required": true,
          "example": 546,
          "selector": {
            "text": null
          },
          "name": "Group",
          "description": "Hexadecimal address of the group."
        },
        "cluster_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Cluster ID",
          "description": "ZCL cluster to send command to."
        },
        "cluster_type": {
          "default": "in",
          "selector": {
            "select": {
              "options": [
                "in",
                "out"
              ]
            }
          },
          "name": "Cluster type",
          "description": "Type of the cluster."
        },
        "command": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Command",
          "description": "ID of the command to execute."
        },
        "args": {
          "example": "[arg1, arg2, argN]",
          "selector": {
            "object": null
          },
          "name": "Args",
          "description": "Arguments to pass to the command."
        },
        "manufacturer": {
          "example": 252,
          "selector": {
            "text": null
          },
          "name": "Manufacturer",
          "description": "Manufacturer code."
        }
      }
    },
    "warning_device_squawk": {
      "name": "Warning device squawk",
      "description": "This service uses the WD capabilities to emit a quick audible/visible pulse called a \u0022squawk\u0022. The squawk command has no effect if the WD is currently active (warning in progress).",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "mode": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          },
          "name": "Mode",
          "description": "The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD \u201Csquawks\u201D) is implementation specific."
        },
        "strobe": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          },
          "name": "Strobe",
          "description": "The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit."
        },
        "level": {
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          },
          "name": "Level",
          "description": "The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values."
        }
      }
    },
    "warning_device_warn": {
      "name": "Warning device starts alert",
      "description": "This service starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "mode": {
          "default": 3,
          "selector": {
            "number": {
              "min": 0,
              "max": 6,
              "mode": "box"
            }
          },
          "name": "Mode",
          "description": "The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards."
        },
        "strobe": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          },
          "name": "Strobe",
          "description": "The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. \u00220\u0022 means no strobe, \u00221\u0022 means strobe. If the strobe field is \u201C1\u201D and the Warning Mode is \u201C0\u201D (\u201CStop\u201D), then only the strobe is activated."
        },
        "level": {
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          },
          "name": "Level",
          "description": "The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec."
        },
        "duration": {
          "default": 5,
          "selector": {
            "number": {
              "min": 0,
              "max": 65535,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are \u00220\u0022 this field is ignored."
        },
        "duty_cycle": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 10
            }
          },
          "name": "Duty cycle",
          "description": "Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies \u201C40,\u201D, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second."
        },
        "intensity": {
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          },
          "name": "Intensity",
          "description": "Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec."
        }
      }
    },
    "set_lock_user_code": {
      "name": "Set lock user code",
      "description": "Sets a user code on a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to set the code in."
        },
        "user_code": {
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    },
    "enable_lock_user_code": {
      "name": "Enable lock user",
      "description": "Enables a user code on a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to enable."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    },
    "disable_lock_user_code": {
      "name": "Disable lock user",
      "description": "Disables a user code on a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to disable."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    },
    "clear_lock_user_code": {
      "name": "Clear lock user",
      "description": "Clears a user code from a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to clear code from."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    }
  },
  "unifi": {
    "reconnect_client": {
      "name": "Reconnect wireless client",
      "description": "Tries to get wireless client to reconnect to UniFi Network.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "unifi"
            }
          },
          "name": "Device",
          "description": "Try reconnect client to wireless network."
        }
      }
    },
    "remove_clients": {
      "name": "Remove clients from the UniFi Network",
      "description": "Cleans up clients that has only been associated with the controller for a short period of time.",
      "fields": {}
    }
  }
}