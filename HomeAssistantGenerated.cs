//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.46.1.0
//   At: 2025-01-17T15:35:28.3739188+00:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<AlarmControlPanelEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<CoverEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<GroupEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputButtonEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputSelectEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<ProximityEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SirenEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TimerEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<InputDatetimeEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<SttEntities>();
        serviceCollection.AddTransient<TagEntities>();
        serviceCollection.AddTransient<TtsEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AlarmoServices>();
        serviceCollection.AddTransient<AlexaMediaServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BackupServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<CommandLineServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FamilySafetyServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GenericThermostatServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HistoryStatsServices>();
        serviceCollection.AddTransient<HomeConnectServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<ImageServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LocaltuyaServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MelcloudServices>();
        serviceCollection.AddTransient<MinMaxServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<OctopusEnergyServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<PiHoleServices>();
        serviceCollection.AddTransient<PowercalcServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<SchedulerServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<ShellCommandServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SmartthinqSensorsServices>();
        serviceCollection.AddTransient<SonosServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TelegramServices>();
        serviceCollection.AddTransient<TelegramBotServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimeServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UnifiServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<UtilityMeterServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<ValveServices>();
        serviceCollection.AddTransient<WakeOnLanServices>();
        serviceCollection.AddTransient<WatchmanServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<WebostvServices>();
        serviceCollection.AddTransient<WebrtcServices>();
        serviceCollection.AddTransient<WiserServices>();
        serviceCollection.AddTransient<WorkdayServices>();
        serviceCollection.AddTransient<ZhaServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    AlarmControlPanelEntities AlarmControlPanel { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    CoverEntities Cover { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    GroupEntities Group { get; }

    InputBooleanEntities InputBoolean { get; }

    InputButtonEntities InputButton { get; }

    InputNumberEntities InputNumber { get; }

    InputSelectEntities InputSelect { get; }

    InputTextEntities InputText { get; }

    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    ProximityEntities Proximity { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SirenEntities Siren { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TimerEntities Timer { get; }

    UpdateEntities Update { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }

    InputDatetimeEntities InputDatetime { get; }

    ConversationEntities Conversation { get; }

    EventEntities Event { get; }

    SttEntities Stt { get; }

    TagEntities Tag { get; }

    TtsEntities Tts { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelEntities AlarmControlPanel => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public CoverEntities Cover => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public GroupEntities Group => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputButtonEntities InputButton => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputSelectEntities InputSelect => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public ProximityEntities Proximity => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SirenEntities Siren => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TimerEntities Timer => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public InputDatetimeEntities InputDatetime => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public EventEntities Event => new(_haContext);
    public SttEntities Stt => new(_haContext);
    public TagEntities Tag => new(_haContext);
    public TtsEntities Tts => new(_haContext);
}

public partial class AlarmControlPanelEntities
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarmo</summary>
    public AlarmControlPanelEntity Alarmo => new(_haContext, "alarm_control_panel.alarmo");
    public AlarmControlPanelEntity YaleSmartAlarm => new(_haContext, "alarm_control_panel.yale_smart_alarm");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Arm Failed</summary>
    public AutomationEntity AlarmArmFailed => new(_haContext, "automation.alarm_arm_failed");
    ///<summary>Alarm Triggered</summary>
    public AutomationEntity AlarmTriggered => new(_haContext, "automation.alarm_triggered");
    ///<summary>Arm Alarmo when away</summary>
    public AutomationEntity ArmAlarmoWhenAway => new(_haContext, "automation.arm_alarmo_when_away");
    ///<summary>Arrive Home</summary>
    public AutomationEntity ArriveHome => new(_haContext, "automation.arrive_home");
    ///<summary>Snake Temp</summary>
    public AutomationEntity Automation61 => new(_haContext, "automation.automation_61");
    ///<summary>Cheap Cooling On</summary>
    public AutomationEntity CheapCoolHouse => new(_haContext, "automation.cheap_cool_house");
    ///<summary>Cheap Heating Off</summary>
    public AutomationEntity CheapHeatingOff => new(_haContext, "automation.cheap_heating_off");
    ///<summary>Cheap Heating On</summary>
    public AutomationEntity CheapHeatingOn => new(_haContext, "automation.cheap_heating_on");
    ///<summary>Cheap Hot Tub</summary>
    public AutomationEntity CheapHotTub => new(_haContext, "automation.cheap_hot_tub");
    ///<summary>Close lounge blind to position</summary>
    public AutomationEntity CloseLoungeBlindToPosition => new(_haContext, "automation.close_lounge_blind_to_position");
    ///<summary>Controller - IKEA E1524/E1810 5-Button Remote</summary>
    public AutomationEntity ControllerIkeaE1524E18105ButtonRemote => new(_haContext, "automation.controller_ikea_e1524_e1810_5_button_remote");
    ///<summary>Ding Blinks Office</summary>
    public AutomationEntity DingBlinksOffice => new(_haContext, "automation.ding_blinks_office");
    ///<summary>Door Lock Checks</summary>
    public AutomationEntity DoorLockChecks => new(_haContext, "automation.door_lock_checks");
    ///<summary>Door Lock Checks</summary>
    public AutomationEntity DoorLockChecks2 => new(_haContext, "automation.door_lock_checks_2");
    ///<summary>Door Notify</summary>
    public AutomationEntity DoorNotify => new(_haContext, "automation.door_notify");
    ///<summary>Doorbell</summary>
    public AutomationEntity Doorbell => new(_haContext, "automation.doorbell");
    ///<summary>Front Door Motion</summary>
    public AutomationEntity FrontDoorMotion => new(_haContext, "automation.front_door_motion");
    ///<summary>Granny Arrives</summary>
    public AutomationEntity GrannyArrives => new(_haContext, "automation.granny_arrives");
    ///<summary>Hass Started</summary>
    public AutomationEntity HassStarted => new(_haContext, "automation.hass_started");
    ///<summary>Hot tub bubble timer</summary>
    public AutomationEntity HotTubBubbleTimer => new(_haContext, "automation.hot_tub_bubble_timer");
    ///<summary>House Mode Request</summary>
    public AutomationEntity HouseModeRequest => new(_haContext, "automation.house_mode_request");
    ///<summary>House Mode Response</summary>
    public AutomationEntity HouseModeResponse => new(_haContext, "automation.house_mode_response");
    ///<summary>IKEA Open/Close Remote</summary>
    public AutomationEntity IkeaOpenCloseRemote => new(_haContext, "automation.ikea_open_close_remote");
    ///<summary>In Bed</summary>
    public AutomationEntity InBed => new(_haContext, "automation.in_bed");
    ///<summary>Jayden motion alert</summary>
    public AutomationEntity JaydenMotionAlert => new(_haContext, "automation.jayden_motion_alert");
    ///<summary>Jayden Check Rex </summary>
    public AutomationEntity JaydenRexWater => new(_haContext, "automation.jayden_rex_water");
    ///<summary>Leave Home</summary>
    public AutomationEntity LeaveHome => new(_haContext, "automation.leave_home");
    ///<summary>Meeting started announcement</summary>
    public AutomationEntity MeetingStartedAnnouncement => new(_haContext, "automation.meeting_started_announcement");
    ///<summary>Turn off tele</summary>
    public AutomationEntity NewAutomation => new(_haContext, "automation.new_automation");
    ///<summary>Night Mode Request</summary>
    public AutomationEntity NightModeRequest => new(_haContext, "automation.night_mode_request");
    ///<summary>Night Mode Response</summary>
    public AutomationEntity NightModeResponse => new(_haContext, "automation.night_mode_response");
    ///<summary>Jayden Notify out of bed</summary>
    public AutomationEntity NotifyOutOfBed => new(_haContext, "automation.notify_out_of_bed");
    ///<summary>Office Door Left Open Request</summary>
    public AutomationEntity OfficeDoorLeftOpenRequest => new(_haContext, "automation.office_door_left_open_request");
    ///<summary>Office Door Left Open Response</summary>
    public AutomationEntity OfficeDoorLeftOpenResponse => new(_haContext, "automation.office_door_left_open_response");
    ///<summary>Play something on Lounge at sunset</summary>
    public AutomationEntity PlaySomethingOnLoungeAtSunset => new(_haContext, "automation.play_something_on_lounge_at_sunset");
    ///<summary>Remote Trial</summary>
    public AutomationEntity RemoteTrial => new(_haContext, "automation.remote_trial");
    ///<summary>reset radiator mode</summary>
    public AutomationEntity ResetRadiatorMode => new(_haContext, "automation.reset_radiator_mode");
    ///<summary>Rob</summary>
    public AutomationEntity Rob => new(_haContext, "automation.rob");
    ///<summary>Run Dishwasher </summary>
    public AutomationEntity RunDishwasher => new(_haContext, "automation.run_dishwasher");
    ///<summary>Set Ring Snapshot Interval on Startup</summary>
    public AutomationEntity SetRingSnapshotIntervalOnStartup => new(_haContext, "automation.set_ring_snapshot_interval_on_startup");
    ///<summary>Snooze Ring Chime</summary>
    public AutomationEntity SnoozeRingChime => new(_haContext, "automation.snooze_ring_chime");
    ///<summary>Snow machine</summary>
    public AutomationEntity SnowMachine => new(_haContext, "automation.snow_machine");
    ///<summary>Turn off alarm</summary>
    public AutomationEntity TurnOffAlarm => new(_haContext, "automation.turn_off_alarm");
    ///<summary>Turn off Heating and Hotwater when traveling away from home</summary>
    public AutomationEntity TurnOffHeatingAndHotwaterWhenTravelingAwayFromHome => new(_haContext, "automation.turn_off_heating_and_hotwater_when_traveling_away_from_home");
    ///<summary>Turn off lounge tele when paused</summary>
    public AutomationEntity TurnOffLoungeTeleWhenPaused => new(_haContext, "automation.turn_off_lounge_tele_when_paused");
    ///<summary>Turn on Alarm</summary>
    public AutomationEntity TurnOnAlarm => new(_haContext, "automation.turn_on_alarm");
    ///<summary>Turn on Heating and Hotwater when traveling to home</summary>
    public AutomationEntity TurnOnHeatingAndHotwaterWhenTravelingToHome => new(_haContext, "automation.turn_on_heating_and_hotwater_when_traveling_to_home");
    ///<summary>Utilities Acknowledged</summary>
    public AutomationEntity UtilitiesAcknowledged => new(_haContext, "automation.utilities_acknowledged");
    ///<summary>Wake Eugene Desktop</summary>
    public AutomationEntity WakeEugeneDesktop => new(_haContext, "automation.wake_eugene_desktop");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron Motion</summary>
    public BinarySensorEntity AaronMotion => new(_haContext, "binary_sensor.aaron_motion");
    ///<summary>Aaron Motion Occupancy</summary>
    public BinarySensorEntity AaronMotionOccupancy => new(_haContext, "binary_sensor.aaron_motion_occupancy");
    ///<summary>Aaron’s iPad Focus</summary>
    public BinarySensorEntity AaronsIpadFocus => new(_haContext, "binary_sensor.aarons_ipad_focus");
    ///<summary>Aaron’s iPhone Focus</summary>
    public BinarySensorEntity AaronsIphoneFocus => new(_haContext, "binary_sensor.aarons_iphone_focus");
    ///<summary>Aubrecia Drive Motion</summary>
    public BinarySensorEntity AubreciaDriveMotion => new(_haContext, "binary_sensor.aubrecia_drive_motion");
    ///<summary>Motion</summary>
    public BinarySensorEntity AubreciaDriveMotion2 => new(_haContext, "binary_sensor.aubrecia_drive_motion_2");
    ///<summary>Front Door</summary>
    public BinarySensorEntity AubreciaFrontDoor => new(_haContext, "binary_sensor.aubrecia_front_door");
    ///<summary>Aubrecia Front Door Ding</summary>
    public BinarySensorEntity AubreciaFrontDoorDing => new(_haContext, "binary_sensor.aubrecia_front_door_ding");
    ///<summary>Aubrecia Front Door Ding</summary>
    public BinarySensorEntity AubreciaFrontDoorDing2 => new(_haContext, "binary_sensor.aubrecia_front_door_ding_2");
    ///<summary>Ding</summary>
    public BinarySensorEntity AubreciaFrontDoorDing3 => new(_haContext, "binary_sensor.aubrecia_front_door_ding_3");
    ///<summary>Aubrecia Front Door Motion</summary>
    public BinarySensorEntity AubreciaFrontDoorMotion => new(_haContext, "binary_sensor.aubrecia_front_door_motion");
    ///<summary>Aubrecia Front Door Motion</summary>
    public BinarySensorEntity AubreciaFrontDoorMotion2 => new(_haContext, "binary_sensor.aubrecia_front_door_motion_2");
    ///<summary>Motion</summary>
    public BinarySensorEntity AubreciaFrontDoorMotion3 => new(_haContext, "binary_sensor.aubrecia_front_door_motion_3");
    ///<summary>Patio Door</summary>
    public BinarySensorEntity AubreciaPatioDoor => new(_haContext, "binary_sensor.aubrecia_patio_door");
    ///<summary>Back Door</summary>
    public BinarySensorEntity BackDoor => new(_haContext, "binary_sensor.back_door");
    ///<summary>Bathroom Motion</summary>
    public BinarySensorEntity BathroomMotion => new(_haContext, "binary_sensor.bathroom_motion");
    ///<summary>Bathroom Motion Occupancy</summary>
    public BinarySensorEntity BathroomMotionOccupancy => new(_haContext, "binary_sensor.bathroom_motion_occupancy");
    ///<summary>Dining</summary>
    public BinarySensorEntity Dining => new(_haContext, "binary_sensor.dining");
    ///<summary>Dining Door</summary>
    public BinarySensorEntity DiningDoor => new(_haContext, "binary_sensor.dining_door");
    ///<summary>Dining Motion</summary>
    public BinarySensorEntity DiningMotion => new(_haContext, "binary_sensor.dining_motion");
    ///<summary>Dining Occupancy</summary>
    public BinarySensorEntity DiningOccupancy => new(_haContext, "binary_sensor.dining_occupancy");
    ///<summary>Dishwasher Door</summary>
    public BinarySensorEntity DishwasherDoor => new(_haContext, "binary_sensor.dishwasher_door");
    ///<summary>Dishwasher Remote control</summary>
    public BinarySensorEntity DishwasherRemoteControl => new(_haContext, "binary_sensor.dishwasher_remote_control");
    ///<summary>Dishwasher Remote start</summary>
    public BinarySensorEntity DishwasherRemoteStart => new(_haContext, "binary_sensor.dishwasher_remote_start");
    ///<summary>Entrance Motion</summary>
    public BinarySensorEntity EntranceMotion => new(_haContext, "binary_sensor.entrance_motion");
    ///<summary>Entrance Motion Occupancy</summary>
    public BinarySensorEntity EntranceMotionOccupancy => new(_haContext, "binary_sensor.entrance_motion_occupancy");
    ///<summary>ENVY 6000 Black Ink Status</summary>
    public BinarySensorEntity Envy6000BlackInkStatus => new(_haContext, "binary_sensor.envy_6000_black_ink_status");
    ///<summary>ENVY 6000 Colour Ink Status</summary>
    public BinarySensorEntity Envy6000ColourInkStatus => new(_haContext, "binary_sensor.envy_6000_colour_ink_status");
    ///<summary>ENVY 6000 ePrint Registered</summary>
    public BinarySensorEntity Envy6000EprintRegistered => new(_haContext, "binary_sensor.envy_6000_eprint_registered");
    ///<summary>ENVY 6000 ePrint Status</summary>
    public BinarySensorEntity Envy6000EprintStatus => new(_haContext, "binary_sensor.envy_6000_eprint_status");
    ///<summary>Eugene Desktop Active</summary>
    public BinarySensorEntity EugeneDesktopActive => new(_haContext, "binary_sensor.eugene_desktop_active");
    ///<summary>Eugene&apos;s iPhone Focus</summary>
    public BinarySensorEntity EugeneSIphoneFocus => new(_haContext, "binary_sensor.eugene_s_iphone_focus");
    ///<summary>EugeneNiemand</summary>
    public BinarySensorEntity Eugeneniemand => new(_haContext, "binary_sensor.eugeneniemand");
    ///<summary>Eugene&apos;s MacBook Active</summary>
    public BinarySensorEntity EugenesMacbookActive => new(_haContext, "binary_sensor.eugenes_macbook_active");
    ///<summary>Eugene&apos;s MacBook Audio Input In Use</summary>
    public BinarySensorEntity EugenesMacbookAudioInputInUse => new(_haContext, "binary_sensor.eugenes_macbook_audio_input_in_use");
    ///<summary>Eugene&apos;s MacBook Audio Output In Use</summary>
    public BinarySensorEntity EugenesMacbookAudioOutputInUse => new(_haContext, "binary_sensor.eugenes_macbook_audio_output_in_use");
    ///<summary>Eugene&apos;s MacBook Camera In Use</summary>
    public BinarySensorEntity EugenesMacbookCameraInUse => new(_haContext, "binary_sensor.eugenes_macbook_camera_in_use");
    ///<summary>Eugene&apos;s MacBook Focus</summary>
    public BinarySensorEntity EugenesMacbookFocus => new(_haContext, "binary_sensor.eugenes_macbook_focus");
    ///<summary>Front Door</summary>
    public BinarySensorEntity FrontDoor => new(_haContext, "binary_sensor.front_door");
    ///<summary>G3061WM904 Active</summary>
    public BinarySensorEntity G3061wm904Active => new(_haContext, "binary_sensor.g3061wm904_active");
    ///<summary>G3061WM904 Audio Input In Use</summary>
    public BinarySensorEntity G3061wm904AudioInputInUse => new(_haContext, "binary_sensor.g3061wm904_audio_input_in_use");
    ///<summary>G3061WM904 Audio Output In Use</summary>
    public BinarySensorEntity G3061wm904AudioOutputInUse => new(_haContext, "binary_sensor.g3061wm904_audio_output_in_use");
    ///<summary>G3061WM904 Camera In Use</summary>
    public BinarySensorEntity G3061wm904CameraInUse => new(_haContext, "binary_sensor.g3061wm904_camera_in_use");
    ///<summary>G3061WM904 Focus</summary>
    public BinarySensorEntity G3061wm904Focus => new(_haContext, "binary_sensor.g3061wm904_focus");
    ///<summary>Garage Door</summary>
    public BinarySensorEntity GarageBackDoor => new(_haContext, "binary_sensor.garage_back_door");
    ///<summary>Motion</summary>
    public BinarySensorEntity GardenMotion => new(_haContext, "binary_sensor.garden_motion");
    ///<summary>Garden Motion</summary>
    public BinarySensorEntity GardenMotion2 => new(_haContext, "binary_sensor.garden_motion_2");
    ///<summary>H Work Mac Active</summary>
    public BinarySensorEntity HWorkMacActive => new(_haContext, "binary_sensor.h_work_mac_active");
    ///<summary>H Work Mac Audio Input In Use</summary>
    public BinarySensorEntity HWorkMacAudioInputInUse => new(_haContext, "binary_sensor.h_work_mac_audio_input_in_use");
    ///<summary>H Work Mac Audio Output In Use</summary>
    public BinarySensorEntity HWorkMacAudioOutputInUse => new(_haContext, "binary_sensor.h_work_mac_audio_output_in_use");
    ///<summary>H Work Mac Camera In Use</summary>
    public BinarySensorEntity HWorkMacCameraInUse => new(_haContext, "binary_sensor.h_work_mac_camera_in_use");
    ///<summary>H Work Mac Focus</summary>
    public BinarySensorEntity HWorkMacFocus => new(_haContext, "binary_sensor.h_work_mac_focus");
    ///<summary>Hailey&apos;s iPhone Focus</summary>
    public BinarySensorEntity HaileySIphoneFocus => new(_haContext, "binary_sensor.hailey_s_iphone_focus");
    ///<summary>Hailey’s MacBook Air Active</summary>
    public BinarySensorEntity HaileysMacbookAirActive => new(_haContext, "binary_sensor.haileys_macbook_air_active");
    ///<summary>Hailey’s MacBook Air Audio Output In Use</summary>
    public BinarySensorEntity HaileysMacbookAirAudioOutputInUse => new(_haContext, "binary_sensor.haileys_macbook_air_audio_output_in_use");
    ///<summary>Hailey’s MacBook Air Camera In Use</summary>
    public BinarySensorEntity HaileysMacbookAirCameraInUse => new(_haContext, "binary_sensor.haileys_macbook_air_camera_in_use");
    ///<summary>Hailey’s MacBook Air FaceTime HD Camera (Built-in)</summary>
    public BinarySensorEntity HaileysMacbookAirFacetimeHdCameraBuiltIn => new(_haContext, "binary_sensor.haileys_macbook_air_facetime_hd_camera_built_in");
    ///<summary>Hailey’s MacBook Air Focus</summary>
    public BinarySensorEntity HaileysMacbookAirFocus => new(_haContext, "binary_sensor.haileys_macbook_air_focus");
    ///<summary>Hailey’s MacBook Air krisp microphone</summary>
    public BinarySensorEntity HaileysMacbookAirKrispMicrophone => new(_haContext, "binary_sensor.haileys_macbook_air_krisp_microphone");
    ///<summary>Hailey’s MacBook Air MacBook Air Microphone</summary>
    public BinarySensorEntity HaileysMacbookAirMacbookAirMicrophone => new(_haContext, "binary_sensor.haileys_macbook_air_macbook_air_microphone");
    ///<summary>Hailey’s MacBook Air Microphone In Use</summary>
    public BinarySensorEntity HaileysMacbookAirMicrophoneInUse => new(_haContext, "binary_sensor.haileys_macbook_air_microphone_in_use");
    ///<summary>Hailey’s MacBook Air PLT_Legend</summary>
    public BinarySensorEntity HaileysMacbookAirPltLegend => new(_haContext, "binary_sensor.haileys_macbook_air_plt_legend");
    ///<summary>Hailey’s MacBook Air USB PnP Audio Device</summary>
    public BinarySensorEntity HaileysMacbookAirUsbPnpAudioDevice => new(_haContext, "binary_sensor.haileys_macbook_air_usb_pnp_audio_device");
    ///<summary>Hallway</summary>
    public BinarySensorEntity Hallway => new(_haContext, "binary_sensor.hallway");
    ///<summary>Home Occupied</summary>
    public BinarySensorEntity HomeOccupied => new(_haContext, "binary_sensor.home_occupied");
    ///<summary>Indoor 2 Motion</summary>
    public BinarySensorEntity Indoor2Motion => new(_haContext, "binary_sensor.indoor_2_motion");
    ///<summary>Indoor 2 Motion</summary>
    public BinarySensorEntity Indoor2Motion2 => new(_haContext, "binary_sensor.indoor_2_motion_2");
    ///<summary>Jayden Motion</summary>
    public BinarySensorEntity JaydenMotion => new(_haContext, "binary_sensor.jayden_motion");
    ///<summary>Jayden Occupancy</summary>
    public BinarySensorEntity JaydenMotionOccupancy => new(_haContext, "binary_sensor.jayden_motion_occupancy");
    ///<summary>Jayden ’s iPad Focus</summary>
    public BinarySensorEntity JaydenSIpadFocus => new(_haContext, "binary_sensor.jayden_s_ipad_focus");
    ///<summary>Johan Front Door Ding</summary>
    public BinarySensorEntity JohanFrontDoorDing => new(_haContext, "binary_sensor.johan_front_door_ding");
    ///<summary>Ding</summary>
    public BinarySensorEntity JohanFrontDoorDing2 => new(_haContext, "binary_sensor.johan_front_door_ding_2");
    ///<summary>Johan Front Door Motion</summary>
    public BinarySensorEntity JohanFrontDoorMotion => new(_haContext, "binary_sensor.johan_front_door_motion");
    ///<summary>Motion</summary>
    public BinarySensorEntity JohanFrontDoorMotion2 => new(_haContext, "binary_sensor.johan_front_door_motion_2");
    ///<summary>IKEA of Sweden TRADFRI open/close remote 3dcb2efe on_off</summary>
    public BinarySensorEntity KeTradfriOpenCloseRemote3dcb2efeOnOff => new(_haContext, "binary_sensor.ke_tradfri_open_close_remote_3dcb2efe_on_off");
    ///<summary>Kitchen</summary>
    public BinarySensorEntity Kitchen => new(_haContext, "binary_sensor.kitchen");
    ///<summary>Kitchen Motion</summary>
    public BinarySensorEntity KitchenMotion => new(_haContext, "binary_sensor.kitchen_motion");
    ///<summary>Kitchen Occupancy</summary>
    public BinarySensorEntity KitchenMotionOccupancy => new(_haContext, "binary_sensor.kitchen_motion_occupancy");
    ///<summary>Landing</summary>
    public BinarySensorEntity Landing => new(_haContext, "binary_sensor.landing");
    ///<summary>Landing Motion</summary>
    public BinarySensorEntity LandingMotion => new(_haContext, "binary_sensor.landing_motion");
    ///<summary>landing motion occupancy</summary>
    public BinarySensorEntity LandingMotionOccupancy => new(_haContext, "binary_sensor.landing_motion_occupancy");
    ///<summary>Landing Smoke</summary>
    public BinarySensorEntity LandingSmoke => new(_haContext, "binary_sensor.landing_smoke");
    ///<summary>Lounge</summary>
    public BinarySensorEntity Lounge => new(_haContext, "binary_sensor.lounge");
    ///<summary>Lounge Door</summary>
    public BinarySensorEntity LoungeDoor => new(_haContext, "binary_sensor.lounge_door");
    ///<summary>Lounge Microphone</summary>
    public BinarySensorEntity LoungeMicrophone => new(_haContext, "binary_sensor.lounge_microphone");
    ///<summary>Lounge Motion</summary>
    public BinarySensorEntity LoungeMotion => new(_haContext, "binary_sensor.lounge_motion");
    ///<summary>Lounge Motion Occupancy</summary>
    public BinarySensorEntity LoungeMotionOccupancy => new(_haContext, "binary_sensor.lounge_motion_occupancy");
    ///<summary>contact fd Opening</summary>
    public BinarySensorEntity LumiLumiSensorMagnetAq256141203OnOff => new(_haContext, "binary_sensor.lumi_lumi_sensor_magnet_aq2_56141203_on_off");
    ///<summary>contact right window Opening</summary>
    public BinarySensorEntity LumiLumiSensorMagnetAq283903a03OnOff => new(_haContext, "binary_sensor.lumi_lumi_sensor_magnet_aq2_83903a03_on_off");
    ///<summary>LUMI lumi.sensor_magnet.aq2 8c913a03 on_off</summary>
    public BinarySensorEntity LumiLumiSensorMagnetAq28c913a03OnOff => new(_haContext, "binary_sensor.lumi_lumi_sensor_magnet_aq2_8c913a03_on_off");
    ///<summary>Office Door Opening</summary>
    public BinarySensorEntity LumiLumiSensorMagnetAq2OnOff => new(_haContext, "binary_sensor.lumi_lumi_sensor_magnet_aq2_on_off");
    ///<summary>Master Motion</summary>
    public BinarySensorEntity MasterMotion => new(_haContext, "binary_sensor.master_motion");
    ///<summary>Master Motion Occupancy</summary>
    public BinarySensorEntity MasterMotionOccupancy => new(_haContext, "binary_sensor.master_motion_occupancy");
    ///<summary>My Wall Panel My Wall Panel AC Plugged</summary>
    public BinarySensorEntity MyWallPanelAcPlugged => new(_haContext, "binary_sensor.my_wall_panel_ac_plugged");
    ///<summary>My Wall Panel My Wall Panel Charging</summary>
    public BinarySensorEntity MyWallPanelCharging => new(_haContext, "binary_sensor.my_wall_panel_charging");
    ///<summary>My Wall Panel My Wall Panel Motion Detected</summary>
    public BinarySensorEntity MyWallPanelMotionDetected => new(_haContext, "binary_sensor.my_wall_panel_motion_detected");
    ///<summary>My Wall Panel My Wall Panel USB Plugged</summary>
    public BinarySensorEntity MyWallPanelUsbPlugged => new(_haContext, "binary_sensor.my_wall_panel_usb_plugged");
    ///<summary>Drive</summary>
    public BinarySensorEntity NiemandDriveMotion => new(_haContext, "binary_sensor.niemand_drive_motion");
    ///<summary>Niemand Drive Motion</summary>
    public BinarySensorEntity NiemandDriveMotion2 => new(_haContext, "binary_sensor.niemand_drive_motion_2");
    ///<summary>Niemand Front Door Ding</summary>
    public BinarySensorEntity NiemandFrontDoorDing => new(_haContext, "binary_sensor.niemand_front_door_ding");
    ///<summary>Niemand Front Door Ding</summary>
    public BinarySensorEntity NiemandFrontDoorDing2 => new(_haContext, "binary_sensor.niemand_front_door_ding_2");
    ///<summary>Front Door</summary>
    public BinarySensorEntity NiemandFrontDoorMotion => new(_haContext, "binary_sensor.niemand_front_door_motion");
    ///<summary>Niemand Front Door Motion</summary>
    public BinarySensorEntity NiemandFrontDoorMotion2 => new(_haContext, "binary_sensor.niemand_front_door_motion_2");
    ///<summary>Garage</summary>
    public BinarySensorEntity NiemandGarageMotion => new(_haContext, "binary_sensor.niemand_garage_motion");
    ///<summary>Niemand Garage Motion</summary>
    public BinarySensorEntity NiemandGarageMotion2 => new(_haContext, "binary_sensor.niemand_garage_motion_2");
    ///<summary>Garden</summary>
    public BinarySensorEntity NiemandGardenMotion => new(_haContext, "binary_sensor.niemand_garden_motion");
    ///<summary>Garden</summary>
    public BinarySensorEntity NiemandGardenMotion2 => new(_haContext, "binary_sensor.niemand_garden_motion_2");
    ///<summary>Niemand Indoor 1 Motion</summary>
    public BinarySensorEntity NiemandIndoor1Motion => new(_haContext, "binary_sensor.niemand_indoor_1_motion");
    ///<summary>Niemand Indoor 1 Motion</summary>
    public BinarySensorEntity NiemandIndoor1Motion2 => new(_haContext, "binary_sensor.niemand_indoor_1_motion_2");
    ///<summary>Side</summary>
    public BinarySensorEntity NiemandSideMotion => new(_haContext, "binary_sensor.niemand_side_motion");
    ///<summary>Niemand Side Motion</summary>
    public BinarySensorEntity NiemandSideMotion2 => new(_haContext, "binary_sensor.niemand_side_motion_2");
    ///<summary>Octoplus Saving Session (A-713CD539)</summary>
    public BinarySensorEntity OctopusEnergyA713cd539OctoplusSavingSessions => new(_haContext, "binary_sensor.octopus_energy_a_713cd539_octoplus_saving_sessions");
    ///<summary>Off Peak Electricity (18L2161921/1015682729636)</summary>
    public BinarySensorEntity OctopusEnergyElectricity18l21619211015682729636OffPeak => new(_haContext, "binary_sensor.octopus_energy_electricity_18l2161921_1015682729636_off_peak");
    ///<summary>Octopus Energy Saving Session</summary>
    public BinarySensorEntity OctopusEnergySavingSession => new(_haContext, "binary_sensor.octopus_energy_saving_session");
    ///<summary>Octopus Energy Target hottub</summary>
    public BinarySensorEntity OctopusEnergyTargetHottub => new(_haContext, "binary_sensor.octopus_energy_target_hottub");
    ///<summary>Octopus Energy Target three_hour</summary>
    public BinarySensorEntity OctopusEnergyTargetThreeHour => new(_haContext, "binary_sensor.octopus_energy_target_three_hour");
    ///<summary>Office Motion</summary>
    public BinarySensorEntity OfficeMotion => new(_haContext, "binary_sensor.office_motion");
    ///<summary>Office Motion Occupancy</summary>
    public BinarySensorEntity OfficeMotionOccupancy => new(_haContext, "binary_sensor.office_motion_occupancy");
    ///<summary>Pi-Hole Status</summary>
    public BinarySensorEntity PiHole => new(_haContext, "binary_sensor.pi_hole");
    ///<summary>Core Update Available</summary>
    public BinarySensorEntity PiHoleCoreUpdateAvailable => new(_haContext, "binary_sensor.pi_hole_core_update_available");
    ///<summary>FTL Update Available</summary>
    public BinarySensorEntity PiHoleFtlUpdateAvailable => new(_haContext, "binary_sensor.pi_hole_ftl_update_available");
    ///<summary>Web Update Available</summary>
    public BinarySensorEntity PiHoleWebUpdateAvailable => new(_haContext, "binary_sensor.pi_hole_web_update_available");
    ///<summary>Ping Google</summary>
    public BinarySensorEntity PingGoogle => new(_haContext, "binary_sensor.ping_google");
    ///<summary>Ping Konnected Add On</summary>
    public BinarySensorEntity PingKonnectedAddOn => new(_haContext, "binary_sensor.ping_konnected_add_on");
    ///<summary>Ping Konnected Main</summary>
    public BinarySensorEntity PingKonnectedMain => new(_haContext, "binary_sensor.ping_konnected_main");
    ///<summary>Playroom Motion</summary>
    public BinarySensorEntity PlayroomMotion => new(_haContext, "binary_sensor.playroom_motion");
    ///<summary>Playroom Occupancy</summary>
    public BinarySensorEntity PlayroomMotionOccupancy => new(_haContext, "binary_sensor.playroom_motion_occupancy");
    ///<summary>Refrigerator Door open</summary>
    public BinarySensorEntity RefrigeratorDoorOpen => new(_haContext, "binary_sensor.refrigerator_door_open");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>Study</summary>
    public BinarySensorEntity Study => new(_haContext, "binary_sensor.study");
    ///<summary>Toilet Motion</summary>
    public BinarySensorEntity ToiletMotion => new(_haContext, "binary_sensor.toilet_motion");
    ///<summary>Toilet Motion Occupancy</summary>
    public BinarySensorEntity ToiletMotionOccupancy => new(_haContext, "binary_sensor.toilet_motion_occupancy");
    ///<summary>Updater</summary>
    public BinarySensorEntity Updater => new(_haContext, "binary_sensor.updater");
    ///<summary>Utility Motion</summary>
    public BinarySensorEntity UtilityMotion => new(_haContext, "binary_sensor.utility_motion");
    ///<summary>Utility Motion Occupancy</summary>
    public BinarySensorEntity UtilityMotionOccupancy => new(_haContext, "binary_sensor.utility_motion_occupancy");
    ///<summary>Workday Sensor</summary>
    public BinarySensorEntity WorkdaySensor => new(_haContext, "binary_sensor.workday_sensor");
    ///<summary>Battery</summary>
    public BinarySensorEntity YaleSmartAlarmBattery => new(_haContext, "binary_sensor.yale_smart_alarm_battery");
    ///<summary>Jam</summary>
    public BinarySensorEntity YaleSmartAlarmJam => new(_haContext, "binary_sensor.yale_smart_alarm_jam");
    ///<summary>Power loss</summary>
    public BinarySensorEntity YaleSmartAlarmPowerLoss => new(_haContext, "binary_sensor.yale_smart_alarm_power_loss");
    ///<summary>Tamper</summary>
    public BinarySensorEntity YaleSmartAlarmTamper => new(_haContext, "binary_sensor.yale_smart_alarm_tamper");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Take Snapshot</summary>
    public ButtonEntity AubreciaDriveTakeSnapshot => new(_haContext, "button.aubrecia_drive_take_snapshot");
    ///<summary>Take Snapshot</summary>
    public ButtonEntity AubreciaFrontDoorTakeSnapshot => new(_haContext, "button.aubrecia_front_door_take_snapshot");
    ///<summary>Backdoor Identify</summary>
    public ButtonEntity BackdoorIdentify => new(_haContext, "button.backdoor_identify");
    ///<summary>EUGENE_DESKTOP EUGENE_DESKTOP_sleep</summary>
    public ButtonEntity EugeneDesktopSleep => new(_haContext, "button.eugene_desktop_sleep");
    ///<summary>EUGENE_DESKTOP EUGENE_DESKTOP_update_minecraft</summary>
    public ButtonEntity EugeneDesktopUpdateMinecraft => new(_haContext, "button.eugene_desktop_update_minecraft");
    ///<summary>Fish Lights Identify</summary>
    public ButtonEntity FishLightsIdentify => new(_haContext, "button.fish_lights_identify");
    ///<summary>Take Snapshot</summary>
    public ButtonEntity GardenTakeSnapshot => new(_haContext, "button.garden_take_snapshot");
    ///<summary>landing blind Identify</summary>
    public ButtonEntity IkeaOfSwedenFyrturBlockOutRollerBlind29529dfeIdentify => new(_haContext, "button.ikea_of_sweden_fyrtur_block_out_roller_blind_29529dfe_identify");
    ///<summary>dining wall 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WOpal1000lm9919fcfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_w_opal_1000lm_9919fcfe_identify");
    ///<summary>dining wall 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WOpal1000lmB4b1f3feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_w_opal_1000lm_b4b1f3fe_identify");
    ///<summary>lounge front Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lm7aba12feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_7aba12fe_identify");
    ///<summary>Floor Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lm9f6c01feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_9f6c01fe_identify");
    ///<summary>Playroom Main Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lmB87713feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_b87713fe_identify");
    ///<summary>lounge back Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lmC8a903feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_c8a903fe_identify");
    ///<summary>office 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm062b4bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_062b4bfe_identify");
    ///<summary>Master Nightlight Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm145c4bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_145c4bfe_identify");
    ///<summary>Aaron 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm1e5368feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_1e5368fe_identify");
    ///<summary>master 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm21daf6feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_21daf6fe_identify");
    ///<summary>office 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm235a5dfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_235a5dfe_identify");
    ///<summary>dining 4 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm26f462feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_26f462fe_identify");
    ///<summary>dining 5 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm31244bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_31244bfe_identify");
    ///<summary>Aaron 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm341922feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_341922fe_identify");
    ///<summary>dining 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm502e4cfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_502e4cfe_identify");
    ///<summary>Master 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm5c78f6feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_5c78f6fe_identify");
    ///<summary>master 4 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm5ec17bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_5ec17bfe_identify");
    ///<summary>Aaron 4 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm8bb43dfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_8bb43dfe_identify");
    ///<summary>master 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm937af8feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_937af8fe_identify");
    ///<summary>dining 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lmBb0a4cfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_bb0a4cfe_identify");
    ///<summary>Aaron 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lmCdee3efeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_cdee3efe_identify");
    ///<summary>dining 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lmF8ea62feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_f8ea62fe_identify");
    ///<summary>kitchen 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm00caeefeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_00caeefe_identify");
    ///<summary>kitchen 6 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm22331afeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_22331afe_identify");
    ///<summary>toilet Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm32d2bdfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_32d2bdfe_identify");
    ///<summary>entrance Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm436af0feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_436af0fe_identify");
    ///<summary>utility 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm680f1cfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_680f1cfe_identify");
    ///<summary>utility 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm7d61cbfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_7d61cbfe_identify");
    ///<summary>hallway Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm8ba6b5feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_8ba6b5fe_identify");
    ///<summary>kitchen 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmB86ff0feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_b86ff0fe_identify");
    ///<summary>utility 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmCf4febfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_cf4febfe_identify");
    ///<summary>kitchen 5 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmD4fdf0feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_d4fdf0fe_identify");
    ///<summary>kitchen 4 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmF58cf0feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_f58cf0fe_identify");
    ///<summary>kitchen 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmFd78f0feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_fd78f0fe_identify");
    ///<summary>IKEA of Sweden TRADFRI open/close remote Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriOpenCloseRemote3dcb2efeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_open_close_remote_3dcb2efe_identify");
    ///<summary>IKEA of Sweden TRADFRI remote control Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriRemoteControl580e51feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_remote_control_580e51fe_identify");
    ///<summary>IKEA of Sweden TRADFRI remote control Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriRemoteControlD73648feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_remote_control_d73648fe_identify");
    ///<summary>IKEA of Sweden TRADFRI Signal Repeater Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriSignalRepeaterIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_signal_repeater_identify");
    ///<summary>Aaron Main Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfribulbg125e27wsopal470lm9b7e6bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfribulbg125e27wsopal470lm_9b7e6bfe_identify");
    ///<summary>Indoor 2 Take Snapshot</summary>
    public ButtonEntity Indoor2TakeSnapshot => new(_haContext, "button.indoor_2_take_snapshot");
    ///<summary>Jayden 1 Identify</summary>
    public ButtonEntity Jayden1Identify3 => new(_haContext, "button.jayden_1_identify_3");
    ///<summary>Jayden 2 Identify</summary>
    public ButtonEntity Jayden2Identify4 => new(_haContext, "button.jayden_2_identify_4");
    ///<summary>Jayden 3 Identify</summary>
    public ButtonEntity Jayden3Identify2 => new(_haContext, "button.jayden_3_identify_2");
    ///<summary>Jayden 4 Identify</summary>
    public ButtonEntity Jayden4Identify => new(_haContext, "button.jayden_4_identify");
    ///<summary>Take Snapshot</summary>
    public ButtonEntity JohanFrontDoorTakeSnapshot => new(_haContext, "button.johan_front_door_take_snapshot");
    ///<summary>Landing 1 Identify</summary>
    public ButtonEntity Landing1Identify => new(_haContext, "button.landing_1_identify");
    ///<summary>Landing 2 Identify</summary>
    public ButtonEntity Landing2Identify3 => new(_haContext, "button.landing_2_identify_3");
    ///<summary>Landing 3 Identify</summary>
    public ButtonEntity Landing3Identify4 => new(_haContext, "button.landing_3_identify_4");
    ///<summary>Landing 4 Identify</summary>
    public ButtonEntity Landing4Identify5 => new(_haContext, "button.landing_4_identify_5");
    ///<summary>Landing 5 Identify</summary>
    public ButtonEntity Landing5Identify2 => new(_haContext, "button.landing_5_identify_2");
    ///<summary>Landing 7 Identify</summary>
    public ButtonEntity Landing7Identify => new(_haContext, "button.landing_7_identify");
    ///<summary>Kitchen Restart</summary>
    public ButtonEntity LoungeRestart => new(_haContext, "button.lounge_restart");
    ///<summary>Dining Door Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq238f0ec02Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_38f0ec02_identify");
    ///<summary>contact fd Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq256141203Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_56141203_identify");
    ///<summary>contact right window Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq283903a03Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_83903a03_identify");
    ///<summary>Lounge Door Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq29e0b1203Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_9e0b1203_identify");
    ///<summary>Office Door Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq2Ac831303Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_ac831303_identify");
    ///<summary>Garage Door Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq2E6b02103Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_e6b02103_identify");
    ///<summary>Dining Motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq234796603Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_34796603_identify");
    ///<summary>Aaron motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq23ca2f202Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_3ca2f202_identify");
    ///<summary>Toilet Motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq24123f403Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_4123f403_identify");
    ///<summary>kitchen motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq254c2f302Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_54c2f302_identify");
    ///<summary>master motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2591d1b03Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_591d1b03_identify");
    ///<summary>Jayden motion  Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq25cf75702Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_5cf75702_identify");
    ///<summary>Lounge Motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq27dce1303Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_7dce1303_identify");
    ///<summary>bathroom motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq297a7f202Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_97a7f202_identify");
    ///<summary>utility motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2B4796603Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_b4796603_identify");
    ///<summary>landing motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2C0a6f202Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_c0a6f202_identify");
    ///<summary>playroom motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2Ea1a1404Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_ea1a1404_identify");
    ///<summary>entrance motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2Ef2f1404Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_ef2f1404_identify");
    ///<summary>office motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2F33b1404Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_f33b1404_identify");
    ///<summary>Niemand Drive Take Snapshot</summary>
    public ButtonEntity NiemandDriveTakeSnapshot => new(_haContext, "button.niemand_drive_take_snapshot");
    ///<summary>Niemand Front Door Take Snapshot</summary>
    public ButtonEntity NiemandFrontDoorTakeSnapshot => new(_haContext, "button.niemand_front_door_take_snapshot");
    ///<summary>Niemand Garage Take Snapshot</summary>
    public ButtonEntity NiemandGarageTakeSnapshot => new(_haContext, "button.niemand_garage_take_snapshot");
    ///<summary>Niemand Garden Take Snapshot</summary>
    public ButtonEntity NiemandGardenTakeSnapshot => new(_haContext, "button.niemand_garden_take_snapshot");
    ///<summary>Niemand Indoor 1 Take Snapshot</summary>
    public ButtonEntity NiemandIndoor1TakeSnapshot => new(_haContext, "button.niemand_indoor_1_take_snapshot");
    ///<summary>Niemand Side Take Snapshot</summary>
    public ButtonEntity NiemandSideTakeSnapshot => new(_haContext, "button.niemand_side_take_snapshot");
    ///<summary>Lounge Restart</summary>
    public ButtonEntity OfficeRestart => new(_haContext, "button.office_restart");
    ///<summary>Playroom 1 Identify</summary>
    public ButtonEntity Playroom1Identify => new(_haContext, "button.playroom_1_identify");
    ///<summary>Playroom 2 Identify</summary>
    public ButtonEntity Playroom2Identify => new(_haContext, "button.playroom_2_identify");
    ///<summary>Playroom 3 Identify</summary>
    public ButtonEntity Playroom3Identify4 => new(_haContext, "button.playroom_3_identify_4");
    ///<summary>Playroom 4 Identify</summary>
    public ButtonEntity Playroom4Identify2 => new(_haContext, "button.playroom_4_identify_2");
    ///<summary>shelly1-BA6A1C Reboot</summary>
    public ButtonEntity Shelly1Ba6a1cReboot => new(_haContext, "button.shelly1_ba6a1c_reboot");
    ///<summary>Temp_Humi_1 identify</summary>
    public ButtonEntity TempHumi1Identify => new(_haContext, "button.temp_humi_1_identify");
    ///<summary>LUMI lumi.weather d25a0608 identify</summary>
    public ButtonEntity TempHumi2Identify => new(_haContext, "button.temp_humi_2_identify");
    ///<summary>Upstairs Restart</summary>
    public ButtonEntity UpstairsRestart => new(_haContext, "button.upstairs_restart");
    ///<summary>Wiser Boost All Heating</summary>
    public ButtonEntity WiserBoostAllHeating => new(_haContext, "button.wiser_boost_all_heating");
    ///<summary>Wiser Boost Hot Water</summary>
    public ButtonEntity WiserBoostHotWater => new(_haContext, "button.wiser_boost_hot_water");
    ///<summary>Wiser Cancel All Heating Overrides</summary>
    public ButtonEntity WiserCancelAllHeatingOverrides => new(_haContext, "button.wiser_cancel_all_heating_overrides");
    ///<summary>Wiser Cancel Hot Water Overrides</summary>
    public ButtonEntity WiserCancelHotWaterOverrides => new(_haContext, "button.wiser_cancel_hot_water_overrides");
    ///<summary>Wiser Toggle Hot Water</summary>
    public ButtonEntity WiserToggleHotWater => new(_haContext, "button.wiser_toggle_hot_water");
    ///<summary>Panic button</summary>
    public ButtonEntity YaleSmartAlarmPanicButton => new(_haContext, "button.yale_smart_alarm_panic_button");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Anniversaries</summary>
    public CalendarEntity Anniversaries => new(_haContext, "calendar.anniversaries");
    ///<summary>Twinstead Black Wheelie Bin Calendar</summary>
    public CalendarEntity TwinsteadBlackWheelieBinCalendar => new(_haContext, "calendar.twinstead_black_wheelie_bin_calendar");
    ///<summary>Twinstead Blue Bag Calendar</summary>
    public CalendarEntity TwinsteadBlueBagCalendar => new(_haContext, "calendar.twinstead_blue_bag_calendar");
    ///<summary>Twinstead Bulky Waste Calendar</summary>
    public CalendarEntity TwinsteadBulkyWasteCalendar => new(_haContext, "calendar.twinstead_bulky_waste_calendar");
    ///<summary>Twinstead Green Caddy Calendar</summary>
    public CalendarEntity TwinsteadGreenCaddyCalendar => new(_haContext, "calendar.twinstead_green_caddy_calendar");
    ///<summary>Twinstead Green Wheelie Bin (Active) Calendar</summary>
    public CalendarEntity TwinsteadGreenWheelieBinActiveCalendar => new(_haContext, "calendar.twinstead_green_wheelie_bin_active_calendar");
    ///<summary>Twinstead Orange Box Calendar</summary>
    public CalendarEntity TwinsteadOrangeBoxCalendar => new(_haContext, "calendar.twinstead_orange_box_calendar");
    ///<summary>Twinstead White Bag Calendar</summary>
    public CalendarEntity TwinsteadWhiteBagCalendar => new(_haContext, "calendar.twinstead_white_bag_calendar");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aubrecia Drive Last recording</summary>
    public CameraEntity AubreciaDrive => new(_haContext, "camera.aubrecia_drive");
    ///<summary>Aubrecia Drive Live view</summary>
    public CameraEntity AubreciaDriveLiveView => new(_haContext, "camera.aubrecia_drive_live_view");
    ///<summary>Snapshot</summary>
    public CameraEntity AubreciaDriveSnapshot => new(_haContext, "camera.aubrecia_drive_snapshot");
    ///<summary>Aubrecia Front Door</summary>
    public CameraEntity AubreciaFrontDoor => new(_haContext, "camera.aubrecia_front_door");
    ///<summary>Aubrecia Front Door Last recording</summary>
    public CameraEntity AubreciaFrontDoor2 => new(_haContext, "camera.aubrecia_front_door_2");
    ///<summary>Aubrecia Front Door Live view</summary>
    public CameraEntity AubreciaFrontDoorLiveView => new(_haContext, "camera.aubrecia_front_door_live_view");
    ///<summary>Snapshot</summary>
    public CameraEntity AubreciaFrontDoorSnapshot => new(_haContext, "camera.aubrecia_front_door_snapshot");
    ///<summary>Garden Last recording</summary>
    public CameraEntity Garden2 => new(_haContext, "camera.garden_2");
    ///<summary>Garden Live view</summary>
    public CameraEntity GardenLiveView => new(_haContext, "camera.garden_live_view");
    ///<summary>Snapshot</summary>
    public CameraEntity GardenSnapshot => new(_haContext, "camera.garden_snapshot");
    ///<summary>Indoor 2 Last recording</summary>
    public CameraEntity Indoor2 => new(_haContext, "camera.indoor_2");
    ///<summary>Indoor 2 Live view</summary>
    public CameraEntity Indoor2LiveView => new(_haContext, "camera.indoor_2_live_view");
    ///<summary>Indoor 2 Snapshot</summary>
    public CameraEntity Indoor2Snapshot => new(_haContext, "camera.indoor_2_snapshot");
    public CameraEntity JohanFrontDoor => new(_haContext, "camera.johan_front_door");
    ///<summary>Johan Front Door Live view</summary>
    public CameraEntity JohanFrontDoorLiveView => new(_haContext, "camera.johan_front_door_live_view");
    ///<summary>Snapshot</summary>
    public CameraEntity JohanFrontDoorSnapshot => new(_haContext, "camera.johan_front_door_snapshot");
    ///<summary>Niemand Drive Last recording</summary>
    public CameraEntity NiemandDrive => new(_haContext, "camera.niemand_drive");
    ///<summary>Niemand Drive Live view</summary>
    public CameraEntity NiemandDriveLiveView => new(_haContext, "camera.niemand_drive_live_view");
    ///<summary>Niemand Drive Snapshot</summary>
    public CameraEntity NiemandDriveSnapshot => new(_haContext, "camera.niemand_drive_snapshot");
    ///<summary>Niemand Front Door Last recording</summary>
    public CameraEntity NiemandFrontDoor => new(_haContext, "camera.niemand_front_door");
    ///<summary>Niemand Front Door Live view</summary>
    public CameraEntity NiemandFrontDoorLiveView => new(_haContext, "camera.niemand_front_door_live_view");
    ///<summary>Niemand Front Door Snapshot</summary>
    public CameraEntity NiemandFrontDoorSnapshot => new(_haContext, "camera.niemand_front_door_snapshot");
    ///<summary>Niemand Garage Last recording</summary>
    public CameraEntity NiemandGarage => new(_haContext, "camera.niemand_garage");
    ///<summary>Niemand Garage Live view</summary>
    public CameraEntity NiemandGarageLiveView => new(_haContext, "camera.niemand_garage_live_view");
    ///<summary>Niemand Garage Snapshot</summary>
    public CameraEntity NiemandGarageSnapshot => new(_haContext, "camera.niemand_garage_snapshot");
    ///<summary>Niemand Garden Last recording</summary>
    public CameraEntity NiemandGarden => new(_haContext, "camera.niemand_garden");
    ///<summary>Niemand Garden Live view</summary>
    public CameraEntity NiemandGardenLiveView => new(_haContext, "camera.niemand_garden_live_view");
    ///<summary>Niemand Garden Snapshot</summary>
    public CameraEntity NiemandGardenSnapshot => new(_haContext, "camera.niemand_garden_snapshot");
    ///<summary>Niemand Indoor 1 Last recording</summary>
    public CameraEntity NiemandIndoor1 => new(_haContext, "camera.niemand_indoor_1");
    ///<summary>Niemand Indoor 1 Live view</summary>
    public CameraEntity NiemandIndoor1LiveView => new(_haContext, "camera.niemand_indoor_1_live_view");
    ///<summary>Niemand Indoor 1 Snapshot</summary>
    public CameraEntity NiemandIndoor1Snapshot => new(_haContext, "camera.niemand_indoor_1_snapshot");
    ///<summary>Niemand Side Last recording</summary>
    public CameraEntity NiemandSide => new(_haContext, "camera.niemand_side");
    ///<summary>Niemand Side Live view</summary>
    public CameraEntity NiemandSideLiveView => new(_haContext, "camera.niemand_side_live_view");
    ///<summary>Niemand Side Snapshot</summary>
    public CameraEntity NiemandSideSnapshot => new(_haContext, "camera.niemand_side_snapshot");
    ///<summary>Ring Drive Video</summary>
    public CameraEntity RingDriveVideo => new(_haContext, "camera.ring_drive_video");
    ///<summary>Ring Front Door Video</summary>
    public CameraEntity RingFrontDoorVideo => new(_haContext, "camera.ring_front_door_video");
    ///<summary>Ring Garage Video</summary>
    public CameraEntity RingGarageVideo => new(_haContext, "camera.ring_garage_video");
    ///<summary>Ring Garden Video</summary>
    public CameraEntity RingGardenVideo => new(_haContext, "camera.ring_garden_video");
    ///<summary>Ring Side Video</summary>
    public CameraEntity RingSideVideo => new(_haContext, "camera.ring_side_video");
    ///<summary>Shed</summary>
    public CameraEntity Shed => new(_haContext, "camera.shed");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bedroom 1</summary>
    public ClimateEntity Bedroom1 => new(_haContext, "climate.bedroom_1");
    ///<summary>Bedroom 2</summary>
    public ClimateEntity Bedroom2 => new(_haContext, "climate.bedroom_2");
    ///<summary>Bedroom 3</summary>
    public ClimateEntity Bedroom3 => new(_haContext, "climate.bedroom_3");
    ///<summary>Bedroom 4</summary>
    public ClimateEntity Bedroom4 => new(_haContext, "climate.bedroom_4");
    ///<summary>Lounge</summary>
    public ClimateEntity Lounge => new(_haContext, "climate.lounge");
    ///<summary>Office</summary>
    public ClimateEntity Office => new(_haContext, "climate.office");
    ///<summary>Refrigerator Freezer</summary>
    public ClimateEntity RefrigeratorFreezer => new(_haContext, "climate.refrigerator_freezer");
    ///<summary>Refrigerator Fridge</summary>
    public ClimateEntity RefrigeratorFridge => new(_haContext, "climate.refrigerator_fridge");
    ///<summary>Snake Thermostat</summary>
    public ClimateEntity SnakeThermostat => new(_haContext, "climate.snake_thermostat");
    ///<summary>Wiser Aaron</summary>
    public ClimateEntity WiserAaron => new(_haContext, "climate.wiser_aaron");
    ///<summary>Wiser Dining</summary>
    public ClimateEntity WiserDining => new(_haContext, "climate.wiser_dining");
    ///<summary>Wiser Entrance</summary>
    public ClimateEntity WiserEntrance => new(_haContext, "climate.wiser_entrance");
    ///<summary>Wiser Jayden</summary>
    public ClimateEntity WiserJayden => new(_haContext, "climate.wiser_jayden");
    ///<summary>Wiser Landing</summary>
    public ClimateEntity WiserLanding => new(_haContext, "climate.wiser_landing");
    ///<summary>Wiser Lounge </summary>
    public ClimateEntity WiserLounge => new(_haContext, "climate.wiser_lounge");
    ///<summary>Wiser Lounge Bay</summary>
    public ClimateEntity WiserLoungeBay => new(_haContext, "climate.wiser_lounge_bay");
    ///<summary>Wiser Master</summary>
    public ClimateEntity WiserMaster => new(_haContext, "climate.wiser_master");
    ///<summary>Wiser Office</summary>
    public ClimateEntity WiserOffice => new(_haContext, "climate.wiser_office");
    ///<summary>Wiser Playroom</summary>
    public ClimateEntity WiserPlayroom => new(_haContext, "climate.wiser_playroom");
    ///<summary>Wiser Utility</summary>
    public ClimateEntity WiserUtility => new(_haContext, "climate.wiser_utility");
}

public partial class CoverEntities
{
    private readonly IHaContext _haContext;
    public CoverEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>landing blind</summary>
    public CoverEntity LandingBlind => new(_haContext, "cover.landing_blind");
    ///<summary>Lounge Blind</summary>
    public CoverEntity LoungeBlind => new(_haContext, "cover.lounge_blind");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>247D4D7D6C90-mysimplelink</summary>
    public DeviceTrackerEntity _247d4d7d6c90Mysimplelink => new(_haContext, "device_tracker.247d4d7d6c90_mysimplelink");
    ///<summary>Aaron Echo</summary>
    public DeviceTrackerEntity AaronEcho => new(_haContext, "device_tracker.aaron_echo");
    ///<summary>Aaron’s iPad</summary>
    public DeviceTrackerEntity AaronsIpad => new(_haContext, "device_tracker.aarons_ipad");
    ///<summary>Aaron’s iPhone</summary>
    public DeviceTrackerEntity AaronsIphone => new(_haContext, "device_tracker.aarons_iphone");
    ///<summary>Aarons-iPhone</summary>
    public DeviceTrackerEntity AaronsIphone2 => new(_haContext, "device_tracker.aarons_iphone_2");
    ///<summary>android-b8c33f1cb7c0d776</summary>
    public DeviceTrackerEntity AndroidB8c33f1cb7c0d776 => new(_haContext, "device_tracker.android_b8c33f1cb7c0d776");
    ///<summary>ASAZ-5CG126368D</summary>
    public DeviceTrackerEntity Asaz5cg126368d => new(_haContext, "device_tracker.asaz_5cg126368d");
    ///<summary>ASGLH-WL-19140</summary>
    public DeviceTrackerEntity AsglhWl19140 => new(_haContext, "device_tracker.asglh_wl_19140");
    ///<summary>Aubrecia</summary>
    public DeviceTrackerEntity Aubrecia => new(_haContext, "device_tracker.aubrecia");
    ///<summary>AubreciasiPhone</summary>
    public DeviceTrackerEntity Aubreciasiphone => new(_haContext, "device_tracker.aubreciasiphone");
    ///<summary>aubri-VAIO</summary>
    public DeviceTrackerEntity AubriVaio => new(_haContext, "device_tracker.aubri_vaio");
    ///<summary>Bedroom 1 AC</summary>
    public DeviceTrackerEntity Bedroom1Ac => new(_haContext, "device_tracker.bedroom_1_ac");
    ///<summary>Bedroom 2 AC</summary>
    public DeviceTrackerEntity Bedroom2Ac => new(_haContext, "device_tracker.bedroom_2_ac");
    ///<summary>Bedroom 3 AC</summary>
    public DeviceTrackerEntity Bedroom3Ac => new(_haContext, "device_tracker.bedroom_3_ac");
    ///<summary>Bedroom 4 AC</summary>
    public DeviceTrackerEntity Bedroom4Ac => new(_haContext, "device_tracker.bedroom_4_ac");
    ///<summary>bosch-dishwasher-01204052703001</summary>
    public DeviceTrackerEntity BoschDishwasher01204052703001 => new(_haContext, "device_tracker.bosch_dishwasher_01204052703001");
    ///<summary>C02T8GTYGVC1</summary>
    public DeviceTrackerEntity C02t8gtygvc1 => new(_haContext, "device_tracker.c02t8gtygvc1");
    ///<summary>christmas_indoor-1558</summary>
    public DeviceTrackerEntity ChristmasIndoor1558 => new(_haContext, "device_tracker.christmas_indoor_1558");
    ///<summary>ASAZ-5CG127498B</summary>
    public DeviceTrackerEntity DesktopIpurn8t => new(_haContext, "device_tracker.desktop_ipurn8t");
    ///<summary>Dining</summary>
    public DeviceTrackerEntity Dining => new(_haContext, "device_tracker.dining");
    ///<summary>Dining Echo</summary>
    public DeviceTrackerEntity DiningEcho => new(_haContext, "device_tracker.dining_echo");
    ///<summary>Samsung-Dryer</summary>
    public DeviceTrackerEntity Dryer => new(_haContext, "device_tracker.dryer");
    ///<summary>Entrance</summary>
    public DeviceTrackerEntity Entrance => new(_haContext, "device_tracker.entrance");
    ///<summary>ESP_5E9EB5</summary>
    public DeviceTrackerEntity Esp5e9eb5 => new(_haContext, "device_tracker.esp_5e9eb5");
    ///<summary>ESP_6B7081</summary>
    public DeviceTrackerEntity Esp6b7081 => new(_haContext, "device_tracker.esp_6b7081");
    ///<summary>ESP_6B7A3A</summary>
    public DeviceTrackerEntity Esp6b7a3a => new(_haContext, "device_tracker.esp_6b7a3a");
    ///<summary>eufy RoboVac</summary>
    public DeviceTrackerEntity EufyRobovac => new(_haContext, "device_tracker.eufy_robovac");
    ///<summary>eufy RoboVac</summary>
    public DeviceTrackerEntity EufyRobovac2 => new(_haContext, "device_tracker.eufy_robovac_2");
    ///<summary>EUGENE-DESKTOP</summary>
    public DeviceTrackerEntity EugeneDesktop => new(_haContext, "device_tracker.eugene_desktop");
    ///<summary>eugene_iphone_ip</summary>
    public DeviceTrackerEntity EugeneIphoneIp => new(_haContext, "device_tracker.eugene_iphone_ip");
    ///<summary>Eugene&apos;s iPhone</summary>
    public DeviceTrackerEntity EugeneSIphone => new(_haContext, "device_tracker.eugene_s_iphone");
    ///<summary>Eugenes-iPhone</summary>
    public DeviceTrackerEntity EugenesIphone2 => new(_haContext, "device_tracker.eugenes_iphone_2");
    ///<summary>Eugene&apos;s MacBook</summary>
    public DeviceTrackerEntity EugenesMacbook2 => new(_haContext, "device_tracker.eugenes_macbook_2");
    ///<summary>EugenespleWatch</summary>
    public DeviceTrackerEntity Eugenesplewatch => new(_haContext, "device_tracker.eugenesplewatch");
    ///<summary>floor_light-2086</summary>
    public DeviceTrackerEntity FloorLight2086 => new(_haContext, "device_tracker.floor_light_2086");
    ///<summary>Foscam</summary>
    public DeviceTrackerEntity Foscam => new(_haContext, "device_tracker.foscam");
    ///<summary>G3061WM904</summary>
    public DeviceTrackerEntity G3061wm904 => new(_haContext, "device_tracker.g3061wm904");
    ///<summary>Galaxy-S8</summary>
    public DeviceTrackerEntity GalaxyS8 => new(_haContext, "device_tracker.galaxy_s8");
    ///<summary>Garage Echo</summary>
    public DeviceTrackerEntity GarageEcho => new(_haContext, "device_tracker.garage_echo");
    ///<summary>Garden Echo</summary>
    public DeviceTrackerEntity GardenEcho => new(_haContext, "device_tracker.garden_echo");
    ///<summary>Garden Floodlights</summary>
    public DeviceTrackerEntity GardenFloodlights => new(_haContext, "device_tracker.garden_floodlights");
    ///<summary>Glow-IHD-5019B0</summary>
    public DeviceTrackerEntity GlowIhd5019b0 => new(_haContext, "device_tracker.glow_ihd_5019b0");
    ///<summary>H Work Mac</summary>
    public DeviceTrackerEntity HWorkMac => new(_haContext, "device_tracker.h_work_mac");
    ///<summary>hailey_iphone_ip</summary>
    public DeviceTrackerEntity HaileyIphoneIp => new(_haContext, "device_tracker.hailey_iphone_ip");
    ///<summary>Hailey&apos;s iPhone</summary>
    public DeviceTrackerEntity HaileySIphone => new(_haContext, "device_tracker.hailey_s_iphone");
    ///<summary>Haileys-Air</summary>
    public DeviceTrackerEntity HaileysAir => new(_haContext, "device_tracker.haileys_air");
    ///<summary>Haileys-iPhone</summary>
    public DeviceTrackerEntity HaileysIphone => new(_haContext, "device_tracker.haileys_iphone");
    ///<summary>Haileys-iPhone</summary>
    public DeviceTrackerEntity HaileysIphone2 => new(_haContext, "device_tracker.haileys_iphone_2");
    ///<summary>Hailey’s MacBook Air</summary>
    public DeviceTrackerEntity HaileysMacbookAir => new(_haContext, "device_tracker.haileys_macbook_air");
    ///<summary>HF-LPB100</summary>
    public DeviceTrackerEntity HfLpb100 => new(_haContext, "device_tracker.hf_lpb100");
    ///<summary>host_two</summary>
    public DeviceTrackerEntity HostTwo => new(_haContext, "device_tracker.host_two");
    ///<summary>Hottubcontrol</summary>
    public DeviceTrackerEntity Hottubcontrol => new(_haContext, "device_tracker.hottubcontrol");
    ///<summary>Hottubcontrol</summary>
    public DeviceTrackerEntity Hottubcontrol2 => new(_haContext, "device_tracker.hottubcontrol_2");
    ///<summary>HUAWEI_P_smart_2019-86203</summary>
    public DeviceTrackerEntity HuaweiPSmart201986203 => new(_haContext, "device_tracker.huawei_p_smart_2019_86203");
    ///<summary>Jayden-s-iPad</summary>
    public DeviceTrackerEntity Ipad => new(_haContext, "device_tracker.ipad");
    ///<summary>Gabriels-iPad</summary>
    public DeviceTrackerEntity Ipad2 => new(_haContext, "device_tracker.ipad_2");
    ///<summary>Aarons-iPad</summary>
    public DeviceTrackerEntity Ipad3 => new(_haContext, "device_tracker.ipad_3");
    ///<summary>Eugenes-iPhone</summary>
    public DeviceTrackerEntity Iphone => new(_haContext, "device_tracker.iphone");
    ///<summary>HaileysiPhone2</summary>
    public DeviceTrackerEntity Iphone2 => new(_haContext, "device_tracker.iphone_2");
    ///<summary>iPhone</summary>
    public DeviceTrackerEntity Iphone3 => new(_haContext, "device_tracker.iphone_3");
    ///<summary>Jayden</summary>
    public DeviceTrackerEntity Jayden => new(_haContext, "device_tracker.jayden");
    ///<summary>Jayden AppleTv</summary>
    public DeviceTrackerEntity JaydenAppletv => new(_haContext, "device_tracker.jayden_appletv");
    ///<summary>jayden_bedside-4734</summary>
    public DeviceTrackerEntity JaydenBedside4734 => new(_haContext, "device_tracker.jayden_bedside_4734");
    ///<summary>Jayden Echo</summary>
    public DeviceTrackerEntity JaydenEcho => new(_haContext, "device_tracker.jayden_echo");
    ///<summary>iPad (2)</summary>
    public DeviceTrackerEntity JaydenSIpad => new(_haContext, "device_tracker.jayden_s_ipad");
    ///<summary>Aarons-iPhone</summary>
    public DeviceTrackerEntity JaydenSIphone => new(_haContext, "device_tracker.jayden_s_iphone");
    ///<summary>Jayden-s-iPhone</summary>
    public DeviceTrackerEntity JaydenSIphone2 => new(_haContext, "device_tracker.jayden_s_iphone_2");
    ///<summary>Jayden ’s iPhone</summary>
    public DeviceTrackerEntity JaydenSIphone3 => new(_haContext, "device_tracker.jayden_s_iphone_3");
    ///<summary>Jayden-s-iPhone</summary>
    public DeviceTrackerEntity JaydenSIphone4 => new(_haContext, "device_tracker.jayden_s_iphone_4");
    ///<summary>Kitchen</summary>
    public DeviceTrackerEntity Kitchen => new(_haContext, "device_tracker.kitchen");
    ///<summary>Kitchen Echo</summary>
    public DeviceTrackerEntity KitchenEcho => new(_haContext, "device_tracker.kitchen_echo");
    ///<summary>Konnected AddOn</summary>
    public DeviceTrackerEntity KonnectedAddon => new(_haContext, "device_tracker.konnected_addon");
    ///<summary>Konnected Main</summary>
    public DeviceTrackerEntity KonnectedMain => new(_haContext, "device_tracker.konnected_main");
    ///<summary>Landing</summary>
    public DeviceTrackerEntity Landing => new(_haContext, "device_tracker.landing");
    ///<summary>LAPTOP-D5UFT2CI</summary>
    public DeviceTrackerEntity LaptopD5uft2ci => new(_haContext, "device_tracker.laptop_d5uft2ci");
    ///<summary>LAPTOP-L5NSO67J</summary>
    public DeviceTrackerEntity LaptopL5nso67j => new(_haContext, "device_tracker.laptop_l5nso67j");
    ///<summary>Lounge Tele</summary>
    public DeviceTrackerEntity LgLounge => new(_haContext, "device_tracker.lg_lounge");
    ///<summary>Aaron-ATV</summary>
    public DeviceTrackerEntity LivingRoom => new(_haContext, "device_tracker.living_room");
    ///<summary>Lounge</summary>
    public DeviceTrackerEntity Lounge => new(_haContext, "device_tracker.lounge");
    ///<summary>Lounge AC</summary>
    public DeviceTrackerEntity LoungeAc => new(_haContext, "device_tracker.lounge_ac");
    ///<summary>Lounge Blind</summary>
    public DeviceTrackerEntity LoungeBlind => new(_haContext, "device_tracker.lounge_blind");
    ///<summary>Lounge Echo</summary>
    public DeviceTrackerEntity LoungeEcho => new(_haContext, "device_tracker.lounge_echo");
    ///<summary>G3061WM904</summary>
    public DeviceTrackerEntity MacbookAir => new(_haContext, "device_tracker.macbook_air");
    ///<summary>Master Echo</summary>
    public DeviceTrackerEntity MasterEcho => new(_haContext, "device_tracker.master_echo");
    ///<summary>Master Tele</summary>
    public DeviceTrackerEntity MasterTele => new(_haContext, "device_tracker.master_tele");
    ///<summary>ML-NX07KG671N</summary>
    public DeviceTrackerEntity MlNx07kg671n => new(_haContext, "device_tracker.ml_nx07kg671n");
    ///<summary>Office AC</summary>
    public DeviceTrackerEntity OfficeAc => new(_haContext, "device_tracker.office_ac");
    ///<summary>Office Echo</summary>
    public DeviceTrackerEntity OfficeEcho => new(_haContext, "device_tracker.office_echo");
    ///<summary>Outside Drive</summary>
    public DeviceTrackerEntity OutsideDrive => new(_haContext, "device_tracker.outside_drive");
    ///<summary>Outside Garage</summary>
    public DeviceTrackerEntity OutsideGarage => new(_haContext, "device_tracker.outside_garage");
    ///<summary>Pixel-6a</summary>
    public DeviceTrackerEntity Pixel6a => new(_haContext, "device_tracker.pixel_6a");
    ///<summary>Playroom Echo</summary>
    public DeviceTrackerEntity PlayroomEcho => new(_haContext, "device_tracker.playroom_echo");
    ///<summary>Porch</summary>
    public DeviceTrackerEntity Porch => new(_haContext, "device_tracker.porch");
    ///<summary>raspberrypi</summary>
    public DeviceTrackerEntity Raspberrypi => new(_haContext, "device_tracker.raspberrypi");
    ///<summary>raspberrypi</summary>
    public DeviceTrackerEntity Raspberrypi2 => new(_haContext, "device_tracker.raspberrypi_2");
    ///<summary>RaspberryPi CUPS</summary>
    public DeviceTrackerEntity RaspberrypiCups => new(_haContext, "device_tracker.raspberrypi_cups");
    ///<summary>RingHpCam-49</summary>
    public DeviceTrackerEntity Ringhpcam49 => new(_haContext, "device_tracker.ringhpcam_49");
    ///<summary>RingHpCam-4c</summary>
    public DeviceTrackerEntity Ringhpcam4c => new(_haContext, "device_tracker.ringhpcam_4c");
    public DeviceTrackerEntity RingproD6 => new(_haContext, "device_tracker.ringpro_d6");
    ///<summary>RingStickUpCam-94</summary>
    public DeviceTrackerEntity Ringstickupcam94 => new(_haContext, "device_tracker.ringstickupcam_94");
    ///<summary>RingStickUpCam-9b</summary>
    public DeviceTrackerEntity Ringstickupcam9b => new(_haContext, "device_tracker.ringstickupcam_9b");
    ///<summary>RMMINI-d9-2b-62</summary>
    public DeviceTrackerEntity RmminiD92b62 => new(_haContext, "device_tracker.rmmini_d9_2b_62");
    ///<summary>Sammi-Leigh-s-A52</summary>
    public DeviceTrackerEntity SammiLeighSA52 => new(_haContext, "device_tracker.sammi_leigh_s_a52");
    ///<summary>shelly1-55E8B5</summary>
    public DeviceTrackerEntity Shelly155e8b5 => new(_haContext, "device_tracker.shelly1_55e8b5");
    ///<summary>Outside Drive</summary>
    public DeviceTrackerEntity Shelly1Ba69f6 => new(_haContext, "device_tracker.shelly1_ba69f6");
    ///<summary>shelly1-BA6C98</summary>
    public DeviceTrackerEntity Shelly1Ba6c98 => new(_haContext, "device_tracker.shelly1_ba6c98");
    ///<summary>shelly1pm-E646FE</summary>
    public DeviceTrackerEntity Shelly1pmE646fe => new(_haContext, "device_tracker.shelly1pm_e646fe");
    ///<summary>tasmota-6069</summary>
    public DeviceTrackerEntity SmartPlug1 => new(_haContext, "device_tracker.smart_plug_1");
    ///<summary>smart-plug-2</summary>
    public DeviceTrackerEntity SmartPlug2 => new(_haContext, "device_tracker.smart_plug_2");
    ///<summary>smart-plug-4</summary>
    public DeviceTrackerEntity SmartPlug4 => new(_haContext, "device_tracker.smart_plug_4");
    ///<summary>SonosZP</summary>
    public DeviceTrackerEntity Sonoszp => new(_haContext, "device_tracker.sonoszp");
    ///<summary>SonosZP</summary>
    public DeviceTrackerEntity Sonoszp2 => new(_haContext, "device_tracker.sonoszp_2");
    ///<summary>SonosZP</summary>
    public DeviceTrackerEntity Sonoszp3 => new(_haContext, "device_tracker.sonoszp_3");
    ///<summary>Suspect Device</summary>
    public DeviceTrackerEntity SuspectDevice => new(_haContext, "device_tracker.suspect_device");
    ///<summary>Suspect Huawei</summary>
    public DeviceTrackerEntity SuspectHuawei => new(_haContext, "device_tracker.suspect_huawei");
    ///<summary>tasmota-4464</summary>
    public DeviceTrackerEntity Tasmota4464 => new(_haContext, "device_tracker.tasmota_4464");
    ///<summary>UK-020287222957</summary>
    public DeviceTrackerEntity Uk020287222957 => new(_haContext, "device_tracker.uk_020287222957");
    ///<summary>UK-iPhone-F17GH5RN0F0N</summary>
    public DeviceTrackerEntity UkIphoneF17gh5rn0f0n => new(_haContext, "device_tracker.uk_iphone_f17gh5rn0f0n");
    ///<summary>UK-PC0JSKUX</summary>
    public DeviceTrackerEntity UkPc0jskux => new(_haContext, "device_tracker.uk_pc0jskux");
    public DeviceTrackerEntity Unifi000278989b62Default => new(_haContext, "device_tracker.unifi_00_02_78_98_9b_62_default");
    public DeviceTrackerEntity Unifi000c43266000Default => new(_haContext, "device_tracker.unifi_00_0c_43_26_60_00_default");
    public DeviceTrackerEntity Unifi0241210698EfDefault => new(_haContext, "device_tracker.unifi_02_41_21_06_98_ef_default");
    public DeviceTrackerEntity Unifi029a35104085Default => new(_haContext, "device_tracker.unifi_02_9a_35_10_40_85_default");
    public DeviceTrackerEntity Unifi02C033830101Default => new(_haContext, "device_tracker.unifi_02_c0_33_83_01_01_default");
    public DeviceTrackerEntity Unifi02Ff32A5BcD0Default => new(_haContext, "device_tracker.unifi_02_ff_32_a5_bc_d0_default");
    public DeviceTrackerEntity Unifi067f25A86967Default => new(_haContext, "device_tracker.unifi_06_7f_25_a8_69_67_default");
    public DeviceTrackerEntity Unifi0694A0794d71Default => new(_haContext, "device_tracker.unifi_06_94_a0_79_4d_71_default");
    public DeviceTrackerEntity Unifi0a1eCf173cBfDefault => new(_haContext, "device_tracker.unifi_0a_1e_cf_17_3c_bf_default");
    public DeviceTrackerEntity Unifi0a3748B51545Default => new(_haContext, "device_tracker.unifi_0a_37_48_b5_15_45_default");
    public DeviceTrackerEntity Unifi0aEa8bDe2e46Default => new(_haContext, "device_tracker.unifi_0a_ea_8b_de_2e_46_default");
    public DeviceTrackerEntity Unifi0aEb6dCe5a87Default => new(_haContext, "device_tracker.unifi_0a_eb_6d_ce_5a_87_default");
    public DeviceTrackerEntity Unifi0e2d175c2aC8Default => new(_haContext, "device_tracker.unifi_0e_2d_17_5c_2a_c8_default");
    public DeviceTrackerEntity Unifi0e9f237a65A5Default => new(_haContext, "device_tracker.unifi_0e_9f_23_7a_65_a5_default");
    public DeviceTrackerEntity Unifi1292Ef14BdAdDefault => new(_haContext, "device_tracker.unifi_12_92_ef_14_bd_ad_default");
    public DeviceTrackerEntity Unifi12C716BfE0BeDefault => new(_haContext, "device_tracker.unifi_12_c7_16_bf_e0_be_default");
    ///<summary>LG_Smart_Fridge2_open</summary>
    public DeviceTrackerEntity Unifi1c392993D9F4Default => new(_haContext, "device_tracker.unifi_1c_39_29_93_d9_f4_default");
    public DeviceTrackerEntity Unifi1eCaAfC5D6FbDefault => new(_haContext, "device_tracker.unifi_1e_ca_af_c5_d6_fb_default");
    public DeviceTrackerEntity Unifi1eE9A4F48f43Default => new(_haContext, "device_tracker.unifi_1e_e9_a4_f4_8f_43_default");
    public DeviceTrackerEntity Unifi220d10919909Default => new(_haContext, "device_tracker.unifi_22_0d_10_91_99_09_default");
    public DeviceTrackerEntity Unifi22666f3b995fDefault => new(_haContext, "device_tracker.unifi_22_66_6f_3b_99_5f_default");
    public DeviceTrackerEntity Unifi2684208a5b5dDefault => new(_haContext, "device_tracker.unifi_26_84_20_8a_5b_5d_default");
    public DeviceTrackerEntity Unifi269fDc950843Default => new(_haContext, "device_tracker.unifi_26_9f_dc_95_08_43_default");
    public DeviceTrackerEntity Unifi26Fd74Eb3d99Default => new(_haContext, "device_tracker.unifi_26_fd_74_eb_3d_99_default");
    public DeviceTrackerEntity Unifi2a3e7170FdBaDefault => new(_haContext, "device_tracker.unifi_2a_3e_71_70_fd_ba_default");
    public DeviceTrackerEntity Unifi2a9c648d57CeDefault => new(_haContext, "device_tracker.unifi_2a_9c_64_8d_57_ce_default");
    public DeviceTrackerEntity Unifi2aD7E18c21A6Default => new(_haContext, "device_tracker.unifi_2a_d7_e1_8c_21_a6_default");
    public DeviceTrackerEntity Unifi2e04A5Fb0956Default => new(_haContext, "device_tracker.unifi_2e_04_a5_fb_09_56_default");
    public DeviceTrackerEntity Unifi2e14AeA02f28Default => new(_haContext, "device_tracker.unifi_2e_14_ae_a0_2f_28_default");
    public DeviceTrackerEntity Unifi2e5d1eAd1d9bDefault => new(_haContext, "device_tracker.unifi_2e_5d_1e_ad_1d_9b_default");
    ///<summary>SonosZP</summary>
    public DeviceTrackerEntity Unifi347e5cD68b20Default => new(_haContext, "device_tracker.unifi_34_7e_5c_d6_8b_20_default");
    public DeviceTrackerEntity Unifi3655476c0c6bDefault => new(_haContext, "device_tracker.unifi_36_55_47_6c_0c_6b_default");
    public DeviceTrackerEntity Unifi3a581a119095Default => new(_haContext, "device_tracker.unifi_3a_58_1a_11_90_95_default");
    public DeviceTrackerEntity Unifi3a8980817eCeDefault => new(_haContext, "device_tracker.unifi_3a_89_80_81_7e_ce_default");
    public DeviceTrackerEntity Unifi3e31A7677036Default => new(_haContext, "device_tracker.unifi_3e_31_a7_67_70_36_default");
    public DeviceTrackerEntity Unifi3e638c3dFe8cDefault => new(_haContext, "device_tracker.unifi_3e_63_8c_3d_fe_8c_default");
    public DeviceTrackerEntity Unifi3e64D405F312Default => new(_haContext, "device_tracker.unifi_3e_64_d4_05_f3_12_default");
    ///<summary>Hottubcontrol</summary>
    public DeviceTrackerEntity Unifi409151523cAaDefault => new(_haContext, "device_tracker.unifi_40_91_51_52_3c_aa_default");
    public DeviceTrackerEntity Unifi42377bBf55F0Default => new(_haContext, "device_tracker.unifi_42_37_7b_bf_55_f0_default");
    public DeviceTrackerEntity Unifi46F51e4396F4Default => new(_haContext, "device_tracker.unifi_46_f5_1e_43_96_f4_default");
    public DeviceTrackerEntity Unifi4a998cC8A91aDefault => new(_haContext, "device_tracker.unifi_4a_99_8c_c8_a9_1a_default");
    public DeviceTrackerEntity Unifi4e3a1a0dB9A1Default => new(_haContext, "device_tracker.unifi_4e_3a_1a_0d_b9_a1_default");
    public DeviceTrackerEntity Unifi4e9fFc7cCa53Default => new(_haContext, "device_tracker.unifi_4e_9f_fc_7c_ca_53_default");
    public DeviceTrackerEntity Unifi4eD7D90814F9Default => new(_haContext, "device_tracker.unifi_4e_d7_d9_08_14_f9_default");
    ///<summary>iPad-5</summary>
    public DeviceTrackerEntity Unifi54Ae270e3732Default => new(_haContext, "device_tracker.unifi_54_ae_27_0e_37_32_default");
    public DeviceTrackerEntity Unifi56D11bD17d21Default => new(_haContext, "device_tracker.unifi_56_d1_1b_d1_7d_21_default");
    public DeviceTrackerEntity Unifi5a0c5eBc5aE3Default => new(_haContext, "device_tracker.unifi_5a_0c_5e_bc_5a_e3_default");
    public DeviceTrackerEntity Unifi5a199cD6DcEeDefault => new(_haContext, "device_tracker.unifi_5a_19_9c_d6_dc_ee_default");
    public DeviceTrackerEntity Unifi5eF23311F6D8Default => new(_haContext, "device_tracker.unifi_5e_f2_33_11_f6_d8_default");
    public DeviceTrackerEntity Unifi620bE5527e5fDefault => new(_haContext, "device_tracker.unifi_62_0b_e5_52_7e_5f_default");
    public DeviceTrackerEntity Unifi625c7c18D2BfDefault => new(_haContext, "device_tracker.unifi_62_5c_7c_18_d2_bf_default");
    public DeviceTrackerEntity Unifi62E8318b9754Default => new(_haContext, "device_tracker.unifi_62_e8_31_8b_97_54_default");
    public DeviceTrackerEntity Unifi644eD73e5eD8Default => new(_haContext, "device_tracker.unifi_64_4e_d7_3e_5e_d8_default");
    public DeviceTrackerEntity Unifi6612B8B5Ab98Default => new(_haContext, "device_tracker.unifi_66_12_b8_b5_ab_98_default");
    public DeviceTrackerEntity Unifi6a7dC2219651Default => new(_haContext, "device_tracker.unifi_6a_7d_c2_21_96_51_default");
    public DeviceTrackerEntity Unifi6aB690F24243Default => new(_haContext, "device_tracker.unifi_6a_b6_90_f2_42_43_default");
    public DeviceTrackerEntity Unifi6eB266E76eC7Default => new(_haContext, "device_tracker.unifi_6e_b2_66_e7_6e_c7_default");
    public DeviceTrackerEntity Unifi72964914Cd06Default => new(_haContext, "device_tracker.unifi_72_96_49_14_cd_06_default");
    public DeviceTrackerEntity Unifi76D22595A06aDefault => new(_haContext, "device_tracker.unifi_76_d2_25_95_a0_6a_default");
    public DeviceTrackerEntity Unifi76D5Dc5d90BcDefault => new(_haContext, "device_tracker.unifi_76_d5_dc_5d_90_bc_default");
    public DeviceTrackerEntity Unifi7a264c0e731bDefault => new(_haContext, "device_tracker.unifi_7a_26_4c_0e_73_1b_default");
    public DeviceTrackerEntity Unifi7aB7F6160d9cDefault => new(_haContext, "device_tracker.unifi_7a_b7_f6_16_0d_9c_default");
    public DeviceTrackerEntity Unifi7e981c0708EfDefault => new(_haContext, "device_tracker.unifi_7e_98_1c_07_08_ef_default");
    public DeviceTrackerEntity Unifi8603C83f3f3aDefault => new(_haContext, "device_tracker.unifi_86_03_c8_3f_3f_3a_default");
    public DeviceTrackerEntity Unifi86A8Fd31BcEbDefault => new(_haContext, "device_tracker.unifi_86_a8_fd_31_bc_eb_default");
    public DeviceTrackerEntity Unifi8a513f0f9323Default => new(_haContext, "device_tracker.unifi_8a_51_3f_0f_93_23_default");
    public DeviceTrackerEntity Unifi8eBb0497014bDefault => new(_haContext, "device_tracker.unifi_8e_bb_04_97_01_4b_default");
    public DeviceTrackerEntity Unifi92208d3dA84dDefault => new(_haContext, "device_tracker.unifi_92_20_8d_3d_a8_4d_default");
    public DeviceTrackerEntity Unifi9245B86269E2Default => new(_haContext, "device_tracker.unifi_92_45_b8_62_69_e2_default");
    public DeviceTrackerEntity Unifi924d2185C5C0Default => new(_haContext, "device_tracker.unifi_92_4d_21_85_c5_c0_default");
    public DeviceTrackerEntity Unifi926fFb8c016aDefault => new(_haContext, "device_tracker.unifi_92_6f_fb_8c_01_6a_default");
    public DeviceTrackerEntity Unifi92952739Bb7eDefault => new(_haContext, "device_tracker.unifi_92_95_27_39_bb_7e_default");
    public DeviceTrackerEntity Unifi92A5C740B6F0Default => new(_haContext, "device_tracker.unifi_92_a5_c7_40_b6_f0_default");
    ///<summary>iPhone</summary>
    public DeviceTrackerEntity Unifi92C83bD694B4Default => new(_haContext, "device_tracker.unifi_92_c8_3b_d6_94_b4_default");
    public DeviceTrackerEntity Unifi965c1d849dB7Default => new(_haContext, "device_tracker.unifi_96_5c_1d_84_9d_b7_default");
    public DeviceTrackerEntity Unifi9aBfE185197fDefault => new(_haContext, "device_tracker.unifi_9a_bf_e1_85_19_7f_default");
    public DeviceTrackerEntity Unifi9aD89401CfC3Default => new(_haContext, "device_tracker.unifi_9a_d8_94_01_cf_c3_default");
    public DeviceTrackerEntity UnifiA09208B3C1E9Default => new(_haContext, "device_tracker.unifi_a0_92_08_b3_c1_e9_default");
    public DeviceTrackerEntity UnifiA2175c44E9F6Default => new(_haContext, "device_tracker.unifi_a2_17_5c_44_e9_f6_default");
    ///<summary>Pauls-iphone</summary>
    public DeviceTrackerEntity UnifiA4Cf99290a81Default => new(_haContext, "device_tracker.unifi_a4_cf_99_29_0a_81_default");
    public DeviceTrackerEntity UnifiA6897a9aFf8fDefault => new(_haContext, "device_tracker.unifi_a6_89_7a_9a_ff_8f_default");
    public DeviceTrackerEntity UnifiA68c66FdB759Default => new(_haContext, "device_tracker.unifi_a6_8c_66_fd_b7_59_default");
    public DeviceTrackerEntity UnifiA8E3EeDdD898Default => new(_haContext, "device_tracker.unifi_a8_e3_ee_dd_d8_98_default");
    public DeviceTrackerEntity UnifiAa3cFe09F5F2Default => new(_haContext, "device_tracker.unifi_aa_3c_fe_09_f5_f2_default");
    public DeviceTrackerEntity UnifiAaC8Cc8d8b75Default => new(_haContext, "device_tracker.unifi_aa_c8_cc_8d_8b_75_default");
    public DeviceTrackerEntity UnifiAaD9F2725d29Default => new(_haContext, "device_tracker.unifi_aa_d9_f2_72_5d_29_default");
    public DeviceTrackerEntity UnifiAaFa7f22CaAcDefault => new(_haContext, "device_tracker.unifi_aa_fa_7f_22_ca_ac_default");
    public DeviceTrackerEntity UnifiAe3b74D900E1Default => new(_haContext, "device_tracker.unifi_ae_3b_74_d9_00_e1_default");
    public DeviceTrackerEntity UnifiAe42C346757bDefault => new(_haContext, "device_tracker.unifi_ae_42_c3_46_75_7b_default");
    public DeviceTrackerEntity UnifiAeDa71Ec8fA1Default => new(_haContext, "device_tracker.unifi_ae_da_71_ec_8f_a1_default");
    public DeviceTrackerEntity UnifiAeEe43EeC52aDefault => new(_haContext, "device_tracker.unifi_ae_ee_43_ee_c5_2a_default");
    public DeviceTrackerEntity UnifiB287894eD47eDefault => new(_haContext, "device_tracker.unifi_b2_87_89_4e_d4_7e_default");
    public DeviceTrackerEntity UnifiB2BeF520C34cDefault => new(_haContext, "device_tracker.unifi_b2_be_f5_20_c3_4c_default");
    public DeviceTrackerEntity UnifiB649C13e7a2bDefault => new(_haContext, "device_tracker.unifi_b6_49_c1_3e_7a_2b_default");
    public DeviceTrackerEntity UnifiBa1d1e7c94C8Default => new(_haContext, "device_tracker.unifi_ba_1d_1e_7c_94_c8_default");
    public DeviceTrackerEntity UnifiBa7aDe6312CbDefault => new(_haContext, "device_tracker.unifi_ba_7a_de_63_12_cb_default");
    public DeviceTrackerEntity UnifiBaBfC1CeB0BeDefault => new(_haContext, "device_tracker.unifi_ba_bf_c1_ce_b0_be_default");
    public DeviceTrackerEntity UnifiBe318f35742aDefault => new(_haContext, "device_tracker.unifi_be_31_8f_35_74_2a_default");
    public DeviceTrackerEntity UnifiBeA71b06283cDefault => new(_haContext, "device_tracker.unifi_be_a7_1b_06_28_3c_default");
    public DeviceTrackerEntity UnifiBeCbE162Ef9bDefault => new(_haContext, "device_tracker.unifi_be_cb_e1_62_ef_9b_default");
    public DeviceTrackerEntity UnifiC24cDdA852FeDefault => new(_haContext, "device_tracker.unifi_c2_4c_dd_a8_52_fe_default");
    public DeviceTrackerEntity UnifiC25413325fF5Default => new(_haContext, "device_tracker.unifi_c2_54_13_32_5f_f5_default");
    public DeviceTrackerEntity UnifiC6Ce2407EcD5Default => new(_haContext, "device_tracker.unifi_c6_ce_24_07_ec_d5_default");
    public DeviceTrackerEntity UnifiCe72A47f7fA6Default => new(_haContext, "device_tracker.unifi_ce_72_a4_7f_7f_a6_default");
    public DeviceTrackerEntity UnifiD2Aa50D823E8Default => new(_haContext, "device_tracker.unifi_d2_aa_50_d8_23_e8_default");
    public DeviceTrackerEntity UnifiD681Ff8cFc4eDefault => new(_haContext, "device_tracker.unifi_d6_81_ff_8c_fc_4e_default");
    public DeviceTrackerEntity UnifiDa4eD424B44aDefault => new(_haContext, "device_tracker.unifi_da_4e_d4_24_b4_4a_default");
    ///<summary>Jayden RaspberryPi</summary>
    public DeviceTrackerEntity UnifiDcA632Dc56AfDefault => new(_haContext, "device_tracker.unifi_dc_a6_32_dc_56_af_default");
    public DeviceTrackerEntity UnifiDe0bF0Ab9768Default => new(_haContext, "device_tracker.unifi_de_0b_f0_ab_97_68_default");
    public DeviceTrackerEntity UnifiDeF13096B774Default => new(_haContext, "device_tracker.unifi_de_f1_30_96_b7_74_default");
    public DeviceTrackerEntity UnifiE223Bf9c8221Default => new(_haContext, "device_tracker.unifi_e2_23_bf_9c_82_21_default");
    public DeviceTrackerEntity UnifiE2Fe879e6e51Default => new(_haContext, "device_tracker.unifi_e2_fe_87_9e_6e_51_default");
    public DeviceTrackerEntity UnifiE6E48e8eBf62Default => new(_haContext, "device_tracker.unifi_e6_e4_8e_8e_bf_62_default");
    public DeviceTrackerEntity UnifiEa231a3b0eC6Default => new(_haContext, "device_tracker.unifi_ea_23_1a_3b_0e_c6_default");
    public DeviceTrackerEntity UnifiEa7f17B856D1Default => new(_haContext, "device_tracker.unifi_ea_7f_17_b8_56_d1_default");
    public DeviceTrackerEntity UnifiEe3aCe9a157aDefault => new(_haContext, "device_tracker.unifi_ee_3a_ce_9a_15_7a_default");
    public DeviceTrackerEntity UnifiEeC5023aCf7dDefault => new(_haContext, "device_tracker.unifi_ee_c5_02_3a_cf_7d_default");
    public DeviceTrackerEntity UnifiEeF108C9526aDefault => new(_haContext, "device_tracker.unifi_ee_f1_08_c9_52_6a_default");
    public DeviceTrackerEntity UnifiF2E3F9536e2fDefault => new(_haContext, "device_tracker.unifi_f2_e3_f9_53_6e_2f_default");
    public DeviceTrackerEntity UnifiF2E5B9EeB563Default => new(_haContext, "device_tracker.unifi_f2_e5_b9_ee_b5_63_default");
    public DeviceTrackerEntity UnifiF651F29cC6CeDefault => new(_haContext, "device_tracker.unifi_f6_51_f2_9c_c6_ce_default");
    public DeviceTrackerEntity UnifiF693C88a10DeDefault => new(_haContext, "device_tracker.unifi_f6_93_c8_8a_10_de_default");
    public DeviceTrackerEntity UnifiF6Ad6c3e2aCfDefault => new(_haContext, "device_tracker.unifi_f6_ad_6c_3e_2a_cf_default");
    public DeviceTrackerEntity UnifiFa0005393fDfDefault => new(_haContext, "device_tracker.unifi_fa_00_05_39_3f_df_default");
    public DeviceTrackerEntity UnifiFa00D75740FcDefault => new(_haContext, "device_tracker.unifi_fa_00_d7_57_40_fc_default");
    public DeviceTrackerEntity UnifiFa7088Ee0802Default => new(_haContext, "device_tracker.unifi_fa_70_88_ee_08_02_default");
    public DeviceTrackerEntity UnifiFe5a3957E388Default => new(_haContext, "device_tracker.unifi_fe_5a_39_57_e3_88_default");
    public DeviceTrackerEntity UnifiFeA54e005b02Default => new(_haContext, "device_tracker.unifi_fe_a5_4e_00_5b_02_default");
    ///<summary>Upstairs</summary>
    public DeviceTrackerEntity Upstairs => new(_haContext, "device_tracker.upstairs");
    ///<summary>Wallpanel Fire HD8</summary>
    public DeviceTrackerEntity WallpanelFireHd8 => new(_haContext, "device_tracker.wallpanel_fire_hd8");
    ///<summary>Samsung-Washer</summary>
    public DeviceTrackerEntity Washer => new(_haContext, "device_tracker.washer");
    ///<summary>WiserHeat031C5E</summary>
    public DeviceTrackerEntity Wiserheat031c5e => new(_haContext, "device_tracker.wiserheat031c5e");
    ///<summary>wlan0</summary>
    public DeviceTrackerEntity Wlan0 => new(_haContext, "device_tracker.wlan0");
    ///<summary>wlan0</summary>
    public DeviceTrackerEntity Wlan02 => new(_haContext, "device_tracker.wlan0_2");
    ///<summary>XBOX</summary>
    public DeviceTrackerEntity Xbox => new(_haContext, "device_tracker.xbox");
}

public partial class GroupEntities
{
    private readonly IHaContext _haContext;
    public GroupEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Christmas</summary>
    public GroupEntity Christmas => new(_haContext, "group.christmas");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Arm Failed</summary>
    public InputBooleanEntity AlarmArmFailed => new(_haContext, "input_boolean.alarm_arm_failed");
    ///<summary>Alarm Clock Enabled</summary>
    public InputBooleanEntity AlarmClockEnabled => new(_haContext, "input_boolean.alarm_clock_enabled");
    public InputBooleanEntity AlarmPanic => new(_haContext, "input_boolean.alarm_panic");
    public InputBooleanEntity BackDoorChecked => new(_haContext, "input_boolean.back_door_checked");
    ///<summary>Check Rex </summary>
    public InputBooleanEntity CheckRex => new(_haContext, "input_boolean.check_rex");
    ///<summary>Default Dashboard</summary>
    public InputBooleanEntity DefaultDashboard => new(_haContext, "input_boolean.default_dashboard");
    public InputBooleanEntity DiningDoorChecked => new(_haContext, "input_boolean.dining_door_checked");
    ///<summary>dishwasher_ack</summary>
    public InputBooleanEntity DishwasherAck => new(_haContext, "input_boolean.dishwasher_ack");
    ///<summary>Dishwasher Reminder</summary>
    public InputBooleanEntity DishwasherReminder => new(_haContext, "input_boolean.dishwasher_reminder");
    public InputBooleanEntity DryerAck => new(_haContext, "input_boolean.dryer_ack");
    ///<summary>Dryer Reminder</summary>
    public InputBooleanEntity DryerReminder => new(_haContext, "input_boolean.dryer_reminder");
    public InputBooleanEntity FrontDoorChecked => new(_haContext, "input_boolean.front_door_checked");
    public InputBooleanEntity GarageBackDoorChecked => new(_haContext, "input_boolean.garage_back_door_checked");
    public InputBooleanEntity KidsInBed => new(_haContext, "input_boolean.kids_in_bed");
    public InputBooleanEntity LoungeDoorChecked => new(_haContext, "input_boolean.lounge_door_checked");
    public InputBooleanEntity LoungeMotionLightsDisabled => new(_haContext, "input_boolean.lounge_motion_lights_disabled");
    ///<summary>netdaemon_daemonapp_apps_notifications_manager_battery_notifications</summary>
    public InputBooleanEntity NetdaemonDaemonappAppsNotificationsManagerBatteryNotifications => new(_haContext, "input_boolean.netdaemon_daemonapp_apps_notifications_manager_battery_notifications");
    ///<summary>netdaemon_debug_state</summary>
    public InputBooleanEntity NetdaemonDebugState => new(_haContext, "input_boolean.netdaemon_debug_state");
    ///<summary>netdaemon_light_manager_v2_lights_manager</summary>
    public InputBooleanEntity NetdaemonLightManagerV2LightsManager => new(_haContext, "input_boolean.netdaemon_light_manager_v2_lights_manager");
    ///<summary>netdaemon_light_manager_v2_random_manager</summary>
    public InputBooleanEntity NetdaemonLightManagerV2RandomManager => new(_haContext, "input_boolean.netdaemon_light_manager_v2_random_manager");
    ///<summary>netdaemon_net_daemon_notifications_manager</summary>
    public InputBooleanEntity NetdaemonNetDaemonNotificationsManager => new(_haContext, "input_boolean.netdaemon_net_daemon_notifications_manager");
    ///<summary>netdaemon_niemand_alarm_clock</summary>
    public InputBooleanEntity NetdaemonNiemandAlarmClock => new(_haContext, "input_boolean.netdaemon_niemand_alarm_clock");
    ///<summary>netdaemon_niemand_dining_dining_app</summary>
    public InputBooleanEntity NetdaemonNiemandDiningDiningApp => new(_haContext, "input_boolean.netdaemon_niemand_dining_dining_app");
    ///<summary>netdaemon_niemand_discipline_manager</summary>
    public InputBooleanEntity NetdaemonNiemandDisciplineManager => new(_haContext, "input_boolean.netdaemon_niemand_discipline_manager");
    ///<summary>netdaemon_niemand_duolingo_duolingo</summary>
    public InputBooleanEntity NetdaemonNiemandDuolingoDuolingo => new(_haContext, "input_boolean.netdaemon_niemand_duolingo_duolingo");
    ///<summary>netdaemon_niemand_energy_agile_rates_app</summary>
    public InputBooleanEntity NetdaemonNiemandEnergyAgileRatesApp => new(_haContext, "input_boolean.netdaemon_niemand_energy_agile_rates_app");
    ///<summary>netdaemon_niemand_energy_batteries_app</summary>
    public InputBooleanEntity NetdaemonNiemandEnergyBatteriesApp => new(_haContext, "input_boolean.netdaemon_niemand_energy_batteries_app");
    ///<summary>netdaemon_niemand_energy_energy_app</summary>
    public InputBooleanEntity NetdaemonNiemandEnergyEnergyApp => new(_haContext, "input_boolean.netdaemon_niemand_energy_energy_app");
    ///<summary>netdaemon_niemand_health_health_app</summary>
    public InputBooleanEntity NetdaemonNiemandHealthHealthApp => new(_haContext, "input_boolean.netdaemon_niemand_health_health_app");
    ///<summary>netdaemon_niemand_history_reader_history_reader</summary>
    public InputBooleanEntity NetdaemonNiemandHistoryReaderHistoryReader => new(_haContext, "input_boolean.netdaemon_niemand_history_reader_history_reader");
    ///<summary>netdaemon_niemand_internet_app</summary>
    public InputBooleanEntity NetdaemonNiemandInternetApp => new(_haContext, "input_boolean.netdaemon_niemand_internet_app");
    ///<summary>netdaemon_niemand_kitchen</summary>
    public InputBooleanEntity NetdaemonNiemandKitchen => new(_haContext, "input_boolean.netdaemon_niemand_kitchen");
    ///<summary>netdaemon_niemand_motion_alerts</summary>
    public InputBooleanEntity NetdaemonNiemandMotionAlerts => new(_haContext, "input_boolean.netdaemon_niemand_motion_alerts");
    ///<summary>netdaemon_niemand_office</summary>
    public InputBooleanEntity NetdaemonNiemandOffice => new(_haContext, "input_boolean.netdaemon_niemand_office");
    ///<summary>netdaemon_niemand_routines</summary>
    public InputBooleanEntity NetdaemonNiemandRoutines => new(_haContext, "input_boolean.netdaemon_niemand_routines");
    ///<summary>netdaemon_niemand_security</summary>
    public InputBooleanEntity NetdaemonNiemandSecurity => new(_haContext, "input_boolean.netdaemon_niemand_security");
    ///<summary>netdaemon_niemand_test_app_test_app</summary>
    public InputBooleanEntity NetdaemonNiemandTestAppTestApp => new(_haContext, "input_boolean.netdaemon_niemand_test_app_test_app");
    ///<summary>netdaemon_niemand_vacation_app</summary>
    public InputBooleanEntity NetdaemonNiemandVacationApp => new(_haContext, "input_boolean.netdaemon_niemand_vacation_app");
    public InputBooleanEntity NotifyEugeneTelegram => new(_haContext, "input_boolean.notify_eugene_telegram");
    public InputBooleanEntity WasherAck => new(_haContext, "input_boolean.washer_ack");
    ///<summary>Washing Reminder</summary>
    public InputBooleanEntity WashingReminder => new(_haContext, "input_boolean.washing_reminder");
}

public partial class InputButtonEntities
{
    private readonly IHaContext _haContext;
    public InputButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>DiningSeating</summary>
    public InputButtonEntity Diningseating => new(_haContext, "input_button.diningseating");
    ///<summary>Evening Routine</summary>
    public InputButtonEntity EveningRoutine => new(_haContext, "input_button.evening_routine");
    ///<summary>Get Energy Rates</summary>
    public InputButtonEntity GetEnergyRates => new(_haContext, "input_button.get_energy_rates");
    ///<summary>JaydenMorningRoutine</summary>
    public InputButtonEntity Jaydenmorningroutine => new(_haContext, "input_button.jaydenmorningroutine");
    ///<summary>Run Speedtest</summary>
    public InputButtonEntity RunSpeedtest => new(_haContext, "input_button.run_speedtest");
    ///<summary>Test Routine</summary>
    public InputButtonEntity TestRoutine => new(_haContext, "input_button.test_routine");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public InputNumberEntity AaronLuxLimit => new(_haContext, "input_number.aaron_lux_limit");
    public InputNumberEntity BoysLuxLimit => new(_haContext, "input_number.boys_lux_limit");
    public InputNumberEntity DiningLuxLimit => new(_haContext, "input_number.dining_lux_limit");
    ///<summary>Energy Rate Threshold Cheap</summary>
    public InputNumberEntity EnergyRateThresholdCheap => new(_haContext, "input_number.energy_rate_threshold_cheap");
    ///<summary>Energy Rate Threshold Expensive </summary>
    public InputNumberEntity EnergyRateThresholdExpensive => new(_haContext, "input_number.energy_rate_threshold_expensive");
    public InputNumberEntity EntranceLuxLimit => new(_haContext, "input_number.entrance_lux_limit");
    public InputNumberEntity HallwayLuxLimit => new(_haContext, "input_number.hallway_lux_limit");
    public InputNumberEntity JaydenLuxLimit => new(_haContext, "input_number.jayden_lux_limit");
    public InputNumberEntity KitchenLuxLimit => new(_haContext, "input_number.kitchen_lux_limit");
    public InputNumberEntity LandingLuxLimit => new(_haContext, "input_number.landing_lux_limit");
    public InputNumberEntity LoungeLuxLimit => new(_haContext, "input_number.lounge_lux_limit");
    public InputNumberEntity MasterLuxLimit => new(_haContext, "input_number.master_lux_limit");
    public InputNumberEntity OfficeLuxLimit => new(_haContext, "input_number.office_lux_limit");
    public InputNumberEntity PlayroomLuxLimit => new(_haContext, "input_number.playroom_lux_limit");
    public InputNumberEntity RingChimeSnoozeMinutes => new(_haContext, "input_number.ring_chime_snooze_minutes");
    public InputNumberEntity RingChimeVolume => new(_haContext, "input_number.ring_chime_volume");
    public InputNumberEntity TimerIntervalMinutes => new(_haContext, "input_number.timer_interval_minutes");
    public InputNumberEntity ToiletLuxLimit => new(_haContext, "input_number.toilet_lux_limit");
    public InputNumberEntity UtilityLuxLimit => new(_haContext, "input_number.utility_lux_limit");
}

public partial class InputSelectEntities
{
    private readonly IHaContext _haContext;
    public InputSelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Default Dashboard</summary>
    public InputSelectEntity DefaultDashboard => new(_haContext, "input_select.default_dashboard");
    ///<summary>Default Dashboard</summary>
    public InputSelectEntity DefaultDashboard2 => new(_haContext, "input_select.default_dashboard_2");
    ///<summary>House Mode</summary>
    public InputSelectEntity HouseMode => new(_haContext, "input_select.house_mode");
    ///<summary>Timer Speaker</summary>
    public InputSelectEntity TimerSpeaker => new(_haContext, "input_select.timer_speaker");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public InputTextEntity AlexaActionableNotification => new(_haContext, "input_text.alexa_actionable_notification");
    public InputTextEntity ImText => new(_haContext, "input_text.im_text");
    public InputTextEntity TtsText => new(_haContext, "input_text.tts_text");
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron</summary>
    public LightEntity Aaron => new(_haContext, "light.aaron");
    ///<summary>Aaron 1</summary>
    public LightEntity Aaron1 => new(_haContext, "light.aaron_1");
    ///<summary>Aaron 2</summary>
    public LightEntity Aaron2 => new(_haContext, "light.aaron_2");
    ///<summary>Aaron 3</summary>
    public LightEntity Aaron3 => new(_haContext, "light.aaron_3");
    ///<summary>Aaron 4</summary>
    public LightEntity Aaron4 => new(_haContext, "light.aaron_4");
    ///<summary>Aaron Main</summary>
    public LightEntity AaronMain => new(_haContext, "light.aaron_main");
    ///<summary>Aubrecia Drive Light</summary>
    public LightEntity AubreciaDriveLight => new(_haContext, "light.aubrecia_drive_light");
    ///<summary>Light</summary>
    public LightEntity AubreciaDriveLight2 => new(_haContext, "light.aubrecia_drive_light_2");
    ///<summary>Backdoor</summary>
    public LightEntity Backdoor => new(_haContext, "light.backdoor");
    ///<summary>Dining</summary>
    public LightEntity Dining => new(_haContext, "light.dining");
    ///<summary>dining 1</summary>
    public LightEntity Dining1 => new(_haContext, "light.dining_1");
    ///<summary>dining 2</summary>
    public LightEntity Dining2 => new(_haContext, "light.dining_2");
    ///<summary>dining 3</summary>
    public LightEntity Dining3 => new(_haContext, "light.dining_3");
    ///<summary>dining 4</summary>
    public LightEntity Dining4 => new(_haContext, "light.dining_4");
    ///<summary>dining 5</summary>
    public LightEntity Dining5 => new(_haContext, "light.dining_5");
    ///<summary>Dining wall</summary>
    public LightEntity DiningWall => new(_haContext, "light.dining_wall");
    ///<summary>dining wall 1</summary>
    public LightEntity DiningWall1 => new(_haContext, "light.dining_wall_1");
    ///<summary>dining wall 2</summary>
    public LightEntity DiningWall2 => new(_haContext, "light.dining_wall_2");
    ///<summary>Entrance</summary>
    public LightEntity Entrance => new(_haContext, "light.entrance");
    ///<summary>Floor</summary>
    public LightEntity Floor => new(_haContext, "light.floor");
    ///<summary>Light</summary>
    public LightEntity GardenLight => new(_haContext, "light.garden_light");
    ///<summary>Garden Light</summary>
    public LightEntity GardenLight2 => new(_haContext, "light.garden_light_2");
    ///<summary>Hallway</summary>
    public LightEntity Hallway => new(_haContext, "light.hallway");
    ///<summary>Jayden</summary>
    public LightEntity Jayden => new(_haContext, "light.jayden");
    ///<summary>Jayden nightlight</summary>
    public LightEntity Jayden1 => new(_haContext, "light.jayden_1");
    ///<summary>Jayden 2</summary>
    public LightEntity Jayden2 => new(_haContext, "light.jayden_2");
    ///<summary>Jayden 3</summary>
    public LightEntity Jayden3 => new(_haContext, "light.jayden_3");
    ///<summary>Jayden 4</summary>
    public LightEntity Jayden4 => new(_haContext, "light.jayden_4");
    ///<summary>Jayden Alarm</summary>
    public LightEntity JaydenAlarm => new(_haContext, "light.jayden_alarm");
    ///<summary>Kitchen</summary>
    public LightEntity Kitchen => new(_haContext, "light.kitchen");
    ///<summary>kitchen 1</summary>
    public LightEntity Kitchen1 => new(_haContext, "light.kitchen_1");
    ///<summary>kitchen 2</summary>
    public LightEntity Kitchen2 => new(_haContext, "light.kitchen_2");
    ///<summary>kitchen 3</summary>
    public LightEntity Kitchen3 => new(_haContext, "light.kitchen_3");
    ///<summary>kitchen 4</summary>
    public LightEntity Kitchen4 => new(_haContext, "light.kitchen_4");
    ///<summary>kitchen 5</summary>
    public LightEntity Kitchen5 => new(_haContext, "light.kitchen_5");
    ///<summary>kitchen 6</summary>
    public LightEntity Kitchen6 => new(_haContext, "light.kitchen_6");
    ///<summary>Landing</summary>
    public LightEntity Landing => new(_haContext, "light.landing");
    ///<summary>Landing 1</summary>
    public LightEntity Landing1 => new(_haContext, "light.landing_1");
    ///<summary>Landing 2</summary>
    public LightEntity Landing2 => new(_haContext, "light.landing_2");
    ///<summary>Landing 3</summary>
    public LightEntity Landing3 => new(_haContext, "light.landing_3");
    ///<summary>Landing 4</summary>
    public LightEntity Landing4 => new(_haContext, "light.landing_4");
    ///<summary>Landing 5</summary>
    public LightEntity Landing5 => new(_haContext, "light.landing_5");
    ///<summary>Landing 7</summary>
    public LightEntity Landing7 => new(_haContext, "light.landing_7");
    ///<summary>Landing Day</summary>
    public LightEntity LandingDay => new(_haContext, "light.landing_day");
    ///<summary>Lounge</summary>
    public LightEntity Lounge => new(_haContext, "light.lounge");
    ///<summary>Lounge Back</summary>
    public LightEntity LoungeBack => new(_haContext, "light.lounge_back");
    ///<summary>Lounge Front</summary>
    public LightEntity LoungeFront => new(_haContext, "light.lounge_front");
    ///<summary>Lounge Lightener</summary>
    public LightEntity LoungeLightener => new(_haContext, "light.lounge_lightener");
    ///<summary>Master</summary>
    public LightEntity Master => new(_haContext, "light.master");
    ///<summary>master 1</summary>
    public LightEntity Master1 => new(_haContext, "light.master_1");
    ///<summary>Master 2</summary>
    public LightEntity Master2 => new(_haContext, "light.master_2");
    ///<summary>master 3</summary>
    public LightEntity Master3 => new(_haContext, "light.master_3");
    ///<summary>master 4</summary>
    public LightEntity Master4 => new(_haContext, "light.master_4");
    ///<summary>Master Nightlight</summary>
    public LightEntity Master5 => new(_haContext, "light.master_5");
    ///<summary>Niemand Drive Light</summary>
    public LightEntity NiemandDriveLight => new(_haContext, "light.niemand_drive_light");
    ///<summary>Niemand Drive Light</summary>
    public LightEntity NiemandDriveLight2 => new(_haContext, "light.niemand_drive_light_2");
    ///<summary>Niemand Garden Light</summary>
    public LightEntity NiemandGardenLight => new(_haContext, "light.niemand_garden_light");
    ///<summary>Niemand Garden Light</summary>
    public LightEntity NiemandGardenLight2 => new(_haContext, "light.niemand_garden_light_2");
    ///<summary>Office</summary>
    public LightEntity Office => new(_haContext, "light.office");
    ///<summary>office 1</summary>
    public LightEntity Office1 => new(_haContext, "light.office_1");
    ///<summary>Office</summary>
    public LightEntity Office2 => new(_haContext, "light.office_2");
    ///<summary>office 3</summary>
    public LightEntity Office3 => new(_haContext, "light.office_3");
    ///<summary>Office Skylight</summary>
    public LightEntity OfficeSkylight => new(_haContext, "light.office_skylight");
    ///<summary>Outside</summary>
    public LightEntity Outside => new(_haContext, "light.outside");
    ///<summary>Outside Back</summary>
    public LightEntity OutsideBack => new(_haContext, "light.outside_back");
    ///<summary>Outside Drive</summary>
    public LightEntity OutsideDrive => new(_haContext, "light.outside_drive");
    ///<summary>Outside Front</summary>
    public LightEntity OutsideFront => new(_haContext, "light.outside_front");
    ///<summary>Outside Garage</summary>
    public LightEntity OutsideGarage => new(_haContext, "light.outside_garage");
    ///<summary>Outside Garden Flood</summary>
    public LightEntity OutsideGardenFlood => new(_haContext, "light.outside_garden_flood");
    ///<summary>Playroom</summary>
    public LightEntity Playroom => new(_haContext, "light.playroom");
    ///<summary>Playroom 1</summary>
    public LightEntity Playroom1 => new(_haContext, "light.playroom_1");
    ///<summary>Playroom 2</summary>
    public LightEntity Playroom2 => new(_haContext, "light.playroom_2");
    ///<summary>Playroom 3</summary>
    public LightEntity Playroom3 => new(_haContext, "light.playroom_3");
    ///<summary>Playroom 4</summary>
    public LightEntity Playroom4 => new(_haContext, "light.playroom_4");
    ///<summary>Playroom Main</summary>
    public LightEntity PlayroomMain => new(_haContext, "light.playroom_main");
    ///<summary>Porch</summary>
    public LightEntity Porch => new(_haContext, "light.porch");
    ///<summary>Vivarium</summary>
    public LightEntity SmartSocket6Socket1 => new(_haContext, "light.smart_socket_6_socket_1");
    ///<summary>Toilet</summary>
    public LightEntity Toilet => new(_haContext, "light.toilet");
    ///<summary>Utility</summary>
    public LightEntity Utility => new(_haContext, "light.utility");
    ///<summary>utility 1</summary>
    public LightEntity Utility1 => new(_haContext, "light.utility_1");
    ///<summary>utility 2</summary>
    public LightEntity Utility2 => new(_haContext, "light.utility_2");
    ///<summary>utility 3</summary>
    public LightEntity Utility3 => new(_haContext, "light.utility_3");
    ///<summary>UtilityCupboard</summary>
    public LightEntity Utilitycupboard => new(_haContext, "light.utilitycupboard");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron</summary>
    public MediaPlayerEntity Aaron => new(_haContext, "media_player.aaron");
    ///<summary>Alarm Clock Devices</summary>
    public MediaPlayerEntity AlarmClockDevices => new(_haContext, "media_player.alarm_clock_devices");
    ///<summary>Dining</summary>
    public MediaPlayerEntity Dining => new(_haContext, "media_player.dining");
    ///<summary>Downstairs</summary>
    public MediaPlayerEntity Downstairs => new(_haContext, "media_player.downstairs");
    ///<summary>Garden</summary>
    public MediaPlayerEntity EugeneS2ndEchoDot => new(_haContext, "media_player.eugene_s_2nd_echo_dot");
    ///<summary>Garage</summary>
    public MediaPlayerEntity EugeneS5thEchoDot => new(_haContext, "media_player.eugene_s_5th_echo_dot");
    ///<summary>Wallpanel</summary>
    public MediaPlayerEntity EugeneSFire => new(_haContext, "media_player.eugene_s_fire");
    ///<summary>Lounge LG Alexa</summary>
    public MediaPlayerEntity EugeneSLgOledWebos2021Tv => new(_haContext, "media_player.eugene_s_lg_oled_webos_2021_tv");
    ///<summary>Lounge</summary>
    public MediaPlayerEntity EugeneSSonosArc => new(_haContext, "media_player.eugene_s_sonos_arc");
    ///<summary>Everywhere</summary>
    public MediaPlayerEntity Everywhere2 => new(_haContext, "media_player.everywhere_2");
    ///<summary>Jayden</summary>
    public MediaPlayerEntity Jayden => new(_haContext, "media_player.jayden");
    ///<summary>Kitchen</summary>
    public MediaPlayerEntity Kitchen => new(_haContext, "media_player.kitchen");
    ///<summary>Lounge Soundbar</summary>
    public MediaPlayerEntity Lounge => new(_haContext, "media_player.lounge");
    ///<summary>Lounge Echo</summary>
    public MediaPlayerEntity LoungeSonos => new(_haContext, "media_player.lounge_sonos");
    ///<summary>Lounge TV</summary>
    public MediaPlayerEntity LoungeTv => new(_haContext, "media_player.lounge_tv");
    ///<summary>Master</summary>
    public MediaPlayerEntity Master => new(_haContext, "media_player.master");
    ///<summary>Master TV</summary>
    public MediaPlayerEntity MasterTv2 => new(_haContext, "media_player.master_tv_2");
    ///<summary>Master TV Alexa</summary>
    public MediaPlayerEntity MasterTvAlexa => new(_haContext, "media_player.master_tv_alexa");
    ///<summary>Office</summary>
    public MediaPlayerEntity Office => new(_haContext, "media_player.office");
    ///<summary>Playroom</summary>
    public MediaPlayerEntity Playroom => new(_haContext, "media_player.playroom");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice => new(_haContext, "media_player.this_device");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice3 => new(_haContext, "media_player.this_device_3");
    ///<summary>Upstairs</summary>
    public MediaPlayerEntity Upstairs => new(_haContext, "media_player.upstairs");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron 1 On level</summary>
    public NumberEntity Aaron1OnLevel => new(_haContext, "number.aaron_1_on_level");
    ///<summary>Aaron 1 On/Off transition time</summary>
    public NumberEntity Aaron1OnOffTransitionTime => new(_haContext, "number.aaron_1_on_off_transition_time");
    ///<summary>Aaron 1 Start-up color temperature</summary>
    public NumberEntity Aaron1StartUpColorTemperature => new(_haContext, "number.aaron_1_start_up_color_temperature");
    ///<summary>Aaron 1 Start-up current level</summary>
    public NumberEntity Aaron1StartUpCurrentLevel => new(_haContext, "number.aaron_1_start_up_current_level");
    ///<summary>Aaron 2 On level</summary>
    public NumberEntity Aaron2OnLevel => new(_haContext, "number.aaron_2_on_level");
    ///<summary>Aaron 2 On/Off transition time</summary>
    public NumberEntity Aaron2OnOffTransitionTime => new(_haContext, "number.aaron_2_on_off_transition_time");
    ///<summary>Aaron 2 Start-up color temperature</summary>
    public NumberEntity Aaron2StartUpColorTemperature => new(_haContext, "number.aaron_2_start_up_color_temperature");
    ///<summary>Aaron 2 Start-up current level</summary>
    public NumberEntity Aaron2StartUpCurrentLevel => new(_haContext, "number.aaron_2_start_up_current_level");
    ///<summary>Aaron 3 On level</summary>
    public NumberEntity Aaron3OnLevel => new(_haContext, "number.aaron_3_on_level");
    ///<summary>Aaron 3 On/Off transition time</summary>
    public NumberEntity Aaron3OnOffTransitionTime => new(_haContext, "number.aaron_3_on_off_transition_time");
    ///<summary>Aaron 3 Start-up color temperature</summary>
    public NumberEntity Aaron3StartUpColorTemperature => new(_haContext, "number.aaron_3_start_up_color_temperature");
    ///<summary>Aaron 3 Start-up current level</summary>
    public NumberEntity Aaron3StartUpCurrentLevel => new(_haContext, "number.aaron_3_start_up_current_level");
    ///<summary>Aaron 4 On level</summary>
    public NumberEntity Aaron4OnLevel => new(_haContext, "number.aaron_4_on_level");
    ///<summary>Aaron 4 On/Off transition time</summary>
    public NumberEntity Aaron4OnOffTransitionTime => new(_haContext, "number.aaron_4_on_off_transition_time");
    ///<summary>Aaron 4 Start-up color temperature</summary>
    public NumberEntity Aaron4StartUpColorTemperature => new(_haContext, "number.aaron_4_start_up_color_temperature");
    ///<summary>Aaron 4 Start-up current level</summary>
    public NumberEntity Aaron4StartUpCurrentLevel => new(_haContext, "number.aaron_4_start_up_current_level");
    ///<summary>Aaron Main On level</summary>
    public NumberEntity AaronMainOnLevel => new(_haContext, "number.aaron_main_on_level");
    ///<summary>Aaron Main On/Off transition time</summary>
    public NumberEntity AaronMainOnOffTransitionTime => new(_haContext, "number.aaron_main_on_off_transition_time");
    ///<summary>Aaron Main Start-up color temperature</summary>
    public NumberEntity AaronMainStartUpColorTemperature => new(_haContext, "number.aaron_main_start_up_color_temperature");
    ///<summary>Aaron Main Start-up current level</summary>
    public NumberEntity AaronMainStartUpCurrentLevel => new(_haContext, "number.aaron_main_start_up_current_level");
    ///<summary>Motion Duration</summary>
    public NumberEntity AubreciaDriveMotionDuration => new(_haContext, "number.aubrecia_drive_motion_duration");
    ///<summary>Snapshot Interval</summary>
    public NumberEntity AubreciaDriveSnapshotInterval => new(_haContext, "number.aubrecia_drive_snapshot_interval");
    ///<summary>Aubrecia Drive Volume</summary>
    public NumberEntity AubreciaDriveVolume => new(_haContext, "number.aubrecia_drive_volume");
    ///<summary>Ding Duration</summary>
    public NumberEntity AubreciaFrontDoorDingDuration => new(_haContext, "number.aubrecia_front_door_ding_duration");
    ///<summary>Motion Duration</summary>
    public NumberEntity AubreciaFrontDoorMotionDuration => new(_haContext, "number.aubrecia_front_door_motion_duration");
    ///<summary>Snapshot Interval</summary>
    public NumberEntity AubreciaFrontDoorSnapshotInterval => new(_haContext, "number.aubrecia_front_door_snapshot_interval");
    ///<summary>Aubrecia Front Door Volume</summary>
    public NumberEntity AubreciaFrontDoorVolume => new(_haContext, "number.aubrecia_front_door_volume");
    ///<summary>Backdoor On level</summary>
    public NumberEntity BackdoorOnLevel => new(_haContext, "number.backdoor_on_level");
    ///<summary>Backdoor On/Off transition time</summary>
    public NumberEntity BackdoorOnOffTransitionTime => new(_haContext, "number.backdoor_on_off_transition_time");
    ///<summary>Backdoor Start-up color temperature</summary>
    public NumberEntity BackdoorStartUpColorTemperature => new(_haContext, "number.backdoor_start_up_color_temperature");
    ///<summary>Backdoor Start-up current level</summary>
    public NumberEntity BackdoorStartUpCurrentLevel => new(_haContext, "number.backdoor_start_up_current_level");
    ///<summary>dining 1 On level</summary>
    public NumberEntity Dining1OnLevel => new(_haContext, "number.dining_1_on_level");
    ///<summary>dining 1 On/Off transition time</summary>
    public NumberEntity Dining1OnOffTransitionTime => new(_haContext, "number.dining_1_on_off_transition_time");
    ///<summary>dining 1 Start-up color temperature</summary>
    public NumberEntity Dining1StartUpColorTemperature => new(_haContext, "number.dining_1_start_up_color_temperature");
    ///<summary>dining 1 Start-up current level</summary>
    public NumberEntity Dining1StartUpCurrentLevel => new(_haContext, "number.dining_1_start_up_current_level");
    ///<summary>dining 2 On level</summary>
    public NumberEntity Dining2OnLevel => new(_haContext, "number.dining_2_on_level");
    ///<summary>dining 2 On/Off transition time</summary>
    public NumberEntity Dining2OnOffTransitionTime => new(_haContext, "number.dining_2_on_off_transition_time");
    ///<summary>dining 2 Start-up color temperature</summary>
    public NumberEntity Dining2StartUpColorTemperature => new(_haContext, "number.dining_2_start_up_color_temperature");
    ///<summary>dining 2 Start-up current level</summary>
    public NumberEntity Dining2StartUpCurrentLevel => new(_haContext, "number.dining_2_start_up_current_level");
    ///<summary>dining 3 On level</summary>
    public NumberEntity Dining3OnLevel => new(_haContext, "number.dining_3_on_level");
    ///<summary>dining 3 On/Off transition time</summary>
    public NumberEntity Dining3OnOffTransitionTime => new(_haContext, "number.dining_3_on_off_transition_time");
    ///<summary>dining 3 Start-up color temperature</summary>
    public NumberEntity Dining3StartUpColorTemperature => new(_haContext, "number.dining_3_start_up_color_temperature");
    ///<summary>dining 3 Start-up current level</summary>
    public NumberEntity Dining3StartUpCurrentLevel => new(_haContext, "number.dining_3_start_up_current_level");
    ///<summary>dining 4 On level</summary>
    public NumberEntity Dining4OnLevel => new(_haContext, "number.dining_4_on_level");
    ///<summary>dining 4 On/Off transition time</summary>
    public NumberEntity Dining4OnOffTransitionTime => new(_haContext, "number.dining_4_on_off_transition_time");
    ///<summary>dining 4 Start-up color temperature</summary>
    public NumberEntity Dining4StartUpColorTemperature => new(_haContext, "number.dining_4_start_up_color_temperature");
    ///<summary>dining 4 Start-up current level</summary>
    public NumberEntity Dining4StartUpCurrentLevel => new(_haContext, "number.dining_4_start_up_current_level");
    ///<summary>dining 5 On level</summary>
    public NumberEntity Dining5OnLevel => new(_haContext, "number.dining_5_on_level");
    ///<summary>dining 5 On/Off transition time</summary>
    public NumberEntity Dining5OnOffTransitionTime => new(_haContext, "number.dining_5_on_off_transition_time");
    ///<summary>dining 5 Start-up color temperature</summary>
    public NumberEntity Dining5StartUpColorTemperature => new(_haContext, "number.dining_5_start_up_color_temperature");
    ///<summary>dining 5 Start-up current level</summary>
    public NumberEntity Dining5StartUpCurrentLevel => new(_haContext, "number.dining_5_start_up_current_level");
    ///<summary>dining wall 1 On level</summary>
    public NumberEntity DiningWall1OnLevel => new(_haContext, "number.dining_wall_1_on_level");
    ///<summary>dining wall 1 On/Off transition time</summary>
    public NumberEntity DiningWall1OnOffTransitionTime => new(_haContext, "number.dining_wall_1_on_off_transition_time");
    ///<summary>dining wall 1 Start-up current level</summary>
    public NumberEntity DiningWall1StartUpCurrentLevel => new(_haContext, "number.dining_wall_1_start_up_current_level");
    ///<summary>dining wall 2 On level</summary>
    public NumberEntity DiningWall2OnLevel => new(_haContext, "number.dining_wall_2_on_level");
    ///<summary>dining wall 2 On/Off transition time</summary>
    public NumberEntity DiningWall2OnOffTransitionTime => new(_haContext, "number.dining_wall_2_on_off_transition_time");
    ///<summary>dining wall 2 Start-up current level</summary>
    public NumberEntity DiningWall2StartUpCurrentLevel => new(_haContext, "number.dining_wall_2_start_up_current_level");
    ///<summary>Downstairs Snooze Minutes</summary>
    public NumberEntity DownstairsSnoozeMinutes => new(_haContext, "number.downstairs_snooze_minutes");
    ///<summary>Downstairs Volume</summary>
    public NumberEntity DownstairsVolume => new(_haContext, "number.downstairs_volume");
    ///<summary>Downstairs Volume</summary>
    public NumberEntity DownstairsVolume2 => new(_haContext, "number.downstairs_volume_2");
    ///<summary>entrance On level</summary>
    public NumberEntity EntranceOnLevel => new(_haContext, "number.entrance_on_level");
    ///<summary>entrance On/Off transition time</summary>
    public NumberEntity EntranceOnOffTransitionTime => new(_haContext, "number.entrance_on_off_transition_time");
    ///<summary>entrance Start-up current level</summary>
    public NumberEntity EntranceStartUpCurrentLevel => new(_haContext, "number.entrance_start_up_current_level");
    ///<summary>Fish Lights On level</summary>
    public NumberEntity FishLightsOnLevel => new(_haContext, "number.fish_lights_on_level");
    ///<summary>Fish Lights On/Off transition time</summary>
    public NumberEntity FishLightsOnOffTransitionTime => new(_haContext, "number.fish_lights_on_off_transition_time");
    ///<summary>Fish Lights Start-up current level</summary>
    public NumberEntity FishLightsStartUpCurrentLevel => new(_haContext, "number.fish_lights_start_up_current_level");
    ///<summary>Floor On level</summary>
    public NumberEntity FloorOnLevel => new(_haContext, "number.floor_on_level");
    ///<summary>Floor On/Off transition time</summary>
    public NumberEntity FloorOnOffTransitionTime => new(_haContext, "number.floor_on_off_transition_time");
    ///<summary>Floor Start-up color temperature</summary>
    public NumberEntity FloorStartUpColorTemperature => new(_haContext, "number.floor_start_up_color_temperature");
    ///<summary>Floor Start-up current level</summary>
    public NumberEntity FloorStartUpCurrentLevel => new(_haContext, "number.floor_start_up_current_level");
    ///<summary>Motion Duration</summary>
    public NumberEntity GardenMotionDuration => new(_haContext, "number.garden_motion_duration");
    ///<summary>Snapshot Interval</summary>
    public NumberEntity GardenSnapshotInterval => new(_haContext, "number.garden_snapshot_interval");
    ///<summary>Garden Volume</summary>
    public NumberEntity GardenVolume => new(_haContext, "number.garden_volume");
    ///<summary>hallway On level</summary>
    public NumberEntity HallwayOnLevel => new(_haContext, "number.hallway_on_level");
    ///<summary>hallway On/Off transition time</summary>
    public NumberEntity HallwayOnOffTransitionTime => new(_haContext, "number.hallway_on_off_transition_time");
    ///<summary>hallway Start-up current level</summary>
    public NumberEntity HallwayStartUpCurrentLevel => new(_haContext, "number.hallway_start_up_current_level");
    ///<summary>Indoor 2 Motion Duration</summary>
    public NumberEntity Indoor2MotionDuration => new(_haContext, "number.indoor_2_motion_duration");
    ///<summary>Indoor 2 Snapshot Interval</summary>
    public NumberEntity Indoor2SnapshotInterval => new(_haContext, "number.indoor_2_snapshot_interval");
    ///<summary>Indoor 2 Volume</summary>
    public NumberEntity Indoor2Volume => new(_haContext, "number.indoor_2_volume");
    ///<summary>Jayden 1 On level</summary>
    public NumberEntity Jayden1OnLevel3 => new(_haContext, "number.jayden_1_on_level_3");
    ///<summary>Jayden 1 On/Off transition time</summary>
    public NumberEntity Jayden1OnOffTransitionTime3 => new(_haContext, "number.jayden_1_on_off_transition_time_3");
    ///<summary>Jayden 1 Start-up color temperature</summary>
    public NumberEntity Jayden1StartUpColorTemperature3 => new(_haContext, "number.jayden_1_start_up_color_temperature_3");
    ///<summary>Jayden 1 Start-up current level</summary>
    public NumberEntity Jayden1StartUpCurrentLevel3 => new(_haContext, "number.jayden_1_start_up_current_level_3");
    ///<summary>Jayden 2 On level</summary>
    public NumberEntity Jayden2OnLevel4 => new(_haContext, "number.jayden_2_on_level_4");
    ///<summary>Jayden 2 On/Off transition time</summary>
    public NumberEntity Jayden2OnOffTransitionTime4 => new(_haContext, "number.jayden_2_on_off_transition_time_4");
    ///<summary>Jayden 2 Start-up color temperature</summary>
    public NumberEntity Jayden2StartUpColorTemperature4 => new(_haContext, "number.jayden_2_start_up_color_temperature_4");
    ///<summary>Jayden 2 Start-up current level</summary>
    public NumberEntity Jayden2StartUpCurrentLevel4 => new(_haContext, "number.jayden_2_start_up_current_level_4");
    ///<summary>Jayden 3 On level</summary>
    public NumberEntity Jayden3OnLevel2 => new(_haContext, "number.jayden_3_on_level_2");
    ///<summary>Jayden 3 On/Off transition time</summary>
    public NumberEntity Jayden3OnOffTransitionTime2 => new(_haContext, "number.jayden_3_on_off_transition_time_2");
    ///<summary>Jayden 3 Start-up color temperature</summary>
    public NumberEntity Jayden3StartUpColorTemperature2 => new(_haContext, "number.jayden_3_start_up_color_temperature_2");
    ///<summary>Jayden 3 Start-up current level</summary>
    public NumberEntity Jayden3StartUpCurrentLevel2 => new(_haContext, "number.jayden_3_start_up_current_level_2");
    ///<summary>Jayden 4 On level</summary>
    public NumberEntity Jayden4OnLevel => new(_haContext, "number.jayden_4_on_level");
    ///<summary>Jayden 4 On/Off transition time</summary>
    public NumberEntity Jayden4OnOffTransitionTime => new(_haContext, "number.jayden_4_on_off_transition_time");
    ///<summary>Jayden 4 Start-up color temperature</summary>
    public NumberEntity Jayden4StartUpColorTemperature => new(_haContext, "number.jayden_4_start_up_color_temperature");
    ///<summary>Jayden 4 Start-up current level</summary>
    public NumberEntity Jayden4StartUpCurrentLevel => new(_haContext, "number.jayden_4_start_up_current_level");
    ///<summary>Ding Duration</summary>
    public NumberEntity JohanFrontDoorDingDuration => new(_haContext, "number.johan_front_door_ding_duration");
    ///<summary>Motion Duration</summary>
    public NumberEntity JohanFrontDoorMotionDuration => new(_haContext, "number.johan_front_door_motion_duration");
    ///<summary>Snapshot Interval</summary>
    public NumberEntity JohanFrontDoorSnapshotInterval => new(_haContext, "number.johan_front_door_snapshot_interval");
    ///<summary>Johan Front Door Volume</summary>
    public NumberEntity JohanFrontDoorVolume => new(_haContext, "number.johan_front_door_volume");
    ///<summary>kitchen 1 On level</summary>
    public NumberEntity Kitchen1OnLevel => new(_haContext, "number.kitchen_1_on_level");
    ///<summary>kitchen 1 On/Off transition time</summary>
    public NumberEntity Kitchen1OnOffTransitionTime => new(_haContext, "number.kitchen_1_on_off_transition_time");
    ///<summary>kitchen 1 Start-up current level</summary>
    public NumberEntity Kitchen1StartUpCurrentLevel => new(_haContext, "number.kitchen_1_start_up_current_level");
    ///<summary>kitchen 2 On level</summary>
    public NumberEntity Kitchen2OnLevel => new(_haContext, "number.kitchen_2_on_level");
    ///<summary>kitchen 2 On/Off transition time</summary>
    public NumberEntity Kitchen2OnOffTransitionTime => new(_haContext, "number.kitchen_2_on_off_transition_time");
    ///<summary>kitchen 2 Start-up current level</summary>
    public NumberEntity Kitchen2StartUpCurrentLevel => new(_haContext, "number.kitchen_2_start_up_current_level");
    ///<summary>kitchen 3 On level</summary>
    public NumberEntity Kitchen3OnLevel => new(_haContext, "number.kitchen_3_on_level");
    ///<summary>kitchen 3 On/Off transition time</summary>
    public NumberEntity Kitchen3OnOffTransitionTime => new(_haContext, "number.kitchen_3_on_off_transition_time");
    ///<summary>kitchen 3 Start-up current level</summary>
    public NumberEntity Kitchen3StartUpCurrentLevel => new(_haContext, "number.kitchen_3_start_up_current_level");
    ///<summary>kitchen 4 On level</summary>
    public NumberEntity Kitchen4OnLevel => new(_haContext, "number.kitchen_4_on_level");
    ///<summary>kitchen 4 On/Off transition time</summary>
    public NumberEntity Kitchen4OnOffTransitionTime => new(_haContext, "number.kitchen_4_on_off_transition_time");
    ///<summary>kitchen 4 Start-up current level</summary>
    public NumberEntity Kitchen4StartUpCurrentLevel => new(_haContext, "number.kitchen_4_start_up_current_level");
    ///<summary>kitchen 5 On level</summary>
    public NumberEntity Kitchen5OnLevel => new(_haContext, "number.kitchen_5_on_level");
    ///<summary>kitchen 5 On/Off transition time</summary>
    public NumberEntity Kitchen5OnOffTransitionTime => new(_haContext, "number.kitchen_5_on_off_transition_time");
    ///<summary>kitchen 5 Start-up current level</summary>
    public NumberEntity Kitchen5StartUpCurrentLevel => new(_haContext, "number.kitchen_5_start_up_current_level");
    ///<summary>kitchen 6 On level</summary>
    public NumberEntity Kitchen6OnLevel => new(_haContext, "number.kitchen_6_on_level");
    ///<summary>kitchen 6 On/Off transition time</summary>
    public NumberEntity Kitchen6OnOffTransitionTime => new(_haContext, "number.kitchen_6_on_off_transition_time");
    ///<summary>kitchen 6 Start-up current level</summary>
    public NumberEntity Kitchen6StartUpCurrentLevel => new(_haContext, "number.kitchen_6_start_up_current_level");
    ///<summary>Landing 1 On level</summary>
    public NumberEntity Landing1OnLevel => new(_haContext, "number.landing_1_on_level");
    ///<summary>Landing 1 On/Off transition time</summary>
    public NumberEntity Landing1OnOffTransitionTime => new(_haContext, "number.landing_1_on_off_transition_time");
    ///<summary>Landing 1 Start-up current level</summary>
    public NumberEntity Landing1StartUpCurrentLevel => new(_haContext, "number.landing_1_start_up_current_level");
    ///<summary>Landing 2 On level</summary>
    public NumberEntity Landing2OnLevel => new(_haContext, "number.landing_2_on_level");
    ///<summary>Landing 2 On/Off transition time</summary>
    public NumberEntity Landing2OnOffTransitionTime => new(_haContext, "number.landing_2_on_off_transition_time");
    ///<summary>Landing 2 Start-up current level</summary>
    public NumberEntity Landing2StartUpCurrentLevel => new(_haContext, "number.landing_2_start_up_current_level");
    ///<summary>Landing 3 On level</summary>
    public NumberEntity Landing3OnLevel2 => new(_haContext, "number.landing_3_on_level_2");
    ///<summary>Landing 3 On/Off transition time</summary>
    public NumberEntity Landing3OnOffTransitionTime2 => new(_haContext, "number.landing_3_on_off_transition_time_2");
    ///<summary>Landing 3 Start-up current level</summary>
    public NumberEntity Landing3StartUpCurrentLevel2 => new(_haContext, "number.landing_3_start_up_current_level_2");
    ///<summary>Landing 4 On level</summary>
    public NumberEntity Landing4OnLevel3 => new(_haContext, "number.landing_4_on_level_3");
    ///<summary>Landing 4 On/Off transition time</summary>
    public NumberEntity Landing4OnOffTransitionTime3 => new(_haContext, "number.landing_4_on_off_transition_time_3");
    ///<summary>Landing 4 Start-up current level</summary>
    public NumberEntity Landing4StartUpCurrentLevel3 => new(_haContext, "number.landing_4_start_up_current_level_3");
    ///<summary>Landing 5 On level</summary>
    public NumberEntity Landing5OnLevel => new(_haContext, "number.landing_5_on_level");
    ///<summary>Landing 5 On/Off transition time</summary>
    public NumberEntity Landing5OnOffTransitionTime => new(_haContext, "number.landing_5_on_off_transition_time");
    ///<summary>Landing 5 Start-up current level</summary>
    public NumberEntity Landing5StartUpCurrentLevel => new(_haContext, "number.landing_5_start_up_current_level");
    ///<summary>Landing 7 On level</summary>
    public NumberEntity Landing7OnLevel => new(_haContext, "number.landing_7_on_level");
    ///<summary>Landing 7 On/Off transition time</summary>
    public NumberEntity Landing7OnOffTransitionTime => new(_haContext, "number.landing_7_on_off_transition_time");
    ///<summary>Landing 7 Start-up current level</summary>
    public NumberEntity Landing7StartUpCurrentLevel => new(_haContext, "number.landing_7_start_up_current_level");
    ///<summary>Lounge Audio delay</summary>
    public NumberEntity LoungeAudioDelay => new(_haContext, "number.lounge_audio_delay");
    ///<summary>lounge back On level</summary>
    public NumberEntity LoungeBackOnLevel => new(_haContext, "number.lounge_back_on_level");
    ///<summary>lounge back On/Off transition time</summary>
    public NumberEntity LoungeBackOnOffTransitionTime => new(_haContext, "number.lounge_back_on_off_transition_time");
    ///<summary>lounge back Start-up color temperature</summary>
    public NumberEntity LoungeBackStartUpColorTemperature => new(_haContext, "number.lounge_back_start_up_color_temperature");
    ///<summary>lounge back Start-up current level</summary>
    public NumberEntity LoungeBackStartUpCurrentLevel => new(_haContext, "number.lounge_back_start_up_current_level");
    ///<summary>Lounge Balance</summary>
    public NumberEntity LoungeBalance => new(_haContext, "number.lounge_balance");
    ///<summary>Lounge Bass</summary>
    public NumberEntity LoungeBass => new(_haContext, "number.lounge_bass");
    ///<summary>lounge front On level</summary>
    public NumberEntity LoungeFrontOnLevel => new(_haContext, "number.lounge_front_on_level");
    ///<summary>lounge front On/Off transition time</summary>
    public NumberEntity LoungeFrontOnOffTransitionTime => new(_haContext, "number.lounge_front_on_off_transition_time");
    ///<summary>lounge front Start-up color temperature</summary>
    public NumberEntity LoungeFrontStartUpColorTemperature => new(_haContext, "number.lounge_front_start_up_color_temperature");
    ///<summary>lounge front Start-up current level</summary>
    public NumberEntity LoungeFrontStartUpCurrentLevel => new(_haContext, "number.lounge_front_start_up_current_level");
    ///<summary>Lounge Music surround level</summary>
    public NumberEntity LoungeMusicSurroundLevel => new(_haContext, "number.lounge_music_surround_level");
    ///<summary>Lounge Sub gain</summary>
    public NumberEntity LoungeSubGain => new(_haContext, "number.lounge_sub_gain");
    ///<summary>Lounge Surround level</summary>
    public NumberEntity LoungeSurroundLevel => new(_haContext, "number.lounge_surround_level");
    ///<summary>Lounge Treble</summary>
    public NumberEntity LoungeTreble => new(_haContext, "number.lounge_treble");
    ///<summary>master 1 On level</summary>
    public NumberEntity Master1OnLevel => new(_haContext, "number.master_1_on_level");
    ///<summary>master 1 On/Off transition time</summary>
    public NumberEntity Master1OnOffTransitionTime => new(_haContext, "number.master_1_on_off_transition_time");
    ///<summary>master 1 Start-up color temperature</summary>
    public NumberEntity Master1StartUpColorTemperature => new(_haContext, "number.master_1_start_up_color_temperature");
    ///<summary>master 1 Start-up current level</summary>
    public NumberEntity Master1StartUpCurrentLevel => new(_haContext, "number.master_1_start_up_current_level");
    ///<summary>Master 2 On level</summary>
    public NumberEntity Master2OnLevel => new(_haContext, "number.master_2_on_level");
    ///<summary>Master 2 On/Off transition time</summary>
    public NumberEntity Master2OnOffTransitionTime => new(_haContext, "number.master_2_on_off_transition_time");
    ///<summary>Master 2 Start-up color temperature</summary>
    public NumberEntity Master2StartUpColorTemperature => new(_haContext, "number.master_2_start_up_color_temperature");
    ///<summary>Master 2 Start-up current level</summary>
    public NumberEntity Master2StartUpCurrentLevel => new(_haContext, "number.master_2_start_up_current_level");
    ///<summary>master 3 On level</summary>
    public NumberEntity Master3OnLevel => new(_haContext, "number.master_3_on_level");
    ///<summary>master 3 On/Off transition time</summary>
    public NumberEntity Master3OnOffTransitionTime => new(_haContext, "number.master_3_on_off_transition_time");
    ///<summary>master 3 Start-up color temperature</summary>
    public NumberEntity Master3StartUpColorTemperature => new(_haContext, "number.master_3_start_up_color_temperature");
    ///<summary>master 3 Start-up current level</summary>
    public NumberEntity Master3StartUpCurrentLevel => new(_haContext, "number.master_3_start_up_current_level");
    ///<summary>master 4 On level</summary>
    public NumberEntity Master4OnLevel => new(_haContext, "number.master_4_on_level");
    ///<summary>master 4 On/Off transition time</summary>
    public NumberEntity Master4OnOffTransitionTime => new(_haContext, "number.master_4_on_off_transition_time");
    ///<summary>master 4 Start-up color temperature</summary>
    public NumberEntity Master4StartUpColorTemperature => new(_haContext, "number.master_4_start_up_color_temperature");
    ///<summary>master 4 Start-up current level</summary>
    public NumberEntity Master4StartUpCurrentLevel => new(_haContext, "number.master_4_start_up_current_level");
    ///<summary>Master Nightlight On level</summary>
    public NumberEntity MasterNightlightOnLevel => new(_haContext, "number.master_nightlight_on_level");
    ///<summary>Master Nightlight On/Off transition time</summary>
    public NumberEntity MasterNightlightOnOffTransitionTime => new(_haContext, "number.master_nightlight_on_off_transition_time");
    ///<summary>Master Nightlight Start-up color temperature</summary>
    public NumberEntity MasterNightlightStartUpColorTemperature => new(_haContext, "number.master_nightlight_start_up_color_temperature");
    ///<summary>Master Nightlight Start-up current level</summary>
    public NumberEntity MasterNightlightStartUpCurrentLevel => new(_haContext, "number.master_nightlight_start_up_current_level");
    ///<summary>Niemand Drive Motion Duration</summary>
    public NumberEntity NiemandDriveMotionDuration => new(_haContext, "number.niemand_drive_motion_duration");
    ///<summary>Niemand Drive Snapshot Interval</summary>
    public NumberEntity NiemandDriveSnapshotInterval => new(_haContext, "number.niemand_drive_snapshot_interval");
    ///<summary>Niemand Drive Volume</summary>
    public NumberEntity NiemandDriveVolume => new(_haContext, "number.niemand_drive_volume");
    ///<summary>Niemand Front Door Ding Duration</summary>
    public NumberEntity NiemandFrontDoorDingDuration => new(_haContext, "number.niemand_front_door_ding_duration");
    ///<summary>Niemand Front Door Motion Duration</summary>
    public NumberEntity NiemandFrontDoorMotionDuration => new(_haContext, "number.niemand_front_door_motion_duration");
    ///<summary>Niemand Front Door Snapshot Interval</summary>
    public NumberEntity NiemandFrontDoorSnapshotInterval => new(_haContext, "number.niemand_front_door_snapshot_interval");
    ///<summary>Niemand Front Door Volume</summary>
    public NumberEntity NiemandFrontDoorVolume => new(_haContext, "number.niemand_front_door_volume");
    ///<summary>Niemand Garage Motion Duration</summary>
    public NumberEntity NiemandGarageMotionDuration => new(_haContext, "number.niemand_garage_motion_duration");
    ///<summary>Niemand Garage Snapshot Interval</summary>
    public NumberEntity NiemandGarageSnapshotInterval => new(_haContext, "number.niemand_garage_snapshot_interval");
    ///<summary>Niemand Garage Volume</summary>
    public NumberEntity NiemandGarageVolume => new(_haContext, "number.niemand_garage_volume");
    ///<summary>Niemand Garden Motion Duration</summary>
    public NumberEntity NiemandGardenMotionDuration => new(_haContext, "number.niemand_garden_motion_duration");
    ///<summary>Niemand Garden Snapshot Interval</summary>
    public NumberEntity NiemandGardenSnapshotInterval => new(_haContext, "number.niemand_garden_snapshot_interval");
    ///<summary>Niemand Garden Volume</summary>
    public NumberEntity NiemandGardenVolume => new(_haContext, "number.niemand_garden_volume");
    ///<summary>Niemand Indoor 1 Motion Duration</summary>
    public NumberEntity NiemandIndoor1MotionDuration => new(_haContext, "number.niemand_indoor_1_motion_duration");
    ///<summary>Niemand Indoor 1 Snapshot Interval</summary>
    public NumberEntity NiemandIndoor1SnapshotInterval => new(_haContext, "number.niemand_indoor_1_snapshot_interval");
    ///<summary>Niemand Indoor 1 Volume</summary>
    public NumberEntity NiemandIndoor1Volume => new(_haContext, "number.niemand_indoor_1_volume");
    ///<summary>Niemand Side Motion Duration</summary>
    public NumberEntity NiemandSideMotionDuration => new(_haContext, "number.niemand_side_motion_duration");
    ///<summary>Niemand Side Snapshot Interval</summary>
    public NumberEntity NiemandSideSnapshotInterval => new(_haContext, "number.niemand_side_snapshot_interval");
    ///<summary>Niemand Side Volume</summary>
    public NumberEntity NiemandSideVolume => new(_haContext, "number.niemand_side_volume");
    ///<summary>office 1 On level</summary>
    public NumberEntity Office1OnLevel => new(_haContext, "number.office_1_on_level");
    ///<summary>office 1 On/Off transition time</summary>
    public NumberEntity Office1OnOffTransitionTime => new(_haContext, "number.office_1_on_off_transition_time");
    ///<summary>office 1 Start-up color temperature</summary>
    public NumberEntity Office1StartUpColorTemperature => new(_haContext, "number.office_1_start_up_color_temperature");
    ///<summary>office 1 Start-up current level</summary>
    public NumberEntity Office1StartUpCurrentLevel => new(_haContext, "number.office_1_start_up_current_level");
    ///<summary>office 3 On level</summary>
    public NumberEntity Office3OnLevel => new(_haContext, "number.office_3_on_level");
    ///<summary>office 3 On/Off transition time</summary>
    public NumberEntity Office3OnOffTransitionTime => new(_haContext, "number.office_3_on_off_transition_time");
    ///<summary>office 3 Start-up color temperature</summary>
    public NumberEntity Office3StartUpColorTemperature => new(_haContext, "number.office_3_start_up_color_temperature");
    ///<summary>office 3 Start-up current level</summary>
    public NumberEntity Office3StartUpCurrentLevel => new(_haContext, "number.office_3_start_up_current_level");
    ///<summary>Playroom 1 On level</summary>
    public NumberEntity Playroom1OnLevel => new(_haContext, "number.playroom_1_on_level");
    ///<summary>Playroom 1 On/Off transition time</summary>
    public NumberEntity Playroom1OnOffTransitionTime => new(_haContext, "number.playroom_1_on_off_transition_time");
    ///<summary>Playroom 1 Start-up color temperature</summary>
    public NumberEntity Playroom1StartUpColorTemperature => new(_haContext, "number.playroom_1_start_up_color_temperature");
    ///<summary>Playroom 1 Start-up current level</summary>
    public NumberEntity Playroom1StartUpCurrentLevel => new(_haContext, "number.playroom_1_start_up_current_level");
    ///<summary>Playroom 2 On level</summary>
    public NumberEntity Playroom2OnLevel => new(_haContext, "number.playroom_2_on_level");
    ///<summary>Playroom 2 On/Off transition time</summary>
    public NumberEntity Playroom2OnOffTransitionTime => new(_haContext, "number.playroom_2_on_off_transition_time");
    ///<summary>Playroom 2 Start-up color temperature</summary>
    public NumberEntity Playroom2StartUpColorTemperature => new(_haContext, "number.playroom_2_start_up_color_temperature");
    ///<summary>Playroom 2 Start-up current level</summary>
    public NumberEntity Playroom2StartUpCurrentLevel => new(_haContext, "number.playroom_2_start_up_current_level");
    ///<summary>Playroom 3 On level</summary>
    public NumberEntity Playroom3OnLevel3 => new(_haContext, "number.playroom_3_on_level_3");
    ///<summary>Playroom 3 On/Off transition time</summary>
    public NumberEntity Playroom3OnOffTransitionTime3 => new(_haContext, "number.playroom_3_on_off_transition_time_3");
    ///<summary>Playroom 3 Start-up color temperature</summary>
    public NumberEntity Playroom3StartUpColorTemperature3 => new(_haContext, "number.playroom_3_start_up_color_temperature_3");
    ///<summary>Playroom 3 Start-up current level</summary>
    public NumberEntity Playroom3StartUpCurrentLevel2 => new(_haContext, "number.playroom_3_start_up_current_level_2");
    ///<summary>Playroom 4 On level</summary>
    public NumberEntity Playroom4OnLevel2 => new(_haContext, "number.playroom_4_on_level_2");
    ///<summary>Playroom 4 On/Off transition time</summary>
    public NumberEntity Playroom4OnOffTransitionTime2 => new(_haContext, "number.playroom_4_on_off_transition_time_2");
    ///<summary>Playroom 4 Start-up color temperature</summary>
    public NumberEntity Playroom4StartUpColorTemperature2 => new(_haContext, "number.playroom_4_start_up_color_temperature_2");
    ///<summary>Playroom 4 Start-up current level</summary>
    public NumberEntity Playroom4StartUpCurrentLevel => new(_haContext, "number.playroom_4_start_up_current_level");
    ///<summary>Playroom Main On level</summary>
    public NumberEntity PlayroomMainOnLevel => new(_haContext, "number.playroom_main_on_level");
    ///<summary>Playroom Main On/Off transition time</summary>
    public NumberEntity PlayroomMainOnOffTransitionTime => new(_haContext, "number.playroom_main_on_off_transition_time");
    ///<summary>Playroom Main Start-up color temperature</summary>
    public NumberEntity PlayroomMainStartUpColorTemperature => new(_haContext, "number.playroom_main_start_up_color_temperature");
    ///<summary>Playroom Main Start-up current level</summary>
    public NumberEntity PlayroomMainStartUpCurrentLevel => new(_haContext, "number.playroom_main_start_up_current_level");
    ///<summary>Ring Chime Snooze Minutes</summary>
    public NumberEntity RingChimeSnoozeMinutes => new(_haContext, "number.ring_chime_snooze_minutes");
    ///<summary>Ring Chime Volume</summary>
    public NumberEntity RingChimeVolume => new(_haContext, "number.ring_chime_volume");
    ///<summary>toilet On level</summary>
    public NumberEntity ToiletOnLevel => new(_haContext, "number.toilet_on_level");
    ///<summary>toilet On/Off transition time</summary>
    public NumberEntity ToiletOnOffTransitionTime => new(_haContext, "number.toilet_on_off_transition_time");
    ///<summary>toilet Start-up current level</summary>
    public NumberEntity ToiletStartUpCurrentLevel => new(_haContext, "number.toilet_start_up_current_level");
    ///<summary>utility 1 On level</summary>
    public NumberEntity Utility1OnLevel => new(_haContext, "number.utility_1_on_level");
    ///<summary>utility 1 On/Off transition time</summary>
    public NumberEntity Utility1OnOffTransitionTime => new(_haContext, "number.utility_1_on_off_transition_time");
    ///<summary>utility 1 Start-up current level</summary>
    public NumberEntity Utility1StartUpCurrentLevel => new(_haContext, "number.utility_1_start_up_current_level");
    ///<summary>utility 2 On level</summary>
    public NumberEntity Utility2OnLevel => new(_haContext, "number.utility_2_on_level");
    ///<summary>utility 2 On/Off transition time</summary>
    public NumberEntity Utility2OnOffTransitionTime => new(_haContext, "number.utility_2_on_off_transition_time");
    ///<summary>utility 2 Start-up current level</summary>
    public NumberEntity Utility2StartUpCurrentLevel => new(_haContext, "number.utility_2_start_up_current_level");
    ///<summary>utility 3 On level</summary>
    public NumberEntity Utility3OnLevel => new(_haContext, "number.utility_3_on_level");
    ///<summary>utility 3 On/Off transition time</summary>
    public NumberEntity Utility3OnOffTransitionTime => new(_haContext, "number.utility_3_on_off_transition_time");
    ///<summary>utility 3 Start-up current level</summary>
    public NumberEntity Utility3StartUpCurrentLevel => new(_haContext, "number.utility_3_start_up_current_level");
    ///<summary>Wiser Away Mode Target Temperature</summary>
    public NumberEntity WiserAwayModeTargetTemperature => new(_haContext, "number.wiser_away_mode_target_temperature");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron</summary>
    public PersonEntity Aaron => new(_haContext, "person.aaron");
    ///<summary>Aubrecia</summary>
    public PersonEntity Aubrecia => new(_haContext, "person.aubrecia");
    ///<summary>Eugene</summary>
    public PersonEntity Eugene => new(_haContext, "person.eugene");
    ///<summary>Hailey</summary>
    public PersonEntity Hailey => new(_haContext, "person.hailey");
    ///<summary>Jayden</summary>
    public PersonEntity Jayden => new(_haContext, "person.jayden");
    ///<summary>NetDaemon</summary>
    public PersonEntity Netdaemon => new(_haContext, "person.netdaemon");
}

public partial class ProximityEntities
{
    private readonly IHaContext _haContext;
    public ProximityEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>home</summary>
    public ProximityEntity Home => new(_haContext, "proximity.home");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Xbox Remote</summary>
    public RemoteEntity XboxRemote => new(_haContext, "remote.xbox_remote");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cool house</summary>
    public SceneEntity CoolHouse => new(_haContext, "scene.cool_house");
    ///<summary>Night mode scene</summary>
    public SceneEntity NewScene => new(_haContext, "scene.new_scene");
    ///<summary>Day mode scene</summary>
    public SceneEntity NewScene2 => new(_haContext, "scene.new_scene_2");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>activate_alexa_actionable_notification</summary>
    public ScriptEntity ActivateAlexaActionableNotification => new(_haContext, "script.activate_alexa_actionable_notification");
    ///<summary>arrive_home</summary>
    public ScriptEntity ArriveHome => new(_haContext, "script.arrive_home");
    ///<summary>im_text</summary>
    public ScriptEntity ImText => new(_haContext, "script.im_text");
    ///<summary>Play YouTube on LG</summary>
    public ScriptEntity PlayYoutubeOnLg => new(_haContext, "script.play_youtube_on_lg");
    ///<summary>Set Ring Mqtt Snapshot Interval</summary>
    public ScriptEntity RingMqttInterval => new(_haContext, "script.ring_mqtt_interval");
    ///<summary>Play YouTube on LG</summary>
    public ScriptEntity SkyLive => new(_haContext, "script.sky_live");
    ///<summary>tts</summary>
    public ScriptEntity Tts => new(_haContext, "script.tts");
    ///<summary>tts_text</summary>
    public ScriptEntity TtsText => new(_haContext, "script.tts_text");
    ///<summary>turn_on_lg_tele</summary>
    public ScriptEntity TurnOnLgTele => new(_haContext, "script.turn_on_lg_tele");
    ///<summary>turn_on_lg_tele_lounge</summary>
    public ScriptEntity TurnOnLgTeleLounge => new(_haContext, "script.turn_on_lg_tele_lounge");
    ///<summary>turn_on_lg_tele_master</summary>
    public ScriptEntity TurnOnLgTeleMaster => new(_haContext, "script.turn_on_lg_tele_master");
    ///<summary>weather</summary>
    public ScriptEntity Weather => new(_haContext, "script.weather");
    ///<summary>Yule Log</summary>
    public ScriptEntity Yule => new(_haContext, "script.yule");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Event Select</summary>
    public SelectEntity AubreciaDriveEventSelect => new(_haContext, "select.aubrecia_drive_event_select");
    ///<summary>Snapshot Mode</summary>
    public SelectEntity AubreciaDriveSnapshotMode => new(_haContext, "select.aubrecia_drive_snapshot_mode");
    ///<summary>Event Select</summary>
    public SelectEntity AubreciaFrontDoorEventSelect => new(_haContext, "select.aubrecia_front_door_event_select");
    ///<summary>Snapshot Mode</summary>
    public SelectEntity AubreciaFrontDoorSnapshotMode => new(_haContext, "select.aubrecia_front_door_snapshot_mode");
    ///<summary>Backdoor Start-up behavior</summary>
    public SelectEntity BackdoorStartUpBehavior => new(_haContext, "select.backdoor_start_up_behavior");
    ///<summary>Dishwasher Active program</summary>
    public SelectEntity DishwasherActiveProgram => new(_haContext, "select.dishwasher_active_program");
    ///<summary>Dishwasher Selected program</summary>
    public SelectEntity DishwasherSelectedProgram => new(_haContext, "select.dishwasher_selected_program");
    ///<summary>Fish Lights Start-up behavior</summary>
    public SelectEntity FishLightsStartUpBehavior => new(_haContext, "select.fish_lights_start_up_behavior");
    ///<summary>Event Select</summary>
    public SelectEntity GardenEventSelect => new(_haContext, "select.garden_event_select");
    ///<summary>Snapshot Mode</summary>
    public SelectEntity GardenSnapshotMode => new(_haContext, "select.garden_snapshot_mode");
    ///<summary>dining wall 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WOpal1000lm9919fcfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_w_opal_1000lm_9919fcfe_on_off_startuponoff");
    ///<summary>dining wall 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WOpal1000lmB4b1f3feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_w_opal_1000lm_b4b1f3fe_on_off_startuponoff");
    ///<summary>lounge front Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lm7aba12feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_7aba12fe_on_off_startuponoff");
    ///<summary>Floor Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lm9f6c01feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_9f6c01fe_on_off_startuponoff");
    ///<summary>Playroom Main Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lmB87713feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_b87713fe_on_off_startuponoff");
    ///<summary>lounge back Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lmC8a903feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_c8a903fe_on_off_startuponoff");
    ///<summary>office 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm062b4bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_062b4bfe_on_off_startuponoff");
    ///<summary>Master Nightlight Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm145c4bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_145c4bfe_on_off_startuponoff");
    ///<summary>Aaron 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm1e5368feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_1e5368fe_on_off_startuponoff");
    ///<summary>master 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm21daf6feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_21daf6fe_on_off_startuponoff");
    ///<summary>office 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm235a5dfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_235a5dfe_on_off_startuponoff");
    ///<summary>dining 4 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm26f462feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_26f462fe_on_off_startuponoff");
    ///<summary>dining 5 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm31244bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_31244bfe_on_off_startuponoff");
    ///<summary>Aaron 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm341922feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_341922fe_on_off_startuponoff");
    ///<summary>dining 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm502e4cfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_502e4cfe_on_off_startuponoff");
    ///<summary>Master 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm5c78f6feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_5c78f6fe_on_off_startuponoff");
    ///<summary>master 4 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm5ec17bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_5ec17bfe_on_off_startuponoff");
    ///<summary>Aaron 4 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm8bb43dfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_8bb43dfe_on_off_startuponoff");
    ///<summary>master 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm937af8feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_937af8fe_on_off_startuponoff");
    ///<summary>dining 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lmBb0a4cfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_bb0a4cfe_on_off_startuponoff");
    ///<summary>Aaron 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lmCdee3efeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_cdee3efe_on_off_startuponoff");
    ///<summary>dining 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lmF8ea62feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_f8ea62fe_on_off_startuponoff");
    ///<summary>kitchen 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm00caeefeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_00caeefe_on_off_startuponoff");
    ///<summary>kitchen 6 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm22331afeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_22331afe_on_off_startuponoff");
    ///<summary>toilet Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm32d2bdfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_32d2bdfe_on_off_startuponoff");
    ///<summary>entrance Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm436af0feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_436af0fe_on_off_startuponoff");
    ///<summary>utility 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm680f1cfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_680f1cfe_on_off_startuponoff");
    ///<summary>utility 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm7d61cbfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_7d61cbfe_on_off_startuponoff");
    ///<summary>hallway Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm8ba6b5feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_8ba6b5fe_on_off_startuponoff");
    ///<summary>kitchen 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmB86ff0feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_b86ff0fe_on_off_startuponoff");
    ///<summary>utility 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmCf4febfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_cf4febfe_on_off_startuponoff");
    ///<summary>kitchen 5 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmD4fdf0feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_d4fdf0fe_on_off_startuponoff");
    ///<summary>kitchen 4 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmF58cf0feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_f58cf0fe_on_off_startuponoff");
    ///<summary>kitchen 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmFd78f0feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_fd78f0fe_on_off_startuponoff");
    ///<summary>Aaron Main Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfribulbg125e27wsopal470lm9b7e6bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfribulbg125e27wsopal470lm_9b7e6bfe_on_off_startuponoff");
    ///<summary>Indoor 2 Event Select</summary>
    public SelectEntity Indoor2EventSelect => new(_haContext, "select.indoor_2_event_select");
    ///<summary>Indoor 2 Snapshot Mode</summary>
    public SelectEntity Indoor2SnapshotMode => new(_haContext, "select.indoor_2_snapshot_mode");
    ///<summary>Jayden 1 Start-up behavior</summary>
    public SelectEntity Jayden1StartUpBehavior3 => new(_haContext, "select.jayden_1_start_up_behavior_3");
    ///<summary>Jayden 2 Start-up behavior</summary>
    public SelectEntity Jayden2StartUpBehavior4 => new(_haContext, "select.jayden_2_start_up_behavior_4");
    ///<summary>Jayden 3 Start-up behavior</summary>
    public SelectEntity Jayden3StartUpBehavior2 => new(_haContext, "select.jayden_3_start_up_behavior_2");
    ///<summary>Jayden 4 Start-up behavior</summary>
    public SelectEntity Jayden4StartUpBehavior => new(_haContext, "select.jayden_4_start_up_behavior");
    ///<summary>Event Select</summary>
    public SelectEntity JohanFrontDoorEventSelect => new(_haContext, "select.johan_front_door_event_select");
    ///<summary>Snapshot Mode</summary>
    public SelectEntity JohanFrontDoorSnapshotMode => new(_haContext, "select.johan_front_door_snapshot_mode");
    ///<summary>Landing 1 Start-up behavior</summary>
    public SelectEntity Landing1StartUpBehavior => new(_haContext, "select.landing_1_start_up_behavior");
    ///<summary>Landing 2 Start-up behavior</summary>
    public SelectEntity Landing2StartUpBehavior => new(_haContext, "select.landing_2_start_up_behavior");
    ///<summary>Landing 3 Start-up behavior</summary>
    public SelectEntity Landing3StartUpBehavior2 => new(_haContext, "select.landing_3_start_up_behavior_2");
    ///<summary>Landing 4 Start-up behavior</summary>
    public SelectEntity Landing4StartUpBehavior3 => new(_haContext, "select.landing_4_start_up_behavior_3");
    ///<summary>Landing 5 Start-up behavior</summary>
    public SelectEntity Landing5StartUpBehavior => new(_haContext, "select.landing_5_start_up_behavior");
    ///<summary>Landing 7 Start-up behavior</summary>
    public SelectEntity Landing7StartUpBehavior => new(_haContext, "select.landing_7_start_up_behavior");
    ///<summary>Niemand Drive Event Select</summary>
    public SelectEntity NiemandDriveEventSelect => new(_haContext, "select.niemand_drive_event_select");
    ///<summary>Niemand Drive Snapshot Mode</summary>
    public SelectEntity NiemandDriveSnapshotMode => new(_haContext, "select.niemand_drive_snapshot_mode");
    ///<summary>Niemand Front Door Event Select</summary>
    public SelectEntity NiemandFrontDoorEventSelect => new(_haContext, "select.niemand_front_door_event_select");
    ///<summary>Niemand Front Door Snapshot Mode</summary>
    public SelectEntity NiemandFrontDoorSnapshotMode => new(_haContext, "select.niemand_front_door_snapshot_mode");
    ///<summary>Niemand Garage Event Select</summary>
    public SelectEntity NiemandGarageEventSelect => new(_haContext, "select.niemand_garage_event_select");
    ///<summary>Niemand Garage Snapshot Mode</summary>
    public SelectEntity NiemandGarageSnapshotMode => new(_haContext, "select.niemand_garage_snapshot_mode");
    ///<summary>Niemand Garden Event Select</summary>
    public SelectEntity NiemandGardenEventSelect => new(_haContext, "select.niemand_garden_event_select");
    ///<summary>Niemand Garden Snapshot Mode</summary>
    public SelectEntity NiemandGardenSnapshotMode => new(_haContext, "select.niemand_garden_snapshot_mode");
    ///<summary>Niemand Indoor 1 Event Select</summary>
    public SelectEntity NiemandIndoor1EventSelect => new(_haContext, "select.niemand_indoor_1_event_select");
    ///<summary>Niemand Indoor 1 Snapshot Mode</summary>
    public SelectEntity NiemandIndoor1SnapshotMode => new(_haContext, "select.niemand_indoor_1_snapshot_mode");
    ///<summary>Niemand Side Event Select</summary>
    public SelectEntity NiemandSideEventSelect => new(_haContext, "select.niemand_side_event_select");
    ///<summary>Niemand Side Snapshot Mode</summary>
    public SelectEntity NiemandSideSnapshotMode => new(_haContext, "select.niemand_side_snapshot_mode");
    ///<summary>Playroom 1 Start-up behavior</summary>
    public SelectEntity Playroom1StartUpBehavior => new(_haContext, "select.playroom_1_start_up_behavior");
    ///<summary>Playroom 2 Start-up behavior</summary>
    public SelectEntity Playroom2StartUpBehavior => new(_haContext, "select.playroom_2_start_up_behavior");
    ///<summary>Playroom 3 Start-up behavior</summary>
    public SelectEntity Playroom3StartUpBehavior3 => new(_haContext, "select.playroom_3_start_up_behavior_3");
    ///<summary>Playroom 4 Start-up behavior</summary>
    public SelectEntity Playroom4StartUpBehavior2 => new(_haContext, "select.playroom_4_start_up_behavior_2");
    ///<summary>Wiser Hot Water Mode</summary>
    public SelectEntity WiserHotWaterMode => new(_haContext, "select.wiser_hot_water_mode");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>01J9QC96V5NP4NHGMGGT7V8NQK Raw JSON</summary>
    public SensorEntity _01j9qc96v5np4nhgmggt7v8nqkRawJson => new(_haContext, "sensor.01j9qc96v5np4nhgmggt7v8nqk_raw_json");
    ///<summary>Playroom next Alarm</summary>
    public SensorEntity AaronNextAlarm => new(_haContext, "sensor.aaron_next_alarm");
    ///<summary>Playroom next Reminder</summary>
    public SensorEntity AaronNextReminder => new(_haContext, "sensor.aaron_next_reminder");
    ///<summary>Playroom next Timer</summary>
    public SensorEntity AaronNextTimer => new(_haContext, "sensor.aaron_next_timer");
    ///<summary>Aaron’s iPad Activity</summary>
    public SensorEntity AaronsIpadActivity => new(_haContext, "sensor.aarons_ipad_activity");
    ///<summary>Aaron’s iPad App Version</summary>
    public SensorEntity AaronsIpadAppVersion => new(_haContext, "sensor.aarons_ipad_app_version");
    ///<summary>Aaron’s iPad Audio Output</summary>
    public SensorEntity AaronsIpadAudioOutput => new(_haContext, "sensor.aarons_ipad_audio_output");
    ///<summary>Aaron’s iPad Battery State</summary>
    public SensorEntity AaronsIpadBatteryState => new(_haContext, "sensor.aarons_ipad_battery_state");
    ///<summary>Aaron’s iPad BSSID</summary>
    public SensorEntity AaronsIpadBssid => new(_haContext, "sensor.aarons_ipad_bssid");
    ///<summary>Aaron’s iPad Connection Type</summary>
    public SensorEntity AaronsIpadConnectionType => new(_haContext, "sensor.aarons_ipad_connection_type");
    ///<summary>Aaron’s iPad Geocoded Location</summary>
    public SensorEntity AaronsIpadGeocodedLocation => new(_haContext, "sensor.aarons_ipad_geocoded_location");
    ///<summary>Aaron’s iPad Last Update Trigger</summary>
    public SensorEntity AaronsIpadLastUpdateTrigger => new(_haContext, "sensor.aarons_ipad_last_update_trigger");
    ///<summary>Aaron’s iPad Location permission</summary>
    public SensorEntity AaronsIpadLocationPermission => new(_haContext, "sensor.aarons_ipad_location_permission");
    ///<summary>Aaron’s iPad SSID</summary>
    public SensorEntity AaronsIpadSsid => new(_haContext, "sensor.aarons_ipad_ssid");
    ///<summary>Aaron’s iPhone Activity</summary>
    public SensorEntity AaronsIphoneActivity => new(_haContext, "sensor.aarons_iphone_activity");
    ///<summary>Aaron’s iPhone App Version</summary>
    public SensorEntity AaronsIphoneAppVersion => new(_haContext, "sensor.aarons_iphone_app_version");
    ///<summary>Aaron’s iPhone Audio Output</summary>
    public SensorEntity AaronsIphoneAudioOutput => new(_haContext, "sensor.aarons_iphone_audio_output");
    ///<summary>Aaron’s iPhone Battery State</summary>
    public SensorEntity AaronsIphoneBatteryState => new(_haContext, "sensor.aarons_iphone_battery_state");
    ///<summary>Aaron’s iPhone BSSID</summary>
    public SensorEntity AaronsIphoneBssid => new(_haContext, "sensor.aarons_iphone_bssid");
    ///<summary>Aaron’s iPhone Connection Type</summary>
    public SensorEntity AaronsIphoneConnectionType => new(_haContext, "sensor.aarons_iphone_connection_type");
    ///<summary>Aaron’s iPhone Geocoded Location</summary>
    public SensorEntity AaronsIphoneGeocodedLocation => new(_haContext, "sensor.aarons_iphone_geocoded_location");
    ///<summary>Aaron’s iPhone Last Update Trigger</summary>
    public SensorEntity AaronsIphoneLastUpdateTrigger => new(_haContext, "sensor.aarons_iphone_last_update_trigger");
    ///<summary>Aaron’s iPhone Location permission</summary>
    public SensorEntity AaronsIphoneLocationPermission => new(_haContext, "sensor.aarons_iphone_location_permission");
    ///<summary>Aaron’s iPhone SIM 1</summary>
    public SensorEntity AaronsIphoneSim1 => new(_haContext, "sensor.aarons_iphone_sim_1");
    ///<summary>Aaron’s iPhone SSID</summary>
    public SensorEntity AaronsIphoneSsid => new(_haContext, "sensor.aarons_iphone_ssid");
    ///<summary>Aaron’s iPhone Watch Battery State</summary>
    public SensorEntity AaronsIphoneWatchBatteryState => new(_haContext, "sensor.aarons_iphone_watch_battery_state");
    ///<summary>AccuWeather Home Air quality day 0</summary>
    public SensorEntity AccuweatherHomeAirQuality0d => new(_haContext, "sensor.accuweather_home_air_quality_0d");
    ///<summary>AccuWeather Home Condition day 0</summary>
    public SensorEntity AccuweatherHomeConditionDay0d => new(_haContext, "sensor.accuweather_home_condition_day_0d");
    ///<summary>AccuWeather Home Condition night 0</summary>
    public SensorEntity AccuweatherHomeConditionNight0d => new(_haContext, "sensor.accuweather_home_condition_night_0d");
    ///<summary>AccuWeather Home Pressure tendency</summary>
    public SensorEntity AccuweatherHomePressureTendency => new(_haContext, "sensor.accuweather_home_pressure_tendency");
    ///<summary>Alexa Actionable Notification Prompt</summary>
    public SensorEntity AlexaActionableNotificationPrompt => new(_haContext, "sensor.alexa_actionable_notification_prompt");
    public SensorEntity AllRatesNew => new(_haContext, "sensor.all_rates_new");
    ///<summary>ASGLH-WL-19140 Uptime</summary>
    public SensorEntity AsglhWl19140Uptime => new(_haContext, "sensor.asglh_wl_19140_uptime");
    ///<summary>Aubrecia Activity</summary>
    public SensorEntity AubreciaActivity => new(_haContext, "sensor.aubrecia_activity");
    ///<summary>Aubrecia Battery State</summary>
    public SensorEntity AubreciaBatteryState => new(_haContext, "sensor.aubrecia_battery_state");
    ///<summary>Aubrecia BSSID</summary>
    public SensorEntity AubreciaBssid => new(_haContext, "sensor.aubrecia_bssid");
    ///<summary>Aubrecia Connection Type</summary>
    public SensorEntity AubreciaConnectionType => new(_haContext, "sensor.aubrecia_connection_type");
    ///<summary>Info</summary>
    public SensorEntity AubreciaDriveInfo => new(_haContext, "sensor.aubrecia_drive_info");
    ///<summary>Aubrecia Drive Last activity</summary>
    public SensorEntity AubreciaDriveLastActivity => new(_haContext, "sensor.aubrecia_drive_last_activity");
    ///<summary>Aubrecia Drive Last ding</summary>
    public SensorEntity AubreciaDriveLastDing => new(_haContext, "sensor.aubrecia_drive_last_ding");
    ///<summary>Aubrecia Drive Last motion</summary>
    public SensorEntity AubreciaDriveLastMotion => new(_haContext, "sensor.aubrecia_drive_last_motion");
    ///<summary>Aubrecia Drive Volume</summary>
    public SensorEntity AubreciaDriveVolume => new(_haContext, "sensor.aubrecia_drive_volume");
    ///<summary>Info</summary>
    public SensorEntity AubreciaFrontDoorInfo => new(_haContext, "sensor.aubrecia_front_door_info");
    ///<summary>Aubrecia Front Door Last Activity</summary>
    public SensorEntity AubreciaFrontDoorLastActivity => new(_haContext, "sensor.aubrecia_front_door_last_activity");
    ///<summary>Aubrecia Front Door Last activity</summary>
    public SensorEntity AubreciaFrontDoorLastActivity2 => new(_haContext, "sensor.aubrecia_front_door_last_activity_2");
    ///<summary>Aubrecia Front Door Last Ding</summary>
    public SensorEntity AubreciaFrontDoorLastDing => new(_haContext, "sensor.aubrecia_front_door_last_ding");
    ///<summary>Aubrecia Front Door Last ding</summary>
    public SensorEntity AubreciaFrontDoorLastDing2 => new(_haContext, "sensor.aubrecia_front_door_last_ding_2");
    ///<summary>Aubrecia Front Door Last Motion</summary>
    public SensorEntity AubreciaFrontDoorLastMotion => new(_haContext, "sensor.aubrecia_front_door_last_motion");
    ///<summary>Aubrecia Front Door Last motion</summary>
    public SensorEntity AubreciaFrontDoorLastMotion2 => new(_haContext, "sensor.aubrecia_front_door_last_motion_2");
    ///<summary>Aubrecia Front Door Volume</summary>
    public SensorEntity AubreciaFrontDoorVolume => new(_haContext, "sensor.aubrecia_front_door_volume");
    ///<summary>Aubrecia Front Door Volume</summary>
    public SensorEntity AubreciaFrontDoorVolume2 => new(_haContext, "sensor.aubrecia_front_door_volume_2");
    ///<summary>Aubrecia Geocoded Location</summary>
    public SensorEntity AubreciaGeocodedLocation => new(_haContext, "sensor.aubrecia_geocoded_location");
    ///<summary>Aubrecia Last Update Trigger</summary>
    public SensorEntity AubreciaLastUpdateTrigger => new(_haContext, "sensor.aubrecia_last_update_trigger");
    ///<summary>Aubrecia SIM 1</summary>
    public SensorEntity AubreciaSim1 => new(_haContext, "sensor.aubrecia_sim_1");
    ///<summary>Aubrecia SIM 2</summary>
    public SensorEntity AubreciaSim2 => new(_haContext, "sensor.aubrecia_sim_2");
    ///<summary>Aubrecia SSID</summary>
    public SensorEntity AubreciaSsid => new(_haContext, "sensor.aubrecia_ssid");
    ///<summary>AubreciasiPhone Uptime</summary>
    public SensorEntity AubreciasiphoneUptime => new(_haContext, "sensor.aubreciasiphone_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity C02t8gtygvc1Uptime => new(_haContext, "sensor.c02t8gtygvc1_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity DesktopIpurn8tUptime => new(_haContext, "sensor.desktop_ipurn8t_uptime");
    ///<summary>Dishwasher Door</summary>
    public SensorEntity DishwasherDoor => new(_haContext, "sensor.dishwasher_door");
    ///<summary>Dishwasher Operation state</summary>
    public SensorEntity DishwasherOperationState => new(_haContext, "sensor.dishwasher_operation_state");
    ///<summary>Dishwasher Program finish time</summary>
    public SensorEntity DishwasherRemainingProgramTime => new(_haContext, "sensor.dishwasher_remaining_program_time");
    ///<summary>Dishwasher Rinse aid nearly empty</summary>
    public SensorEntity DishwasherRinseAidNearlyEmpty => new(_haContext, "sensor.dishwasher_rinse_aid_nearly_empty");
    ///<summary>Dishwasher Salt nearly empty</summary>
    public SensorEntity DishwasherSaltNearlyEmpty => new(_haContext, "sensor.dishwasher_salt_nearly_empty");
    ///<summary>Downstairs Info</summary>
    public SensorEntity DownstairsInfo => new(_haContext, "sensor.downstairs_info");
    ///<summary>Downstairs Volume</summary>
    public SensorEntity DownstairsVolume => new(_haContext, "sensor.downstairs_volume");
    ///<summary>Electric Consumption (Year)</summary>
    public SensorEntity ElectricConsumptionYear => new(_haContext, "sensor.electric_consumption_year");
    ///<summary>ENVY 6000 Black Ink Manufacture Date</summary>
    public SensorEntity Envy6000BlackInkManufactureDate => new(_haContext, "sensor.envy_6000_black_ink_manufacture_date");
    ///<summary>ENVY 6000 Black Ink Station</summary>
    public SensorEntity Envy6000BlackInkStation => new(_haContext, "sensor.envy_6000_black_ink_station");
    ///<summary>ENVY 6000 Black Ink Type</summary>
    public SensorEntity Envy6000BlackInkType => new(_haContext, "sensor.envy_6000_black_ink_type");
    ///<summary>ENVY 6000 Colour Ink Manufacture Date</summary>
    public SensorEntity Envy6000ColourInkManufactureDate => new(_haContext, "sensor.envy_6000_colour_ink_manufacture_date");
    ///<summary>ENVY 6000 Colour Ink Station</summary>
    public SensorEntity Envy6000ColourInkStation => new(_haContext, "sensor.envy_6000_colour_ink_station");
    ///<summary>ENVY 6000 Colour Ink Type</summary>
    public SensorEntity Envy6000ColourInkType => new(_haContext, "sensor.envy_6000_colour_ink_type");
    ///<summary>ENVY 6000 Manufacture Date</summary>
    public SensorEntity Envy6000ManufactureDate => new(_haContext, "sensor.envy_6000_manufacture_date");
    ///<summary>ENVY 6000 Status</summary>
    public SensorEntity Envy6000Status => new(_haContext, "sensor.envy_6000_status");
    ///<summary>EPSON ET-4800 Series</summary>
    public SensorEntity EpsonEt4800Series => new(_haContext, "sensor.epson_et_4800_series");
    ///<summary>Uptime</summary>
    public SensorEntity EufyRobovacUptime => new(_haContext, "sensor.eufy_robovac_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity EufyRobovacUptime2 => new(_haContext, "sensor.eufy_robovac_uptime_2");
    ///<summary>EUGENE_DESKTOP EUGENE_DESKTOP_lastactive</summary>
    public SensorEntity EugeneDesktopLastactive => new(_haContext, "sensor.eugene_desktop_lastactive");
    ///<summary>EUGENE_DESKTOP EUGENE_DESKTOP_lastsystemstatechange</summary>
    public SensorEntity EugeneDesktopLastsystemstatechange => new(_haContext, "sensor.eugene_desktop_lastsystemstatechange");
    ///<summary>EUGENE_DESKTOP EUGENE_DESKTOP_microphoneprocess</summary>
    public SensorEntity EugeneDesktopMicrophoneprocess => new(_haContext, "sensor.eugene_desktop_microphoneprocess");
    ///<summary>EUGENE_DESKTOP EUGENE_DESKTOP_monitorpowerstate</summary>
    public SensorEntity EugeneDesktopMonitorpowerstate => new(_haContext, "sensor.eugene_desktop_monitorpowerstate");
    ///<summary>Garden next Alarm</summary>
    public SensorEntity EugeneS2ndEchoDotNextAlarm => new(_haContext, "sensor.eugene_s_2nd_echo_dot_next_alarm");
    ///<summary>Garden next Reminder</summary>
    public SensorEntity EugeneS2ndEchoDotNextReminder => new(_haContext, "sensor.eugene_s_2nd_echo_dot_next_reminder");
    ///<summary>Garden next Timer</summary>
    public SensorEntity EugeneS2ndEchoDotNextTimer => new(_haContext, "sensor.eugene_s_2nd_echo_dot_next_timer");
    ///<summary>Eugene&apos;s iPhone Activity</summary>
    public SensorEntity EugeneSIphoneActivity => new(_haContext, "sensor.eugene_s_iphone_activity");
    ///<summary>Eugene&apos;s iPhone Battery State</summary>
    public SensorEntity EugeneSIphoneBatteryState => new(_haContext, "sensor.eugene_s_iphone_battery_state");
    ///<summary>Eugene&apos;s iPhone BSSID</summary>
    public SensorEntity EugeneSIphoneBssid => new(_haContext, "sensor.eugene_s_iphone_bssid");
    ///<summary>Eugene&apos;s iPhone Connection Type</summary>
    public SensorEntity EugeneSIphoneConnectionType => new(_haContext, "sensor.eugene_s_iphone_connection_type");
    ///<summary>Eugene&apos;s iPhone Geocoded Location</summary>
    public SensorEntity EugeneSIphoneGeocodedLocation => new(_haContext, "sensor.eugene_s_iphone_geocoded_location");
    ///<summary>Eugene&apos;s iPhone Last Update Trigger</summary>
    public SensorEntity EugeneSIphoneLastUpdateTrigger => new(_haContext, "sensor.eugene_s_iphone_last_update_trigger");
    ///<summary>Eugene&apos;s iPhone SIM 1</summary>
    public SensorEntity EugeneSIphoneSim1 => new(_haContext, "sensor.eugene_s_iphone_sim_1");
    ///<summary>Eugene&apos;s iPhone SIM 2</summary>
    public SensorEntity EugeneSIphoneSim2 => new(_haContext, "sensor.eugene_s_iphone_sim_2");
    ///<summary>Eugene&apos;s iPhone SSID</summary>
    public SensorEntity EugeneSIphoneSsid => new(_haContext, "sensor.eugene_s_iphone_ssid");
    ///<summary>Lounge LG Alexa next Alarm</summary>
    public SensorEntity EugeneSLgOledWebos2021TvNextAlarm => new(_haContext, "sensor.eugene_s_lg_oled_webos_2021_tv_next_alarm");
    ///<summary>Lounge LG Alexa next Reminder</summary>
    public SensorEntity EugeneSLgOledWebos2021TvNextReminder => new(_haContext, "sensor.eugene_s_lg_oled_webos_2021_tv_next_reminder");
    ///<summary>Lounge LG Alexa next Timer</summary>
    public SensorEntity EugeneSLgOledWebos2021TvNextTimer => new(_haContext, "sensor.eugene_s_lg_oled_webos_2021_tv_next_timer");
    ///<summary>Master LG Alexa next Alarm</summary>
    public SensorEntity EugeneSLgWebos2020TvNextAlarm => new(_haContext, "sensor.eugene_s_lg_webos_2020_tv_next_alarm");
    ///<summary>Master LG Alexa next Reminder</summary>
    public SensorEntity EugeneSLgWebos2020TvNextReminder => new(_haContext, "sensor.eugene_s_lg_webos_2020_tv_next_reminder");
    ///<summary>Master LG Alexa next Timer</summary>
    public SensorEntity EugeneSLgWebos2020TvNextTimer => new(_haContext, "sensor.eugene_s_lg_webos_2020_tv_next_timer");
    ///<summary>Lounge next Alarm</summary>
    public SensorEntity EugeneSSonosArcNextAlarm => new(_haContext, "sensor.eugene_s_sonos_arc_next_alarm");
    ///<summary>Lounge next Reminder</summary>
    public SensorEntity EugeneSSonosArcNextReminder => new(_haContext, "sensor.eugene_s_sonos_arc_next_reminder");
    ///<summary>Lounge next Timer</summary>
    public SensorEntity EugeneSSonosArcNextTimer => new(_haContext, "sensor.eugene_s_sonos_arc_next_timer");
    ///<summary>Eugene’s iPhone App Version</summary>
    public SensorEntity EugenesIphoneAppVersion => new(_haContext, "sensor.eugenes_iphone_app_version");
    ///<summary>Eugene’s iPhone Audio Output</summary>
    public SensorEntity EugenesIphoneAudioOutput => new(_haContext, "sensor.eugenes_iphone_audio_output");
    ///<summary>Eugene’s iPhone Location permission</summary>
    public SensorEntity EugenesIphoneLocationPermission => new(_haContext, "sensor.eugenes_iphone_location_permission");
    ///<summary>Eugenes-iPhone Uptime</summary>
    public SensorEntity EugenesIphoneUptime => new(_haContext, "sensor.eugenes_iphone_uptime");
    ///<summary>Eugene’s iPhone Watch Battery State</summary>
    public SensorEntity EugenesIphoneWatchBatteryState => new(_haContext, "sensor.eugenes_iphone_watch_battery_state");
    ///<summary>Eugene&apos;s MacBook Active Audio Input</summary>
    public SensorEntity EugenesMacbookActiveAudioInput => new(_haContext, "sensor.eugenes_macbook_active_audio_input");
    ///<summary>Eugene&apos;s MacBook Active Audio Output</summary>
    public SensorEntity EugenesMacbookActiveAudioOutput => new(_haContext, "sensor.eugenes_macbook_active_audio_output");
    ///<summary>Eugene&apos;s MacBook Active Camera</summary>
    public SensorEntity EugenesMacbookActiveCamera => new(_haContext, "sensor.eugenes_macbook_active_camera");
    ///<summary>Eugene&apos;s MacBook BSSID</summary>
    public SensorEntity EugenesMacbookBssid => new(_haContext, "sensor.eugenes_macbook_bssid");
    ///<summary>Eugene&apos;s MacBook Connection Type</summary>
    public SensorEntity EugenesMacbookConnectionType => new(_haContext, "sensor.eugenes_macbook_connection_type");
    ///<summary>Eugene&apos;s MacBook Displays</summary>
    public SensorEntity EugenesMacbookDisplays => new(_haContext, "sensor.eugenes_macbook_displays");
    ///<summary>Eugene&apos;s MacBook Frontmost App</summary>
    public SensorEntity EugenesMacbookFrontmostApp => new(_haContext, "sensor.eugenes_macbook_frontmost_app");
    ///<summary>Eugene&apos;s MacBook Geocoded Location</summary>
    public SensorEntity EugenesMacbookGeocodedLocation => new(_haContext, "sensor.eugenes_macbook_geocoded_location");
    ///<summary>Eugene&apos;s MacBook Internal Battery State</summary>
    public SensorEntity EugenesMacbookInternalBatteryState => new(_haContext, "sensor.eugenes_macbook_internal_battery_state");
    ///<summary>Eugene&apos;s MacBook Last Update Trigger</summary>
    public SensorEntity EugenesMacbookLastUpdateTrigger => new(_haContext, "sensor.eugenes_macbook_last_update_trigger");
    ///<summary>Eugene&apos;s MacBook Primary Display ID</summary>
    public SensorEntity EugenesMacbookPrimaryDisplayId => new(_haContext, "sensor.eugenes_macbook_primary_display_id");
    ///<summary>Eugene&apos;s MacBook Primary Display Name</summary>
    public SensorEntity EugenesMacbookPrimaryDisplayName => new(_haContext, "sensor.eugenes_macbook_primary_display_name");
    ///<summary>Eugene&apos;s MacBook SSID</summary>
    public SensorEntity EugenesMacbookSsid => new(_haContext, "sensor.eugenes_macbook_ssid");
    ///<summary>EugenespleWatch Uptime</summary>
    public SensorEntity EugenesplewatchUptime => new(_haContext, "sensor.eugenesplewatch_uptime");
    ///<summary>Fish Lights Switch Device Energy</summary>
    public SensorEntity FishLightsSwitchDeviceEnergy => new(_haContext, "sensor.fish_lights_switch_device_energy");
    ///<summary>floor_light-2086 Uptime</summary>
    public SensorEntity FloorLight2086Uptime => new(_haContext, "sensor.floor_light_2086_uptime");
    ///<summary>G3061WM904 Active Audio Input</summary>
    public SensorEntity G3061wm904ActiveAudioInput => new(_haContext, "sensor.g3061wm904_active_audio_input");
    ///<summary>G3061WM904 Active Audio Output</summary>
    public SensorEntity G3061wm904ActiveAudioOutput => new(_haContext, "sensor.g3061wm904_active_audio_output");
    ///<summary>G3061WM904 Active Camera</summary>
    public SensorEntity G3061wm904ActiveCamera => new(_haContext, "sensor.g3061wm904_active_camera");
    ///<summary>G3061WM904 BSSID</summary>
    public SensorEntity G3061wm904Bssid => new(_haContext, "sensor.g3061wm904_bssid");
    ///<summary>G3061WM904 Connection Type</summary>
    public SensorEntity G3061wm904ConnectionType => new(_haContext, "sensor.g3061wm904_connection_type");
    ///<summary>G3061WM904 Displays</summary>
    public SensorEntity G3061wm904Displays => new(_haContext, "sensor.g3061wm904_displays");
    ///<summary>G3061WM904 Frontmost App</summary>
    public SensorEntity G3061wm904FrontmostApp => new(_haContext, "sensor.g3061wm904_frontmost_app");
    ///<summary>G3061WM904 Geocoded Location</summary>
    public SensorEntity G3061wm904GeocodedLocation => new(_haContext, "sensor.g3061wm904_geocoded_location");
    ///<summary>G3061WM904 Internal Battery State</summary>
    public SensorEntity G3061wm904InternalBatteryState => new(_haContext, "sensor.g3061wm904_internal_battery_state");
    ///<summary>G3061WM904 Last Update Trigger</summary>
    public SensorEntity G3061wm904LastUpdateTrigger => new(_haContext, "sensor.g3061wm904_last_update_trigger");
    ///<summary>G3061WM904 Primary Display ID</summary>
    public SensorEntity G3061wm904PrimaryDisplayId => new(_haContext, "sensor.g3061wm904_primary_display_id");
    ///<summary>G3061WM904 Primary Display Name</summary>
    public SensorEntity G3061wm904PrimaryDisplayName => new(_haContext, "sensor.g3061wm904_primary_display_name");
    ///<summary>G3061WM904 SSID</summary>
    public SensorEntity G3061wm904Ssid => new(_haContext, "sensor.g3061wm904_ssid");
    ///<summary>Garage next Alarm</summary>
    public SensorEntity GarageNextAlarm => new(_haContext, "sensor.garage_next_alarm");
    ///<summary>Garage next Reminder</summary>
    public SensorEntity GarageNextReminder => new(_haContext, "sensor.garage_next_reminder");
    ///<summary>Garage next Timer</summary>
    public SensorEntity GarageNextTimer => new(_haContext, "sensor.garage_next_timer");
    ///<summary>Info</summary>
    public SensorEntity GardenInfo => new(_haContext, "sensor.garden_info");
    ///<summary>Garden Last activity</summary>
    public SensorEntity GardenLastActivity2 => new(_haContext, "sensor.garden_last_activity_2");
    ///<summary>Garden Last ding</summary>
    public SensorEntity GardenLastDing => new(_haContext, "sensor.garden_last_ding");
    ///<summary>Garden Last motion</summary>
    public SensorEntity GardenLastMotion2 => new(_haContext, "sensor.garden_last_motion_2");
    ///<summary>Garden Volume</summary>
    public SensorEntity GardenVolume2 => new(_haContext, "sensor.garden_volume_2");
    ///<summary>Gas Consumption (Year)</summary>
    public SensorEntity GasConsumptionYear => new(_haContext, "sensor.gas_consumption_year");
    ///<summary>H Work Mac Active Audio Input</summary>
    public SensorEntity HWorkMacActiveAudioInput => new(_haContext, "sensor.h_work_mac_active_audio_input");
    ///<summary>H Work Mac Active Audio Output</summary>
    public SensorEntity HWorkMacActiveAudioOutput => new(_haContext, "sensor.h_work_mac_active_audio_output");
    ///<summary>H Work Mac Active Camera</summary>
    public SensorEntity HWorkMacActiveCamera => new(_haContext, "sensor.h_work_mac_active_camera");
    ///<summary>H Work Mac App Version</summary>
    public SensorEntity HWorkMacAppVersion => new(_haContext, "sensor.h_work_mac_app_version");
    ///<summary>H Work Mac BSSID</summary>
    public SensorEntity HWorkMacBssid => new(_haContext, "sensor.h_work_mac_bssid");
    ///<summary>H Work Mac Connection Type</summary>
    public SensorEntity HWorkMacConnectionType => new(_haContext, "sensor.h_work_mac_connection_type");
    ///<summary>H Work Mac Displays</summary>
    public SensorEntity HWorkMacDisplays => new(_haContext, "sensor.h_work_mac_displays");
    ///<summary>H Work Mac Frontmost App</summary>
    public SensorEntity HWorkMacFrontmostApp => new(_haContext, "sensor.h_work_mac_frontmost_app");
    ///<summary>H Work Mac Geocoded Location</summary>
    public SensorEntity HWorkMacGeocodedLocation => new(_haContext, "sensor.h_work_mac_geocoded_location");
    ///<summary>H Work Mac Internal Battery State</summary>
    public SensorEntity HWorkMacInternalBatteryState => new(_haContext, "sensor.h_work_mac_internal_battery_state");
    ///<summary>H Work Mac Last Update Trigger</summary>
    public SensorEntity HWorkMacLastUpdateTrigger => new(_haContext, "sensor.h_work_mac_last_update_trigger");
    ///<summary>H Work Mac Location permission</summary>
    public SensorEntity HWorkMacLocationPermission => new(_haContext, "sensor.h_work_mac_location_permission");
    ///<summary>H Work Mac Primary Display ID</summary>
    public SensorEntity HWorkMacPrimaryDisplayId => new(_haContext, "sensor.h_work_mac_primary_display_id");
    ///<summary>H Work Mac Primary Display Name</summary>
    public SensorEntity HWorkMacPrimaryDisplayName => new(_haContext, "sensor.h_work_mac_primary_display_name");
    ///<summary>H Work Mac SSID</summary>
    public SensorEntity HWorkMacSsid => new(_haContext, "sensor.h_work_mac_ssid");
    ///<summary>Hailey&apos;s iPhone (2) App Version</summary>
    public SensorEntity HaileySIphone2AppVersion => new(_haContext, "sensor.hailey_s_iphone_2_app_version");
    ///<summary>Hailey&apos;s iPhone (2) Audio Output</summary>
    public SensorEntity HaileySIphone2AudioOutput => new(_haContext, "sensor.hailey_s_iphone_2_audio_output");
    ///<summary>Hailey&apos;s iPhone (2) Location permission</summary>
    public SensorEntity HaileySIphone2LocationPermission => new(_haContext, "sensor.hailey_s_iphone_2_location_permission");
    ///<summary>Hailey&apos;s iPhone Activity</summary>
    public SensorEntity HaileySIphoneActivity => new(_haContext, "sensor.hailey_s_iphone_activity");
    ///<summary>Hailey&apos;s iPhone Battery State</summary>
    public SensorEntity HaileySIphoneBatteryState => new(_haContext, "sensor.hailey_s_iphone_battery_state");
    ///<summary>Hailey&apos;s iPhone BSSID</summary>
    public SensorEntity HaileySIphoneBssid => new(_haContext, "sensor.hailey_s_iphone_bssid");
    ///<summary>Hailey&apos;s iPhone Connection Type</summary>
    public SensorEntity HaileySIphoneConnectionType => new(_haContext, "sensor.hailey_s_iphone_connection_type");
    ///<summary>Hailey&apos;s iPhone Geocoded Location</summary>
    public SensorEntity HaileySIphoneGeocodedLocation => new(_haContext, "sensor.hailey_s_iphone_geocoded_location");
    ///<summary>Hailey&apos;s iPhone Last Update Trigger</summary>
    public SensorEntity HaileySIphoneLastUpdateTrigger => new(_haContext, "sensor.hailey_s_iphone_last_update_trigger");
    ///<summary>Hailey&apos;s iPhone SIM 1</summary>
    public SensorEntity HaileySIphoneSim1 => new(_haContext, "sensor.hailey_s_iphone_sim_1");
    ///<summary>Hailey&apos;s iPhone SIM 2</summary>
    public SensorEntity HaileySIphoneSim2 => new(_haContext, "sensor.hailey_s_iphone_sim_2");
    ///<summary>Hailey&apos;s iPhone SSID</summary>
    public SensorEntity HaileySIphoneSsid => new(_haContext, "sensor.hailey_s_iphone_ssid");
    ///<summary>Haileys-iPhone Uptime</summary>
    public SensorEntity HaileysIphoneUptime => new(_haContext, "sensor.haileys_iphone_uptime");
    ///<summary>Hailey’s MacBook Air Active Audio Output</summary>
    public SensorEntity HaileysMacbookAirActiveAudioOutput => new(_haContext, "sensor.haileys_macbook_air_active_audio_output");
    ///<summary>Hailey’s MacBook Air Active Camera</summary>
    public SensorEntity HaileysMacbookAirActiveCamera => new(_haContext, "sensor.haileys_macbook_air_active_camera");
    ///<summary>Hailey’s MacBook Air Active Microphone</summary>
    public SensorEntity HaileysMacbookAirActiveMicrophone => new(_haContext, "sensor.haileys_macbook_air_active_microphone");
    ///<summary>Hailey’s MacBook Air App Version</summary>
    public SensorEntity HaileysMacbookAirAppVersion => new(_haContext, "sensor.haileys_macbook_air_app_version");
    ///<summary>Hailey’s MacBook Air BSSID</summary>
    public SensorEntity HaileysMacbookAirBssid => new(_haContext, "sensor.haileys_macbook_air_bssid");
    ///<summary>Hailey’s MacBook Air Connection Type</summary>
    public SensorEntity HaileysMacbookAirConnectionType => new(_haContext, "sensor.haileys_macbook_air_connection_type");
    ///<summary>Hailey’s MacBook Air Displays</summary>
    public SensorEntity HaileysMacbookAirDisplays => new(_haContext, "sensor.haileys_macbook_air_displays");
    ///<summary>Hailey’s MacBook Air Frontmost App</summary>
    public SensorEntity HaileysMacbookAirFrontmostApp => new(_haContext, "sensor.haileys_macbook_air_frontmost_app");
    ///<summary>Hailey’s MacBook Air Geocoded Location</summary>
    public SensorEntity HaileysMacbookAirGeocodedLocation => new(_haContext, "sensor.haileys_macbook_air_geocoded_location");
    ///<summary>Hailey’s MacBook Air Internal Battery State</summary>
    public SensorEntity HaileysMacbookAirInternalBatteryState => new(_haContext, "sensor.haileys_macbook_air_internal_battery_state");
    ///<summary>Hailey’s MacBook Air Last Update Trigger</summary>
    public SensorEntity HaileysMacbookAirLastUpdateTrigger => new(_haContext, "sensor.haileys_macbook_air_last_update_trigger");
    ///<summary>Hailey’s MacBook Air Location permission</summary>
    public SensorEntity HaileysMacbookAirLocationPermission => new(_haContext, "sensor.haileys_macbook_air_location_permission");
    ///<summary>Hailey’s MacBook Air Primary Display ID</summary>
    public SensorEntity HaileysMacbookAirPrimaryDisplayId => new(_haContext, "sensor.haileys_macbook_air_primary_display_id");
    ///<summary>Hailey’s MacBook Air Primary Display Name</summary>
    public SensorEntity HaileysMacbookAirPrimaryDisplayName => new(_haContext, "sensor.haileys_macbook_air_primary_display_name");
    ///<summary>Hailey’s MacBook Air SSID</summary>
    public SensorEntity HaileysMacbookAirSsid => new(_haContext, "sensor.haileys_macbook_air_ssid");
    ///<summary>Home Aubrecia Direction of travel</summary>
    public SensorEntity HomeAubreciaDirectionOfTravel => new(_haContext, "sensor.home_aubrecia_direction_of_travel");
    ///<summary>Home Eugene Direction of travel</summary>
    public SensorEntity HomeEugeneDirectionOfTravel => new(_haContext, "sensor.home_eugene_direction_of_travel");
    ///<summary>Home Hailey Direction of travel</summary>
    public SensorEntity HomeHaileyDirectionOfTravel => new(_haContext, "sensor.home_hailey_direction_of_travel");
    ///<summary>Home Nearest device</summary>
    public SensorEntity HomeNearestDevice => new(_haContext, "sensor.home_nearest_device");
    ///<summary>Home Nearest direction of travel</summary>
    public SensorEntity HomeNearestDirectionOfTravel => new(_haContext, "sensor.home_nearest_direction_of_travel");
    ///<summary>Uptime</summary>
    public SensorEntity HuaweiPSmart201986203Uptime => new(_haContext, "sensor.huawei_p_smart_2019_86203_uptime");
    ///<summary>Indoor 2 Info</summary>
    public SensorEntity Indoor2Info => new(_haContext, "sensor.indoor_2_info");
    ///<summary>Indoor 2 Last activity</summary>
    public SensorEntity Indoor2LastActivity => new(_haContext, "sensor.indoor_2_last_activity");
    ///<summary>Indoor 2 Last ding</summary>
    public SensorEntity Indoor2LastDing => new(_haContext, "sensor.indoor_2_last_ding");
    ///<summary>Indoor 2 Last motion</summary>
    public SensorEntity Indoor2LastMotion => new(_haContext, "sensor.indoor_2_last_motion");
    ///<summary>Indoor 2 Volume</summary>
    public SensorEntity Indoor2Volume => new(_haContext, "sensor.indoor_2_volume");
    ///<summary>iPad (2) App Version</summary>
    public SensorEntity Ipad2AppVersion => new(_haContext, "sensor.ipad_2_app_version");
    ///<summary>iPad (2) Audio Output</summary>
    public SensorEntity Ipad2AudioOutput => new(_haContext, "sensor.ipad_2_audio_output");
    ///<summary>iPad (2) Location permission</summary>
    public SensorEntity Ipad2LocationPermission => new(_haContext, "sensor.ipad_2_location_permission");
    ///<summary>Uptime</summary>
    public SensorEntity IphoneUptime => new(_haContext, "sensor.iphone_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity IphoneUptime3 => new(_haContext, "sensor.iphone_uptime_3");
    ///<summary>jayden_bedside-4734 Uptime</summary>
    public SensorEntity JaydenBedside4734Uptime => new(_haContext, "sensor.jayden_bedside_4734_uptime");
    ///<summary>Aaron next Alarm</summary>
    public SensorEntity JaydenNextAlarm => new(_haContext, "sensor.jayden_next_alarm");
    ///<summary>Jayden next Alarm</summary>
    public SensorEntity JaydenNextAlarm2 => new(_haContext, "sensor.jayden_next_alarm_2");
    ///<summary>Aaron next Reminder</summary>
    public SensorEntity JaydenNextReminder => new(_haContext, "sensor.jayden_next_reminder");
    ///<summary>Jayden next Reminder</summary>
    public SensorEntity JaydenNextReminder2 => new(_haContext, "sensor.jayden_next_reminder_2");
    ///<summary>Aaron next Timer</summary>
    public SensorEntity JaydenNextTimer => new(_haContext, "sensor.jayden_next_timer");
    ///<summary>Jayden next Timer</summary>
    public SensorEntity JaydenNextTimer2 => new(_haContext, "sensor.jayden_next_timer_2");
    ///<summary>Jayden ’s iPad Activity</summary>
    public SensorEntity JaydenSIpadActivity => new(_haContext, "sensor.jayden_s_ipad_activity");
    ///<summary>Jayden ’s iPad Battery State</summary>
    public SensorEntity JaydenSIpadBatteryState => new(_haContext, "sensor.jayden_s_ipad_battery_state");
    ///<summary>Jayden ’s iPad BSSID</summary>
    public SensorEntity JaydenSIpadBssid => new(_haContext, "sensor.jayden_s_ipad_bssid");
    ///<summary>Jayden ’s iPad Connection Type</summary>
    public SensorEntity JaydenSIpadConnectionType => new(_haContext, "sensor.jayden_s_ipad_connection_type");
    ///<summary>Jayden ’s iPad Geocoded Location</summary>
    public SensorEntity JaydenSIpadGeocodedLocation => new(_haContext, "sensor.jayden_s_ipad_geocoded_location");
    ///<summary>Jayden ’s iPad Last Update Trigger</summary>
    public SensorEntity JaydenSIpadLastUpdateTrigger => new(_haContext, "sensor.jayden_s_ipad_last_update_trigger");
    ///<summary>Jayden ’s iPad SSID</summary>
    public SensorEntity JaydenSIpadSsid => new(_haContext, "sensor.jayden_s_ipad_ssid");
    ///<summary>Jayden ’s iPhone Activity</summary>
    public SensorEntity JaydenSIphoneActivity => new(_haContext, "sensor.jayden_s_iphone_activity");
    ///<summary>Jayden ’s iPhone App Version</summary>
    public SensorEntity JaydenSIphoneAppVersion => new(_haContext, "sensor.jayden_s_iphone_app_version");
    ///<summary>Jayden ’s iPhone Battery State</summary>
    public SensorEntity JaydenSIphoneBatteryState => new(_haContext, "sensor.jayden_s_iphone_battery_state");
    ///<summary>Jayden ’s iPhone BSSID</summary>
    public SensorEntity JaydenSIphoneBssid => new(_haContext, "sensor.jayden_s_iphone_bssid");
    ///<summary>Jayden ’s iPhone Connection Type</summary>
    public SensorEntity JaydenSIphoneConnectionType => new(_haContext, "sensor.jayden_s_iphone_connection_type");
    ///<summary>Jayden ’s iPhone Geocoded Location</summary>
    public SensorEntity JaydenSIphoneGeocodedLocation => new(_haContext, "sensor.jayden_s_iphone_geocoded_location");
    ///<summary>Jayden ’s iPhone Last Update Trigger</summary>
    public SensorEntity JaydenSIphoneLastUpdateTrigger => new(_haContext, "sensor.jayden_s_iphone_last_update_trigger");
    ///<summary>Jayden ’s iPhone Location permission</summary>
    public SensorEntity JaydenSIphoneLocationPermission => new(_haContext, "sensor.jayden_s_iphone_location_permission");
    ///<summary>Jayden ’s iPhone SIM 1</summary>
    public SensorEntity JaydenSIphoneSim1 => new(_haContext, "sensor.jayden_s_iphone_sim_1");
    ///<summary>Jayden ’s iPhone SSID</summary>
    public SensorEntity JaydenSIphoneSsid => new(_haContext, "sensor.jayden_s_iphone_ssid");
    ///<summary>Uptime</summary>
    public SensorEntity JaydenSIphoneUptime2 => new(_haContext, "sensor.jayden_s_iphone_uptime_2");
    ///<summary>Jayden ’s iPhone Watch Battery State</summary>
    public SensorEntity JaydenSIphoneWatchBatteryState => new(_haContext, "sensor.jayden_s_iphone_watch_battery_state");
    ///<summary>Info</summary>
    public SensorEntity JohanFrontDoorInfo => new(_haContext, "sensor.johan_front_door_info");
    ///<summary>Johan Front Door Last activity</summary>
    public SensorEntity JohanFrontDoorLastActivity => new(_haContext, "sensor.johan_front_door_last_activity");
    ///<summary>Johan Front Door Last ding</summary>
    public SensorEntity JohanFrontDoorLastDing => new(_haContext, "sensor.johan_front_door_last_ding");
    ///<summary>Johan Front Door Last motion</summary>
    public SensorEntity JohanFrontDoorLastMotion => new(_haContext, "sensor.johan_front_door_last_motion");
    ///<summary>Johan Front Door Volume</summary>
    public SensorEntity JohanFrontDoorVolume => new(_haContext, "sensor.johan_front_door_volume");
    ///<summary>Kitchen next Alarm</summary>
    public SensorEntity KitchenNextAlarm => new(_haContext, "sensor.kitchen_next_alarm");
    ///<summary>Kitchen next Reminder</summary>
    public SensorEntity KitchenNextReminder => new(_haContext, "sensor.kitchen_next_reminder");
    ///<summary>Kitchen next Timer</summary>
    public SensorEntity KitchenNextTimer => new(_haContext, "sensor.kitchen_next_timer");
    ///<summary>landing blind Window covering type</summary>
    public SensorEntity LandingBlindWindowCoveringType => new(_haContext, "sensor.landing_blind_window_covering_type");
    ///<summary>landing night energy</summary>
    public SensorEntity LandingNightEnergy => new(_haContext, "sensor.landing_night_energy");
    ///<summary>Uptime</summary>
    public SensorEntity LaptopD5uft2ciUptime => new(_haContext, "sensor.laptop_d5uft2ci_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity LaptopL5nso67jUptime => new(_haContext, "sensor.laptop_l5nso67j_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity LivingRoomUptime => new(_haContext, "sensor.living_room_uptime");
    ///<summary>Lounge Audio input format</summary>
    public SensorEntity LoungeAudioInputFormat => new(_haContext, "sensor.lounge_audio_input_format");
    ///<summary>lounge back level, light_color, on_off energy</summary>
    public SensorEntity LoungeBackLevelLightColorOnOffEnergy => new(_haContext, "sensor.lounge_back_level_light_color_on_off_energy");
    ///<summary>lounge front level, light_color, on_off energy</summary>
    public SensorEntity LoungeFrontLevelLightColorOnOffEnergy => new(_haContext, "sensor.lounge_front_level_light_color_on_off_energy");
    ///<summary>Dining next Alarm</summary>
    public SensorEntity LoungeGroupNextAlarm => new(_haContext, "sensor.lounge_group_next_alarm");
    ///<summary>Dining next Reminder</summary>
    public SensorEntity LoungeGroupNextReminder => new(_haContext, "sensor.lounge_group_next_reminder");
    ///<summary>Dining next Timer</summary>
    public SensorEntity LoungeGroupNextTimer => new(_haContext, "sensor.lounge_group_next_timer");
    ///<summary>Lounge Sonos next Alarm</summary>
    public SensorEntity LoungeSonosNextAlarm => new(_haContext, "sensor.lounge_sonos_next_alarm");
    ///<summary>Lounge Sonos next Reminder</summary>
    public SensorEntity LoungeSonosNextReminder => new(_haContext, "sensor.lounge_sonos_next_reminder");
    ///<summary>Lounge Sonos next Timer</summary>
    public SensorEntity LoungeSonosNextTimer => new(_haContext, "sensor.lounge_sonos_next_timer");
    ///<summary>Kitchen State</summary>
    public SensorEntity LoungeState => new(_haContext, "sensor.lounge_state");
    ///<summary>Kitchen Uptime</summary>
    public SensorEntity LoungeUptime => new(_haContext, "sensor.lounge_uptime");
    ///<summary>Master next Alarm</summary>
    public SensorEntity MasterNextAlarm => new(_haContext, "sensor.master_next_alarm");
    ///<summary>Master next Reminder</summary>
    public SensorEntity MasterNextReminder => new(_haContext, "sensor.master_next_reminder");
    ///<summary>Master next Timer</summary>
    public SensorEntity MasterNextTimer => new(_haContext, "sensor.master_next_timer");
    ///<summary>Mum Home Aubrecia Direction of travel</summary>
    public SensorEntity MumHomeAubreciaDirectionOfTravel => new(_haContext, "sensor.mum_home_aubrecia_direction_of_travel");
    ///<summary>Mum Home Nearest device</summary>
    public SensorEntity MumHomeNearestDevice => new(_haContext, "sensor.mum_home_nearest_device");
    ///<summary>Mum Home Nearest direction of travel</summary>
    public SensorEntity MumHomeNearestDirectionOfTravel => new(_haContext, "sensor.mum_home_nearest_direction_of_travel");
    ///<summary>myip</summary>
    public SensorEntity Myip => new(_haContext, "sensor.myip");
    ///<summary>neerslag_buienalarm_regen_data</summary>
    public SensorEntity NeerslagBuienalarmRegenData => new(_haContext, "sensor.neerslag_buienalarm_regen_data");
    ///<summary>neerslag_buienradar_regen_data</summary>
    public SensorEntity NeerslagBuienradarRegenData => new(_haContext, "sensor.neerslag_buienradar_regen_data");
    ///<summary>netdaemon_status</summary>
    public SensorEntity NetdaemonStatus => new(_haContext, "sensor.netdaemon_status");
    ///<summary>Niemand</summary>
    public SensorEntity Niemand => new(_haContext, "sensor.niemand");
    ///<summary>Niemand Drive Info</summary>
    public SensorEntity NiemandDriveInfo => new(_haContext, "sensor.niemand_drive_info");
    ///<summary>Niemand Drive Last activity</summary>
    public SensorEntity NiemandDriveLastActivity => new(_haContext, "sensor.niemand_drive_last_activity");
    ///<summary>Niemand Drive Last ding</summary>
    public SensorEntity NiemandDriveLastDing => new(_haContext, "sensor.niemand_drive_last_ding");
    ///<summary>Niemand Drive Last motion</summary>
    public SensorEntity NiemandDriveLastMotion => new(_haContext, "sensor.niemand_drive_last_motion");
    ///<summary>Niemand Drive Volume</summary>
    public SensorEntity NiemandDriveVolume => new(_haContext, "sensor.niemand_drive_volume");
    ///<summary>Niemand Front Door Info</summary>
    public SensorEntity NiemandFrontDoorInfo => new(_haContext, "sensor.niemand_front_door_info");
    ///<summary>Niemand Front Door Last activity</summary>
    public SensorEntity NiemandFrontDoorLastActivity => new(_haContext, "sensor.niemand_front_door_last_activity");
    ///<summary>Niemand Front Door Last ding</summary>
    public SensorEntity NiemandFrontDoorLastDing => new(_haContext, "sensor.niemand_front_door_last_ding");
    ///<summary>Niemand Front Door Last motion</summary>
    public SensorEntity NiemandFrontDoorLastMotion => new(_haContext, "sensor.niemand_front_door_last_motion");
    ///<summary>Niemand Front Door Volume</summary>
    public SensorEntity NiemandFrontDoorVolume => new(_haContext, "sensor.niemand_front_door_volume");
    ///<summary>Niemand Garage Info</summary>
    public SensorEntity NiemandGarageInfo => new(_haContext, "sensor.niemand_garage_info");
    ///<summary>Niemand Garage Last activity</summary>
    public SensorEntity NiemandGarageLastActivity => new(_haContext, "sensor.niemand_garage_last_activity");
    ///<summary>Niemand Garage Last ding</summary>
    public SensorEntity NiemandGarageLastDing => new(_haContext, "sensor.niemand_garage_last_ding");
    ///<summary>Niemand Garage Last motion</summary>
    public SensorEntity NiemandGarageLastMotion => new(_haContext, "sensor.niemand_garage_last_motion");
    ///<summary>Niemand Garage Volume</summary>
    public SensorEntity NiemandGarageVolume => new(_haContext, "sensor.niemand_garage_volume");
    ///<summary>Niemand Garden Info</summary>
    public SensorEntity NiemandGardenInfo => new(_haContext, "sensor.niemand_garden_info");
    ///<summary>Niemand Garden Last activity</summary>
    public SensorEntity NiemandGardenLastActivity => new(_haContext, "sensor.niemand_garden_last_activity");
    ///<summary>Niemand Garden Last ding</summary>
    public SensorEntity NiemandGardenLastDing => new(_haContext, "sensor.niemand_garden_last_ding");
    ///<summary>Niemand Garden Last motion</summary>
    public SensorEntity NiemandGardenLastMotion => new(_haContext, "sensor.niemand_garden_last_motion");
    ///<summary>Niemand Garden Volume</summary>
    public SensorEntity NiemandGardenVolume => new(_haContext, "sensor.niemand_garden_volume");
    public SensorEntity NiemandGuest => new(_haContext, "sensor.niemand_guest");
    ///<summary>Niemand Indoor 1 Info</summary>
    public SensorEntity NiemandIndoor1Info => new(_haContext, "sensor.niemand_indoor_1_info");
    ///<summary>Niemand Indoor 1 Last activity</summary>
    public SensorEntity NiemandIndoor1LastActivity => new(_haContext, "sensor.niemand_indoor_1_last_activity");
    ///<summary>Niemand Indoor 1 Last ding</summary>
    public SensorEntity NiemandIndoor1LastDing => new(_haContext, "sensor.niemand_indoor_1_last_ding");
    ///<summary>Niemand Indoor 1 Last motion</summary>
    public SensorEntity NiemandIndoor1LastMotion => new(_haContext, "sensor.niemand_indoor_1_last_motion");
    ///<summary>Niemand Indoor 1 Volume</summary>
    public SensorEntity NiemandIndoor1Volume => new(_haContext, "sensor.niemand_indoor_1_volume");
    ///<summary>Niemand-IOT</summary>
    public SensorEntity NiemandIot => new(_haContext, "sensor.niemand_iot");
    ///<summary>Niemand-Kids</summary>
    public SensorEntity NiemandKids => new(_haContext, "sensor.niemand_kids");
    ///<summary>Niemand-Mesh</summary>
    public SensorEntity NiemandMesh => new(_haContext, "sensor.niemand_mesh");
    ///<summary>Niemand Side Info</summary>
    public SensorEntity NiemandSideInfo => new(_haContext, "sensor.niemand_side_info");
    ///<summary>Niemand Side Last activity</summary>
    public SensorEntity NiemandSideLastActivity => new(_haContext, "sensor.niemand_side_last_activity");
    ///<summary>Niemand Side Last ding</summary>
    public SensorEntity NiemandSideLastDing => new(_haContext, "sensor.niemand_side_last_ding");
    ///<summary>Niemand Side Last motion</summary>
    public SensorEntity NiemandSideLastMotion => new(_haContext, "sensor.niemand_side_last_motion");
    ///<summary>Niemand Side Volume</summary>
    public SensorEntity NiemandSideVolume => new(_haContext, "sensor.niemand_side_volume");
    ///<summary>Wheel Of Fortune Spins Electricity (A-713CD539)</summary>
    public SensorEntity OctopusEnergyA713cd539WheelOfFortuneSpinsElectricity => new(_haContext, "sensor.octopus_energy_a_713cd539_wheel_of_fortune_spins_electricity");
    ///<summary>Wheel Of Fortune Spins Gas (A-713CD539)</summary>
    public SensorEntity OctopusEnergyA713cd539WheelOfFortuneSpinsGas => new(_haContext, "sensor.octopus_energy_a_713cd539_wheel_of_fortune_spins_gas");
    ///<summary>Octopus Energy Saving Session Points</summary>
    public SensorEntity OctopusEnergySavingSessionPoints => new(_haContext, "sensor.octopus_energy_saving_session_points");
    ///<summary>Office next Alarm</summary>
    public SensorEntity OfficeNextAlarm => new(_haContext, "sensor.office_next_alarm");
    ///<summary>Office next Reminder</summary>
    public SensorEntity OfficeNextReminder => new(_haContext, "sensor.office_next_reminder");
    ///<summary>Office next Timer</summary>
    public SensorEntity OfficeNextTimer => new(_haContext, "sensor.office_next_timer");
    ///<summary>Lounge State</summary>
    public SensorEntity OfficeState => new(_haContext, "sensor.office_state");
    ///<summary>Lounge Uptime</summary>
    public SensorEntity OfficeUptime => new(_haContext, "sensor.office_uptime");
    ///<summary>OpenWeatherMap Condition</summary>
    public SensorEntity OpenweathermapCondition => new(_haContext, "sensor.openweathermap_condition");
    ///<summary>OpenWeatherMap Forecast Condition</summary>
    public SensorEntity OpenweathermapForecastCondition => new(_haContext, "sensor.openweathermap_forecast_condition");
    ///<summary>OpenWeatherMap Forecast Time</summary>
    public SensorEntity OpenweathermapForecastTime => new(_haContext, "sensor.openweathermap_forecast_time");
    ///<summary>OpenWeatherMap Precipitation kind</summary>
    public SensorEntity OpenweathermapPrecipitationKind => new(_haContext, "sensor.openweathermap_precipitation_kind");
    ///<summary>OpenWeatherMap Weather</summary>
    public SensorEntity OpenweathermapWeather => new(_haContext, "sensor.openweathermap_weather");
    ///<summary>OpenWeatherMap Weather Code</summary>
    public SensorEntity OpenweathermapWeatherCode => new(_haContext, "sensor.openweathermap_weather_code");
    ///<summary>Playroom energy</summary>
    public SensorEntity PlayroomMainEnergy => new(_haContext, "sensor.playroom_main_energy");
    ///<summary>raspberrypi Uptime</summary>
    public SensorEntity RaspberrypiUptime2 => new(_haContext, "sensor.raspberrypi_uptime_2");
    ///<summary>Refrigerator</summary>
    public SensorEntity Refrigerator => new(_haContext, "sensor.refrigerator");
    ///<summary>Refrigerator SSID</summary>
    public SensorEntity RefrigeratorSsid => new(_haContext, "sensor.refrigerator_ssid");
    ///<summary>RMMINI-d9-2b-62 Uptime</summary>
    public SensorEntity RmminiD92b62Uptime => new(_haContext, "sensor.rmmini_d9_2b_62_uptime");
    ///<summary>Scan Status</summary>
    public SensorEntity ScanStatus => new(_haContext, "sensor.scan_status");
    ///<summary>Smart Meter IHD HAN LQI</summary>
    public SensorEntity SmartMeterIhdHanLqi => new(_haContext, "sensor.smart_meter_ihd_han_lqi");
    ///<summary>Smart Meter IHD HAN Status</summary>
    public SensorEntity SmartMeterIhdHanStatus => new(_haContext, "sensor.smart_meter_ihd_han_status");
    ///<summary>Smart Meter IHD Hardware</summary>
    public SensorEntity SmartMeterIhdHardware => new(_haContext, "sensor.smart_meter_ihd_hardware");
    ///<summary>Smart Meter IHD Software Version</summary>
    public SensorEntity SmartMeterIhdSoftwareVersion => new(_haContext, "sensor.smart_meter_ihd_software_version");
    ///<summary>Uptime</summary>
    public SensorEntity SmartPlug1Uptime => new(_haContext, "sensor.smart_plug_1_uptime");
    ///<summary>Sonos energy daily</summary>
    public SensorEntity SonosEnergyDaily => new(_haContext, "sensor.sonos_energy_daily");
    ///<summary>Sonos energy monthly</summary>
    public SensorEntity SonosEnergyMonthly => new(_haContext, "sensor.sonos_energy_monthly");
    ///<summary>Sonos energy weekly</summary>
    public SensorEntity SonosEnergyWeekly => new(_haContext, "sensor.sonos_energy_weekly");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>System Monitor Last boot</summary>
    public SensorEntity SystemMonitorLastBoot => new(_haContext, "sensor.system_monitor_last_boot");
    ///<summary>System Monitor Load (15m)</summary>
    public SensorEntity SystemMonitorLoad15m => new(_haContext, "sensor.system_monitor_load_15m");
    ///<summary>System Monitor Load (1m)</summary>
    public SensorEntity SystemMonitorLoad1m => new(_haContext, "sensor.system_monitor_load_1m");
    ///<summary>System Monitor Load (5m)</summary>
    public SensorEntity SystemMonitorLoad5m => new(_haContext, "sensor.system_monitor_load_5m");
    ///<summary>Last Motion</summary>
    public SensorEntity TemplateLastMotion => new(_haContext, "sensor.template_last_motion");
    ///<summary>Last Motion Downstairs</summary>
    public SensorEntity TemplateLastMotionDownstairs => new(_haContext, "sensor.template_last_motion_downstairs");
    ///<summary>Last Motion Upstairs</summary>
    public SensorEntity TemplateLastMotionUpstairs => new(_haContext, "sensor.template_last_motion_upstairs");
    ///<summary>This Device next Alarm</summary>
    public SensorEntity ThisDeviceNextAlarm2 => new(_haContext, "sensor.this_device_next_alarm_2");
    ///<summary>This Device next Alarm</summary>
    public SensorEntity ThisDeviceNextAlarm3 => new(_haContext, "sensor.this_device_next_alarm_3");
    ///<summary>This Device next Reminder</summary>
    public SensorEntity ThisDeviceNextReminder2 => new(_haContext, "sensor.this_device_next_reminder_2");
    ///<summary>This Device next Reminder</summary>
    public SensorEntity ThisDeviceNextReminder3 => new(_haContext, "sensor.this_device_next_reminder_3");
    ///<summary>This Device next Timer</summary>
    public SensorEntity ThisDeviceNextTimer2 => new(_haContext, "sensor.this_device_next_timer_2");
    ///<summary>This Device next Timer</summary>
    public SensorEntity ThisDeviceNextTimer3 => new(_haContext, "sensor.this_device_next_timer_3");
    ///<summary>Drying Time</summary>
    public SensorEntity TumbleDryerDryerCompletionTime => new(_haContext, "sensor.tumble_dryer_dryer_completion_time");
    ///<summary>Dryer Cycle</summary>
    public SensorEntity TumbleDryerDryerJobState => new(_haContext, "sensor.tumble_dryer_dryer_job_state");
    ///<summary>Dryer State</summary>
    public SensorEntity TumbleDryerDryerMachineState => new(_haContext, "sensor.tumble_dryer_dryer_machine_state");
    ///<summary>Twinstead Black Wheelie Bin</summary>
    public SensorEntity TwinsteadBlackWheelieBin => new(_haContext, "sensor.twinstead_black_wheelie_bin");
    ///<summary>Twinstead Black Wheelie Bin</summary>
    public SensorEntity TwinsteadBlackWheelieBin2 => new(_haContext, "sensor.twinstead_black_wheelie_bin_2");
    ///<summary>Twinstead Black Wheelie Bin</summary>
    public SensorEntity TwinsteadBlackWheelieBin3 => new(_haContext, "sensor.twinstead_black_wheelie_bin_3");
    ///<summary>Twinstead Black Wheelie Bin Bin Type</summary>
    public SensorEntity TwinsteadBlackWheelieBinBinType => new(_haContext, "sensor.twinstead_black_wheelie_bin_bin_type");
    ///<summary>Twinstead Black Wheelie Bin Bin Type</summary>
    public SensorEntity TwinsteadBlackWheelieBinBinType2 => new(_haContext, "sensor.twinstead_black_wheelie_bin_bin_type_2");
    ///<summary>Twinstead Black Wheelie Bin Colour</summary>
    public SensorEntity TwinsteadBlackWheelieBinColour => new(_haContext, "sensor.twinstead_black_wheelie_bin_colour");
    ///<summary>Twinstead Black Wheelie Bin Colour</summary>
    public SensorEntity TwinsteadBlackWheelieBinColour2 => new(_haContext, "sensor.twinstead_black_wheelie_bin_colour_2");
    ///<summary>Twinstead Black Wheelie Bin Days Until Collection</summary>
    public SensorEntity TwinsteadBlackWheelieBinDaysUntilCollection => new(_haContext, "sensor.twinstead_black_wheelie_bin_days_until_collection");
    ///<summary>Twinstead Black Wheelie Bin Days Until Collection</summary>
    public SensorEntity TwinsteadBlackWheelieBinDaysUntilCollection2 => new(_haContext, "sensor.twinstead_black_wheelie_bin_days_until_collection_2");
    ///<summary>Twinstead Black Wheelie Bin Next Collection Date</summary>
    public SensorEntity TwinsteadBlackWheelieBinNextCollectionDate => new(_haContext, "sensor.twinstead_black_wheelie_bin_next_collection_date");
    ///<summary>Twinstead Black Wheelie Bin Next Collection Date</summary>
    public SensorEntity TwinsteadBlackWheelieBinNextCollectionDate2 => new(_haContext, "sensor.twinstead_black_wheelie_bin_next_collection_date_2");
    ///<summary>Twinstead Black Wheelie Bin Next Collection Human Readable</summary>
    public SensorEntity TwinsteadBlackWheelieBinNextCollectionHumanReadable => new(_haContext, "sensor.twinstead_black_wheelie_bin_next_collection_human_readable");
    ///<summary>Twinstead Black Wheelie Bin Next Collection Human Readable</summary>
    public SensorEntity TwinsteadBlackWheelieBinNextCollectionHumanReadable2 => new(_haContext, "sensor.twinstead_black_wheelie_bin_next_collection_human_readable_2");
    ///<summary>Twinstead Blue Bag</summary>
    public SensorEntity TwinsteadBlueBag => new(_haContext, "sensor.twinstead_blue_bag");
    ///<summary>Twinstead Blue Bag</summary>
    public SensorEntity TwinsteadBlueBag2 => new(_haContext, "sensor.twinstead_blue_bag_2");
    ///<summary>Twinstead Blue Bag</summary>
    public SensorEntity TwinsteadBlueBag3 => new(_haContext, "sensor.twinstead_blue_bag_3");
    ///<summary>Twinstead Blue Bag Bin Type</summary>
    public SensorEntity TwinsteadBlueBagBinType => new(_haContext, "sensor.twinstead_blue_bag_bin_type");
    ///<summary>Twinstead Blue Bag Bin Type</summary>
    public SensorEntity TwinsteadBlueBagBinType2 => new(_haContext, "sensor.twinstead_blue_bag_bin_type_2");
    ///<summary>Twinstead Blue Bag Colour</summary>
    public SensorEntity TwinsteadBlueBagColour => new(_haContext, "sensor.twinstead_blue_bag_colour");
    ///<summary>Twinstead Blue Bag Colour</summary>
    public SensorEntity TwinsteadBlueBagColour2 => new(_haContext, "sensor.twinstead_blue_bag_colour_2");
    ///<summary>Twinstead Blue Bag Days Until Collection</summary>
    public SensorEntity TwinsteadBlueBagDaysUntilCollection => new(_haContext, "sensor.twinstead_blue_bag_days_until_collection");
    ///<summary>Twinstead Blue Bag Days Until Collection</summary>
    public SensorEntity TwinsteadBlueBagDaysUntilCollection2 => new(_haContext, "sensor.twinstead_blue_bag_days_until_collection_2");
    ///<summary>Twinstead Blue Bag Next Collection Date</summary>
    public SensorEntity TwinsteadBlueBagNextCollectionDate => new(_haContext, "sensor.twinstead_blue_bag_next_collection_date");
    ///<summary>Twinstead Blue Bag Next Collection Date</summary>
    public SensorEntity TwinsteadBlueBagNextCollectionDate2 => new(_haContext, "sensor.twinstead_blue_bag_next_collection_date_2");
    ///<summary>Twinstead Blue Bag Next Collection Human Readable</summary>
    public SensorEntity TwinsteadBlueBagNextCollectionHumanReadable => new(_haContext, "sensor.twinstead_blue_bag_next_collection_human_readable");
    ///<summary>Twinstead Blue Bag Next Collection Human Readable</summary>
    public SensorEntity TwinsteadBlueBagNextCollectionHumanReadable2 => new(_haContext, "sensor.twinstead_blue_bag_next_collection_human_readable_2");
    ///<summary>Twinstead Bulky Waste</summary>
    public SensorEntity TwinsteadBulkyWaste => new(_haContext, "sensor.twinstead_bulky_waste");
    ///<summary>Twinstead Bulky Waste</summary>
    public SensorEntity TwinsteadBulkyWaste2 => new(_haContext, "sensor.twinstead_bulky_waste_2");
    ///<summary>Twinstead Bulky Waste</summary>
    public SensorEntity TwinsteadBulkyWaste3 => new(_haContext, "sensor.twinstead_bulky_waste_3");
    ///<summary>Twinstead Bulky Waste Bin Type</summary>
    public SensorEntity TwinsteadBulkyWasteBinType => new(_haContext, "sensor.twinstead_bulky_waste_bin_type");
    ///<summary>Twinstead Bulky Waste Bin Type</summary>
    public SensorEntity TwinsteadBulkyWasteBinType2 => new(_haContext, "sensor.twinstead_bulky_waste_bin_type_2");
    ///<summary>Twinstead Bulky Waste Colour</summary>
    public SensorEntity TwinsteadBulkyWasteColour => new(_haContext, "sensor.twinstead_bulky_waste_colour");
    ///<summary>Twinstead Bulky Waste Colour</summary>
    public SensorEntity TwinsteadBulkyWasteColour2 => new(_haContext, "sensor.twinstead_bulky_waste_colour_2");
    ///<summary>Twinstead Bulky Waste Days Until Collection</summary>
    public SensorEntity TwinsteadBulkyWasteDaysUntilCollection => new(_haContext, "sensor.twinstead_bulky_waste_days_until_collection");
    ///<summary>Twinstead Bulky Waste Days Until Collection</summary>
    public SensorEntity TwinsteadBulkyWasteDaysUntilCollection2 => new(_haContext, "sensor.twinstead_bulky_waste_days_until_collection_2");
    ///<summary>Twinstead Bulky Waste Next Collection Date</summary>
    public SensorEntity TwinsteadBulkyWasteNextCollectionDate => new(_haContext, "sensor.twinstead_bulky_waste_next_collection_date");
    ///<summary>Twinstead Bulky Waste Next Collection Date</summary>
    public SensorEntity TwinsteadBulkyWasteNextCollectionDate2 => new(_haContext, "sensor.twinstead_bulky_waste_next_collection_date_2");
    ///<summary>Twinstead Bulky Waste Next Collection Human Readable</summary>
    public SensorEntity TwinsteadBulkyWasteNextCollectionHumanReadable => new(_haContext, "sensor.twinstead_bulky_waste_next_collection_human_readable");
    ///<summary>Twinstead Bulky Waste Next Collection Human Readable</summary>
    public SensorEntity TwinsteadBulkyWasteNextCollectionHumanReadable2 => new(_haContext, "sensor.twinstead_bulky_waste_next_collection_human_readable_2");
    ///<summary>Twinstead Green Caddy</summary>
    public SensorEntity TwinsteadGreenCaddy => new(_haContext, "sensor.twinstead_green_caddy");
    ///<summary>Twinstead Green Caddy</summary>
    public SensorEntity TwinsteadGreenCaddy2 => new(_haContext, "sensor.twinstead_green_caddy_2");
    ///<summary>Twinstead Green Caddy</summary>
    public SensorEntity TwinsteadGreenCaddy3 => new(_haContext, "sensor.twinstead_green_caddy_3");
    ///<summary>Twinstead Green Caddy Bin Type</summary>
    public SensorEntity TwinsteadGreenCaddyBinType => new(_haContext, "sensor.twinstead_green_caddy_bin_type");
    ///<summary>Twinstead Green Caddy Bin Type</summary>
    public SensorEntity TwinsteadGreenCaddyBinType2 => new(_haContext, "sensor.twinstead_green_caddy_bin_type_2");
    ///<summary>Twinstead Green Caddy Colour</summary>
    public SensorEntity TwinsteadGreenCaddyColour => new(_haContext, "sensor.twinstead_green_caddy_colour");
    ///<summary>Twinstead Green Caddy Colour</summary>
    public SensorEntity TwinsteadGreenCaddyColour2 => new(_haContext, "sensor.twinstead_green_caddy_colour_2");
    ///<summary>Twinstead Green Caddy Days Until Collection</summary>
    public SensorEntity TwinsteadGreenCaddyDaysUntilCollection => new(_haContext, "sensor.twinstead_green_caddy_days_until_collection");
    ///<summary>Twinstead Green Caddy Days Until Collection</summary>
    public SensorEntity TwinsteadGreenCaddyDaysUntilCollection2 => new(_haContext, "sensor.twinstead_green_caddy_days_until_collection_2");
    ///<summary>Twinstead Green Caddy Next Collection Date</summary>
    public SensorEntity TwinsteadGreenCaddyNextCollectionDate => new(_haContext, "sensor.twinstead_green_caddy_next_collection_date");
    ///<summary>Twinstead Green Caddy Next Collection Date</summary>
    public SensorEntity TwinsteadGreenCaddyNextCollectionDate2 => new(_haContext, "sensor.twinstead_green_caddy_next_collection_date_2");
    ///<summary>Twinstead Green Caddy Next Collection Human Readable</summary>
    public SensorEntity TwinsteadGreenCaddyNextCollectionHumanReadable => new(_haContext, "sensor.twinstead_green_caddy_next_collection_human_readable");
    ///<summary>Twinstead Green Caddy Next Collection Human Readable</summary>
    public SensorEntity TwinsteadGreenCaddyNextCollectionHumanReadable2 => new(_haContext, "sensor.twinstead_green_caddy_next_collection_human_readable_2");
    ///<summary>Twinstead Green Wheelie Bin (Active)</summary>
    public SensorEntity TwinsteadGreenWheelieBinActive => new(_haContext, "sensor.twinstead_green_wheelie_bin_active");
    ///<summary>Twinstead Green Wheelie Bin (Active)</summary>
    public SensorEntity TwinsteadGreenWheelieBinActive2 => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_2");
    ///<summary>Twinstead Green Wheelie Bin (Active)</summary>
    public SensorEntity TwinsteadGreenWheelieBinActive3 => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_3");
    ///<summary>Twinstead Green Wheelie Bin (Active) Bin Type</summary>
    public SensorEntity TwinsteadGreenWheelieBinActiveBinType => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_bin_type");
    ///<summary>Twinstead Green Wheelie Bin (Active) Bin Type</summary>
    public SensorEntity TwinsteadGreenWheelieBinActiveBinType2 => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_bin_type_2");
    ///<summary>Twinstead Green Wheelie Bin (Active) Colour</summary>
    public SensorEntity TwinsteadGreenWheelieBinActiveColour => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_colour");
    ///<summary>Twinstead Green Wheelie Bin (Active) Colour</summary>
    public SensorEntity TwinsteadGreenWheelieBinActiveColour2 => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_colour_2");
    ///<summary>Twinstead Green Wheelie Bin (Active) Days Until Collection</summary>
    public SensorEntity TwinsteadGreenWheelieBinActiveDaysUntilCollection => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_days_until_collection");
    ///<summary>Twinstead Green Wheelie Bin (Active) Days Until Collection</summary>
    public SensorEntity TwinsteadGreenWheelieBinActiveDaysUntilCollection2 => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_days_until_collection_2");
    ///<summary>Twinstead Green Wheelie Bin (Active) Next Collection Date</summary>
    public SensorEntity TwinsteadGreenWheelieBinActiveNextCollectionDate => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_next_collection_date");
    ///<summary>Twinstead Green Wheelie Bin (Active) Next Collection Date</summary>
    public SensorEntity TwinsteadGreenWheelieBinActiveNextCollectionDate2 => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_next_collection_date_2");
    ///<summary>Twinstead Green Wheelie Bin (Active) Next Collection Human Readable</summary>
    public SensorEntity TwinsteadGreenWheelieBinActiveNextCollectionHumanReadable => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_next_collection_human_readable");
    ///<summary>Twinstead Green Wheelie Bin (Active) Next Collection Human Readable</summary>
    public SensorEntity TwinsteadGreenWheelieBinActiveNextCollectionHumanReadable2 => new(_haContext, "sensor.twinstead_green_wheelie_bin_active_next_collection_human_readable_2");
    ///<summary>Twinstead Orange Box</summary>
    public SensorEntity TwinsteadOrangeBox => new(_haContext, "sensor.twinstead_orange_box");
    ///<summary>Twinstead Orange Box</summary>
    public SensorEntity TwinsteadOrangeBox2 => new(_haContext, "sensor.twinstead_orange_box_2");
    ///<summary>Twinstead Orange Box</summary>
    public SensorEntity TwinsteadOrangeBox3 => new(_haContext, "sensor.twinstead_orange_box_3");
    ///<summary>Twinstead Orange Box Bin Type</summary>
    public SensorEntity TwinsteadOrangeBoxBinType => new(_haContext, "sensor.twinstead_orange_box_bin_type");
    ///<summary>Twinstead Orange Box Bin Type</summary>
    public SensorEntity TwinsteadOrangeBoxBinType2 => new(_haContext, "sensor.twinstead_orange_box_bin_type_2");
    ///<summary>Twinstead Orange Box Colour</summary>
    public SensorEntity TwinsteadOrangeBoxColour => new(_haContext, "sensor.twinstead_orange_box_colour");
    ///<summary>Twinstead Orange Box Colour</summary>
    public SensorEntity TwinsteadOrangeBoxColour2 => new(_haContext, "sensor.twinstead_orange_box_colour_2");
    ///<summary>Twinstead Orange Box Days Until Collection</summary>
    public SensorEntity TwinsteadOrangeBoxDaysUntilCollection => new(_haContext, "sensor.twinstead_orange_box_days_until_collection");
    ///<summary>Twinstead Orange Box Days Until Collection</summary>
    public SensorEntity TwinsteadOrangeBoxDaysUntilCollection2 => new(_haContext, "sensor.twinstead_orange_box_days_until_collection_2");
    ///<summary>Twinstead Orange Box Next Collection Date</summary>
    public SensorEntity TwinsteadOrangeBoxNextCollectionDate => new(_haContext, "sensor.twinstead_orange_box_next_collection_date");
    ///<summary>Twinstead Orange Box Next Collection Date</summary>
    public SensorEntity TwinsteadOrangeBoxNextCollectionDate2 => new(_haContext, "sensor.twinstead_orange_box_next_collection_date_2");
    ///<summary>Twinstead Orange Box Next Collection Human Readable</summary>
    public SensorEntity TwinsteadOrangeBoxNextCollectionHumanReadable => new(_haContext, "sensor.twinstead_orange_box_next_collection_human_readable");
    ///<summary>Twinstead Orange Box Next Collection Human Readable</summary>
    public SensorEntity TwinsteadOrangeBoxNextCollectionHumanReadable2 => new(_haContext, "sensor.twinstead_orange_box_next_collection_human_readable_2");
    ///<summary>Twinstead Raw JSON</summary>
    public SensorEntity TwinsteadRawJson => new(_haContext, "sensor.twinstead_raw_json");
    ///<summary>Twinstead White Bag</summary>
    public SensorEntity TwinsteadWhiteBag => new(_haContext, "sensor.twinstead_white_bag");
    ///<summary>Twinstead White Bag</summary>
    public SensorEntity TwinsteadWhiteBag2 => new(_haContext, "sensor.twinstead_white_bag_2");
    ///<summary>Twinstead White Bag</summary>
    public SensorEntity TwinsteadWhiteBag3 => new(_haContext, "sensor.twinstead_white_bag_3");
    ///<summary>Twinstead White Bag Bin Type</summary>
    public SensorEntity TwinsteadWhiteBagBinType => new(_haContext, "sensor.twinstead_white_bag_bin_type");
    ///<summary>Twinstead White Bag Bin Type</summary>
    public SensorEntity TwinsteadWhiteBagBinType2 => new(_haContext, "sensor.twinstead_white_bag_bin_type_2");
    ///<summary>Twinstead White Bag Colour</summary>
    public SensorEntity TwinsteadWhiteBagColour => new(_haContext, "sensor.twinstead_white_bag_colour");
    ///<summary>Twinstead White Bag Colour</summary>
    public SensorEntity TwinsteadWhiteBagColour2 => new(_haContext, "sensor.twinstead_white_bag_colour_2");
    ///<summary>Twinstead White Bag Days Until Collection</summary>
    public SensorEntity TwinsteadWhiteBagDaysUntilCollection => new(_haContext, "sensor.twinstead_white_bag_days_until_collection");
    ///<summary>Twinstead White Bag Days Until Collection</summary>
    public SensorEntity TwinsteadWhiteBagDaysUntilCollection2 => new(_haContext, "sensor.twinstead_white_bag_days_until_collection_2");
    ///<summary>Twinstead White Bag Next Collection Date</summary>
    public SensorEntity TwinsteadWhiteBagNextCollectionDate => new(_haContext, "sensor.twinstead_white_bag_next_collection_date");
    ///<summary>Twinstead White Bag Next Collection Date</summary>
    public SensorEntity TwinsteadWhiteBagNextCollectionDate2 => new(_haContext, "sensor.twinstead_white_bag_next_collection_date_2");
    ///<summary>Twinstead White Bag Next Collection Human Readable</summary>
    public SensorEntity TwinsteadWhiteBagNextCollectionHumanReadable => new(_haContext, "sensor.twinstead_white_bag_next_collection_human_readable");
    ///<summary>Twinstead White Bag Next Collection Human Readable</summary>
    public SensorEntity TwinsteadWhiteBagNextCollectionHumanReadable2 => new(_haContext, "sensor.twinstead_white_bag_next_collection_human_readable_2");
    ///<summary>Uptime</summary>
    public SensorEntity UkPc0jskuxUptime => new(_haContext, "sensor.uk_pc0jskux_uptime");
    ///<summary>Upstairs State</summary>
    public SensorEntity UpstairsState => new(_haContext, "sensor.upstairs_state");
    ///<summary>Upstairs Uplink MAC</summary>
    public SensorEntity UpstairsUplinkMac => new(_haContext, "sensor.upstairs_uplink_mac");
    ///<summary>Upstairs Uptime</summary>
    public SensorEntity UpstairsUptime => new(_haContext, "sensor.upstairs_uptime");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime => new(_haContext, "sensor.uptime");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime10 => new(_haContext, "sensor.uptime_10");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime11 => new(_haContext, "sensor.uptime_11");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime12 => new(_haContext, "sensor.uptime_12");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime13 => new(_haContext, "sensor.uptime_13");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime14 => new(_haContext, "sensor.uptime_14");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime15 => new(_haContext, "sensor.uptime_15");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime17 => new(_haContext, "sensor.uptime_17");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime18 => new(_haContext, "sensor.uptime_18");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime19 => new(_haContext, "sensor.uptime_19");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime2 => new(_haContext, "sensor.uptime_2");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime20 => new(_haContext, "sensor.uptime_20");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime21 => new(_haContext, "sensor.uptime_21");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime22 => new(_haContext, "sensor.uptime_22");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime23 => new(_haContext, "sensor.uptime_23");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime25 => new(_haContext, "sensor.uptime_25");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime26 => new(_haContext, "sensor.uptime_26");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime27 => new(_haContext, "sensor.uptime_27");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime28 => new(_haContext, "sensor.uptime_28");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime29 => new(_haContext, "sensor.uptime_29");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime3 => new(_haContext, "sensor.uptime_3");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime30 => new(_haContext, "sensor.uptime_30");
    ///<summary>Hottubcontrol Uptime</summary>
    public SensorEntity Uptime31 => new(_haContext, "sensor.uptime_31");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime32 => new(_haContext, "sensor.uptime_32");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime33 => new(_haContext, "sensor.uptime_33");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime34 => new(_haContext, "sensor.uptime_34");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime35 => new(_haContext, "sensor.uptime_35");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime36 => new(_haContext, "sensor.uptime_36");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime37 => new(_haContext, "sensor.uptime_37");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime38 => new(_haContext, "sensor.uptime_38");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime39 => new(_haContext, "sensor.uptime_39");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime4 => new(_haContext, "sensor.uptime_4");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime40 => new(_haContext, "sensor.uptime_40");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime41 => new(_haContext, "sensor.uptime_41");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime42 => new(_haContext, "sensor.uptime_42");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime43 => new(_haContext, "sensor.uptime_43");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime44 => new(_haContext, "sensor.uptime_44");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime46 => new(_haContext, "sensor.uptime_46");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime48 => new(_haContext, "sensor.uptime_48");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime49 => new(_haContext, "sensor.uptime_49");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime5 => new(_haContext, "sensor.uptime_5");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime50 => new(_haContext, "sensor.uptime_50");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime51 => new(_haContext, "sensor.uptime_51");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime53 => new(_haContext, "sensor.uptime_53");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime54 => new(_haContext, "sensor.uptime_54");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime55 => new(_haContext, "sensor.uptime_55");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime56 => new(_haContext, "sensor.uptime_56");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime57 => new(_haContext, "sensor.uptime_57");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime58 => new(_haContext, "sensor.uptime_58");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime59 => new(_haContext, "sensor.uptime_59");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime6 => new(_haContext, "sensor.uptime_6");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime60 => new(_haContext, "sensor.uptime_60");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime61 => new(_haContext, "sensor.uptime_61");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime62 => new(_haContext, "sensor.uptime_62");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime63 => new(_haContext, "sensor.uptime_63");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime64 => new(_haContext, "sensor.uptime_64");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime65 => new(_haContext, "sensor.uptime_65");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime66 => new(_haContext, "sensor.uptime_66");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime67 => new(_haContext, "sensor.uptime_67");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime7 => new(_haContext, "sensor.uptime_7");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime8 => new(_haContext, "sensor.uptime_8");
    ///<summary>Vacation Next State</summary>
    public SensorEntity VacationNextState => new(_haContext, "sensor.vacation_next_state");
    ///<summary>Wallpanel next Alarm</summary>
    public SensorEntity WallpanelNextAlarm => new(_haContext, "sensor.wallpanel_next_alarm");
    ///<summary>Wallpanel next Reminder</summary>
    public SensorEntity WallpanelNextReminder => new(_haContext, "sensor.wallpanel_next_reminder");
    ///<summary>Wallpanel next Timer</summary>
    public SensorEntity WallpanelNextTimer => new(_haContext, "sensor.wallpanel_next_timer");
    ///<summary>Washing Time</summary>
    public SensorEntity WashingMachineWasherCompletionTime => new(_haContext, "sensor.washing_machine_washer_completion_time");
    ///<summary>Washing Cycle</summary>
    public SensorEntity WashingMachineWasherJobState => new(_haContext, "sensor.washing_machine_washer_job_state");
    ///<summary>Washing State</summary>
    public SensorEntity WashingMachineWasherMachineState => new(_haContext, "sensor.washing_machine_washer_machine_state");
    ///<summary>watchman_last_updated</summary>
    public SensorEntity WatchmanLastUpdated => new(_haContext, "sensor.watchman_last_updated");
    ///<summary>Wiser Cloud</summary>
    public SensorEntity WiserCloud => new(_haContext, "sensor.wiser_cloud");
    ///<summary>Wiser HeatHub Signal</summary>
    public SensorEntity WiserHeathubSignal => new(_haContext, "sensor.wiser_heathub_signal");
    ///<summary>Wiser Heating</summary>
    public SensorEntity WiserHeating => new(_haContext, "sensor.wiser_heating");
    ///<summary>Wiser Heating Operation Mode</summary>
    public SensorEntity WiserHeatingOperationMode => new(_haContext, "sensor.wiser_heating_operation_mode");
    ///<summary>Wiser Hot Water</summary>
    public SensorEntity WiserHotWater => new(_haContext, "sensor.wiser_hot_water");
    ///<summary>Wiser Hot Water Operation Mode</summary>
    public SensorEntity WiserHotWaterOperationMode => new(_haContext, "sensor.wiser_hot_water_operation_mode");
    ///<summary>Wiser iTRV Aaron Signal</summary>
    public SensorEntity WiserItrvAaronSignal => new(_haContext, "sensor.wiser_itrv_aaron_signal");
    ///<summary>Wiser iTRV Dining Signal</summary>
    public SensorEntity WiserItrvDiningSignal => new(_haContext, "sensor.wiser_itrv_dining_signal");
    ///<summary>Wiser iTRV Entrance Signal</summary>
    public SensorEntity WiserItrvEntranceSignal => new(_haContext, "sensor.wiser_itrv_entrance_signal");
    ///<summary>Wiser iTRV Entrance Signal</summary>
    public SensorEntity WiserItrvEntranceSignal2 => new(_haContext, "sensor.wiser_itrv_entrance_signal_2");
    ///<summary>Wiser iTRV Jayden Signal</summary>
    public SensorEntity WiserItrvJaydenSignal => new(_haContext, "sensor.wiser_itrv_jayden_signal");
    ///<summary>Wiser iTRV Landing Signal</summary>
    public SensorEntity WiserItrvLandingSignal => new(_haContext, "sensor.wiser_itrv_landing_signal");
    ///<summary>Wiser iTRV Lounge Bay Signal</summary>
    public SensorEntity WiserItrvLoungeBaySignal => new(_haContext, "sensor.wiser_itrv_lounge_bay_signal");
    ///<summary>Wiser iTRV Lounge Bay Signal</summary>
    public SensorEntity WiserItrvLoungeBaySignal2 => new(_haContext, "sensor.wiser_itrv_lounge_bay_signal_2");
    ///<summary>Wiser iTRV Lounge  Signal</summary>
    public SensorEntity WiserItrvLoungeSignal => new(_haContext, "sensor.wiser_itrv_lounge_signal");
    ///<summary>Wiser iTRV Master Signal</summary>
    public SensorEntity WiserItrvMasterSignal => new(_haContext, "sensor.wiser_itrv_master_signal");
    ///<summary>Wiser iTRV Office Signal</summary>
    public SensorEntity WiserItrvOfficeSignal => new(_haContext, "sensor.wiser_itrv_office_signal");
    ///<summary>Wiser iTRV Playroom Signal</summary>
    public SensorEntity WiserItrvPlayroomSignal => new(_haContext, "sensor.wiser_itrv_playroom_signal");
    ///<summary>Wiser iTRV Utility Signal</summary>
    public SensorEntity WiserItrvUtilitySignal => new(_haContext, "sensor.wiser_itrv_utility_signal");
    ///<summary>Wiser RoomStat Utility Signal</summary>
    public SensorEntity WiserRoomstatUtilitySignal => new(_haContext, "sensor.wiser_roomstat_utility_signal");
    ///<summary>Aaron 1 energy</summary>
    public NumericSensorEntity Aaron1Energy => new(_haContext, "sensor.aaron_1_energy");
    ///<summary>Aaron 1 power</summary>
    public NumericSensorEntity Aaron1Power => new(_haContext, "sensor.aaron_1_power");
    ///<summary>Aaron 2 energy</summary>
    public NumericSensorEntity Aaron2Energy => new(_haContext, "sensor.aaron_2_energy");
    ///<summary>Aaron 2 power</summary>
    public NumericSensorEntity Aaron2Power => new(_haContext, "sensor.aaron_2_power");
    ///<summary>Aaron 3 energy</summary>
    public NumericSensorEntity Aaron3Energy => new(_haContext, "sensor.aaron_3_energy");
    ///<summary>Aaron 3 power</summary>
    public NumericSensorEntity Aaron3Power => new(_haContext, "sensor.aaron_3_power");
    ///<summary>Aaron 4 energy</summary>
    public NumericSensorEntity Aaron4Energy => new(_haContext, "sensor.aaron_4_energy");
    ///<summary>Aaron 4 power</summary>
    public NumericSensorEntity Aaron4Power => new(_haContext, "sensor.aaron_4_power");
    ///<summary>Aaron Available Balance</summary>
    public NumericSensorEntity AaronAvailableBalance => new(_haContext, "sensor.aaron_available_balance");
    ///<summary>Aaron energy</summary>
    public NumericSensorEntity AaronEnergy => new(_haContext, "sensor.aaron_energy");
    ///<summary>Aaron Lux</summary>
    public NumericSensorEntity AaronLux => new(_haContext, "sensor.aaron_lux");
    ///<summary>Aaron Motion Battery</summary>
    public NumericSensorEntity AaronMotionBattery => new(_haContext, "sensor.aaron_motion_battery");
    ///<summary>Aaron power</summary>
    public NumericSensorEntity AaronPower => new(_haContext, "sensor.aaron_power");
    ///<summary>Aaron Used Screen Time</summary>
    public NumericSensorEntity AaronUsedScreenTime => new(_haContext, "sensor.aaron_used_screen_time");
    ///<summary>Aaron’s iPad Battery Level</summary>
    public NumericSensorEntity AaronsIpadBatteryLevel => new(_haContext, "sensor.aarons_ipad_battery_level");
    ///<summary>Aaron’s iPad Storage</summary>
    public NumericSensorEntity AaronsIpadStorage => new(_haContext, "sensor.aarons_ipad_storage");
    ///<summary>Aaron’s iPhone Average Active Pace</summary>
    public NumericSensorEntity AaronsIphoneAverageActivePace => new(_haContext, "sensor.aarons_iphone_average_active_pace");
    ///<summary>Aaron’s iPhone Battery Level</summary>
    public NumericSensorEntity AaronsIphoneBatteryLevel => new(_haContext, "sensor.aarons_iphone_battery_level");
    ///<summary>Aaron’s iPhone Distance</summary>
    public NumericSensorEntity AaronsIphoneDistance => new(_haContext, "sensor.aarons_iphone_distance");
    ///<summary>Aaron’s iPhone Floors Ascended</summary>
    public NumericSensorEntity AaronsIphoneFloorsAscended => new(_haContext, "sensor.aarons_iphone_floors_ascended");
    ///<summary>Aaron’s iPhone Floors Descended</summary>
    public NumericSensorEntity AaronsIphoneFloorsDescended => new(_haContext, "sensor.aarons_iphone_floors_descended");
    ///<summary>Aaron’s iPhone Steps</summary>
    public NumericSensorEntity AaronsIphoneSteps => new(_haContext, "sensor.aarons_iphone_steps");
    ///<summary>Aaron’s iPhone Storage</summary>
    public NumericSensorEntity AaronsIphoneStorage => new(_haContext, "sensor.aarons_iphone_storage");
    ///<summary>Aaron’s iPhone Watch Battery Level</summary>
    public NumericSensorEntity AaronsIphoneWatchBatteryLevel => new(_haContext, "sensor.aarons_iphone_watch_battery_level");
    ///<summary>AccuWeather Home Apparent temperature</summary>
    public NumericSensorEntity AccuweatherHomeApparentTemperature => new(_haContext, "sensor.accuweather_home_apparent_temperature");
    ///<summary>AccuWeather Home Cloud ceiling</summary>
    public NumericSensorEntity AccuweatherHomeCloudCeiling => new(_haContext, "sensor.accuweather_home_cloud_ceiling");
    ///<summary>AccuWeather Home Cloud cover</summary>
    public NumericSensorEntity AccuweatherHomeCloudCover => new(_haContext, "sensor.accuweather_home_cloud_cover");
    ///<summary>AccuWeather Home Cloud cover day 0</summary>
    public NumericSensorEntity AccuweatherHomeCloudCoverDay0d => new(_haContext, "sensor.accuweather_home_cloud_cover_day_0d");
    ///<summary>AccuWeather Home Cloud cover night 0</summary>
    public NumericSensorEntity AccuweatherHomeCloudCoverNight0d => new(_haContext, "sensor.accuweather_home_cloud_cover_night_0d");
    ///<summary>AccuWeather Home Dew point</summary>
    public NumericSensorEntity AccuweatherHomeDewPoint => new(_haContext, "sensor.accuweather_home_dew_point");
    ///<summary>AccuWeather Home Grass pollen day 0</summary>
    public NumericSensorEntity AccuweatherHomeGrassPollen0d => new(_haContext, "sensor.accuweather_home_grass_pollen_0d");
    ///<summary>AccuWeather Home Hours of sun day 0</summary>
    public NumericSensorEntity AccuweatherHomeHoursOfSun0d => new(_haContext, "sensor.accuweather_home_hours_of_sun_0d");
    ///<summary>AccuWeather Home Mold pollen day 0</summary>
    public NumericSensorEntity AccuweatherHomeMoldPollen0d => new(_haContext, "sensor.accuweather_home_mold_pollen_0d");
    ///<summary>AccuWeather Home Precipitation</summary>
    public NumericSensorEntity AccuweatherHomePrecipitation => new(_haContext, "sensor.accuweather_home_precipitation");
    ///<summary>AccuWeather Home Ragweed pollen day 0</summary>
    public NumericSensorEntity AccuweatherHomeRagweedPollen0d => new(_haContext, "sensor.accuweather_home_ragweed_pollen_0d");
    ///<summary>AccuWeather Home RealFeel temperature</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperature => new(_haContext, "sensor.accuweather_home_realfeel_temperature");
    ///<summary>AccuWeather Home RealFeel temperature max day 0</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMax0d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_max_0d");
    ///<summary>AccuWeather Home RealFeel temperature min day 0</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMin0d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_min_0d");
    ///<summary>AccuWeather Home RealFeel temperature shade</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureShade => new(_haContext, "sensor.accuweather_home_realfeel_temperature_shade");
    ///<summary>AccuWeather Home RealFeel temperature shade max day 0</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureShadeMax0d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_shade_max_0d");
    ///<summary>AccuWeather Home RealFeel temperature shade min day 0</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureShadeMin0d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_shade_min_0d");
    ///<summary>AccuWeather Home Solar irradiance day 0</summary>
    public NumericSensorEntity AccuweatherHomeSolarIrradianceDay0d => new(_haContext, "sensor.accuweather_home_solar_irradiance_day_0d");
    ///<summary>AccuWeather Home Solar irradiance night 0</summary>
    public NumericSensorEntity AccuweatherHomeSolarIrradianceNight0d => new(_haContext, "sensor.accuweather_home_solar_irradiance_night_0d");
    ///<summary>AccuWeather Home Thunderstorm probability day 0</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityDay0d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_day_0d");
    ///<summary>AccuWeather Home Tree pollen day 0</summary>
    public NumericSensorEntity AccuweatherHomeTreePollen0d => new(_haContext, "sensor.accuweather_home_tree_pollen_0d");
    ///<summary>AccuWeather Home UV index</summary>
    public NumericSensorEntity AccuweatherHomeUvIndex => new(_haContext, "sensor.accuweather_home_uv_index");
    ///<summary>AccuWeather Home UV index day 0</summary>
    public NumericSensorEntity AccuweatherHomeUvIndex0d => new(_haContext, "sensor.accuweather_home_uv_index_0d");
    ///<summary>AccuWeather Home Wet bulb temperature</summary>
    public NumericSensorEntity AccuweatherHomeWetBulbTemperature => new(_haContext, "sensor.accuweather_home_wet_bulb_temperature");
    ///<summary>AccuWeather Home Wind speed</summary>
    public NumericSensorEntity AccuweatherHomeWind => new(_haContext, "sensor.accuweather_home_wind");
    ///<summary>AccuWeather Home Wind chill temperature</summary>
    public NumericSensorEntity AccuweatherHomeWindChillTemperature => new(_haContext, "sensor.accuweather_home_wind_chill_temperature");
    ///<summary>AccuWeather Home Wind speed day 0</summary>
    public NumericSensorEntity AccuweatherHomeWindDay0d => new(_haContext, "sensor.accuweather_home_wind_day_0d");
    ///<summary>AccuWeather Home Wind gust speed</summary>
    public NumericSensorEntity AccuweatherHomeWindGust => new(_haContext, "sensor.accuweather_home_wind_gust");
    ///<summary>AccuWeather Home Wind gust speed day 0</summary>
    public NumericSensorEntity AccuweatherHomeWindGustDay0d => new(_haContext, "sensor.accuweather_home_wind_gust_day_0d");
    ///<summary>AccuWeather Home Wind gust speed night 0</summary>
    public NumericSensorEntity AccuweatherHomeWindGustNight0d => new(_haContext, "sensor.accuweather_home_wind_gust_night_0d");
    ///<summary>AccuWeather Home Wind speed night 0</summary>
    public NumericSensorEntity AccuweatherHomeWindNight0d => new(_haContext, "sensor.accuweather_home_wind_night_0d");
    ///<summary>All standby energy</summary>
    public NumericSensorEntity AllStandbyEnergy => new(_haContext, "sensor.all_standby_energy");
    ///<summary>All standby power</summary>
    public NumericSensorEntity AllStandbyPower => new(_haContext, "sensor.all_standby_power");
    ///<summary>Aaron Birthday</summary>
    public NumericSensorEntity AnniversaryAaronBirthday => new(_haContext, "sensor.anniversary_aaron_birthday");
    ///<summary>Christmas</summary>
    public NumericSensorEntity AnniversaryChristmas => new(_haContext, "sensor.anniversary_christmas");
    ///<summary>Eugene Birthday</summary>
    public NumericSensorEntity AnniversaryEugeneBirthday => new(_haContext, "sensor.anniversary_eugene_birthday");
    ///<summary>Gabriel Birthday</summary>
    public NumericSensorEntity AnniversaryGabrielBirthday => new(_haContext, "sensor.anniversary_gabriel_birthday");
    ///<summary>Grandad Johan Birthday</summary>
    public NumericSensorEntity AnniversaryGrandadJohanBirthday => new(_haContext, "sensor.anniversary_grandad_johan_birthday");
    ///<summary>Granny Aubrecia Birthday</summary>
    public NumericSensorEntity AnniversaryGrannyAubreciaBirthday => new(_haContext, "sensor.anniversary_granny_aubrecia_birthday");
    ///<summary>Granny Louise Birthday</summary>
    public NumericSensorEntity AnniversaryGrannyLouiseBirthday => new(_haContext, "sensor.anniversary_granny_louise_birthday");
    ///<summary>Granny Zelda Birthday</summary>
    public NumericSensorEntity AnniversaryGrannyZeldaBirthday => new(_haContext, "sensor.anniversary_granny_zelda_birthday");
    ///<summary>Hailey Birthday</summary>
    public NumericSensorEntity AnniversaryHaileyBirthday => new(_haContext, "sensor.anniversary_hailey_birthday");
    ///<summary>Jayden Birthday</summary>
    public NumericSensorEntity AnniversaryJaydenBirthday => new(_haContext, "sensor.anniversary_jayden_birthday");
    ///<summary>New Years</summary>
    public NumericSensorEntity AnniversaryNewYears => new(_haContext, "sensor.anniversary_new_years");
    ///<summary>RX</summary>
    public NumericSensorEntity Asaz5cg126368dRx => new(_haContext, "sensor.asaz_5cg126368d_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity Asaz5cg126368dTx => new(_haContext, "sensor.asaz_5cg126368d_tx");
    ///<summary>ASGLH-WL-19140 RX</summary>
    public NumericSensorEntity AsglhWl19140Rx => new(_haContext, "sensor.asglh_wl_19140_rx");
    ///<summary>ASGLH-WL-19140 TX</summary>
    public NumericSensorEntity AsglhWl19140Tx => new(_haContext, "sensor.asglh_wl_19140_tx");
    ///<summary>Aubrecia Average Active Pace</summary>
    public NumericSensorEntity AubreciaAverageActivePace => new(_haContext, "sensor.aubrecia_average_active_pace");
    ///<summary>Aubrecia Battery Level</summary>
    public NumericSensorEntity AubreciaBatteryLevel => new(_haContext, "sensor.aubrecia_battery_level");
    ///<summary>Aubrecia Distance</summary>
    public NumericSensorEntity AubreciaDistance => new(_haContext, "sensor.aubrecia_distance");
    ///<summary>Aubrecia Drive Battery</summary>
    public NumericSensorEntity AubreciaDriveBattery => new(_haContext, "sensor.aubrecia_drive_battery");
    ///<summary>Wireless</summary>
    public NumericSensorEntity AubreciaDriveWireless => new(_haContext, "sensor.aubrecia_drive_wireless");
    ///<summary>Aubrecia Floors Ascended</summary>
    public NumericSensorEntity AubreciaFloorsAscended => new(_haContext, "sensor.aubrecia_floors_ascended");
    ///<summary>Aubrecia Floors Descended</summary>
    public NumericSensorEntity AubreciaFloorsDescended => new(_haContext, "sensor.aubrecia_floors_descended");
    ///<summary>Aubrecia Front Door Battery</summary>
    public NumericSensorEntity AubreciaFrontDoorBattery => new(_haContext, "sensor.aubrecia_front_door_battery");
    ///<summary>Aubrecia Front Door Battery</summary>
    public NumericSensorEntity AubreciaFrontDoorBattery2 => new(_haContext, "sensor.aubrecia_front_door_battery_2");
    ///<summary>Wireless</summary>
    public NumericSensorEntity AubreciaFrontDoorWireless => new(_haContext, "sensor.aubrecia_front_door_wireless");
    ///<summary>Aubrecia Steps</summary>
    public NumericSensorEntity AubreciaSteps => new(_haContext, "sensor.aubrecia_steps");
    ///<summary>Aubrecia Storage</summary>
    public NumericSensorEntity AubreciaStorage => new(_haContext, "sensor.aubrecia_storage");
    ///<summary>AubreciasiPhone RX</summary>
    public NumericSensorEntity AubreciasiphoneRx => new(_haContext, "sensor.aubreciasiphone_rx");
    ///<summary>AubreciasiPhone TX</summary>
    public NumericSensorEntity AubreciasiphoneTx => new(_haContext, "sensor.aubreciasiphone_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity AubriVaioRx => new(_haContext, "sensor.aubri_vaio_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity AubriVaioTx => new(_haContext, "sensor.aubri_vaio_tx");
    ///<summary>Average Lux Downstairs</summary>
    public NumericSensorEntity AverageLuxDownstairs => new(_haContext, "sensor.average_lux_downstairs");
    ///<summary>Average Lux Upstairs</summary>
    public NumericSensorEntity AverageLuxUpstairs => new(_haContext, "sensor.average_lux_upstairs");
    ///<summary>Average Ping Konnected AddOn Count</summary>
    public NumericSensorEntity AveragePingKonnectedAddonCount => new(_haContext, "sensor.average_ping_konnected_addon_count");
    ///<summary>Average Ping Konnected AddOn Ratio</summary>
    public NumericSensorEntity AveragePingKonnectedAddonRatio => new(_haContext, "sensor.average_ping_konnected_addon_ratio");
    ///<summary>Average Ping Konnected Google Count</summary>
    public NumericSensorEntity AveragePingKonnectedGoogleCount => new(_haContext, "sensor.average_ping_konnected_google_count");
    ///<summary>Average Ping Konnected Google Ratio</summary>
    public NumericSensorEntity AveragePingKonnectedGoogleRatio => new(_haContext, "sensor.average_ping_konnected_google_ratio");
    ///<summary>Average Ping Konnected Main Count</summary>
    public NumericSensorEntity AveragePingKonnectedMainCount => new(_haContext, "sensor.average_ping_konnected_main_count");
    ///<summary>Average Ping Konnected Main Ratio</summary>
    public NumericSensorEntity AveragePingKonnectedMainRatio => new(_haContext, "sensor.average_ping_konnected_main_ratio");
    ///<summary>Average Temp</summary>
    public NumericSensorEntity AverageTemp => new(_haContext, "sensor.average_temp");
    ///<summary>Average Temp Downstairs</summary>
    public NumericSensorEntity AverageTempDownstairs => new(_haContext, "sensor.average_temp_downstairs");
    ///<summary>Average Temp Upstairs</summary>
    public NumericSensorEntity AverageTempUpstairs => new(_haContext, "sensor.average_temp_upstairs");
    ///<summary>Backdoor energy</summary>
    public NumericSensorEntity BackdoorEnergy => new(_haContext, "sensor.backdoor_energy");
    ///<summary>Backdoor power</summary>
    public NumericSensorEntity BackdoorPower => new(_haContext, "sensor.backdoor_power");
    ///<summary>Bathroom Lux</summary>
    public NumericSensorEntity BathroomLux => new(_haContext, "sensor.bathroom_lux");
    ///<summary>Bathroom Motion Battery</summary>
    public NumericSensorEntity BathroomMotionBattery => new(_haContext, "sensor.bathroom_motion_battery");
    ///<summary>Bedroom 1 Daily Energy Consumed</summary>
    public NumericSensorEntity Bedroom1DailyEnergyConsumed => new(_haContext, "sensor.bedroom_1_daily_energy_consumed");
    ///<summary>Bedroom 1 Energy</summary>
    public NumericSensorEntity Bedroom1Energy => new(_haContext, "sensor.bedroom_1_energy");
    ///<summary>Bedroom 1 Room temperature</summary>
    public NumericSensorEntity Bedroom1RoomTemperature => new(_haContext, "sensor.bedroom_1_room_temperature");
    ///<summary>Bedroom 2 Daily Energy Consumed</summary>
    public NumericSensorEntity Bedroom2DailyEnergyConsumed => new(_haContext, "sensor.bedroom_2_daily_energy_consumed");
    ///<summary>Bedroom 2 Energy</summary>
    public NumericSensorEntity Bedroom2Energy => new(_haContext, "sensor.bedroom_2_energy");
    ///<summary>Bedroom 2 Room temperature</summary>
    public NumericSensorEntity Bedroom2RoomTemperature => new(_haContext, "sensor.bedroom_2_room_temperature");
    ///<summary>Bedroom 3 Daily Energy Consumed</summary>
    public NumericSensorEntity Bedroom3DailyEnergyConsumed => new(_haContext, "sensor.bedroom_3_daily_energy_consumed");
    ///<summary>Bedroom 3 Energy</summary>
    public NumericSensorEntity Bedroom3Energy => new(_haContext, "sensor.bedroom_3_energy");
    ///<summary>Bedroom 3 Room temperature</summary>
    public NumericSensorEntity Bedroom3RoomTemperature => new(_haContext, "sensor.bedroom_3_room_temperature");
    ///<summary>Bedroom 4 Daily Energy Consumed</summary>
    public NumericSensorEntity Bedroom4DailyEnergyConsumed => new(_haContext, "sensor.bedroom_4_daily_energy_consumed");
    ///<summary>Bedroom 4 Energy</summary>
    public NumericSensorEntity Bedroom4Energy => new(_haContext, "sensor.bedroom_4_energy");
    ///<summary>Bedroom 4 Room temperature</summary>
    public NumericSensorEntity Bedroom4RoomTemperature => new(_haContext, "sensor.bedroom_4_room_temperature");
    ///<summary>RX</summary>
    public NumericSensorEntity C02t8gtygvc1Rx => new(_haContext, "sensor.c02t8gtygvc1_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity C02t8gtygvc1Tx => new(_haContext, "sensor.c02t8gtygvc1_tx");
    ///<summary>Coffee Machine</summary>
    public NumericSensorEntity CoffeeMachine => new(_haContext, "sensor.coffee_machine");
    ///<summary>RX</summary>
    public NumericSensorEntity DesktopIpurn8tRx => new(_haContext, "sensor.desktop_ipurn8t_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity DesktopIpurn8tTx => new(_haContext, "sensor.desktop_ipurn8t_tx");
    ///<summary>dining 1 energy</summary>
    public NumericSensorEntity Dining1Energy => new(_haContext, "sensor.dining_1_energy");
    ///<summary>dining 1 power</summary>
    public NumericSensorEntity Dining1Power => new(_haContext, "sensor.dining_1_power");
    ///<summary>dining 2 energy</summary>
    public NumericSensorEntity Dining2Energy => new(_haContext, "sensor.dining_2_energy");
    ///<summary>dining 2 power</summary>
    public NumericSensorEntity Dining2Power => new(_haContext, "sensor.dining_2_power");
    ///<summary>dining 3 energy</summary>
    public NumericSensorEntity Dining3Energy => new(_haContext, "sensor.dining_3_energy");
    ///<summary>dining 3 power</summary>
    public NumericSensorEntity Dining3Power => new(_haContext, "sensor.dining_3_power");
    ///<summary>dining 4 energy</summary>
    public NumericSensorEntity Dining4Energy => new(_haContext, "sensor.dining_4_energy");
    ///<summary>dining 4 power</summary>
    public NumericSensorEntity Dining4Power => new(_haContext, "sensor.dining_4_power");
    ///<summary>dining 5 energy</summary>
    public NumericSensorEntity Dining5Energy => new(_haContext, "sensor.dining_5_energy");
    ///<summary>dining 5 power</summary>
    public NumericSensorEntity Dining5Power => new(_haContext, "sensor.dining_5_power");
    ///<summary>Dining Lux</summary>
    public NumericSensorEntity DiningLux => new(_haContext, "sensor.dining_lux");
    ///<summary>Dining Motion Battery</summary>
    public NumericSensorEntity DiningMotionBattery => new(_haContext, "sensor.dining_motion_battery");
    ///<summary>dining wall 1 energy</summary>
    public NumericSensorEntity DiningWall1Energy => new(_haContext, "sensor.dining_wall_1_energy");
    ///<summary>dining wall 1 power</summary>
    public NumericSensorEntity DiningWall1Power => new(_haContext, "sensor.dining_wall_1_power");
    ///<summary>dining wall 2 energy</summary>
    public NumericSensorEntity DiningWall2Energy => new(_haContext, "sensor.dining_wall_2_energy");
    ///<summary>dining wall 2 power</summary>
    public NumericSensorEntity DiningWall2Power => new(_haContext, "sensor.dining_wall_2_power");
    ///<summary>Dishwasher Duration</summary>
    public NumericSensorEntity DishwasherDuration => new(_haContext, "sensor.dishwasher_duration");
    ///<summary>Dishwasher Power</summary>
    public NumericSensorEntity DishwasherPower => new(_haContext, "sensor.dishwasher_power");
    ///<summary>Dishwasher Power Total</summary>
    public NumericSensorEntity DishwasherPowerTotal => new(_haContext, "sensor.dishwasher_power_total");
    ///<summary>Dishwasher Power Utility Meter</summary>
    public NumericSensorEntity DishwasherPowerUtilityMeter => new(_haContext, "sensor.dishwasher_power_utility_meter");
    ///<summary>Dishwasher Program progress</summary>
    public NumericSensorEntity DishwasherProgramProgress => new(_haContext, "sensor.dishwasher_program_progress");
    ///<summary>Downstairs Wireless</summary>
    public NumericSensorEntity DownstairsWireless => new(_haContext, "sensor.downstairs_wireless");
    ///<summary>drive_meter</summary>
    public NumericSensorEntity DriveMeter => new(_haContext, "sensor.drive_meter");
    ///<summary>Drive Temp</summary>
    public NumericSensorEntity DriveTemp => new(_haContext, "sensor.drive_temp");
    ///<summary>Dryer Energy</summary>
    public NumericSensorEntity DryerEnergy => new(_haContext, "sensor.dryer_energy");
    ///<summary>Dryer Power</summary>
    public NumericSensorEntity DryerPower => new(_haContext, "sensor.dryer_power");
    ///<summary>DCC Sourced smart electricity meter Usage (today)</summary>
    public NumericSensorEntity ElectricConsumptionToday => new(_haContext, "sensor.electric_consumption_today");
    ///<summary>DCC Sourced smart electricity meter Cost (today)</summary>
    public NumericSensorEntity ElectricCostToday => new(_haContext, "sensor.electric_cost_today");
    ///<summary>DCC Sourced smart electricity meter Rate</summary>
    public NumericSensorEntity ElectricTariffRate => new(_haContext, "sensor.electric_tariff_rate");
    ///<summary>DCC Sourced smart electricity meter Standing charge</summary>
    public NumericSensorEntity ElectricTariffStanding => new(_haContext, "sensor.electric_tariff_standing");
    ///<summary>Entrance energy</summary>
    public NumericSensorEntity EntranceEnergy => new(_haContext, "sensor.entrance_energy");
    ///<summary>Entrance Lux</summary>
    public NumericSensorEntity EntranceLux => new(_haContext, "sensor.entrance_lux");
    ///<summary>Entrance Motion Battery</summary>
    public NumericSensorEntity EntranceMotionBattery => new(_haContext, "sensor.entrance_motion_battery");
    ///<summary>Entrance power</summary>
    public NumericSensorEntity EntrancePower => new(_haContext, "sensor.entrance_power");
    ///<summary>ENVY 6000 Black Ink Counterfeit Refilled</summary>
    public NumericSensorEntity Envy6000BlackInkCounterfeitRefilled => new(_haContext, "sensor.envy_6000_black_ink_counterfeit_refilled");
    ///<summary>ENVY 6000 Black Ink Genuine Refilled</summary>
    public NumericSensorEntity Envy6000BlackInkGenuineRefilled => new(_haContext, "sensor.envy_6000_black_ink_genuine_refilled");
    ///<summary>ENVY 6000 Black Ink Level</summary>
    public NumericSensorEntity Envy6000BlackInkLevel => new(_haContext, "sensor.envy_6000_black_ink_level");
    ///<summary>ENVY 6000 Colour Ink Counterfeit Refilled</summary>
    public NumericSensorEntity Envy6000ColourInkCounterfeitRefilled => new(_haContext, "sensor.envy_6000_colour_ink_counterfeit_refilled");
    ///<summary>ENVY 6000 Colour Ink Genuine Refilled</summary>
    public NumericSensorEntity Envy6000ColourInkGenuineRefilled => new(_haContext, "sensor.envy_6000_colour_ink_genuine_refilled");
    ///<summary>ENVY 6000 Colour Ink Level</summary>
    public NumericSensorEntity Envy6000ColourInkLevel => new(_haContext, "sensor.envy_6000_colour_ink_level");
    ///<summary>ENVY 6000 Copy Total black-and-white pages</summary>
    public NumericSensorEntity Envy6000CopyTotalBlackAndWhitePages => new(_haContext, "sensor.envy_6000_copy_total_black_and_white_pages");
    ///<summary>ENVY 6000 Copy Total color pages</summary>
    public NumericSensorEntity Envy6000CopyTotalColorPages => new(_haContext, "sensor.envy_6000_copy_total_color_pages");
    ///<summary>ENVY 6000 Copy Total pages</summary>
    public NumericSensorEntity Envy6000CopyTotalPages => new(_haContext, "sensor.envy_6000_copy_total_pages");
    ///<summary>ENVY 6000 Copy Total pages from ADF</summary>
    public NumericSensorEntity Envy6000CopyTotalPagesFromAdf => new(_haContext, "sensor.envy_6000_copy_total_pages_from_adf");
    ///<summary>ENVY 6000 Copy Total pages from scanner glass</summary>
    public NumericSensorEntity Envy6000CopyTotalPagesFromScannerGlass => new(_haContext, "sensor.envy_6000_copy_total_pages_from_scanner_glass");
    ///<summary>ENVY 6000 Printer Total black-and-white pages</summary>
    public NumericSensorEntity Envy6000PrinterTotalBlackAndWhitePages => new(_haContext, "sensor.envy_6000_printer_total_black_and_white_pages");
    ///<summary>ENVY 6000 Printer Total color pages</summary>
    public NumericSensorEntity Envy6000PrinterTotalColorPages => new(_haContext, "sensor.envy_6000_printer_total_color_pages");
    ///<summary>ENVY 6000 Printer Total double-sided pages</summary>
    public NumericSensorEntity Envy6000PrinterTotalDoubleSidedPages => new(_haContext, "sensor.envy_6000_printer_total_double_sided_pages");
    ///<summary>ENVY 6000 Printer Total jams</summary>
    public NumericSensorEntity Envy6000PrinterTotalJams => new(_haContext, "sensor.envy_6000_printer_total_jams");
    ///<summary>ENVY 6000 Printer Total miss picks</summary>
    public NumericSensorEntity Envy6000PrinterTotalMissPicks => new(_haContext, "sensor.envy_6000_printer_total_miss_picks");
    ///<summary>ENVY 6000 Printer Total pages</summary>
    public NumericSensorEntity Envy6000PrinterTotalPages => new(_haContext, "sensor.envy_6000_printer_total_pages");
    ///<summary>ENVY 6000 Printer Total single-sided pages</summary>
    public NumericSensorEntity Envy6000PrinterTotalSingleSidedPages => new(_haContext, "sensor.envy_6000_printer_total_single_sided_pages");
    ///<summary>ENVY 6000 Scanner Total pages</summary>
    public NumericSensorEntity Envy6000ScannerTotalPages => new(_haContext, "sensor.envy_6000_scanner_total_pages");
    ///<summary>ENVY 6000 Scanner Total pages from scanner glass</summary>
    public NumericSensorEntity Envy6000ScannerTotalPagesFromScannerGlass => new(_haContext, "sensor.envy_6000_scanner_total_pages_from_scanner_glass");
    ///<summary>EPSON ET-4800 Series Black ink</summary>
    public NumericSensorEntity EpsonEt4800SeriesBlackInk => new(_haContext, "sensor.epson_et_4800_series_black_ink");
    ///<summary>EPSON ET-4800 Series Cyan ink</summary>
    public NumericSensorEntity EpsonEt4800SeriesCyanInk => new(_haContext, "sensor.epson_et_4800_series_cyan_ink");
    ///<summary>EPSON ET-4800 Series Magenta ink</summary>
    public NumericSensorEntity EpsonEt4800SeriesMagentaInk => new(_haContext, "sensor.epson_et_4800_series_magenta_ink");
    ///<summary>EPSON ET-4800 Series Yellow ink</summary>
    public NumericSensorEntity EpsonEt4800SeriesYellowInk => new(_haContext, "sensor.epson_et_4800_series_yellow_ink");
    ///<summary>RX</summary>
    public NumericSensorEntity EufyRobovacRx => new(_haContext, "sensor.eufy_robovac_rx");
    ///<summary>RX</summary>
    public NumericSensorEntity EufyRobovacRx2 => new(_haContext, "sensor.eufy_robovac_rx_2");
    ///<summary>TX</summary>
    public NumericSensorEntity EufyRobovacTx => new(_haContext, "sensor.eufy_robovac_tx");
    ///<summary>TX</summary>
    public NumericSensorEntity EufyRobovacTx2 => new(_haContext, "sensor.eufy_robovac_tx_2");
    ///<summary>Eugene&apos;s iPhone Average Active Pace</summary>
    public NumericSensorEntity EugeneSIphoneAverageActivePace => new(_haContext, "sensor.eugene_s_iphone_average_active_pace");
    ///<summary>Eugene&apos;s iPhone Battery Level</summary>
    public NumericSensorEntity EugeneSIphoneBatteryLevel => new(_haContext, "sensor.eugene_s_iphone_battery_level");
    ///<summary>Eugene&apos;s iPhone Distance</summary>
    public NumericSensorEntity EugeneSIphoneDistance => new(_haContext, "sensor.eugene_s_iphone_distance");
    ///<summary>Eugene&apos;s iPhone Floors Ascended</summary>
    public NumericSensorEntity EugeneSIphoneFloorsAscended => new(_haContext, "sensor.eugene_s_iphone_floors_ascended");
    ///<summary>Eugene&apos;s iPhone Floors Descended</summary>
    public NumericSensorEntity EugeneSIphoneFloorsDescended => new(_haContext, "sensor.eugene_s_iphone_floors_descended");
    ///<summary>Eugene&apos;s iPhone Steps</summary>
    public NumericSensorEntity EugeneSIphoneSteps => new(_haContext, "sensor.eugene_s_iphone_steps");
    ///<summary>Eugene&apos;s iPhone Storage</summary>
    public NumericSensorEntity EugeneSIphoneStorage => new(_haContext, "sensor.eugene_s_iphone_storage");
    ///<summary>Eugenes-iPhone RX</summary>
    public NumericSensorEntity EugenesIphoneRx => new(_haContext, "sensor.eugenes_iphone_rx");
    ///<summary>Eugenes-iPhone TX</summary>
    public NumericSensorEntity EugenesIphoneTx => new(_haContext, "sensor.eugenes_iphone_tx");
    ///<summary>Eugene’s iPhone Watch Battery</summary>
    public NumericSensorEntity EugenesIphoneWatchBattery => new(_haContext, "sensor.eugenes_iphone_watch_battery");
    ///<summary>Eugene&apos;s MacBook Internal Battery Level</summary>
    public NumericSensorEntity EugenesMacbookInternalBatteryLevel => new(_haContext, "sensor.eugenes_macbook_internal_battery_level");
    ///<summary>Eugene&apos;s MacBook Storage</summary>
    public NumericSensorEntity EugenesMacbookStorage => new(_haContext, "sensor.eugenes_macbook_storage");
    ///<summary>EugenespleWatch RX</summary>
    public NumericSensorEntity EugenesplewatchRx => new(_haContext, "sensor.eugenesplewatch_rx");
    ///<summary>EugenespleWatch TX</summary>
    public NumericSensorEntity EugenesplewatchTx => new(_haContext, "sensor.eugenesplewatch_tx");
    ///<summary>Fish Lights Switch Device Power</summary>
    public NumericSensorEntity FishLightsSwitchDevicePower => new(_haContext, "sensor.fish_lights_switch_device_power");
    ///<summary>Floor energy</summary>
    public NumericSensorEntity FloorEnergy => new(_haContext, "sensor.floor_energy");
    ///<summary>floor_light-2086 RX</summary>
    public NumericSensorEntity FloorLight2086Rx => new(_haContext, "sensor.floor_light_2086_rx");
    ///<summary>floor_light-2086 TX</summary>
    public NumericSensorEntity FloorLight2086Tx => new(_haContext, "sensor.floor_light_2086_tx");
    ///<summary>Floor power</summary>
    public NumericSensorEntity FloorPower => new(_haContext, "sensor.floor_power");
    ///<summary>G3061WM904 Internal Battery Level</summary>
    public NumericSensorEntity G3061wm904InternalBatteryLevel => new(_haContext, "sensor.g3061wm904_internal_battery_level");
    ///<summary>G3061WM904 Storage</summary>
    public NumericSensorEntity G3061wm904Storage => new(_haContext, "sensor.g3061wm904_storage");
    ///<summary>Gabriel Available Balance</summary>
    public NumericSensorEntity GabrielAvailableBalance => new(_haContext, "sensor.gabriel_available_balance");
    ///<summary>Gabriel Used Screen Time</summary>
    public NumericSensorEntity GabrielUsedScreenTime => new(_haContext, "sensor.gabriel_used_screen_time");
    ///<summary>Garage energy</summary>
    public NumericSensorEntity GarageEnergy => new(_haContext, "sensor.garage_energy");
    ///<summary>Garage power</summary>
    public NumericSensorEntity GaragePower => new(_haContext, "sensor.garage_power");
    ///<summary>Garden Battery</summary>
    public NumericSensorEntity GardenBattery2 => new(_haContext, "sensor.garden_battery_2");
    ///<summary>Garden energy</summary>
    public NumericSensorEntity GardenEnergy => new(_haContext, "sensor.garden_energy");
    ///<summary>Garden power</summary>
    public NumericSensorEntity GardenPower => new(_haContext, "sensor.garden_power");
    ///<summary>Wireless</summary>
    public NumericSensorEntity GardenWireless => new(_haContext, "sensor.garden_wireless");
    ///<summary>DCC Sourced smart gas meter Usage (today)</summary>
    public NumericSensorEntity GasConsumptionToday => new(_haContext, "sensor.gas_consumption_today");
    ///<summary>DCC Sourced smart gas meter Cost (today)</summary>
    public NumericSensorEntity GasCostToday => new(_haContext, "sensor.gas_cost_today");
    ///<summary>DCC Sourced smart gas meter Rate</summary>
    public NumericSensorEntity GasTariffRate => new(_haContext, "sensor.gas_tariff_rate");
    ///<summary>DCC Sourced smart gas meter Standing charge</summary>
    public NumericSensorEntity GasTariffStanding => new(_haContext, "sensor.gas_tariff_standing");
    ///<summary>H Work Mac Internal Battery Level</summary>
    public NumericSensorEntity HWorkMacInternalBatteryLevel => new(_haContext, "sensor.h_work_mac_internal_battery_level");
    ///<summary>H Work Mac Storage</summary>
    public NumericSensorEntity HWorkMacStorage => new(_haContext, "sensor.h_work_mac_storage");
    ///<summary>Hailey&apos;s iPhone (2) Watch Battery</summary>
    public NumericSensorEntity HaileySIphone2WatchBattery => new(_haContext, "sensor.hailey_s_iphone_2_watch_battery");
    ///<summary>Hailey&apos;s iPhone Average Active Pace</summary>
    public NumericSensorEntity HaileySIphoneAverageActivePace => new(_haContext, "sensor.hailey_s_iphone_average_active_pace");
    ///<summary>Hailey&apos;s iPhone Battery Level</summary>
    public NumericSensorEntity HaileySIphoneBatteryLevel => new(_haContext, "sensor.hailey_s_iphone_battery_level");
    ///<summary>Hailey&apos;s iPhone Distance</summary>
    public NumericSensorEntity HaileySIphoneDistance => new(_haContext, "sensor.hailey_s_iphone_distance");
    ///<summary>Hailey&apos;s iPhone Floors Ascended</summary>
    public NumericSensorEntity HaileySIphoneFloorsAscended => new(_haContext, "sensor.hailey_s_iphone_floors_ascended");
    ///<summary>Hailey&apos;s iPhone Floors Descended</summary>
    public NumericSensorEntity HaileySIphoneFloorsDescended => new(_haContext, "sensor.hailey_s_iphone_floors_descended");
    ///<summary>Hailey&apos;s iPhone Steps</summary>
    public NumericSensorEntity HaileySIphoneSteps => new(_haContext, "sensor.hailey_s_iphone_steps");
    ///<summary>Hailey&apos;s iPhone Storage</summary>
    public NumericSensorEntity HaileySIphoneStorage => new(_haContext, "sensor.hailey_s_iphone_storage");
    ///<summary>Haileys-iPhone RX</summary>
    public NumericSensorEntity HaileysIphoneRx => new(_haContext, "sensor.haileys_iphone_rx");
    ///<summary>Haileys-iPhone TX</summary>
    public NumericSensorEntity HaileysIphoneTx => new(_haContext, "sensor.haileys_iphone_tx");
    ///<summary>Hailey’s MacBook Air Internal Battery Level</summary>
    public NumericSensorEntity HaileysMacbookAirInternalBatteryLevel => new(_haContext, "sensor.haileys_macbook_air_internal_battery_level");
    ///<summary>Hailey’s MacBook Air Storage</summary>
    public NumericSensorEntity HaileysMacbookAirStorage => new(_haContext, "sensor.haileys_macbook_air_storage");
    ///<summary>Hallway energy</summary>
    public NumericSensorEntity HallwayEnergy => new(_haContext, "sensor.hallway_energy");
    ///<summary>Hallway power</summary>
    public NumericSensorEntity HallwayPower => new(_haContext, "sensor.hallway_power");
    ///<summary>Home Aubrecia Distance</summary>
    public NumericSensorEntity HomeAubreciaDistance => new(_haContext, "sensor.home_aubrecia_distance");
    ///<summary>Home Eugene Distance</summary>
    public NumericSensorEntity HomeEugeneDistance => new(_haContext, "sensor.home_eugene_distance");
    ///<summary>Home Hailey Distance</summary>
    public NumericSensorEntity HomeHaileyDistance => new(_haContext, "sensor.home_hailey_distance");
    ///<summary>Home Nearest distance</summary>
    public NumericSensorEntity HomeNearestDistance => new(_haContext, "sensor.home_nearest_distance");
    ///<summary>Hot Tub Bubbles energy</summary>
    public NumericSensorEntity HotTubBubblesEnergy => new(_haContext, "sensor.hot_tub_bubbles_energy");
    ///<summary>Hot Tub Bubbles energy daily</summary>
    public NumericSensorEntity HotTubBubblesEnergyDaily => new(_haContext, "sensor.hot_tub_bubbles_energy_daily");
    ///<summary>Hot Tub Bubbles energy monthly</summary>
    public NumericSensorEntity HotTubBubblesEnergyMonthly => new(_haContext, "sensor.hot_tub_bubbles_energy_monthly");
    ///<summary>Hot Tub Bubbles energy weekly</summary>
    public NumericSensorEntity HotTubBubblesEnergyWeekly => new(_haContext, "sensor.hot_tub_bubbles_energy_weekly");
    ///<summary>Hot Tub Bubbles power</summary>
    public NumericSensorEntity HotTubBubblesPower => new(_haContext, "sensor.hot_tub_bubbles_power");
    ///<summary>Hot Tub energy</summary>
    public NumericSensorEntity HotTubEnergy => new(_haContext, "sensor.hot_tub_energy");
    ///<summary>Hot Tub energy daily</summary>
    public NumericSensorEntity HotTubEnergyDaily => new(_haContext, "sensor.hot_tub_energy_daily");
    ///<summary>Hot Tub energy monthly</summary>
    public NumericSensorEntity HotTubEnergyMonthly => new(_haContext, "sensor.hot_tub_energy_monthly");
    ///<summary>Hot Tub energy weekly</summary>
    public NumericSensorEntity HotTubEnergyWeekly => new(_haContext, "sensor.hot_tub_energy_weekly");
    ///<summary>Hot Tub Heater energy</summary>
    public NumericSensorEntity HotTubHeaterEnergy => new(_haContext, "sensor.hot_tub_heater_energy");
    ///<summary>Hot Tub Heater energy daily</summary>
    public NumericSensorEntity HotTubHeaterEnergyDaily => new(_haContext, "sensor.hot_tub_heater_energy_daily");
    ///<summary>Hot Tub Heater energy monthly</summary>
    public NumericSensorEntity HotTubHeaterEnergyMonthly => new(_haContext, "sensor.hot_tub_heater_energy_monthly");
    ///<summary>Hot Tub Heater energy weekly</summary>
    public NumericSensorEntity HotTubHeaterEnergyWeekly => new(_haContext, "sensor.hot_tub_heater_energy_weekly");
    ///<summary>Hot Tub Heater power</summary>
    public NumericSensorEntity HotTubHeaterPower => new(_haContext, "sensor.hot_tub_heater_power");
    ///<summary>Hot Tub power</summary>
    public NumericSensorEntity HotTubPower => new(_haContext, "sensor.hot_tub_power");
    ///<summary>Hot Tub Pump energy</summary>
    public NumericSensorEntity HotTubPumpEnergy => new(_haContext, "sensor.hot_tub_pump_energy");
    ///<summary>Hot Tub Pump energy daily</summary>
    public NumericSensorEntity HotTubPumpEnergyDaily => new(_haContext, "sensor.hot_tub_pump_energy_daily");
    ///<summary>Hot Tub Pump energy monthly</summary>
    public NumericSensorEntity HotTubPumpEnergyMonthly => new(_haContext, "sensor.hot_tub_pump_energy_monthly");
    ///<summary>Hot Tub Pump energy weekly</summary>
    public NumericSensorEntity HotTubPumpEnergyWeekly => new(_haContext, "sensor.hot_tub_pump_energy_weekly");
    ///<summary>Hot Tub Pump power</summary>
    public NumericSensorEntity HotTubPumpPower => new(_haContext, "sensor.hot_tub_pump_power");
    ///<summary>RX</summary>
    public NumericSensorEntity HottubcontrolRx => new(_haContext, "sensor.hottubcontrol_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity HottubcontrolTx => new(_haContext, "sensor.hottubcontrol_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity HuaweiPSmart201986203Rx => new(_haContext, "sensor.huawei_p_smart_2019_86203_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity HuaweiPSmart201986203Tx => new(_haContext, "sensor.huawei_p_smart_2019_86203_tx");
    ///<summary>IKEA of Sweden TRADFRI remote control Battery</summary>
    public NumericSensorEntity IkeaOfSwedenTradfriRemoteControl580e51fePower => new(_haContext, "sensor.ikea_of_sweden_tradfri_remote_control_580e51fe_power");
    ///<summary>IKEA of Sweden TRADFRI remote control Battery</summary>
    public NumericSensorEntity IkeaOfSwedenTradfriRemoteControlD73648fePower => new(_haContext, "sensor.ikea_of_sweden_tradfri_remote_control_d73648fe_power");
    ///<summary>Indoor 2 Battery</summary>
    public NumericSensorEntity Indoor2Battery => new(_haContext, "sensor.indoor_2_battery");
    ///<summary>Indoor 2 Wireless</summary>
    public NumericSensorEntity Indoor2Wireless => new(_haContext, "sensor.indoor_2_wireless");
    ///<summary>RX</summary>
    public NumericSensorEntity IphoneRx => new(_haContext, "sensor.iphone_rx");
    ///<summary>RX</summary>
    public NumericSensorEntity IphoneRx3 => new(_haContext, "sensor.iphone_rx_3");
    ///<summary>TX</summary>
    public NumericSensorEntity IphoneTx => new(_haContext, "sensor.iphone_tx");
    ///<summary>TX</summary>
    public NumericSensorEntity IphoneTx3 => new(_haContext, "sensor.iphone_tx_3");
    ///<summary>Jayden 1 energy</summary>
    public NumericSensorEntity Jayden1Energy => new(_haContext, "sensor.jayden_1_energy");
    ///<summary>Jayden 1 energy</summary>
    public NumericSensorEntity Jayden1Energy2 => new(_haContext, "sensor.jayden_1_energy_2");
    ///<summary>Jayden 1 power</summary>
    public NumericSensorEntity Jayden1Power => new(_haContext, "sensor.jayden_1_power");
    ///<summary>Jayden 1 power</summary>
    public NumericSensorEntity Jayden1Power2 => new(_haContext, "sensor.jayden_1_power_2");
    ///<summary>Jayden 2 energy</summary>
    public NumericSensorEntity Jayden2Energy => new(_haContext, "sensor.jayden_2_energy");
    ///<summary>Jayden 2 energy</summary>
    public NumericSensorEntity Jayden2Energy2 => new(_haContext, "sensor.jayden_2_energy_2");
    ///<summary>Jayden 2 power</summary>
    public NumericSensorEntity Jayden2Power => new(_haContext, "sensor.jayden_2_power");
    ///<summary>Jayden 2 power</summary>
    public NumericSensorEntity Jayden2Power2 => new(_haContext, "sensor.jayden_2_power_2");
    ///<summary>Jayden 3 energy</summary>
    public NumericSensorEntity Jayden3Energy => new(_haContext, "sensor.jayden_3_energy");
    ///<summary>Jayden 3 energy</summary>
    public NumericSensorEntity Jayden3Energy2 => new(_haContext, "sensor.jayden_3_energy_2");
    ///<summary>Jayden 3 power</summary>
    public NumericSensorEntity Jayden3Power => new(_haContext, "sensor.jayden_3_power");
    ///<summary>Jayden 3 power</summary>
    public NumericSensorEntity Jayden3Power2 => new(_haContext, "sensor.jayden_3_power_2");
    ///<summary>Jayden 4 energy</summary>
    public NumericSensorEntity Jayden4Energy => new(_haContext, "sensor.jayden_4_energy");
    ///<summary>Jayden 4 energy</summary>
    public NumericSensorEntity Jayden4Energy2 => new(_haContext, "sensor.jayden_4_energy_2");
    ///<summary>Jayden 4 power</summary>
    public NumericSensorEntity Jayden4Power => new(_haContext, "sensor.jayden_4_power");
    ///<summary>Jayden 4 power</summary>
    public NumericSensorEntity Jayden4Power2 => new(_haContext, "sensor.jayden_4_power_2");
    ///<summary>Jayden Available Balance</summary>
    public NumericSensorEntity JaydenAvailableBalance => new(_haContext, "sensor.jayden_available_balance");
    ///<summary>jayden_bedside-4734 RX</summary>
    public NumericSensorEntity JaydenBedside4734Rx => new(_haContext, "sensor.jayden_bedside_4734_rx");
    ///<summary>jayden_bedside-4734 TX</summary>
    public NumericSensorEntity JaydenBedside4734Tx => new(_haContext, "sensor.jayden_bedside_4734_tx");
    ///<summary>Jayden energy</summary>
    public NumericSensorEntity JaydenEnergy => new(_haContext, "sensor.jayden_energy");
    ///<summary>Jayden Lux</summary>
    public NumericSensorEntity JaydenLux => new(_haContext, "sensor.jayden_lux");
    ///<summary>Jayden Motion Battery</summary>
    public NumericSensorEntity JaydenMotionBattery => new(_haContext, "sensor.jayden_motion_battery");
    ///<summary>Jayden power</summary>
    public NumericSensorEntity JaydenPower => new(_haContext, "sensor.jayden_power");
    ///<summary>Jayden ’s iPad Battery Level</summary>
    public NumericSensorEntity JaydenSIpadBatteryLevel => new(_haContext, "sensor.jayden_s_ipad_battery_level");
    ///<summary>Jayden ’s iPad Storage</summary>
    public NumericSensorEntity JaydenSIpadStorage => new(_haContext, "sensor.jayden_s_ipad_storage");
    ///<summary>Jayden ’s iPhone Average Active Pace</summary>
    public NumericSensorEntity JaydenSIphoneAverageActivePace => new(_haContext, "sensor.jayden_s_iphone_average_active_pace");
    ///<summary>Jayden ’s iPhone Battery Level</summary>
    public NumericSensorEntity JaydenSIphoneBatteryLevel => new(_haContext, "sensor.jayden_s_iphone_battery_level");
    ///<summary>Jayden ’s iPhone Distance</summary>
    public NumericSensorEntity JaydenSIphoneDistance => new(_haContext, "sensor.jayden_s_iphone_distance");
    ///<summary>Jayden ’s iPhone Floors Ascended</summary>
    public NumericSensorEntity JaydenSIphoneFloorsAscended => new(_haContext, "sensor.jayden_s_iphone_floors_ascended");
    ///<summary>Jayden ’s iPhone Floors Descended</summary>
    public NumericSensorEntity JaydenSIphoneFloorsDescended => new(_haContext, "sensor.jayden_s_iphone_floors_descended");
    ///<summary>RX</summary>
    public NumericSensorEntity JaydenSIphoneRx2 => new(_haContext, "sensor.jayden_s_iphone_rx_2");
    ///<summary>Jayden ’s iPhone Steps</summary>
    public NumericSensorEntity JaydenSIphoneSteps => new(_haContext, "sensor.jayden_s_iphone_steps");
    ///<summary>Jayden ’s iPhone Storage</summary>
    public NumericSensorEntity JaydenSIphoneStorage => new(_haContext, "sensor.jayden_s_iphone_storage");
    ///<summary>TX</summary>
    public NumericSensorEntity JaydenSIphoneTx2 => new(_haContext, "sensor.jayden_s_iphone_tx_2");
    ///<summary>Jayden ’s iPhone Watch Battery Level</summary>
    public NumericSensorEntity JaydenSIphoneWatchBatteryLevel => new(_haContext, "sensor.jayden_s_iphone_watch_battery_level");
    ///<summary>Jayden Used Screen Time</summary>
    public NumericSensorEntity JaydenUsedScreenTime => new(_haContext, "sensor.jayden_used_screen_time");
    ///<summary>Johan Front Door Battery</summary>
    public NumericSensorEntity JohanFrontDoorBattery => new(_haContext, "sensor.johan_front_door_battery");
    ///<summary>Wireless</summary>
    public NumericSensorEntity JohanFrontDoorWireless => new(_haContext, "sensor.johan_front_door_wireless");
    ///<summary>IKEA of Sweden TRADFRI open/close remote Battery</summary>
    public NumericSensorEntity KeTradfriOpenCloseRemote3dcb2efePower => new(_haContext, "sensor.ke_tradfri_open_close_remote_3dcb2efe_power");
    ///<summary>kitchen 1 energy</summary>
    public NumericSensorEntity Kitchen1Energy => new(_haContext, "sensor.kitchen_1_energy");
    ///<summary>kitchen 1 power</summary>
    public NumericSensorEntity Kitchen1Power => new(_haContext, "sensor.kitchen_1_power");
    ///<summary>kitchen 2 energy</summary>
    public NumericSensorEntity Kitchen2Energy => new(_haContext, "sensor.kitchen_2_energy");
    ///<summary>kitchen 2 power</summary>
    public NumericSensorEntity Kitchen2Power => new(_haContext, "sensor.kitchen_2_power");
    ///<summary>kitchen 3 energy</summary>
    public NumericSensorEntity Kitchen3Energy => new(_haContext, "sensor.kitchen_3_energy");
    ///<summary>kitchen 3 power</summary>
    public NumericSensorEntity Kitchen3Power => new(_haContext, "sensor.kitchen_3_power");
    ///<summary>kitchen 4 energy</summary>
    public NumericSensorEntity Kitchen4Energy => new(_haContext, "sensor.kitchen_4_energy");
    ///<summary>kitchen 4 power</summary>
    public NumericSensorEntity Kitchen4Power => new(_haContext, "sensor.kitchen_4_power");
    ///<summary>kitchen 5 energy</summary>
    public NumericSensorEntity Kitchen5Energy => new(_haContext, "sensor.kitchen_5_energy");
    ///<summary>kitchen 5 power</summary>
    public NumericSensorEntity Kitchen5Power => new(_haContext, "sensor.kitchen_5_power");
    ///<summary>kitchen 6 energy</summary>
    public NumericSensorEntity Kitchen6Energy => new(_haContext, "sensor.kitchen_6_energy");
    ///<summary>kitchen 6 power</summary>
    public NumericSensorEntity Kitchen6Power => new(_haContext, "sensor.kitchen_6_power");
    ///<summary>Kitchen CPU utilization</summary>
    public NumericSensorEntity KitchenCpuUtilization => new(_haContext, "sensor.kitchen_cpu_utilization");
    ///<summary>Kitchen energy</summary>
    public NumericSensorEntity KitchenEnergy => new(_haContext, "sensor.kitchen_energy");
    ///<summary>Kitchen Lux</summary>
    public NumericSensorEntity KitchenLux => new(_haContext, "sensor.kitchen_lux");
    ///<summary>Kitchen Memory utilization</summary>
    public NumericSensorEntity KitchenMemoryUtilization => new(_haContext, "sensor.kitchen_memory_utilization");
    ///<summary>Kitchen Motion Battery</summary>
    public NumericSensorEntity KitchenMotionBattery => new(_haContext, "sensor.kitchen_motion_battery");
    ///<summary>Kitchen power</summary>
    public NumericSensorEntity KitchenPower => new(_haContext, "sensor.kitchen_power");
    ///<summary>landing 1 energy</summary>
    public NumericSensorEntity Landing1Energy => new(_haContext, "sensor.landing_1_energy");
    ///<summary>landing 1 power</summary>
    public NumericSensorEntity Landing1Power => new(_haContext, "sensor.landing_1_power");
    ///<summary>landing blind power</summary>
    public NumericSensorEntity LandingBlindPower => new(_haContext, "sensor.landing_blind_power");
    ///<summary>landing motion illuminance</summary>
    public NumericSensorEntity LandingLux => new(_haContext, "sensor.landing_lux");
    ///<summary>landing motion power</summary>
    public NumericSensorEntity LandingMotionBattery => new(_haContext, "sensor.landing_motion_battery");
    ///<summary>landing night power</summary>
    public NumericSensorEntity LandingNightPower => new(_haContext, "sensor.landing_night_power");
    ///<summary>RX</summary>
    public NumericSensorEntity LaptopD5uft2ciRx => new(_haContext, "sensor.laptop_d5uft2ci_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity LaptopD5uft2ciTx => new(_haContext, "sensor.laptop_d5uft2ci_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity LaptopL5nso67jRx => new(_haContext, "sensor.laptop_l5nso67j_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity LaptopL5nso67jTx => new(_haContext, "sensor.laptop_l5nso67j_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity LivingRoomRx => new(_haContext, "sensor.living_room_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity LivingRoomTx => new(_haContext, "sensor.living_room_tx");
    ///<summary>lounge back level, light_color, on_off power</summary>
    public NumericSensorEntity LoungeBackLevelLightColorOnOffPower => new(_haContext, "sensor.lounge_back_level_light_color_on_off_power");
    ///<summary>Lounge CPU utilization</summary>
    public NumericSensorEntity LoungeCpuUtilization => new(_haContext, "sensor.lounge_cpu_utilization");
    ///<summary>Lounge Daily Energy Consumed</summary>
    public NumericSensorEntity LoungeDailyEnergyConsumed => new(_haContext, "sensor.lounge_daily_energy_consumed");
    ///<summary>Lounge Energy</summary>
    public NumericSensorEntity LoungeEnergy => new(_haContext, "sensor.lounge_energy");
    ///<summary>lounge front level, light_color, on_off power</summary>
    public NumericSensorEntity LoungeFrontLevelLightColorOnOffPower => new(_haContext, "sensor.lounge_front_level_light_color_on_off_power");
    ///<summary>Lounge Lux</summary>
    public NumericSensorEntity LoungeLux => new(_haContext, "sensor.lounge_lux");
    ///<summary>Lounge Memory utilization</summary>
    public NumericSensorEntity LoungeMemoryUtilization => new(_haContext, "sensor.lounge_memory_utilization");
    ///<summary>Lounge Motion Battery</summary>
    public NumericSensorEntity LoungeMotionBattery => new(_haContext, "sensor.lounge_motion_battery");
    ///<summary>Lounge Room temperature</summary>
    public NumericSensorEntity LoungeRoomTemperature => new(_haContext, "sensor.lounge_room_temperature");
    ///<summary>Lounge Soundbar energy</summary>
    public NumericSensorEntity LoungeSoundbarEnergy => new(_haContext, "sensor.lounge_soundbar_energy");
    ///<summary>Lounge Soundbar power</summary>
    public NumericSensorEntity LoungeSoundbarPower => new(_haContext, "sensor.lounge_soundbar_power");
    ///<summary>lounge_tv_socket_current</summary>
    public NumericSensorEntity LoungeTvSocketCurrent => new(_haContext, "sensor.lounge_tv_socket_current");
    ///<summary>lounge_tv_socket_current_consumption</summary>
    public NumericSensorEntity LoungeTvSocketCurrentConsumption => new(_haContext, "sensor.lounge_tv_socket_current_consumption");
    ///<summary>Lounge TV Socket Energy</summary>
    public NumericSensorEntity LoungeTvSocketEnergy => new(_haContext, "sensor.lounge_tv_socket_energy");
    ///<summary>lounge_tv_socket_voltage</summary>
    public NumericSensorEntity LoungeTvSocketVoltage => new(_haContext, "sensor.lounge_tv_socket_voltage");
    ///<summary>Dining Door Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq238f0ec02DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_38f0ec02_device_temperature");
    ///<summary>Dining Door Battery</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq238f0ec02Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_38f0ec02_power");
    ///<summary>contact fd Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq256141203DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_56141203_device_temperature");
    ///<summary>contact fd Battery</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq256141203Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_56141203_power");
    ///<summary>contact right window Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq283903a03DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_83903a03_device_temperature");
    ///<summary>contact right window Battery</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq283903a03Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_83903a03_power");
    ///<summary>LUMI lumi.sensor_magnet.aq2 8c913a03 power</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq28c913a03Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_8c913a03_power");
    ///<summary>Lounge Door Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq29e0b1203DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_9e0b1203_device_temperature");
    ///<summary>Lounge Door Battery</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq29e0b1203Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_9e0b1203_power");
    ///<summary>Office Door Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq2Ac831303DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_ac831303_device_temperature");
    ///<summary>Garage Door Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq2E6b02103DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_e6b02103_device_temperature");
    ///<summary>Garage Door Battery</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq2E6b02103Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_e6b02103_power");
    ///<summary>Office Door power</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq2Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_power");
    ///<summary>Dining Motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq234796603DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_34796603_device_temperature");
    ///<summary>Aaron motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq23ca2f202DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_3ca2f202_device_temperature");
    ///<summary>Toilet Motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq24123f403DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_4123f403_device_temperature");
    ///<summary>kitchen motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq254c2f302DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_54c2f302_device_temperature");
    ///<summary>master motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2591d1b03DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_591d1b03_device_temperature");
    ///<summary>Jayden motion  Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq25cf75702DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_5cf75702_device_temperature");
    ///<summary>Lounge Motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq27dce1303DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_7dce1303_device_temperature");
    ///<summary>bathroom motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq297a7f202DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_97a7f202_device_temperature");
    ///<summary>utility motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2B4796603DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_b4796603_device_temperature");
    ///<summary>landing motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2C0a6f202DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_c0a6f202_device_temperature");
    ///<summary>playroom motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2Ea1a1404DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_ea1a1404_device_temperature");
    ///<summary>entrance motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2Ef2f1404DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_ef2f1404_device_temperature");
    ///<summary>office motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2F33b1404DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_f33b1404_device_temperature");
    ///<summary>master 1 energy</summary>
    public NumericSensorEntity Master1Energy => new(_haContext, "sensor.master_1_energy");
    ///<summary>master 1 power</summary>
    public NumericSensorEntity Master1Power => new(_haContext, "sensor.master_1_power");
    ///<summary>Master 2 energy</summary>
    public NumericSensorEntity Master2Energy => new(_haContext, "sensor.master_2_energy");
    ///<summary>Master 2 power</summary>
    public NumericSensorEntity Master2Power => new(_haContext, "sensor.master_2_power");
    ///<summary>master 3 energy</summary>
    public NumericSensorEntity Master3Energy => new(_haContext, "sensor.master_3_energy");
    ///<summary>master 3 power</summary>
    public NumericSensorEntity Master3Power => new(_haContext, "sensor.master_3_power");
    ///<summary>master 4 energy</summary>
    public NumericSensorEntity Master4Energy => new(_haContext, "sensor.master_4_energy");
    ///<summary>master 4 power</summary>
    public NumericSensorEntity Master4Power => new(_haContext, "sensor.master_4_power");
    ///<summary>Master Lux</summary>
    public NumericSensorEntity MasterLux => new(_haContext, "sensor.master_lux");
    ///<summary>Master Motion Battery</summary>
    public NumericSensorEntity MasterMotionBattery => new(_haContext, "sensor.master_motion_battery");
    ///<summary>Master Nightlight energy</summary>
    public NumericSensorEntity MasterNightlightEnergy => new(_haContext, "sensor.master_nightlight_energy");
    ///<summary>Master Nightlight power</summary>
    public NumericSensorEntity MasterNightlightPower => new(_haContext, "sensor.master_nightlight_power");
    ///<summary>Mum Home Aubrecia Distance</summary>
    public NumericSensorEntity MumHomeAubreciaDistance => new(_haContext, "sensor.mum_home_aubrecia_distance");
    ///<summary>Mum Home Nearest distance</summary>
    public NumericSensorEntity MumHomeNearestDistance => new(_haContext, "sensor.mum_home_nearest_distance");
    ///<summary>My Wall Panel My Wall Panel Battery Level</summary>
    public NumericSensorEntity MyWallPanelBatteryLevel => new(_haContext, "sensor.my_wall_panel_battery_level");
    ///<summary>My Wall Panel My Wall Panel Light</summary>
    public NumericSensorEntity MyWallPanelLight => new(_haContext, "sensor.my_wall_panel_light");
    ///<summary>Niemand Drive Battery</summary>
    public NumericSensorEntity NiemandDriveBattery => new(_haContext, "sensor.niemand_drive_battery");
    ///<summary>Niemand Drive Wireless</summary>
    public NumericSensorEntity NiemandDriveWireless => new(_haContext, "sensor.niemand_drive_wireless");
    ///<summary>Niemand Front Door Battery</summary>
    public NumericSensorEntity NiemandFrontDoorBattery => new(_haContext, "sensor.niemand_front_door_battery");
    ///<summary>Niemand Front Door Wireless</summary>
    public NumericSensorEntity NiemandFrontDoorWireless => new(_haContext, "sensor.niemand_front_door_wireless");
    ///<summary>Niemand Garage Battery</summary>
    public NumericSensorEntity NiemandGarageBattery => new(_haContext, "sensor.niemand_garage_battery");
    ///<summary>Niemand Garage Battery</summary>
    public NumericSensorEntity NiemandGarageBattery2 => new(_haContext, "sensor.niemand_garage_battery_2");
    ///<summary>Niemand Garage Wireless</summary>
    public NumericSensorEntity NiemandGarageWireless => new(_haContext, "sensor.niemand_garage_wireless");
    ///<summary>Niemand Garden Battery</summary>
    public NumericSensorEntity NiemandGardenBattery => new(_haContext, "sensor.niemand_garden_battery");
    ///<summary>Niemand Garden Wireless</summary>
    public NumericSensorEntity NiemandGardenWireless => new(_haContext, "sensor.niemand_garden_wireless");
    ///<summary>Niemand Indoor 1 Battery</summary>
    public NumericSensorEntity NiemandIndoor1Battery => new(_haContext, "sensor.niemand_indoor_1_battery");
    ///<summary>Niemand Indoor 1 Wireless</summary>
    public NumericSensorEntity NiemandIndoor1Wireless => new(_haContext, "sensor.niemand_indoor_1_wireless");
    ///<summary>Niemand Side Battery</summary>
    public NumericSensorEntity NiemandSideBattery => new(_haContext, "sensor.niemand_side_battery");
    ///<summary>Niemand Side Battery</summary>
    public NumericSensorEntity NiemandSideBattery2 => new(_haContext, "sensor.niemand_side_battery_2");
    ///<summary>Niemand Side Wireless</summary>
    public NumericSensorEntity NiemandSideWireless => new(_haContext, "sensor.niemand_side_wireless");
    ///<summary>Current Rate Electricity (18L2161921 1015682729636)</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636CurrentRate => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_current_rate");
    ///<summary>Current Standing Charge Electricity (18L2161921/1015682729636)</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636CurrentStandingCharge => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_current_standing_charge");
    ///<summary>Next Rate Electricity (18L2161921/1015682729636)</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636NextRate => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_next_rate");
    ///<summary>Previous Accumulative Consumption Electricity (18L2161921/1015682729636)</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636PreviousAccumulativeConsumption => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_previous_accumulative_consumption");
    ///<summary>Previous Accumulative Cost Electricity (18L2161921/1015682729636)</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636PreviousAccumulativeCost => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_previous_accumulative_cost");
    ///<summary>Electricity 18L2161921 1015682729636 Previous Accumulative Cost (Off Peak)</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636PreviousAccumulativeCostOffPeak => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_previous_accumulative_cost_off_peak");
    ///<summary>Previous Rate Electricity (18L2161921/1015682729636)</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636PreviousRate => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_previous_rate");
    ///<summary>Current Rate Gas (E6S16735201861/7401432210)</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210CurrentRate => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_current_rate");
    ///<summary>Current Standing Charge Gas (E6S16735201861/7401432210)</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210CurrentStandingCharge => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_current_standing_charge");
    ///<summary>Next Rate Gas (E6S16735201861/7401432210)</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210NextRate => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_next_rate");
    ///<summary>Gas E6S16735201861 7401432210 Previous Accumulative Consumption</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210PreviousAccumulativeConsumption => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_previous_accumulative_consumption");
    ///<summary>Previous Accumulative Consumption (kWh) Gas (E6S16735201861/7401432210)</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210PreviousAccumulativeConsumptionKwh => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_previous_accumulative_consumption_kwh");
    ///<summary>Previous Accumulative Consumption Gas (E6S16735201861/7401432210)</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210PreviousAccumulativeConsumptionM3 => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_previous_accumulative_consumption_m3");
    ///<summary>Previous Accumulative Cost Gas (E6S16735201861/7401432210)</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210PreviousAccumulativeCost => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_previous_accumulative_cost");
    ///<summary>Previous Rate Gas (E6S16735201861/7401432210)</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210PreviousRate => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_previous_rate");
    ///<summary>office 1 energy</summary>
    public NumericSensorEntity Office1Energy => new(_haContext, "sensor.office_1_energy");
    ///<summary>office 1 power</summary>
    public NumericSensorEntity Office1Power => new(_haContext, "sensor.office_1_power");
    ///<summary>office 3 energy</summary>
    public NumericSensorEntity Office3Energy => new(_haContext, "sensor.office_3_energy");
    ///<summary>office 3 power</summary>
    public NumericSensorEntity Office3Power => new(_haContext, "sensor.office_3_power");
    ///<summary>Office Daily Energy Consumed</summary>
    public NumericSensorEntity OfficeDailyEnergyConsumed => new(_haContext, "sensor.office_daily_energy_consumed");
    ///<summary>Office Energy</summary>
    public NumericSensorEntity OfficeEnergy => new(_haContext, "sensor.office_energy");
    ///<summary>Office energy</summary>
    public NumericSensorEntity OfficeEnergy2 => new(_haContext, "sensor.office_energy_2");
    ///<summary>Office Motion Lux</summary>
    public NumericSensorEntity OfficeLux => new(_haContext, "sensor.office_lux");
    ///<summary>Office Motion Battery</summary>
    public NumericSensorEntity OfficeMotionBattery => new(_haContext, "sensor.office_motion_battery");
    ///<summary>Office power</summary>
    public NumericSensorEntity OfficePower => new(_haContext, "sensor.office_power");
    ///<summary>Office Room temperature</summary>
    public NumericSensorEntity OfficeRoomTemperature => new(_haContext, "sensor.office_room_temperature");
    ///<summary>OpenWeatherMap Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapCloudCoverage => new(_haContext, "sensor.openweathermap_cloud_coverage");
    ///<summary>OpenWeatherMap Dew Point</summary>
    public NumericSensorEntity OpenweathermapDewPoint => new(_haContext, "sensor.openweathermap_dew_point");
    ///<summary>OpenWeatherMap Feels like temperature</summary>
    public NumericSensorEntity OpenweathermapFeelsLikeTemperature => new(_haContext, "sensor.openweathermap_feels_like_temperature");
    ///<summary>OpenWeatherMap Forecast Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapForecastCloudCoverage => new(_haContext, "sensor.openweathermap_forecast_cloud_coverage");
    ///<summary>OpenWeatherMap Forecast Precipitation</summary>
    public NumericSensorEntity OpenweathermapForecastPrecipitation => new(_haContext, "sensor.openweathermap_forecast_precipitation");
    ///<summary>OpenWeatherMap Forecast Precipitation probability</summary>
    public NumericSensorEntity OpenweathermapForecastPrecipitationProbability => new(_haContext, "sensor.openweathermap_forecast_precipitation_probability");
    ///<summary>OpenWeatherMap Forecast Pressure</summary>
    public NumericSensorEntity OpenweathermapForecastPressure => new(_haContext, "sensor.openweathermap_forecast_pressure");
    ///<summary>OpenWeatherMap Forecast Temperature</summary>
    public NumericSensorEntity OpenweathermapForecastTemperature => new(_haContext, "sensor.openweathermap_forecast_temperature");
    ///<summary>OpenWeatherMap Forecast Temperature Low</summary>
    public NumericSensorEntity OpenweathermapForecastTemperatureLow => new(_haContext, "sensor.openweathermap_forecast_temperature_low");
    ///<summary>OpenWeatherMap Forecast Wind bearing</summary>
    public NumericSensorEntity OpenweathermapForecastWindBearing => new(_haContext, "sensor.openweathermap_forecast_wind_bearing");
    ///<summary>OpenWeatherMap Forecast Wind speed</summary>
    public NumericSensorEntity OpenweathermapForecastWindSpeed => new(_haContext, "sensor.openweathermap_forecast_wind_speed");
    ///<summary>OpenWeatherMap Humidity</summary>
    public NumericSensorEntity OpenweathermapHumidity => new(_haContext, "sensor.openweathermap_humidity");
    ///<summary>OpenWeatherMap Pressure</summary>
    public NumericSensorEntity OpenweathermapPressure => new(_haContext, "sensor.openweathermap_pressure");
    ///<summary>OpenWeatherMap Rain</summary>
    public NumericSensorEntity OpenweathermapRain => new(_haContext, "sensor.openweathermap_rain");
    ///<summary>OpenWeatherMap Snow</summary>
    public NumericSensorEntity OpenweathermapSnow => new(_haContext, "sensor.openweathermap_snow");
    ///<summary>OpenWeatherMap Temperature</summary>
    public NumericSensorEntity OpenweathermapTemperature => new(_haContext, "sensor.openweathermap_temperature");
    ///<summary>OpenWeatherMap UV Index</summary>
    public NumericSensorEntity OpenweathermapUvIndex => new(_haContext, "sensor.openweathermap_uv_index");
    ///<summary>OpenWeatherMap Visibility</summary>
    public NumericSensorEntity OpenweathermapVisibility => new(_haContext, "sensor.openweathermap_visibility");
    ///<summary>OpenWeatherMap Wind bearing</summary>
    public NumericSensorEntity OpenweathermapWindBearing => new(_haContext, "sensor.openweathermap_wind_bearing");
    ///<summary>OpenWeatherMap Wind speed</summary>
    public NumericSensorEntity OpenweathermapWindSpeed => new(_haContext, "sensor.openweathermap_wind_speed");
    ///<summary>Pi-Hole Ads blocked today</summary>
    public NumericSensorEntity PiHoleAdsBlockedToday => new(_haContext, "sensor.pi_hole_ads_blocked_today");
    ///<summary>Pi-Hole Ads percentage blocked today</summary>
    public NumericSensorEntity PiHoleAdsPercentageBlockedToday => new(_haContext, "sensor.pi_hole_ads_percentage_blocked_today");
    ///<summary>Pi-Hole DNS queries cached</summary>
    public NumericSensorEntity PiHoleDnsQueriesCached => new(_haContext, "sensor.pi_hole_dns_queries_cached");
    ///<summary>Pi-Hole DNS queries forwarded</summary>
    public NumericSensorEntity PiHoleDnsQueriesForwarded => new(_haContext, "sensor.pi_hole_dns_queries_forwarded");
    ///<summary>Pi-Hole DNS queries today</summary>
    public NumericSensorEntity PiHoleDnsQueriesToday => new(_haContext, "sensor.pi_hole_dns_queries_today");
    ///<summary>Pi-Hole DNS unique clients</summary>
    public NumericSensorEntity PiHoleDnsUniqueClients => new(_haContext, "sensor.pi_hole_dns_unique_clients");
    ///<summary>Pi-Hole DNS unique domains</summary>
    public NumericSensorEntity PiHoleDnsUniqueDomains => new(_haContext, "sensor.pi_hole_dns_unique_domains");
    ///<summary>Pi-Hole Domains blocked</summary>
    public NumericSensorEntity PiHoleDomainsBlocked => new(_haContext, "sensor.pi_hole_domains_blocked");
    ///<summary>Pi-Hole Seen clients</summary>
    public NumericSensorEntity PiHoleSeenClients => new(_haContext, "sensor.pi_hole_seen_clients");
    ///<summary>Playroom 1 energy</summary>
    public NumericSensorEntity Playroom1Energy => new(_haContext, "sensor.playroom_1_energy");
    ///<summary>Playroom 1 power</summary>
    public NumericSensorEntity Playroom1Power => new(_haContext, "sensor.playroom_1_power");
    ///<summary>Playroom 2 energy</summary>
    public NumericSensorEntity Playroom2Energy => new(_haContext, "sensor.playroom_2_energy");
    ///<summary>Playroom 2 power</summary>
    public NumericSensorEntity Playroom2Power => new(_haContext, "sensor.playroom_2_power");
    ///<summary>Playroom 3 energy</summary>
    public NumericSensorEntity Playroom3Energy => new(_haContext, "sensor.playroom_3_energy");
    ///<summary>Playroom 3 power</summary>
    public NumericSensorEntity Playroom3Power => new(_haContext, "sensor.playroom_3_power");
    ///<summary>Playroom 4 energy</summary>
    public NumericSensorEntity Playroom4Energy => new(_haContext, "sensor.playroom_4_energy");
    ///<summary>Playroom 4 power</summary>
    public NumericSensorEntity Playroom4Power => new(_haContext, "sensor.playroom_4_power");
    ///<summary>Playroom energy</summary>
    public NumericSensorEntity PlayroomEnergy => new(_haContext, "sensor.playroom_energy");
    ///<summary>Playroom Lux</summary>
    public NumericSensorEntity PlayroomLux => new(_haContext, "sensor.playroom_lux");
    ///<summary>Playroom power</summary>
    public NumericSensorEntity PlayroomMainPower => new(_haContext, "sensor.playroom_main_power");
    ///<summary>Playroom Motion Battery</summary>
    public NumericSensorEntity PlayroomMotionBattery => new(_haContext, "sensor.playroom_motion_battery");
    ///<summary>Playroom power</summary>
    public NumericSensorEntity PlayroomPower => new(_haContext, "sensor.playroom_power");
    ///<summary>Plug 1 Current</summary>
    public NumericSensorEntity Plug1Current => new(_haContext, "sensor.plug_1_current");
    ///<summary>Plug 1 Energy</summary>
    public NumericSensorEntity Plug1Energy => new(_haContext, "sensor.plug_1_energy");
    ///<summary>Plug 1 Voltage</summary>
    public NumericSensorEntity Plug1Voltage => new(_haContext, "sensor.plug_1_voltage");
    ///<summary>Plug 2 Current</summary>
    public NumericSensorEntity Plug2Current => new(_haContext, "sensor.plug_2_current");
    ///<summary>Plug 2 Energy</summary>
    public NumericSensorEntity Plug2Energy => new(_haContext, "sensor.plug_2_energy");
    ///<summary>Plug 2 Voltage</summary>
    public NumericSensorEntity Plug2Voltage => new(_haContext, "sensor.plug_2_voltage");
    ///<summary>Plug 4 Current</summary>
    public NumericSensorEntity Plug4Current => new(_haContext, "sensor.plug_4_current");
    ///<summary>Plug 4 Energy</summary>
    public NumericSensorEntity Plug4Energy => new(_haContext, "sensor.plug_4_energy");
    ///<summary>Plug 4 Energy Consumption</summary>
    public NumericSensorEntity Plug4EnergyConsumption => new(_haContext, "sensor.plug_4_energy_consumption");
    ///<summary>Plug 4 Voltage</summary>
    public NumericSensorEntity Plug4Voltage => new(_haContext, "sensor.plug_4_voltage");
    ///<summary>Power Meter Multiplug</summary>
    public NumericSensorEntity PowerMeterMultiplug => new(_haContext, "sensor.power_meter_multiplug");
    ///<summary>Power Meter Multiplug Total</summary>
    public NumericSensorEntity PowerMeterMultiplugTotal => new(_haContext, "sensor.power_meter_multiplug_total");
    ///<summary>Power Meter Multiplug Utility Meter</summary>
    public NumericSensorEntity PowerMeterMultiplugUtilityMeter => new(_haContext, "sensor.power_meter_multiplug_utility_meter");
    ///<summary> Printer Total pages (Monthly)</summary>
    public NumericSensorEntity PrinterTotalPagesMonthly => new(_haContext, "sensor.printer_total_pages_monthly");
    ///<summary>raspberrypi RX</summary>
    public NumericSensorEntity RaspberrypiRx2 => new(_haContext, "sensor.raspberrypi_rx_2");
    ///<summary>raspberrypi TX</summary>
    public NumericSensorEntity RaspberrypiTx2 => new(_haContext, "sensor.raspberrypi_tx_2");
    ///<summary>Refrigerator Freezer temp</summary>
    public NumericSensorEntity RefrigeratorFreezerTemp => new(_haContext, "sensor.refrigerator_freezer_temp");
    ///<summary>Refrigerator Fridge temp</summary>
    public NumericSensorEntity RefrigeratorFridgeTemp => new(_haContext, "sensor.refrigerator_fridge_temp");
    ///<summary>RMMINI-d9-2b-62 RX</summary>
    public NumericSensorEntity RmminiD92b62Rx => new(_haContext, "sensor.rmmini_d9_2b_62_rx");
    ///<summary>RMMINI-d9-2b-62 TX</summary>
    public NumericSensorEntity RmminiD92b62Tx => new(_haContext, "sensor.rmmini_d9_2b_62_tx");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx => new(_haContext, "sensor.rx");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx10 => new(_haContext, "sensor.rx_10");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx100 => new(_haContext, "sensor.rx_100");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx101 => new(_haContext, "sensor.rx_101");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx102 => new(_haContext, "sensor.rx_102");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx103 => new(_haContext, "sensor.rx_103");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx104 => new(_haContext, "sensor.rx_104");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx106 => new(_haContext, "sensor.rx_106");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx107 => new(_haContext, "sensor.rx_107");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx108 => new(_haContext, "sensor.rx_108");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx109 => new(_haContext, "sensor.rx_109");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx11 => new(_haContext, "sensor.rx_11");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx110 => new(_haContext, "sensor.rx_110");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx12 => new(_haContext, "sensor.rx_12");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx13 => new(_haContext, "sensor.rx_13");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx14 => new(_haContext, "sensor.rx_14");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx15 => new(_haContext, "sensor.rx_15");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx17 => new(_haContext, "sensor.rx_17");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx18 => new(_haContext, "sensor.rx_18");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx19 => new(_haContext, "sensor.rx_19");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx2 => new(_haContext, "sensor.rx_2");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx20 => new(_haContext, "sensor.rx_20");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx21 => new(_haContext, "sensor.rx_21");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx22 => new(_haContext, "sensor.rx_22");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx23 => new(_haContext, "sensor.rx_23");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx25 => new(_haContext, "sensor.rx_25");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx26 => new(_haContext, "sensor.rx_26");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx27 => new(_haContext, "sensor.rx_27");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx28 => new(_haContext, "sensor.rx_28");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx29 => new(_haContext, "sensor.rx_29");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx3 => new(_haContext, "sensor.rx_3");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx30 => new(_haContext, "sensor.rx_30");
    ///<summary>Hottubcontrol RX</summary>
    public NumericSensorEntity Rx31 => new(_haContext, "sensor.rx_31");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx32 => new(_haContext, "sensor.rx_32");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx33 => new(_haContext, "sensor.rx_33");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx34 => new(_haContext, "sensor.rx_34");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx35 => new(_haContext, "sensor.rx_35");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx36 => new(_haContext, "sensor.rx_36");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx37 => new(_haContext, "sensor.rx_37");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx38 => new(_haContext, "sensor.rx_38");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx39 => new(_haContext, "sensor.rx_39");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx4 => new(_haContext, "sensor.rx_4");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx40 => new(_haContext, "sensor.rx_40");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx41 => new(_haContext, "sensor.rx_41");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx42 => new(_haContext, "sensor.rx_42");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx43 => new(_haContext, "sensor.rx_43");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx44 => new(_haContext, "sensor.rx_44");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx46 => new(_haContext, "sensor.rx_46");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx48 => new(_haContext, "sensor.rx_48");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx49 => new(_haContext, "sensor.rx_49");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx5 => new(_haContext, "sensor.rx_5");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx50 => new(_haContext, "sensor.rx_50");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx51 => new(_haContext, "sensor.rx_51");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx53 => new(_haContext, "sensor.rx_53");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx54 => new(_haContext, "sensor.rx_54");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx55 => new(_haContext, "sensor.rx_55");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx56 => new(_haContext, "sensor.rx_56");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx57 => new(_haContext, "sensor.rx_57");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx58 => new(_haContext, "sensor.rx_58");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx59 => new(_haContext, "sensor.rx_59");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx6 => new(_haContext, "sensor.rx_6");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx60 => new(_haContext, "sensor.rx_60");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx61 => new(_haContext, "sensor.rx_61");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx62 => new(_haContext, "sensor.rx_62");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx63 => new(_haContext, "sensor.rx_63");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx64 => new(_haContext, "sensor.rx_64");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx65 => new(_haContext, "sensor.rx_65");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx66 => new(_haContext, "sensor.rx_66");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx67 => new(_haContext, "sensor.rx_67");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx69 => new(_haContext, "sensor.rx_69");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx7 => new(_haContext, "sensor.rx_7");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx70 => new(_haContext, "sensor.rx_70");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx71 => new(_haContext, "sensor.rx_71");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx72 => new(_haContext, "sensor.rx_72");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx73 => new(_haContext, "sensor.rx_73");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx74 => new(_haContext, "sensor.rx_74");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx75 => new(_haContext, "sensor.rx_75");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx76 => new(_haContext, "sensor.rx_76");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx77 => new(_haContext, "sensor.rx_77");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx78 => new(_haContext, "sensor.rx_78");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx79 => new(_haContext, "sensor.rx_79");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx8 => new(_haContext, "sensor.rx_8");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx80 => new(_haContext, "sensor.rx_80");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx81 => new(_haContext, "sensor.rx_81");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx82 => new(_haContext, "sensor.rx_82");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx84 => new(_haContext, "sensor.rx_84");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx85 => new(_haContext, "sensor.rx_85");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx86 => new(_haContext, "sensor.rx_86");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx87 => new(_haContext, "sensor.rx_87");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx89 => new(_haContext, "sensor.rx_89");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx90 => new(_haContext, "sensor.rx_90");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx91 => new(_haContext, "sensor.rx_91");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx92 => new(_haContext, "sensor.rx_92");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx93 => new(_haContext, "sensor.rx_93");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx94 => new(_haContext, "sensor.rx_94");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx95 => new(_haContext, "sensor.rx_95");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx96 => new(_haContext, "sensor.rx_96");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx97 => new(_haContext, "sensor.rx_97");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx98 => new(_haContext, "sensor.rx_98");
    ///<summary>Smart Meter Electricity: Cost (Today)</summary>
    public NumericSensorEntity SmartMeterElectricityCostToday => new(_haContext, "sensor.smart_meter_electricity_cost_today");
    ///<summary>Smart Meter Electricity: Export</summary>
    public NumericSensorEntity SmartMeterElectricityExport => new(_haContext, "sensor.smart_meter_electricity_export");
    ///<summary>Smart Meter Electricity: Import</summary>
    public NumericSensorEntity SmartMeterElectricityImport => new(_haContext, "sensor.smart_meter_electricity_import");
    ///<summary>Smart Meter Electricity: Import Standing Charge</summary>
    public NumericSensorEntity SmartMeterElectricityImportStandingCharge => new(_haContext, "sensor.smart_meter_electricity_import_standing_charge");
    ///<summary>Smart Meter Electricity: Import (This month)</summary>
    public NumericSensorEntity SmartMeterElectricityImportThisMonth => new(_haContext, "sensor.smart_meter_electricity_import_this_month");
    ///<summary>Smart Meter Electricity: Import (This week)</summary>
    public NumericSensorEntity SmartMeterElectricityImportThisWeek => new(_haContext, "sensor.smart_meter_electricity_import_this_week");
    ///<summary>Smart Meter Electricity: Import (Today)</summary>
    public NumericSensorEntity SmartMeterElectricityImportToday => new(_haContext, "sensor.smart_meter_electricity_import_today");
    public NumericSensorEntity SmartMeterElectricityImportTodayCost => new(_haContext, "sensor.smart_meter_electricity_import_today_cost");
    ///<summary>Smart Meter Electricity: Import Unit Rate</summary>
    public NumericSensorEntity SmartMeterElectricityImportUnitRate => new(_haContext, "sensor.smart_meter_electricity_import_unit_rate");
    ///<summary>Smart Meter Electricity: Power</summary>
    public NumericSensorEntity SmartMeterElectricityPower => new(_haContext, "sensor.smart_meter_electricity_power");
    ///<summary>Smart Meter Gas: Cost (Today)</summary>
    public NumericSensorEntity SmartMeterGasCostToday => new(_haContext, "sensor.smart_meter_gas_cost_today");
    ///<summary>Smart Meter Gas: Import</summary>
    public NumericSensorEntity SmartMeterGasImport => new(_haContext, "sensor.smart_meter_gas_import");
    ///<summary>Smart Meter Gas: Import Standing Charge</summary>
    public NumericSensorEntity SmartMeterGasImportStandingCharge => new(_haContext, "sensor.smart_meter_gas_import_standing_charge");
    ///<summary>Smart Meter Gas: Import (This month)</summary>
    public NumericSensorEntity SmartMeterGasImportThisMonth => new(_haContext, "sensor.smart_meter_gas_import_this_month");
    ///<summary>Smart Meter Gas: Import (This week)</summary>
    public NumericSensorEntity SmartMeterGasImportThisWeek => new(_haContext, "sensor.smart_meter_gas_import_this_week");
    ///<summary>Smart Meter Gas: Import (Today)</summary>
    public NumericSensorEntity SmartMeterGasImportToday => new(_haContext, "sensor.smart_meter_gas_import_today");
    ///<summary>Smart Meter Gas: Import Unit Rate</summary>
    public NumericSensorEntity SmartMeterGasImportUnitRate => new(_haContext, "sensor.smart_meter_gas_import_unit_rate");
    ///<summary>Smart Meter Gas: Import Vol</summary>
    public NumericSensorEntity SmartMeterGasImportVol => new(_haContext, "sensor.smart_meter_gas_import_vol");
    ///<summary>Smart Meter Gas: Import Vol (This month)</summary>
    public NumericSensorEntity SmartMeterGasImportVolThisMonth => new(_haContext, "sensor.smart_meter_gas_import_vol_this_month");
    ///<summary>Smart Meter Gas: Import Vol (This week)</summary>
    public NumericSensorEntity SmartMeterGasImportVolThisWeek => new(_haContext, "sensor.smart_meter_gas_import_vol_this_week");
    ///<summary>Smart Meter Gas: Import Vol (Today)</summary>
    public NumericSensorEntity SmartMeterGasImportVolToday => new(_haContext, "sensor.smart_meter_gas_import_vol_today");
    ///<summary>Smart Meter IHD HAN RSSI</summary>
    public NumericSensorEntity SmartMeterIhdHanRssi => new(_haContext, "sensor.smart_meter_ihd_han_rssi");
    ///<summary>RX</summary>
    public NumericSensorEntity SmartPlug1Rx => new(_haContext, "sensor.smart_plug_1_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity SmartPlug1Tx => new(_haContext, "sensor.smart_plug_1_tx");
    ///<summary>Sonos Arc energy</summary>
    public NumericSensorEntity SonosArcEnergy => new(_haContext, "sensor.sonos_arc_energy");
    ///<summary>Sonos Arc energy daily</summary>
    public NumericSensorEntity SonosArcEnergyDaily => new(_haContext, "sensor.sonos_arc_energy_daily");
    ///<summary>Sonos Arc energy monthly</summary>
    public NumericSensorEntity SonosArcEnergyMonthly => new(_haContext, "sensor.sonos_arc_energy_monthly");
    ///<summary>Sonos Arc energy weekly</summary>
    public NumericSensorEntity SonosArcEnergyWeekly => new(_haContext, "sensor.sonos_arc_energy_weekly");
    ///<summary>Sonos Arc power</summary>
    public NumericSensorEntity SonosArcPower => new(_haContext, "sensor.sonos_arc_power");
    ///<summary>Sonos energy</summary>
    public NumericSensorEntity SonosEnergy => new(_haContext, "sensor.sonos_energy");
    ///<summary>Sonos energy</summary>
    public NumericSensorEntity SonosEnergy2 => new(_haContext, "sensor.sonos_energy_2");
    ///<summary>Sonos energy daily</summary>
    public NumericSensorEntity SonosEnergyDaily2 => new(_haContext, "sensor.sonos_energy_daily_2");
    ///<summary>Sonos energy monthly</summary>
    public NumericSensorEntity SonosEnergyMonthly2 => new(_haContext, "sensor.sonos_energy_monthly_2");
    ///<summary>Sonos energy weekly</summary>
    public NumericSensorEntity SonosEnergyWeekly2 => new(_haContext, "sensor.sonos_energy_weekly_2");
    ///<summary>Sonos Play 5s energy</summary>
    public NumericSensorEntity SonosPlay5sEnergy => new(_haContext, "sensor.sonos_play_5s_energy");
    ///<summary>Sonos Play 5s energy daily</summary>
    public NumericSensorEntity SonosPlay5sEnergyDaily => new(_haContext, "sensor.sonos_play_5s_energy_daily");
    ///<summary>Sonos Play 5s energy monthly</summary>
    public NumericSensorEntity SonosPlay5sEnergyMonthly => new(_haContext, "sensor.sonos_play_5s_energy_monthly");
    ///<summary>Sonos Play 5s energy weekly</summary>
    public NumericSensorEntity SonosPlay5sEnergyWeekly => new(_haContext, "sensor.sonos_play_5s_energy_weekly");
    ///<summary>Sonos Play 5s power</summary>
    public NumericSensorEntity SonosPlay5sPower => new(_haContext, "sensor.sonos_play_5s_power");
    ///<summary>Sonos power</summary>
    public NumericSensorEntity SonosPower => new(_haContext, "sensor.sonos_power");
    ///<summary>Sonos power</summary>
    public NumericSensorEntity SonosPower2 => new(_haContext, "sensor.sonos_power_2");
    ///<summary>Sonos Sub energy</summary>
    public NumericSensorEntity SonosSubEnergy => new(_haContext, "sensor.sonos_sub_energy");
    ///<summary>Sonos Sub energy daily</summary>
    public NumericSensorEntity SonosSubEnergyDaily => new(_haContext, "sensor.sonos_sub_energy_daily");
    ///<summary>Sonos Sub energy monthly</summary>
    public NumericSensorEntity SonosSubEnergyMonthly => new(_haContext, "sensor.sonos_sub_energy_monthly");
    ///<summary>Sonos Sub energy weekly</summary>
    public NumericSensorEntity SonosSubEnergyWeekly => new(_haContext, "sensor.sonos_sub_energy_weekly");
    ///<summary>Sonos Sub power</summary>
    public NumericSensorEntity SonosSubPower => new(_haContext, "sensor.sonos_sub_power");
    ///<summary>SpeedTest Download</summary>
    public NumericSensorEntity SpeedtestDownload => new(_haContext, "sensor.speedtest_download");
    ///<summary>SpeedTest Ping</summary>
    public NumericSensorEntity SpeedtestPing => new(_haContext, "sensor.speedtest_ping");
    ///<summary>SpeedTest Upload</summary>
    public NumericSensorEntity SpeedtestUpload => new(_haContext, "sensor.speedtest_upload");
    ///<summary>Sprinkler Left Energy</summary>
    public NumericSensorEntity SprinklerLeftEnergy => new(_haContext, "sensor.sprinkler_left_energy");
    ///<summary>Sprinkler Left Power</summary>
    public NumericSensorEntity SprinklerLeftPower => new(_haContext, "sensor.sprinkler_left_power");
    ///<summary>Sprinkler Right Energy</summary>
    public NumericSensorEntity SprinklerRightEnergy => new(_haContext, "sensor.sprinkler_right_energy");
    ///<summary>Sprinkler Right Power</summary>
    public NumericSensorEntity SprinklerRightPower => new(_haContext, "sensor.sprinkler_right_power");
    ///<summary>System Monitor Memory free</summary>
    public NumericSensorEntity SystemMonitorMemoryFree => new(_haContext, "sensor.system_monitor_memory_free");
    ///<summary>System Monitor Memory usage</summary>
    public NumericSensorEntity SystemMonitorMemoryUsage => new(_haContext, "sensor.system_monitor_memory_usage");
    ///<summary>System Monitor Memory use</summary>
    public NumericSensorEntity SystemMonitorMemoryUse => new(_haContext, "sensor.system_monitor_memory_use");
    ///<summary>System Monitor Network in eth0</summary>
    public NumericSensorEntity SystemMonitorNetworkInEth0 => new(_haContext, "sensor.system_monitor_network_in_eth0");
    ///<summary>System Monitor Network out eth0</summary>
    public NumericSensorEntity SystemMonitorNetworkOutEth0 => new(_haContext, "sensor.system_monitor_network_out_eth0");
    ///<summary>System Monitor Network throughput in eth0</summary>
    public NumericSensorEntity SystemMonitorNetworkThroughputInEth0 => new(_haContext, "sensor.system_monitor_network_throughput_in_eth0");
    ///<summary>System Monitor Network throughput out eth0</summary>
    public NumericSensorEntity SystemMonitorNetworkThroughputOutEth0 => new(_haContext, "sensor.system_monitor_network_throughput_out_eth0");
    ///<summary>System Monitor Processor temperature</summary>
    public NumericSensorEntity SystemMonitorProcessorTemperature => new(_haContext, "sensor.system_monitor_processor_temperature");
    ///<summary>System Monitor Processor use</summary>
    public NumericSensorEntity SystemMonitorProcessorUse => new(_haContext, "sensor.system_monitor_processor_use");
    ///<summary>Temp_Humi_1 humidity</summary>
    public NumericSensorEntity TempHumi1Humidity => new(_haContext, "sensor.temp_humi_1_humidity");
    ///<summary>Temp_Humi_1 power</summary>
    public NumericSensorEntity TempHumi1Power => new(_haContext, "sensor.temp_humi_1_power");
    ///<summary>Temp_Humi_1 pressure</summary>
    public NumericSensorEntity TempHumi1Pressure => new(_haContext, "sensor.temp_humi_1_pressure");
    ///<summary>Temp_Humi_1 temperature</summary>
    public NumericSensorEntity TempHumi1Temperature => new(_haContext, "sensor.temp_humi_1_temperature");
    ///<summary>LUMI lumi.weather d25a0608 humidity</summary>
    public NumericSensorEntity TempHumi2Humidity => new(_haContext, "sensor.temp_humi_2_humidity");
    ///<summary>LUMI lumi.weather d25a0608 power</summary>
    public NumericSensorEntity TempHumi2Power => new(_haContext, "sensor.temp_humi_2_power");
    ///<summary>LUMI lumi.weather d25a0608 pressure</summary>
    public NumericSensorEntity TempHumi2Pressure => new(_haContext, "sensor.temp_humi_2_pressure");
    ///<summary>LUMI lumi.weather d25a0608 temperature</summary>
    public NumericSensorEntity TempHumi2Temperature => new(_haContext, "sensor.temp_humi_2_temperature");
    ///<summary>Toilet energy</summary>
    public NumericSensorEntity ToiletEnergy => new(_haContext, "sensor.toilet_energy");
    ///<summary>Toilet Lux</summary>
    public NumericSensorEntity ToiletLux => new(_haContext, "sensor.toilet_lux");
    ///<summary>Toilet Motion Battery</summary>
    public NumericSensorEntity ToiletMotionBattery => new(_haContext, "sensor.toilet_motion_battery");
    ///<summary>Toilet power</summary>
    public NumericSensorEntity ToiletPower => new(_haContext, "sensor.toilet_power");
    ///<summary>Tumble dryer deltaEnergy</summary>
    public NumericSensorEntity TumbleDryerDeltaenergy2 => new(_haContext, "sensor.tumble_dryer_deltaenergy_2");
    ///<summary>Tumble dryer Energy Meter</summary>
    public NumericSensorEntity TumbleDryerEnergy => new(_haContext, "sensor.tumble_dryer_energy");
    ///<summary>Tumble dryer energy</summary>
    public NumericSensorEntity TumbleDryerEnergy2 => new(_haContext, "sensor.tumble_dryer_energy_2");
    ///<summary>Tumble dryer energySaved</summary>
    public NumericSensorEntity TumbleDryerEnergysaved2 => new(_haContext, "sensor.tumble_dryer_energysaved_2");
    ///<summary>Tumble dryer Power Meter</summary>
    public NumericSensorEntity TumbleDryerPower => new(_haContext, "sensor.tumble_dryer_power");
    ///<summary>Tumble dryer power</summary>
    public NumericSensorEntity TumbleDryerPower2 => new(_haContext, "sensor.tumble_dryer_power_2");
    ///<summary>Tumble dryer powerEnergy</summary>
    public NumericSensorEntity TumbleDryerPowerenergy2 => new(_haContext, "sensor.tumble_dryer_powerenergy_2");
    ///<summary>tuya_socket_2_current</summary>
    public NumericSensorEntity TuyaSocket2Current => new(_haContext, "sensor.tuya_socket_2_current");
    ///<summary>tuya_socket_2_current_consumption</summary>
    public NumericSensorEntity TuyaSocket2CurrentConsumption => new(_haContext, "sensor.tuya_socket_2_current_consumption");
    ///<summary>tuya_socket_2_voltage</summary>
    public NumericSensorEntity TuyaSocket2Voltage => new(_haContext, "sensor.tuya_socket_2_voltage");
    ///<summary>tuya_socket_3_current</summary>
    public NumericSensorEntity TuyaSocket3Current => new(_haContext, "sensor.tuya_socket_3_current");
    ///<summary>tuya_socket_3_current_consumption</summary>
    public NumericSensorEntity TuyaSocket3CurrentConsumption => new(_haContext, "sensor.tuya_socket_3_current_consumption");
    ///<summary>tuya_socket_3_voltage</summary>
    public NumericSensorEntity TuyaSocket3Voltage => new(_haContext, "sensor.tuya_socket_3_voltage");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx => new(_haContext, "sensor.tx");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx10 => new(_haContext, "sensor.tx_10");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx100 => new(_haContext, "sensor.tx_100");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx101 => new(_haContext, "sensor.tx_101");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx102 => new(_haContext, "sensor.tx_102");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx103 => new(_haContext, "sensor.tx_103");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx104 => new(_haContext, "sensor.tx_104");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx106 => new(_haContext, "sensor.tx_106");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx107 => new(_haContext, "sensor.tx_107");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx108 => new(_haContext, "sensor.tx_108");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx109 => new(_haContext, "sensor.tx_109");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx11 => new(_haContext, "sensor.tx_11");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx110 => new(_haContext, "sensor.tx_110");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx12 => new(_haContext, "sensor.tx_12");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx13 => new(_haContext, "sensor.tx_13");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx14 => new(_haContext, "sensor.tx_14");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx15 => new(_haContext, "sensor.tx_15");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx17 => new(_haContext, "sensor.tx_17");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx18 => new(_haContext, "sensor.tx_18");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx19 => new(_haContext, "sensor.tx_19");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx2 => new(_haContext, "sensor.tx_2");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx20 => new(_haContext, "sensor.tx_20");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx21 => new(_haContext, "sensor.tx_21");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx22 => new(_haContext, "sensor.tx_22");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx23 => new(_haContext, "sensor.tx_23");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx25 => new(_haContext, "sensor.tx_25");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx26 => new(_haContext, "sensor.tx_26");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx27 => new(_haContext, "sensor.tx_27");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx28 => new(_haContext, "sensor.tx_28");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx29 => new(_haContext, "sensor.tx_29");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx3 => new(_haContext, "sensor.tx_3");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx30 => new(_haContext, "sensor.tx_30");
    ///<summary>Hottubcontrol TX</summary>
    public NumericSensorEntity Tx31 => new(_haContext, "sensor.tx_31");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx32 => new(_haContext, "sensor.tx_32");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx33 => new(_haContext, "sensor.tx_33");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx34 => new(_haContext, "sensor.tx_34");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx35 => new(_haContext, "sensor.tx_35");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx36 => new(_haContext, "sensor.tx_36");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx37 => new(_haContext, "sensor.tx_37");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx38 => new(_haContext, "sensor.tx_38");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx39 => new(_haContext, "sensor.tx_39");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx4 => new(_haContext, "sensor.tx_4");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx40 => new(_haContext, "sensor.tx_40");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx41 => new(_haContext, "sensor.tx_41");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx42 => new(_haContext, "sensor.tx_42");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx43 => new(_haContext, "sensor.tx_43");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx44 => new(_haContext, "sensor.tx_44");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx46 => new(_haContext, "sensor.tx_46");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx48 => new(_haContext, "sensor.tx_48");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx49 => new(_haContext, "sensor.tx_49");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx5 => new(_haContext, "sensor.tx_5");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx50 => new(_haContext, "sensor.tx_50");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx51 => new(_haContext, "sensor.tx_51");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx53 => new(_haContext, "sensor.tx_53");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx54 => new(_haContext, "sensor.tx_54");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx55 => new(_haContext, "sensor.tx_55");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx56 => new(_haContext, "sensor.tx_56");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx57 => new(_haContext, "sensor.tx_57");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx58 => new(_haContext, "sensor.tx_58");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx59 => new(_haContext, "sensor.tx_59");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx6 => new(_haContext, "sensor.tx_6");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx60 => new(_haContext, "sensor.tx_60");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx61 => new(_haContext, "sensor.tx_61");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx62 => new(_haContext, "sensor.tx_62");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx63 => new(_haContext, "sensor.tx_63");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx64 => new(_haContext, "sensor.tx_64");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx65 => new(_haContext, "sensor.tx_65");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx66 => new(_haContext, "sensor.tx_66");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx67 => new(_haContext, "sensor.tx_67");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx69 => new(_haContext, "sensor.tx_69");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx7 => new(_haContext, "sensor.tx_7");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx70 => new(_haContext, "sensor.tx_70");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx71 => new(_haContext, "sensor.tx_71");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx72 => new(_haContext, "sensor.tx_72");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx73 => new(_haContext, "sensor.tx_73");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx74 => new(_haContext, "sensor.tx_74");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx75 => new(_haContext, "sensor.tx_75");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx76 => new(_haContext, "sensor.tx_76");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx77 => new(_haContext, "sensor.tx_77");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx78 => new(_haContext, "sensor.tx_78");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx79 => new(_haContext, "sensor.tx_79");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx8 => new(_haContext, "sensor.tx_8");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx80 => new(_haContext, "sensor.tx_80");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx81 => new(_haContext, "sensor.tx_81");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx82 => new(_haContext, "sensor.tx_82");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx84 => new(_haContext, "sensor.tx_84");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx85 => new(_haContext, "sensor.tx_85");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx86 => new(_haContext, "sensor.tx_86");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx87 => new(_haContext, "sensor.tx_87");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx89 => new(_haContext, "sensor.tx_89");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx90 => new(_haContext, "sensor.tx_90");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx91 => new(_haContext, "sensor.tx_91");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx92 => new(_haContext, "sensor.tx_92");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx93 => new(_haContext, "sensor.tx_93");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx94 => new(_haContext, "sensor.tx_94");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx95 => new(_haContext, "sensor.tx_95");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx96 => new(_haContext, "sensor.tx_96");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx97 => new(_haContext, "sensor.tx_97");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx98 => new(_haContext, "sensor.tx_98");
    ///<summary>RX</summary>
    public NumericSensorEntity Uk020287222957Rx => new(_haContext, "sensor.uk_020287222957_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity Uk020287222957Tx => new(_haContext, "sensor.uk_020287222957_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity UkPc0jskuxRx => new(_haContext, "sensor.uk_pc0jskux_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity UkPc0jskuxTx => new(_haContext, "sensor.uk_pc0jskux_tx");
    ///<summary>Upstairs CPU utilization</summary>
    public NumericSensorEntity UpstairsCpuUtilization => new(_haContext, "sensor.upstairs_cpu_utilization");
    ///<summary>Upstairs Memory utilization</summary>
    public NumericSensorEntity UpstairsMemoryUtilization => new(_haContext, "sensor.upstairs_memory_utilization");
    ///<summary>utility 1 energy</summary>
    public NumericSensorEntity Utility1Energy => new(_haContext, "sensor.utility_1_energy");
    ///<summary>utility 1 power</summary>
    public NumericSensorEntity Utility1Power => new(_haContext, "sensor.utility_1_power");
    ///<summary>utility 2 energy</summary>
    public NumericSensorEntity Utility2Energy => new(_haContext, "sensor.utility_2_energy");
    ///<summary>utility 2 power</summary>
    public NumericSensorEntity Utility2Power => new(_haContext, "sensor.utility_2_power");
    ///<summary>utility 3 energy</summary>
    public NumericSensorEntity Utility3Energy => new(_haContext, "sensor.utility_3_energy");
    ///<summary>utility 3 power</summary>
    public NumericSensorEntity Utility3Power => new(_haContext, "sensor.utility_3_power");
    ///<summary>Utility Lux</summary>
    public NumericSensorEntity UtilityLux => new(_haContext, "sensor.utility_lux");
    ///<summary>Utility Motion Battery</summary>
    public NumericSensorEntity UtilityMotionBattery => new(_haContext, "sensor.utility_motion_battery");
    ///<summary>Washing machine deltaEnergy</summary>
    public NumericSensorEntity WashingMachineDeltaenergy => new(_haContext, "sensor.washing_machine_deltaenergy");
    ///<summary>Washing machine deltaEnergy</summary>
    public NumericSensorEntity WashingMachineDeltaenergy2 => new(_haContext, "sensor.washing_machine_deltaenergy_2");
    ///<summary>Washing machine Energy Meter</summary>
    public NumericSensorEntity WashingMachineEnergy => new(_haContext, "sensor.washing_machine_energy");
    ///<summary>Washing machine energy</summary>
    public NumericSensorEntity WashingMachineEnergy2 => new(_haContext, "sensor.washing_machine_energy_2");
    ///<summary>Washing machine energySaved</summary>
    public NumericSensorEntity WashingMachineEnergysaved => new(_haContext, "sensor.washing_machine_energysaved");
    ///<summary>Washing machine energySaved</summary>
    public NumericSensorEntity WashingMachineEnergysaved2 => new(_haContext, "sensor.washing_machine_energysaved_2");
    ///<summary>Washing machine Power Meter</summary>
    public NumericSensorEntity WashingMachinePower => new(_haContext, "sensor.washing_machine_power");
    ///<summary>Washing machine power</summary>
    public NumericSensorEntity WashingMachinePower2 => new(_haContext, "sensor.washing_machine_power_2");
    ///<summary>Washing machine powerEnergy</summary>
    public NumericSensorEntity WashingMachinePowerenergy => new(_haContext, "sensor.washing_machine_powerenergy");
    ///<summary>Washing machine powerEnergy</summary>
    public NumericSensorEntity WashingMachinePowerenergy2 => new(_haContext, "sensor.washing_machine_powerenergy_2");
    ///<summary>watchman_missing_entities</summary>
    public NumericSensorEntity WatchmanMissingEntities => new(_haContext, "sensor.watchman_missing_entities");
    ///<summary>watchman_missing_services</summary>
    public NumericSensorEntity WatchmanMissingServices => new(_haContext, "sensor.watchman_missing_services");
    ///<summary>Wiser iTRV Aaron Battery</summary>
    public NumericSensorEntity WiserItrvAaronBattery => new(_haContext, "sensor.wiser_itrv_aaron_battery");
    ///<summary>Wiser iTRV Dining Battery</summary>
    public NumericSensorEntity WiserItrvDiningBattery => new(_haContext, "sensor.wiser_itrv_dining_battery");
    ///<summary>Wiser iTRV Entrance Battery</summary>
    public NumericSensorEntity WiserItrvEntranceBattery => new(_haContext, "sensor.wiser_itrv_entrance_battery");
    ///<summary>Wiser iTRV Entrance Battery</summary>
    public NumericSensorEntity WiserItrvEntranceBattery2 => new(_haContext, "sensor.wiser_itrv_entrance_battery_2");
    ///<summary>Wiser iTRV Jayden Battery</summary>
    public NumericSensorEntity WiserItrvJaydenBattery => new(_haContext, "sensor.wiser_itrv_jayden_battery");
    ///<summary>Wiser iTRV Landing Battery</summary>
    public NumericSensorEntity WiserItrvLandingBattery => new(_haContext, "sensor.wiser_itrv_landing_battery");
    ///<summary>Wiser iTRV Lounge  Battery</summary>
    public NumericSensorEntity WiserItrvLoungeBattery => new(_haContext, "sensor.wiser_itrv_lounge_battery");
    ///<summary>Wiser iTRV Lounge Bay Battery</summary>
    public NumericSensorEntity WiserItrvLoungeBayBattery => new(_haContext, "sensor.wiser_itrv_lounge_bay_battery");
    ///<summary>Wiser iTRV Lounge Bay Battery</summary>
    public NumericSensorEntity WiserItrvLoungeBayBattery2 => new(_haContext, "sensor.wiser_itrv_lounge_bay_battery_2");
    ///<summary>Wiser iTRV Master Battery</summary>
    public NumericSensorEntity WiserItrvMasterBattery => new(_haContext, "sensor.wiser_itrv_master_battery");
    ///<summary>Wiser iTRV Office Battery</summary>
    public NumericSensorEntity WiserItrvOfficeBattery => new(_haContext, "sensor.wiser_itrv_office_battery");
    ///<summary>Wiser iTRV Playroom Battery</summary>
    public NumericSensorEntity WiserItrvPlayroomBattery => new(_haContext, "sensor.wiser_itrv_playroom_battery");
    ///<summary>Wiser iTRV Utility Battery</summary>
    public NumericSensorEntity WiserItrvUtilityBattery => new(_haContext, "sensor.wiser_itrv_utility_battery");
    ///<summary>Wiser LTS Heating Demand Boys</summary>
    public NumericSensorEntity WiserLtsHeatingDemandAaron => new(_haContext, "sensor.wiser_lts_heating_demand_aaron");
    ///<summary>Wiser LTS Heating Demand Channel 1</summary>
    public NumericSensorEntity WiserLtsHeatingDemandChannel1 => new(_haContext, "sensor.wiser_lts_heating_demand_channel_1");
    ///<summary>Wiser LTS Heating Demand Dining</summary>
    public NumericSensorEntity WiserLtsHeatingDemandDining => new(_haContext, "sensor.wiser_lts_heating_demand_dining");
    ///<summary>Wiser LTS Heating Demand Entrance</summary>
    public NumericSensorEntity WiserLtsHeatingDemandEntrance => new(_haContext, "sensor.wiser_lts_heating_demand_entrance");
    ///<summary>Wiser LTS Heating Demand Guest Room</summary>
    public NumericSensorEntity WiserLtsHeatingDemandJayden => new(_haContext, "sensor.wiser_lts_heating_demand_jayden");
    ///<summary>Wiser LTS Heating Demand Landing</summary>
    public NumericSensorEntity WiserLtsHeatingDemandLanding => new(_haContext, "sensor.wiser_lts_heating_demand_landing");
    ///<summary>Wiser LTS Heating Demand Lounge </summary>
    public NumericSensorEntity WiserLtsHeatingDemandLounge => new(_haContext, "sensor.wiser_lts_heating_demand_lounge");
    ///<summary>Wiser LTS Heating Demand Lounge Bay</summary>
    public NumericSensorEntity WiserLtsHeatingDemandLoungeBay => new(_haContext, "sensor.wiser_lts_heating_demand_lounge_bay");
    ///<summary>Wiser LTS Heating Demand Master</summary>
    public NumericSensorEntity WiserLtsHeatingDemandMaster => new(_haContext, "sensor.wiser_lts_heating_demand_master");
    ///<summary>Wiser LTS Heating Demand Office</summary>
    public NumericSensorEntity WiserLtsHeatingDemandOffice => new(_haContext, "sensor.wiser_lts_heating_demand_office");
    ///<summary>Wiser LTS Heating Demand Playroom</summary>
    public NumericSensorEntity WiserLtsHeatingDemandPlayroom => new(_haContext, "sensor.wiser_lts_heating_demand_playroom");
    ///<summary>Wiser LTS Heating Demand Utility</summary>
    public NumericSensorEntity WiserLtsHeatingDemandUtility => new(_haContext, "sensor.wiser_lts_heating_demand_utility");
    ///<summary>Wiser LTS Hot Water Demand</summary>
    public NumericSensorEntity WiserLtsHotWaterDemand => new(_haContext, "sensor.wiser_lts_hot_water_demand");
    ///<summary>Wiser LTS Humidity Utility</summary>
    public NumericSensorEntity WiserLtsHumidityUtility => new(_haContext, "sensor.wiser_lts_humidity_utility");
    ///<summary>Wiser LTS Target Temperature Boys</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureAaron => new(_haContext, "sensor.wiser_lts_target_temperature_aaron");
    ///<summary>Wiser LTS Target Temperature Dining</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureDining => new(_haContext, "sensor.wiser_lts_target_temperature_dining");
    ///<summary>Wiser LTS Target Temperature Entrance</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureEntrance => new(_haContext, "sensor.wiser_lts_target_temperature_entrance");
    ///<summary>Wiser LTS Target Temperature Guest Room</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureJayden => new(_haContext, "sensor.wiser_lts_target_temperature_jayden");
    ///<summary>Wiser LTS Target Temperature Landing</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureLanding => new(_haContext, "sensor.wiser_lts_target_temperature_landing");
    ///<summary>Wiser LTS Target Temperature Lounge </summary>
    public NumericSensorEntity WiserLtsTargetTemperatureLounge => new(_haContext, "sensor.wiser_lts_target_temperature_lounge");
    ///<summary>Wiser LTS Target Temperature Lounge Bay</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureLoungeBay => new(_haContext, "sensor.wiser_lts_target_temperature_lounge_bay");
    ///<summary>Wiser LTS Target Temperature Master</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureMaster => new(_haContext, "sensor.wiser_lts_target_temperature_master");
    ///<summary>Wiser LTS Target Temperature Office</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureOffice => new(_haContext, "sensor.wiser_lts_target_temperature_office");
    ///<summary>Wiser LTS Target Temperature Playroom</summary>
    public NumericSensorEntity WiserLtsTargetTemperaturePlayroom => new(_haContext, "sensor.wiser_lts_target_temperature_playroom");
    ///<summary>Wiser LTS Target Temperature Utility</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureUtility => new(_haContext, "sensor.wiser_lts_target_temperature_utility");
    ///<summary>Wiser LTS Temperature Boys</summary>
    public NumericSensorEntity WiserLtsTemperatureAaron => new(_haContext, "sensor.wiser_lts_temperature_aaron");
    ///<summary>Wiser LTS Temperature Dining</summary>
    public NumericSensorEntity WiserLtsTemperatureDining => new(_haContext, "sensor.wiser_lts_temperature_dining");
    ///<summary>Wiser LTS Temperature Entrance</summary>
    public NumericSensorEntity WiserLtsTemperatureEntrance => new(_haContext, "sensor.wiser_lts_temperature_entrance");
    ///<summary>Wiser LTS Temperature Guest Room</summary>
    public NumericSensorEntity WiserLtsTemperatureJayden => new(_haContext, "sensor.wiser_lts_temperature_jayden");
    ///<summary>Wiser LTS Temperature Landing</summary>
    public NumericSensorEntity WiserLtsTemperatureLanding => new(_haContext, "sensor.wiser_lts_temperature_landing");
    ///<summary>Wiser LTS Temperature Lounge </summary>
    public NumericSensorEntity WiserLtsTemperatureLounge => new(_haContext, "sensor.wiser_lts_temperature_lounge");
    ///<summary>Wiser LTS Temperature Lounge Bay</summary>
    public NumericSensorEntity WiserLtsTemperatureLoungeBay => new(_haContext, "sensor.wiser_lts_temperature_lounge_bay");
    ///<summary>Wiser LTS Temperature Master</summary>
    public NumericSensorEntity WiserLtsTemperatureMaster => new(_haContext, "sensor.wiser_lts_temperature_master");
    ///<summary>Wiser LTS Temperature Office</summary>
    public NumericSensorEntity WiserLtsTemperatureOffice => new(_haContext, "sensor.wiser_lts_temperature_office");
    ///<summary>Wiser LTS Temperature Playroom</summary>
    public NumericSensorEntity WiserLtsTemperaturePlayroom => new(_haContext, "sensor.wiser_lts_temperature_playroom");
    ///<summary>Wiser LTS Temperature Utility</summary>
    public NumericSensorEntity WiserLtsTemperatureUtility => new(_haContext, "sensor.wiser_lts_temperature_utility");
    ///<summary>Wiser RoomStat Utility Battery</summary>
    public NumericSensorEntity WiserRoomstatUtilityBattery => new(_haContext, "sensor.wiser_roomstat_utility_battery");
}

public partial class SirenEntities
{
    private readonly IHaContext _haContext;
    public SirenEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aubrecia Drive Siren</summary>
    public SirenEntity AubreciaDriveSiren => new(_haContext, "siren.aubrecia_drive_siren");
    ///<summary>Downstairs Siren</summary>
    public SirenEntity DownstairsSiren => new(_haContext, "siren.downstairs_siren");
    ///<summary>Garden Siren</summary>
    public SirenEntity GardenSiren => new(_haContext, "siren.garden_siren");
    ///<summary>Indoor 2 Siren</summary>
    public SirenEntity Indoor2Siren => new(_haContext, "siren.indoor_2_siren");
    ///<summary>Niemand Drive Siren</summary>
    public SirenEntity NiemandDriveSiren => new(_haContext, "siren.niemand_drive_siren");
    ///<summary>Niemand Garage Siren</summary>
    public SirenEntity NiemandGarageSiren => new(_haContext, "siren.niemand_garage_siren");
    ///<summary>Niemand Garden Siren</summary>
    public SirenEntity NiemandGardenSiren => new(_haContext, "siren.niemand_garden_siren");
    ///<summary>Niemand Indoor 1 Siren</summary>
    public SirenEntity NiemandIndoor1Siren => new(_haContext, "siren.niemand_indoor_1_siren");
    ///<summary>Niemand Side Siren</summary>
    public SirenEntity NiemandSideSiren => new(_haContext, "siren.niemand_side_siren");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public SwitchEntity AaronAtv => new(_haContext, "switch.aaron_atv");
    ///<summary>Aaron Block Windows</summary>
    public SwitchEntity AaronBlockWindows => new(_haContext, "switch.aaron_block_windows");
    ///<summary>Aaron Block Xbox</summary>
    public SwitchEntity AaronBlockXbox => new(_haContext, "switch.aaron_block_xbox");
    ///<summary>Playroom do not disturb switch</summary>
    public SwitchEntity AaronDoNotDisturbSwitch => new(_haContext, "switch.aaron_do_not_disturb_switch");
    ///<summary>Playroom repeat switch</summary>
    public SwitchEntity AaronRepeatSwitch => new(_haContext, "switch.aaron_repeat_switch");
    ///<summary>Playroom shuffle switch</summary>
    public SwitchEntity AaronShuffleSwitch => new(_haContext, "switch.aaron_shuffle_switch");
    ///<summary>Alarm Beep Infinate</summary>
    public SwitchEntity AlarmBeepInfinate => new(_haContext, "switch.alarm_beep_infinate");
    ///<summary>Alarm Single Beep</summary>
    public SwitchEntity AlarmBeepOne => new(_haContext, "switch.alarm_beep_one");
    ///<summary>Alarm Triple Beep</summary>
    public SwitchEntity AlarmBeepThree => new(_haContext, "switch.alarm_beep_three");
    ///<summary>Alarm Double Beep</summary>
    public SwitchEntity AlarmBeepTwo => new(_haContext, "switch.alarm_beep_two");
    ///<summary>Alarm Siren Beep Two</summary>
    public SwitchEntity AlarmSirenBeepTwo2 => new(_haContext, "switch.alarm_siren_beep_two_2");
    ///<summary>Event Stream</summary>
    public SwitchEntity AubreciaDriveEventStream => new(_haContext, "switch.aubrecia_drive_event_stream");
    ///<summary>Live Stream</summary>
    public SwitchEntity AubreciaDriveLiveStream => new(_haContext, "switch.aubrecia_drive_live_stream");
    ///<summary>Motion Detection</summary>
    public SwitchEntity AubreciaDriveMotionDetection => new(_haContext, "switch.aubrecia_drive_motion_detection");
    ///<summary>Aubrecia Drive Motion detection</summary>
    public SwitchEntity AubreciaDriveMotionDetection2 => new(_haContext, "switch.aubrecia_drive_motion_detection_2");
    ///<summary>Motion Warning</summary>
    public SwitchEntity AubreciaDriveMotionWarning => new(_haContext, "switch.aubrecia_drive_motion_warning");
    ///<summary>Aubrecia Drive Siren</summary>
    public SwitchEntity AubreciaDriveSiren => new(_haContext, "switch.aubrecia_drive_siren");
    ///<summary>Siren</summary>
    public SwitchEntity AubreciaDriveSiren2 => new(_haContext, "switch.aubrecia_drive_siren_2");
    ///<summary>Event Stream</summary>
    public SwitchEntity AubreciaFrontDoorEventStream => new(_haContext, "switch.aubrecia_front_door_event_stream");
    ///<summary>Live Stream</summary>
    public SwitchEntity AubreciaFrontDoorLiveStream => new(_haContext, "switch.aubrecia_front_door_live_stream");
    ///<summary>Motion Detection</summary>
    public SwitchEntity AubreciaFrontDoorMotionDetection => new(_haContext, "switch.aubrecia_front_door_motion_detection");
    ///<summary>Aubrecia Front Door Motion detection</summary>
    public SwitchEntity AubreciaFrontDoorMotionDetection2 => new(_haContext, "switch.aubrecia_front_door_motion_detection_2");
    ///<summary>Motion Warning</summary>
    public SwitchEntity AubreciaFrontDoorMotionWarning => new(_haContext, "switch.aubrecia_front_door_motion_warning");
    ///<summary>Christmas Indoor Sonoff</summary>
    public SwitchEntity ChristmasIndoorSonoff => new(_haContext, "switch.christmas_indoor_sonoff");
    ///<summary>Dishwasher</summary>
    public SwitchEntity Dishwasher => new(_haContext, "switch.dishwasher");
    ///<summary>Dishwasher Power</summary>
    public SwitchEntity DishwasherPower => new(_haContext, "switch.dishwasher_power");
    ///<summary>Dishwasher Program Auto2</summary>
    public SwitchEntity DishwasherProgramAuto2 => new(_haContext, "switch.dishwasher_program_auto2");
    ///<summary>Dishwasher Program Eco50</summary>
    public SwitchEntity DishwasherProgramEco50 => new(_haContext, "switch.dishwasher_program_eco50");
    ///<summary>Dishwasher Program Glas40</summary>
    public SwitchEntity DishwasherProgramGlas40 => new(_haContext, "switch.dishwasher_program_glas40");
    ///<summary>Dishwasher Program Intensiv70</summary>
    public SwitchEntity DishwasherProgramIntensiv70 => new(_haContext, "switch.dishwasher_program_intensiv70");
    ///<summary>Dishwasher Program Kurz60</summary>
    public SwitchEntity DishwasherProgramKurz60 => new(_haContext, "switch.dishwasher_program_kurz60");
    ///<summary>Dishwasher Program MachineCare</summary>
    public SwitchEntity DishwasherProgramMachinecare => new(_haContext, "switch.dishwasher_program_machinecare");
    ///<summary>Dishwasher Program NightWash</summary>
    public SwitchEntity DishwasherProgramNightwash => new(_haContext, "switch.dishwasher_program_nightwash");
    ///<summary>Dishwasher Program PreRinse</summary>
    public SwitchEntity DishwasherProgramPrerinse => new(_haContext, "switch.dishwasher_program_prerinse");
    ///<summary>Dishwasher Program Quick45</summary>
    public SwitchEntity DishwasherProgramQuick45 => new(_haContext, "switch.dishwasher_program_quick45");
    ///<summary>Downstairs do not disturb switch</summary>
    public SwitchEntity DownstairsDoNotDisturbSwitch => new(_haContext, "switch.downstairs_do_not_disturb_switch");
    ///<summary>Downstairs Play Ding Sound</summary>
    public SwitchEntity DownstairsPlayDingSound => new(_haContext, "switch.downstairs_play_ding_sound");
    ///<summary>Downstairs Play Motion Sound</summary>
    public SwitchEntity DownstairsPlayMotionSound => new(_haContext, "switch.downstairs_play_motion_sound");
    ///<summary>Downstairs repeat switch</summary>
    public SwitchEntity DownstairsRepeatSwitch => new(_haContext, "switch.downstairs_repeat_switch");
    ///<summary>Downstairs shuffle switch</summary>
    public SwitchEntity DownstairsShuffleSwitch => new(_haContext, "switch.downstairs_shuffle_switch");
    ///<summary>Downstairs Snooze</summary>
    public SwitchEntity DownstairsSnooze => new(_haContext, "switch.downstairs_snooze");
    ///<summary>Entrance</summary>
    public SwitchEntity Entrance => new(_haContext, "switch.entrance");
    ///<summary>Eugene Desktop WOL</summary>
    public SwitchEntity EugeneDesktopWol => new(_haContext, "switch.eugene_desktop_wol");
    ///<summary>Garden do not disturb switch</summary>
    public SwitchEntity EugeneS2ndEchoDotDoNotDisturbSwitch => new(_haContext, "switch.eugene_s_2nd_echo_dot_do_not_disturb_switch");
    ///<summary>Garden repeat switch</summary>
    public SwitchEntity EugeneS2ndEchoDotRepeatSwitch => new(_haContext, "switch.eugene_s_2nd_echo_dot_repeat_switch");
    ///<summary>Garden shuffle switch</summary>
    public SwitchEntity EugeneS2ndEchoDotShuffleSwitch => new(_haContext, "switch.eugene_s_2nd_echo_dot_shuffle_switch");
    ///<summary>Lounge LG Alexa do not disturb switch</summary>
    public SwitchEntity EugeneSLgOledWebos2021TvDoNotDisturbSwitch => new(_haContext, "switch.eugene_s_lg_oled_webos_2021_tv_do_not_disturb_switch");
    ///<summary>Lounge LG Alexa repeat switch</summary>
    public SwitchEntity EugeneSLgOledWebos2021TvRepeatSwitch => new(_haContext, "switch.eugene_s_lg_oled_webos_2021_tv_repeat_switch");
    ///<summary>Lounge LG Alexa shuffle switch</summary>
    public SwitchEntity EugeneSLgOledWebos2021TvShuffleSwitch => new(_haContext, "switch.eugene_s_lg_oled_webos_2021_tv_shuffle_switch");
    ///<summary>Master LG Alexa do not disturb switch</summary>
    public SwitchEntity EugeneSLgWebos2020TvDoNotDisturbSwitch => new(_haContext, "switch.eugene_s_lg_webos_2020_tv_do_not_disturb_switch");
    ///<summary>Master LG Alexa repeat switch</summary>
    public SwitchEntity EugeneSLgWebos2020TvRepeatSwitch => new(_haContext, "switch.eugene_s_lg_webos_2020_tv_repeat_switch");
    ///<summary>Master LG Alexa shuffle switch</summary>
    public SwitchEntity EugeneSLgWebos2020TvShuffleSwitch => new(_haContext, "switch.eugene_s_lg_webos_2020_tv_shuffle_switch");
    ///<summary>Lounge do not disturb switch</summary>
    public SwitchEntity EugeneSSonosArcDoNotDisturbSwitch => new(_haContext, "switch.eugene_s_sonos_arc_do_not_disturb_switch");
    ///<summary>Lounge repeat switch</summary>
    public SwitchEntity EugeneSSonosArcRepeatSwitch => new(_haContext, "switch.eugene_s_sonos_arc_repeat_switch");
    ///<summary>Lounge shuffle switch</summary>
    public SwitchEntity EugeneSSonosArcShuffleSwitch => new(_haContext, "switch.eugene_s_sonos_arc_shuffle_switch");
    ///<summary>Everywhere do not disturb switch</summary>
    public SwitchEntity EverywhereDoNotDisturbSwitch => new(_haContext, "switch.everywhere_do_not_disturb_switch");
    ///<summary>Everywhere repeat switch</summary>
    public SwitchEntity EverywhereRepeatSwitch => new(_haContext, "switch.everywhere_repeat_switch");
    ///<summary>Everywhere shuffle switch</summary>
    public SwitchEntity EverywhereShuffleSwitch => new(_haContext, "switch.everywhere_shuffle_switch");
    ///<summary>Fish Lights Switch</summary>
    public SwitchEntity FishLightsSwitch => new(_haContext, "switch.fish_lights_switch");
    ///<summary>Floor Sonoff</summary>
    public SwitchEntity FloorSonoff => new(_haContext, "switch.floor_sonoff");
    ///<summary>Gabriel Block Windows</summary>
    public SwitchEntity GabrielBlockWindows => new(_haContext, "switch.gabriel_block_windows");
    ///<summary>Gabriel Block Xbox</summary>
    public SwitchEntity GabrielBlockXbox => new(_haContext, "switch.gabriel_block_xbox");
    ///<summary>Garage do not disturb switch</summary>
    public SwitchEntity GarageDoNotDisturbSwitch => new(_haContext, "switch.garage_do_not_disturb_switch");
    ///<summary>Garage repeat switch</summary>
    public SwitchEntity GarageRepeatSwitch => new(_haContext, "switch.garage_repeat_switch");
    ///<summary>Garage shuffle switch</summary>
    public SwitchEntity GarageShuffleSwitch => new(_haContext, "switch.garage_shuffle_switch");
    ///<summary>Event Stream</summary>
    public SwitchEntity GardenEventStream => new(_haContext, "switch.garden_event_stream");
    ///<summary>Live Stream</summary>
    public SwitchEntity GardenLiveStream => new(_haContext, "switch.garden_live_stream");
    ///<summary>Motion Detection</summary>
    public SwitchEntity GardenMotionDetection => new(_haContext, "switch.garden_motion_detection");
    ///<summary>Garden Motion detection</summary>
    public SwitchEntity GardenMotionDetection2 => new(_haContext, "switch.garden_motion_detection_2");
    ///<summary>Motion Warning</summary>
    public SwitchEntity GardenMotionWarning => new(_haContext, "switch.garden_motion_warning");
    ///<summary>Siren</summary>
    public SwitchEntity GardenSiren => new(_haContext, "switch.garden_siren");
    ///<summary>Garden Siren</summary>
    public SwitchEntity GardenSiren2 => new(_haContext, "switch.garden_siren_2");
    ///<summary>Indoor 2 Event Stream</summary>
    public SwitchEntity Indoor2EventStream => new(_haContext, "switch.indoor_2_event_stream");
    ///<summary>Indoor 2 Live Stream</summary>
    public SwitchEntity Indoor2LiveStream => new(_haContext, "switch.indoor_2_live_stream");
    ///<summary>Indoor 2 Motion Detection</summary>
    public SwitchEntity Indoor2MotionDetection => new(_haContext, "switch.indoor_2_motion_detection");
    ///<summary>Indoor 2 Motion detection</summary>
    public SwitchEntity Indoor2MotionDetection2 => new(_haContext, "switch.indoor_2_motion_detection_2");
    ///<summary>Indoor 2 Motion Warning</summary>
    public SwitchEntity Indoor2MotionWarning => new(_haContext, "switch.indoor_2_motion_warning");
    ///<summary>Indoor 2 Siren</summary>
    public SwitchEntity Indoor2Siren => new(_haContext, "switch.indoor_2_siren");
    ///<summary>Indoor 2 Siren</summary>
    public SwitchEntity Indoor2Siren2 => new(_haContext, "switch.indoor_2_siren_2");
    public SwitchEntity Ipad => new(_haContext, "switch.ipad");
    ///<summary>Jayden</summary>
    public SwitchEntity Jayden => new(_haContext, "switch.jayden");
    ///<summary>Jayden AppleTv</summary>
    public SwitchEntity JaydenAppletv => new(_haContext, "switch.jayden_appletv");
    ///<summary>Jayden Bedside</summary>
    public SwitchEntity JaydenBedside => new(_haContext, "switch.jayden_bedside");
    ///<summary>Jayden Block Windows</summary>
    public SwitchEntity JaydenBlockWindows => new(_haContext, "switch.jayden_block_windows");
    ///<summary>Jayden Block Xbox</summary>
    public SwitchEntity JaydenBlockXbox => new(_haContext, "switch.jayden_block_xbox");
    ///<summary>Aaron do not disturb switch</summary>
    public SwitchEntity JaydenDoNotDisturbSwitch => new(_haContext, "switch.jayden_do_not_disturb_switch");
    ///<summary>Jayden do not disturb switch</summary>
    public SwitchEntity JaydenDoNotDisturbSwitch2 => new(_haContext, "switch.jayden_do_not_disturb_switch_2");
    ///<summary>Jayden iPad</summary>
    public SwitchEntity JaydenIpad => new(_haContext, "switch.jayden_ipad");
    ///<summary>Jayden RaspberryPi</summary>
    public SwitchEntity JaydenRaspberrypi => new(_haContext, "switch.jayden_raspberrypi");
    ///<summary>Aaron repeat switch</summary>
    public SwitchEntity JaydenRepeatSwitch => new(_haContext, "switch.jayden_repeat_switch");
    ///<summary>Jayden repeat switch</summary>
    public SwitchEntity JaydenRepeatSwitch2 => new(_haContext, "switch.jayden_repeat_switch_2");
    public SwitchEntity JaydenSIphone => new(_haContext, "switch.jayden_s_iphone");
    public SwitchEntity JaydenSIphone2 => new(_haContext, "switch.jayden_s_iphone_2");
    ///<summary>Jaydens iPhone Wifi</summary>
    public SwitchEntity JaydenSIphoneRx => new(_haContext, "switch.jayden_s_iphone_rx");
    ///<summary>Aaron shuffle switch</summary>
    public SwitchEntity JaydenShuffleSwitch => new(_haContext, "switch.jayden_shuffle_switch");
    ///<summary>Jayden shuffle switch</summary>
    public SwitchEntity JaydenShuffleSwitch2 => new(_haContext, "switch.jayden_shuffle_switch_2");
    ///<summary>Event Stream</summary>
    public SwitchEntity JohanFrontDoorEventStream => new(_haContext, "switch.johan_front_door_event_stream");
    ///<summary>Live Stream</summary>
    public SwitchEntity JohanFrontDoorLiveStream => new(_haContext, "switch.johan_front_door_live_stream");
    ///<summary>Motion Detection</summary>
    public SwitchEntity JohanFrontDoorMotionDetection => new(_haContext, "switch.johan_front_door_motion_detection");
    ///<summary>Johan Front Door Motion detection</summary>
    public SwitchEntity JohanFrontDoorMotionDetection2 => new(_haContext, "switch.johan_front_door_motion_detection_2");
    ///<summary>Motion Warning</summary>
    public SwitchEntity JohanFrontDoorMotionWarning => new(_haContext, "switch.johan_front_door_motion_warning");
    ///<summary>Kitchen do not disturb switch</summary>
    public SwitchEntity KitchenDoNotDisturbSwitch => new(_haContext, "switch.kitchen_do_not_disturb_switch");
    ///<summary>Kitchen repeat switch</summary>
    public SwitchEntity KitchenRepeatSwitch => new(_haContext, "switch.kitchen_repeat_switch");
    ///<summary>Kitchen shuffle switch</summary>
    public SwitchEntity KitchenShuffleSwitch => new(_haContext, "switch.kitchen_shuffle_switch");
    ///<summary>landing blind Inverted</summary>
    public SwitchEntity LandingBlindInverted => new(_haContext, "switch.landing_blind_inverted");
    ///<summary>Landing Night</summary>
    public SwitchEntity LandingNight => new(_haContext, "switch.landing_night");
    ///<summary>LG Lounge</summary>
    public SwitchEntity LgLounge => new(_haContext, "switch.lg_lounge");
    ///<summary>Light Manager Aaron</summary>
    public SwitchEntity LightManagerAaron => new(_haContext, "switch.light_manager_aaron");
    ///<summary>Light Manager Backdoor</summary>
    public SwitchEntity LightManagerBackdoor => new(_haContext, "switch.light_manager_backdoor");
    ///<summary>Light Manager Christmas</summary>
    public SwitchEntity LightManagerChristmas => new(_haContext, "switch.light_manager_christmas");
    ///<summary>Light Manager Dining</summary>
    public SwitchEntity LightManagerDining => new(_haContext, "switch.light_manager_dining");
    ///<summary>Light Manager Drive</summary>
    public SwitchEntity LightManagerDrive => new(_haContext, "switch.light_manager_drive");
    ///<summary>Light Manager Entrance</summary>
    public SwitchEntity LightManagerEntrance => new(_haContext, "switch.light_manager_entrance");
    ///<summary>Light Manager Fish</summary>
    public SwitchEntity LightManagerFish => new(_haContext, "switch.light_manager_fish");
    ///<summary>Light Manager Garage</summary>
    public SwitchEntity LightManagerGarage => new(_haContext, "switch.light_manager_garage");
    ///<summary>Light Manager Garden</summary>
    public SwitchEntity LightManagerGarden => new(_haContext, "switch.light_manager_garden");
    ///<summary>Light Manager Hallway</summary>
    public SwitchEntity LightManagerHallway => new(_haContext, "switch.light_manager_hallway");
    ///<summary>Light Manager Jayden</summary>
    public SwitchEntity LightManagerJayden => new(_haContext, "switch.light_manager_jayden");
    ///<summary>Light Manager Kitchen</summary>
    public SwitchEntity LightManagerKitchen => new(_haContext, "switch.light_manager_kitchen");
    ///<summary>Light Manager Landing</summary>
    public SwitchEntity LightManagerLanding => new(_haContext, "switch.light_manager_landing");
    ///<summary>Light Manager Lounge</summary>
    public SwitchEntity LightManagerLounge => new(_haContext, "switch.light_manager_lounge");
    ///<summary>Light Manager Master</summary>
    public SwitchEntity LightManagerMaster => new(_haContext, "switch.light_manager_master");
    ///<summary>Light Manager Playroom</summary>
    public SwitchEntity LightManagerPlayroom => new(_haContext, "switch.light_manager_playroom");
    ///<summary>Light Manager Porch</summary>
    public SwitchEntity LightManagerPorch => new(_haContext, "switch.light_manager_porch");
    ///<summary>Light Manager Study</summary>
    public SwitchEntity LightManagerStudy => new(_haContext, "switch.light_manager_study");
    ///<summary>Light Manager Toilet</summary>
    public SwitchEntity LightManagerToilet => new(_haContext, "switch.light_manager_toilet");
    ///<summary>Light Manager Utility</summary>
    public SwitchEntity LightManagerUtility => new(_haContext, "switch.light_manager_utility");
    ///<summary>Dining do not disturb switch</summary>
    public SwitchEntity LoungeGroupDoNotDisturbSwitch => new(_haContext, "switch.lounge_group_do_not_disturb_switch");
    ///<summary>Dining repeat switch</summary>
    public SwitchEntity LoungeGroupRepeatSwitch => new(_haContext, "switch.lounge_group_repeat_switch");
    ///<summary>Dining shuffle switch</summary>
    public SwitchEntity LoungeGroupShuffleSwitch => new(_haContext, "switch.lounge_group_shuffle_switch");
    ///<summary>Lounge Loudness</summary>
    public SwitchEntity LoungeLoudness => new(_haContext, "switch.lounge_loudness");
    ///<summary>Lounge Sonos do not disturb switch</summary>
    public SwitchEntity LoungeSonosDoNotDisturbSwitch => new(_haContext, "switch.lounge_sonos_do_not_disturb_switch");
    ///<summary>Lounge Sonos repeat switch</summary>
    public SwitchEntity LoungeSonosRepeatSwitch => new(_haContext, "switch.lounge_sonos_repeat_switch");
    ///<summary>Lounge Sonos shuffle switch</summary>
    public SwitchEntity LoungeSonosShuffleSwitch => new(_haContext, "switch.lounge_sonos_shuffle_switch");
    ///<summary>Lounge Subwoofer enabled</summary>
    public SwitchEntity LoungeSubwooferEnabled => new(_haContext, "switch.lounge_subwoofer_enabled");
    ///<summary>Lounge Surround music full volume</summary>
    public SwitchEntity LoungeSurroundMusicFullVolume => new(_haContext, "switch.lounge_surround_music_full_volume");
    ///<summary>Lounge TV Socket</summary>
    public SwitchEntity LoungeTvSocket => new(_haContext, "switch.lounge_tv_socket");
    ///<summary>Master do not disturb switch</summary>
    public SwitchEntity MasterDoNotDisturbSwitch => new(_haContext, "switch.master_do_not_disturb_switch");
    ///<summary>Master repeat switch</summary>
    public SwitchEntity MasterRepeatSwitch => new(_haContext, "switch.master_repeat_switch");
    ///<summary>Master shuffle switch</summary>
    public SwitchEntity MasterShuffleSwitch => new(_haContext, "switch.master_shuffle_switch");
    ///<summary>Master Tele</summary>
    public SwitchEntity MasterTele => new(_haContext, "switch.master_tele");
    ///<summary>netdaemon_lightsmanager</summary>
    public SwitchEntity NetdaemonLightsmanager => new(_haContext, "switch.netdaemon_lightsmanager");
    ///<summary>Niemand</summary>
    public SwitchEntity Niemand => new(_haContext, "switch.niemand");
    ///<summary>Niemand Drive Event Stream</summary>
    public SwitchEntity NiemandDriveEventStream => new(_haContext, "switch.niemand_drive_event_stream");
    ///<summary>Niemand Drive Live Stream</summary>
    public SwitchEntity NiemandDriveLiveStream => new(_haContext, "switch.niemand_drive_live_stream");
    ///<summary>Niemand Drive Motion Detection</summary>
    public SwitchEntity NiemandDriveMotionDetection => new(_haContext, "switch.niemand_drive_motion_detection");
    ///<summary>Niemand Drive Motion detection</summary>
    public SwitchEntity NiemandDriveMotionDetection2 => new(_haContext, "switch.niemand_drive_motion_detection_2");
    ///<summary>Niemand Drive Motion Warning</summary>
    public SwitchEntity NiemandDriveMotionWarning => new(_haContext, "switch.niemand_drive_motion_warning");
    ///<summary>Niemand Drive Siren</summary>
    public SwitchEntity NiemandDriveSiren => new(_haContext, "switch.niemand_drive_siren");
    ///<summary>Niemand Drive Siren</summary>
    public SwitchEntity NiemandDriveSiren2 => new(_haContext, "switch.niemand_drive_siren_2");
    ///<summary>Niemand Front Door Event Stream</summary>
    public SwitchEntity NiemandFrontDoorEventStream => new(_haContext, "switch.niemand_front_door_event_stream");
    ///<summary>Niemand Front Door Live Stream</summary>
    public SwitchEntity NiemandFrontDoorLiveStream => new(_haContext, "switch.niemand_front_door_live_stream");
    ///<summary>Niemand Front Door Motion Detection</summary>
    public SwitchEntity NiemandFrontDoorMotionDetection => new(_haContext, "switch.niemand_front_door_motion_detection");
    ///<summary>Niemand Front Door Motion detection</summary>
    public SwitchEntity NiemandFrontDoorMotionDetection2 => new(_haContext, "switch.niemand_front_door_motion_detection_2");
    ///<summary>Niemand Front Door Motion Warning</summary>
    public SwitchEntity NiemandFrontDoorMotionWarning => new(_haContext, "switch.niemand_front_door_motion_warning");
    ///<summary>Niemand Garage Event Stream</summary>
    public SwitchEntity NiemandGarageEventStream => new(_haContext, "switch.niemand_garage_event_stream");
    ///<summary>Niemand Garage Live Stream</summary>
    public SwitchEntity NiemandGarageLiveStream => new(_haContext, "switch.niemand_garage_live_stream");
    ///<summary>Niemand Garage Motion Detection</summary>
    public SwitchEntity NiemandGarageMotionDetection => new(_haContext, "switch.niemand_garage_motion_detection");
    ///<summary>Niemand Garage Motion detection</summary>
    public SwitchEntity NiemandGarageMotionDetection2 => new(_haContext, "switch.niemand_garage_motion_detection_2");
    ///<summary>Niemand Garage Motion Warning</summary>
    public SwitchEntity NiemandGarageMotionWarning => new(_haContext, "switch.niemand_garage_motion_warning");
    ///<summary>Niemand Garage Siren</summary>
    public SwitchEntity NiemandGarageSiren => new(_haContext, "switch.niemand_garage_siren");
    ///<summary>Niemand Garage Siren</summary>
    public SwitchEntity NiemandGarageSiren2 => new(_haContext, "switch.niemand_garage_siren_2");
    ///<summary>Niemand Garden Event Stream</summary>
    public SwitchEntity NiemandGardenEventStream => new(_haContext, "switch.niemand_garden_event_stream");
    ///<summary>Niemand Garden Live Stream</summary>
    public SwitchEntity NiemandGardenLiveStream => new(_haContext, "switch.niemand_garden_live_stream");
    ///<summary>Niemand Garden Motion Detection</summary>
    public SwitchEntity NiemandGardenMotionDetection => new(_haContext, "switch.niemand_garden_motion_detection");
    ///<summary>Niemand Garden Motion detection</summary>
    public SwitchEntity NiemandGardenMotionDetection2 => new(_haContext, "switch.niemand_garden_motion_detection_2");
    ///<summary>Niemand Garden Motion Warning</summary>
    public SwitchEntity NiemandGardenMotionWarning => new(_haContext, "switch.niemand_garden_motion_warning");
    ///<summary>Niemand Garden Siren</summary>
    public SwitchEntity NiemandGardenSiren => new(_haContext, "switch.niemand_garden_siren");
    ///<summary>Niemand Garden Siren</summary>
    public SwitchEntity NiemandGardenSiren2 => new(_haContext, "switch.niemand_garden_siren_2");
    public SwitchEntity NiemandGuest => new(_haContext, "switch.niemand_guest");
    ///<summary>Niemand Indoor 1 Event Stream</summary>
    public SwitchEntity NiemandIndoor1EventStream => new(_haContext, "switch.niemand_indoor_1_event_stream");
    ///<summary>Niemand Indoor 1 Live Stream</summary>
    public SwitchEntity NiemandIndoor1LiveStream => new(_haContext, "switch.niemand_indoor_1_live_stream");
    ///<summary>Niemand Indoor 1 Motion Detection</summary>
    public SwitchEntity NiemandIndoor1MotionDetection => new(_haContext, "switch.niemand_indoor_1_motion_detection");
    ///<summary>Niemand Indoor 1 Motion detection</summary>
    public SwitchEntity NiemandIndoor1MotionDetection2 => new(_haContext, "switch.niemand_indoor_1_motion_detection_2");
    ///<summary>Niemand Indoor 1 Motion Warning</summary>
    public SwitchEntity NiemandIndoor1MotionWarning => new(_haContext, "switch.niemand_indoor_1_motion_warning");
    ///<summary>Niemand Indoor 1 Siren</summary>
    public SwitchEntity NiemandIndoor1Siren => new(_haContext, "switch.niemand_indoor_1_siren");
    ///<summary>Niemand Indoor 1 Siren</summary>
    public SwitchEntity NiemandIndoor1Siren2 => new(_haContext, "switch.niemand_indoor_1_siren_2");
    ///<summary>Niemand-IOT</summary>
    public SwitchEntity NiemandIot => new(_haContext, "switch.niemand_iot");
    ///<summary>Niemand-Kids</summary>
    public SwitchEntity NiemandKids => new(_haContext, "switch.niemand_kids");
    ///<summary>Niemand-Mesh</summary>
    public SwitchEntity NiemandMesh => new(_haContext, "switch.niemand_mesh");
    ///<summary>Niemand Side Event Stream</summary>
    public SwitchEntity NiemandSideEventStream => new(_haContext, "switch.niemand_side_event_stream");
    ///<summary>Niemand Side Live Stream</summary>
    public SwitchEntity NiemandSideLiveStream => new(_haContext, "switch.niemand_side_live_stream");
    ///<summary>Niemand Side Motion Detection</summary>
    public SwitchEntity NiemandSideMotionDetection => new(_haContext, "switch.niemand_side_motion_detection");
    ///<summary>Niemand Side Motion detection</summary>
    public SwitchEntity NiemandSideMotionDetection2 => new(_haContext, "switch.niemand_side_motion_detection_2");
    ///<summary>Niemand Side Motion Warning</summary>
    public SwitchEntity NiemandSideMotionWarning => new(_haContext, "switch.niemand_side_motion_warning");
    ///<summary>Niemand Side Siren</summary>
    public SwitchEntity NiemandSideSiren => new(_haContext, "switch.niemand_side_siren");
    ///<summary>Niemand Side Siren</summary>
    public SwitchEntity NiemandSideSiren2 => new(_haContext, "switch.niemand_side_siren_2");
    ///<summary>Office do not disturb switch</summary>
    public SwitchEntity OfficeDoNotDisturbSwitch => new(_haContext, "switch.office_do_not_disturb_switch");
    ///<summary>Office repeat switch</summary>
    public SwitchEntity OfficeRepeatSwitch => new(_haContext, "switch.office_repeat_switch");
    ///<summary>Office shuffle switch</summary>
    public SwitchEntity OfficeShuffleSwitch => new(_haContext, "switch.office_shuffle_switch");
    ///<summary>Office Skylight</summary>
    public SwitchEntity OfficeSkylight => new(_haContext, "switch.office_skylight");
    ///<summary>Pi-Hole</summary>
    public SwitchEntity PiHole => new(_haContext, "switch.pi_hole");
    ///<summary>Plug 1</summary>
    public SwitchEntity Plug1 => new(_haContext, "switch.plug_1");
    ///<summary>Plug 2</summary>
    public SwitchEntity Plug2 => new(_haContext, "switch.plug_2");
    ///<summary>Plug 4</summary>
    public SwitchEntity Plug4 => new(_haContext, "switch.plug_4");
    ///<summary>Refrigerator Express fridge</summary>
    public SwitchEntity RefrigeratorExpressFridge => new(_haContext, "switch.refrigerator_express_fridge");
    ///<summary>Refrigerator Express mode</summary>
    public SwitchEntity RefrigeratorExpressMode => new(_haContext, "switch.refrigerator_express_mode");
    ///<summary>Schedule #3be203</summary>
    public SwitchEntity Schedule3be203 => new(_haContext, "switch.schedule_3be203");
    ///<summary>Schedule #3e786f</summary>
    public SwitchEntity Schedule3e786f => new(_haContext, "switch.schedule_3e786f");
    ///<summary>Schedule #5a4aba</summary>
    public SwitchEntity Schedule5a4aba2 => new(_haContext, "switch.schedule_5a4aba_2");
    ///<summary>Schedule #5ed2d5</summary>
    public SwitchEntity Schedule5ed2d5 => new(_haContext, "switch.schedule_5ed2d5");
    ///<summary>Schedule #9c76ab</summary>
    public SwitchEntity Schedule9c76ab => new(_haContext, "switch.schedule_9c76ab");
    ///<summary>Schedule #c14b0a</summary>
    public SwitchEntity ScheduleC14b0a => new(_haContext, "switch.schedule_c14b0a");
    ///<summary>Schedule #cba0b8</summary>
    public SwitchEntity ScheduleCba0b8 => new(_haContext, "switch.schedule_cba0b8");
    ///<summary>Schedule #e31e38</summary>
    public SwitchEntity ScheduleE31e38 => new(_haContext, "switch.schedule_e31e38");
    ///<summary>Schedule #e58307</summary>
    public SwitchEntity ScheduleE58307 => new(_haContext, "switch.schedule_e58307");
    ///<summary>Schedule #e5d71d</summary>
    public SwitchEntity ScheduleE5d71d => new(_haContext, "switch.schedule_e5d71d");
    ///<summary>Schedule #e9bffa</summary>
    public SwitchEntity ScheduleE9bffa => new(_haContext, "switch.schedule_e9bffa");
    ///<summary>shelly1-BA6A1C</summary>
    public SwitchEntity Shelly1Ba6a1c => new(_haContext, "switch.shelly1_ba6a1c");
    ///<summary>siren</summary>
    public SwitchEntity Siren => new(_haContext, "switch.siren");
    ///<summary>Vivarium</summary>
    public SwitchEntity SmartSocket6Socket1 => new(_haContext, "switch.smart_socket_6_socket_1");
    ///<summary>Smart Socket 7 Socket 1</summary>
    public SwitchEntity SmartSocket7Socket1 => new(_haContext, "switch.smart_socket_7_socket_1");
    ///<summary>Lounge Crossfade</summary>
    public SwitchEntity SonosLoungeCrossfade => new(_haContext, "switch.sonos_lounge_crossfade");
    ///<summary>Lounge Night sound</summary>
    public SwitchEntity SonosLoungeNightSound => new(_haContext, "switch.sonos_lounge_night_sound");
    ///<summary>Lounge Speech enhancement</summary>
    public SwitchEntity SonosLoungeSpeechEnhancement => new(_haContext, "switch.sonos_lounge_speech_enhancement");
    ///<summary>Lounge Surround enabled</summary>
    public SwitchEntity SonosLoungeSurroundEnabled => new(_haContext, "switch.sonos_lounge_surround_enabled");
    ///<summary>This Device do not disturb switch</summary>
    public SwitchEntity ThisDeviceDoNotDisturbSwitch2 => new(_haContext, "switch.this_device_do_not_disturb_switch_2");
    ///<summary>This Device do not disturb switch</summary>
    public SwitchEntity ThisDeviceDoNotDisturbSwitch3 => new(_haContext, "switch.this_device_do_not_disturb_switch_3");
    ///<summary>Tumble dryer</summary>
    public SwitchEntity TumbleDryer => new(_haContext, "switch.tumble_dryer");
    ///<summary>Tuya Socket 1 Socket</summary>
    public SwitchEntity TuyaSocket1Socket => new(_haContext, "switch.tuya_socket_1_socket");
    ///<summary>Coffee Machine Socket</summary>
    public SwitchEntity TuyaSocket2 => new(_haContext, "switch.tuya_socket_2");
    ///<summary>Tuya Socket 2 Socket</summary>
    public SwitchEntity TuyaSocket2Socket => new(_haContext, "switch.tuya_socket_2_socket");
    ///<summary>Tuya Socket 3</summary>
    public SwitchEntity TuyaSocket3 => new(_haContext, "switch.tuya_socket_3");
    ///<summary>Tuya Socket 3 Socket</summary>
    public SwitchEntity TuyaSocket3Socket => new(_haContext, "switch.tuya_socket_3_socket");
    ///<summary>Upstairs do not disturb switch</summary>
    public SwitchEntity UpstairsDoNotDisturbSwitch => new(_haContext, "switch.upstairs_do_not_disturb_switch");
    ///<summary>Upstairs repeat switch</summary>
    public SwitchEntity UpstairsRepeatSwitch => new(_haContext, "switch.upstairs_repeat_switch");
    ///<summary>Upstairs shuffle switch</summary>
    public SwitchEntity UpstairsShuffleSwitch => new(_haContext, "switch.upstairs_shuffle_switch");
    ///<summary>Vacation Mode</summary>
    public SwitchEntity VacationModeEnabled => new(_haContext, "switch.vacation_mode_enabled");
    ///<summary>Wallpanel do not disturb switch</summary>
    public SwitchEntity WallpanelDoNotDisturbSwitch => new(_haContext, "switch.wallpanel_do_not_disturb_switch");
    ///<summary>Washing machine</summary>
    public SwitchEntity WashingMachine => new(_haContext, "switch.washing_machine");
    ///<summary>Wiser Aaron Window Detection</summary>
    public SwitchEntity WiserAaronWindowDetection => new(_haContext, "switch.wiser_aaron_window_detection");
    ///<summary>Wiser Away Mode</summary>
    public SwitchEntity WiserAwayMode => new(_haContext, "switch.wiser_away_mode");
    ///<summary>Wiser Away Mode Affects Hot Water</summary>
    public SwitchEntity WiserAwayModeAffectsHotWater => new(_haContext, "switch.wiser_away_mode_affects_hot_water");
    ///<summary>Wiser Comfort Mode</summary>
    public SwitchEntity WiserComfortMode => new(_haContext, "switch.wiser_comfort_mode");
    ///<summary>Wiser Daylight Saving</summary>
    public SwitchEntity WiserDaylightSaving => new(_haContext, "switch.wiser_daylight_saving");
    ///<summary>Wiser Dining Window Detection</summary>
    public SwitchEntity WiserDiningWindowDetection => new(_haContext, "switch.wiser_dining_window_detection");
    ///<summary>Wiser Eco Mode</summary>
    public SwitchEntity WiserEcoMode => new(_haContext, "switch.wiser_eco_mode");
    ///<summary>Wiser Entrance Window Detection</summary>
    public SwitchEntity WiserEntranceWindowDetection => new(_haContext, "switch.wiser_entrance_window_detection");
    ///<summary>Wiser iTRV Aaron Device Lock</summary>
    public SwitchEntity WiserItrvAaronDeviceLock => new(_haContext, "switch.wiser_itrv_aaron_device_lock");
    ///<summary>Wiser iTRV Aaron Identify</summary>
    public SwitchEntity WiserItrvAaronIdentify => new(_haContext, "switch.wiser_itrv_aaron_identify");
    ///<summary>Wiser iTRV Dining Device Lock</summary>
    public SwitchEntity WiserItrvDiningDeviceLock => new(_haContext, "switch.wiser_itrv_dining_device_lock");
    ///<summary>Wiser iTRV Dining Identify</summary>
    public SwitchEntity WiserItrvDiningIdentify => new(_haContext, "switch.wiser_itrv_dining_identify");
    ///<summary>Wiser iTRV Entrance Device Lock</summary>
    public SwitchEntity WiserItrvEntranceDeviceLock => new(_haContext, "switch.wiser_itrv_entrance_device_lock");
    ///<summary>Wiser iTRV Entrance Device Lock</summary>
    public SwitchEntity WiserItrvEntranceDeviceLock2 => new(_haContext, "switch.wiser_itrv_entrance_device_lock_2");
    ///<summary>Wiser iTRV Entrance Identify</summary>
    public SwitchEntity WiserItrvEntranceIdentify => new(_haContext, "switch.wiser_itrv_entrance_identify");
    ///<summary>Wiser iTRV Entrance Identify</summary>
    public SwitchEntity WiserItrvEntranceIdentify2 => new(_haContext, "switch.wiser_itrv_entrance_identify_2");
    ///<summary>Wiser iTRV Jayden Device Lock</summary>
    public SwitchEntity WiserItrvJaydenDeviceLock => new(_haContext, "switch.wiser_itrv_jayden_device_lock");
    ///<summary>Wiser iTRV Jayden Identify</summary>
    public SwitchEntity WiserItrvJaydenIdentify => new(_haContext, "switch.wiser_itrv_jayden_identify");
    ///<summary>Wiser iTRV Landing Device Lock</summary>
    public SwitchEntity WiserItrvLandingDeviceLock => new(_haContext, "switch.wiser_itrv_landing_device_lock");
    ///<summary>Wiser iTRV Landing Identify</summary>
    public SwitchEntity WiserItrvLandingIdentify => new(_haContext, "switch.wiser_itrv_landing_identify");
    ///<summary>Wiser iTRV Lounge Bay Device Lock</summary>
    public SwitchEntity WiserItrvLoungeBayDeviceLock => new(_haContext, "switch.wiser_itrv_lounge_bay_device_lock");
    ///<summary>Wiser iTRV Lounge Bay Device Lock</summary>
    public SwitchEntity WiserItrvLoungeBayDeviceLock2 => new(_haContext, "switch.wiser_itrv_lounge_bay_device_lock_2");
    ///<summary>Wiser iTRV Lounge Bay Identify</summary>
    public SwitchEntity WiserItrvLoungeBayIdentify => new(_haContext, "switch.wiser_itrv_lounge_bay_identify");
    ///<summary>Wiser iTRV Lounge Bay Identify</summary>
    public SwitchEntity WiserItrvLoungeBayIdentify2 => new(_haContext, "switch.wiser_itrv_lounge_bay_identify_2");
    ///<summary>Wiser iTRV Lounge  Device Lock</summary>
    public SwitchEntity WiserItrvLoungeDeviceLock => new(_haContext, "switch.wiser_itrv_lounge_device_lock");
    ///<summary>Wiser iTRV Lounge  Identify</summary>
    public SwitchEntity WiserItrvLoungeIdentify => new(_haContext, "switch.wiser_itrv_lounge_identify");
    ///<summary>Wiser iTRV Master Device Lock</summary>
    public SwitchEntity WiserItrvMasterDeviceLock => new(_haContext, "switch.wiser_itrv_master_device_lock");
    ///<summary>Wiser iTRV Master Identify</summary>
    public SwitchEntity WiserItrvMasterIdentify => new(_haContext, "switch.wiser_itrv_master_identify");
    ///<summary>Wiser iTRV Office Device Lock</summary>
    public SwitchEntity WiserItrvOfficeDeviceLock => new(_haContext, "switch.wiser_itrv_office_device_lock");
    ///<summary>Wiser iTRV Office Identify</summary>
    public SwitchEntity WiserItrvOfficeIdentify => new(_haContext, "switch.wiser_itrv_office_identify");
    ///<summary>Wiser iTRV Playroom Device Lock</summary>
    public SwitchEntity WiserItrvPlayroomDeviceLock => new(_haContext, "switch.wiser_itrv_playroom_device_lock");
    ///<summary>Wiser iTRV Playroom Identify</summary>
    public SwitchEntity WiserItrvPlayroomIdentify => new(_haContext, "switch.wiser_itrv_playroom_identify");
    ///<summary>Wiser iTRV Utility Device Lock</summary>
    public SwitchEntity WiserItrvUtilityDeviceLock => new(_haContext, "switch.wiser_itrv_utility_device_lock");
    ///<summary>Wiser iTRV Utility Identify</summary>
    public SwitchEntity WiserItrvUtilityIdentify => new(_haContext, "switch.wiser_itrv_utility_identify");
    ///<summary>Wiser Jayden Window Detection</summary>
    public SwitchEntity WiserJaydenWindowDetection => new(_haContext, "switch.wiser_jayden_window_detection");
    ///<summary>Wiser Landing Window Detection</summary>
    public SwitchEntity WiserLandingWindowDetection => new(_haContext, "switch.wiser_landing_window_detection");
    ///<summary>Wiser Lounge Bay Window Detection</summary>
    public SwitchEntity WiserLoungeBayWindowDetection => new(_haContext, "switch.wiser_lounge_bay_window_detection");
    ///<summary>Wiser Lounge  Window Detection</summary>
    public SwitchEntity WiserLoungeWindowDetection => new(_haContext, "switch.wiser_lounge_window_detection");
    ///<summary>Wiser Master Window Detection</summary>
    public SwitchEntity WiserMasterWindowDetection => new(_haContext, "switch.wiser_master_window_detection");
    ///<summary>Wiser Office Window Detection</summary>
    public SwitchEntity WiserOfficeWindowDetection => new(_haContext, "switch.wiser_office_window_detection");
    ///<summary>Wiser Playroom Window Detection</summary>
    public SwitchEntity WiserPlayroomWindowDetection => new(_haContext, "switch.wiser_playroom_window_detection");
    ///<summary>Wiser RoomStat Utility Device Lock</summary>
    public SwitchEntity WiserRoomstatUtilityDeviceLock => new(_haContext, "switch.wiser_roomstat_utility_device_lock");
    ///<summary>Wiser RoomStat Utility Identify</summary>
    public SwitchEntity WiserRoomstatUtilityIdentify => new(_haContext, "switch.wiser_roomstat_utility_identify");
    ///<summary>Wiser Utility Window Detection</summary>
    public SwitchEntity WiserUtilityWindowDetection => new(_haContext, "switch.wiser_utility_window_detection");
    ///<summary>Wiser Valve Protection</summary>
    public SwitchEntity WiserValveProtection => new(_haContext, "switch.wiser_valve_protection");
}

public partial class TimerEntities
{
    private readonly IHaContext _haContext;
    public TimerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public TimerEntity BackDoor => new(_haContext, "timer.back_door");
    public TimerEntity Bathroom => new(_haContext, "timer.bathroom");
    public TimerEntity BoysBedroom => new(_haContext, "timer.boys_bedroom");
    public TimerEntity Dining => new(_haContext, "timer.dining");
    public TimerEntity DiningDoor => new(_haContext, "timer.dining_door");
    public TimerEntity Ensuite => new(_haContext, "timer.ensuite");
    public TimerEntity Entrance => new(_haContext, "timer.entrance");
    public TimerEntity Fish => new(_haContext, "timer.fish");
    public TimerEntity FrontDoor => new(_haContext, "timer.front_door");
    public TimerEntity GarageDoor => new(_haContext, "timer.garage_door");
    public TimerEntity GuestBedroom => new(_haContext, "timer.guest_bedroom");
    public TimerEntity Kitchen => new(_haContext, "timer.kitchen");
    public TimerEntity Landing => new(_haContext, "timer.landing");
    public TimerEntity Lounge => new(_haContext, "timer.lounge");
    public TimerEntity LoungeDoor => new(_haContext, "timer.lounge_door");
    public TimerEntity MasterBedroom => new(_haContext, "timer.master_bedroom");
    public TimerEntity Office => new(_haContext, "timer.office");
    public TimerEntity PlayRoom => new(_haContext, "timer.play_room");
    public TimerEntity Porch => new(_haContext, "timer.porch");
    public TimerEntity Toilet => new(_haContext, "timer.toilet");
    public TimerEntity Utility => new(_haContext, "timer.utility");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron 1 Firmware</summary>
    public UpdateEntity Aaron1Firmware => new(_haContext, "update.aaron_1_firmware");
    ///<summary>Aaron 2 Firmware</summary>
    public UpdateEntity Aaron2Firmware => new(_haContext, "update.aaron_2_firmware");
    ///<summary>Aaron 3 Firmware</summary>
    public UpdateEntity Aaron3Firmware => new(_haContext, "update.aaron_3_firmware");
    ///<summary>Aaron 4 Firmware</summary>
    public UpdateEntity Aaron4Firmware => new(_haContext, "update.aaron_4_firmware");
    ///<summary>Aaron Main Firmware</summary>
    public UpdateEntity AaronMainFirmware => new(_haContext, "update.aaron_main_firmware");
    ///<summary>Aaron motion Firmware</summary>
    public UpdateEntity AaronMotionFirmware => new(_haContext, "update.aaron_motion_firmware");
    ///<summary>Alarmo Card update</summary>
    public UpdateEntity AlarmoCardUpdate => new(_haContext, "update.alarmo_card_update");
    ///<summary>Alarmo update</summary>
    public UpdateEntity AlarmoUpdate => new(_haContext, "update.alarmo_update");
    ///<summary>Alexa Media Player update</summary>
    public UpdateEntity AlexaMediaPlayerUpdate => new(_haContext, "update.alexa_media_player_update");
    ///<summary>Anniversaries update</summary>
    public UpdateEntity AnniversariesUpdate => new(_haContext, "update.anniversaries_update");
    ///<summary>Apple TV Beta update</summary>
    public UpdateEntity AppleTvBetaUpdate => new(_haContext, "update.apple_tv_beta_update");
    ///<summary>Atomic Calendar Revive update</summary>
    public UpdateEntity AtomicCalendarReviveUpdate => new(_haContext, "update.atomic_calendar_revive_update");
    ///<summary>auto-entities update</summary>
    public UpdateEntity AutoEntitiesUpdate => new(_haContext, "update.auto_entities_update");
    ///<summary>Average Sensor update</summary>
    public UpdateEntity AverageSensorUpdate => new(_haContext, "update.average_sensor_update");
    ///<summary>Backdoor Firmware</summary>
    public UpdateEntity BackdoorFirmware => new(_haContext, "update.backdoor_firmware");
    ///<summary>bathroom motion Firmware</summary>
    public UpdateEntity BathroomMotionFirmware => new(_haContext, "update.bathroom_motion_firmware");
    ///<summary>bignumber-card update</summary>
    public UpdateEntity BignumberCardUpdate => new(_haContext, "update.bignumber_card_update");
    ///<summary>card-mod update</summary>
    public UpdateEntity CardModUpdate => new(_haContext, "update.card_mod_update");
    ///<summary>Clock Weather Card update</summary>
    public UpdateEntity ClockWeatherCardUpdate => new(_haContext, "update.clock_weather_card_update");
    ///<summary>Datetime Card update</summary>
    public UpdateEntity DatetimeCardUpdate => new(_haContext, "update.datetime_card_update");
    ///<summary>Decluttering Card update</summary>
    public UpdateEntity DeclutteringCardUpdate => new(_haContext, "update.decluttering_card_update");
    ///<summary>Default Dashboard update</summary>
    public UpdateEntity DefaultDashboardUpdate => new(_haContext, "update.default_dashboard_update");
    ///<summary>dining 1 Firmware</summary>
    public UpdateEntity Dining1Firmware => new(_haContext, "update.dining_1_firmware");
    ///<summary>dining 2 Firmware</summary>
    public UpdateEntity Dining2Firmware => new(_haContext, "update.dining_2_firmware");
    ///<summary>dining 3 Firmware</summary>
    public UpdateEntity Dining3Firmware => new(_haContext, "update.dining_3_firmware");
    ///<summary>dining 4 Firmware</summary>
    public UpdateEntity Dining4Firmware => new(_haContext, "update.dining_4_firmware");
    ///<summary>dining 5 Firmware</summary>
    public UpdateEntity Dining5Firmware => new(_haContext, "update.dining_5_firmware");
    ///<summary>Dining Motion Firmware</summary>
    public UpdateEntity DiningMotionFirmware => new(_haContext, "update.dining_motion_firmware");
    ///<summary>dining wall 1 Firmware</summary>
    public UpdateEntity DiningWall1Firmware => new(_haContext, "update.dining_wall_1_firmware");
    ///<summary>dining wall 2 Firmware</summary>
    public UpdateEntity DiningWall2Firmware => new(_haContext, "update.dining_wall_2_firmware");
    ///<summary>Drayton Wiser Integration for Home Assistant update</summary>
    public UpdateEntity DraytonWiserIntegrationForHomeAssistantUpdate => new(_haContext, "update.drayton_wiser_integration_for_home_assistant_update");
    ///<summary>entrance Firmware</summary>
    public UpdateEntity EntranceFirmware => new(_haContext, "update.entrance_firmware");
    ///<summary>entrance motion Firmware</summary>
    public UpdateEntity EntranceMotionFirmware => new(_haContext, "update.entrance_motion_firmware");
    ///<summary>expander-card update</summary>
    public UpdateEntity ExpanderCardUpdate => new(_haContext, "update.expander_card_update");
    ///<summary>Fish Lights Firmware</summary>
    public UpdateEntity FishLightsFirmware => new(_haContext, "update.fish_lights_firmware");
    ///<summary>Floor Firmware</summary>
    public UpdateEntity FloorFirmware => new(_haContext, "update.floor_firmware");
    ///<summary>HACS update</summary>
    public UpdateEntity HacsUpdate => new(_haContext, "update.hacs_update");
    ///<summary>hallway Firmware</summary>
    public UpdateEntity HallwayFirmware => new(_haContext, "update.hallway_firmware");
    ///<summary>Hildebrand Glow (DCC) update</summary>
    public UpdateEntity HildebrandGlowDccUpdate => new(_haContext, "update.hildebrand_glow_dcc_update");
    ///<summary>Hildebrand Glow IHD MQTT update</summary>
    public UpdateEntity HildebrandGlowIhdMqttUpdate => new(_haContext, "update.hildebrand_glow_ihd_mqtt_update");
    ///<summary>IKEA of Sweden TRADFRI open/close remote Firmware</summary>
    public UpdateEntity IkeaOfSwedenTradfriOpenCloseRemoteFirmware => new(_haContext, "update.ikea_of_sweden_tradfri_open_close_remote_firmware");
    ///<summary>IKEA of Sweden TRADFRI remote control Firmware</summary>
    public UpdateEntity IkeaOfSwedenTradfriRemoteControlFirmware => new(_haContext, "update.ikea_of_sweden_tradfri_remote_control_firmware");
    ///<summary>IKEA of Sweden TRADFRI remote control Firmware</summary>
    public UpdateEntity IkeaOfSwedenTradfriRemoteControlFirmware2 => new(_haContext, "update.ikea_of_sweden_tradfri_remote_control_firmware_2");
    ///<summary>IKEA of Sweden TRADFRI Signal Repeater Firmware</summary>
    public UpdateEntity IkeaOfSwedenTradfriSignalRepeaterFirmware => new(_haContext, "update.ikea_of_sweden_tradfri_signal_repeater_firmware");
    ///<summary>iOS Themes - Dark Mode and Light Mode update</summary>
    public UpdateEntity IosThemesDarkModeAndLightModeUpdate => new(_haContext, "update.ios_themes_dark_mode_and_light_mode_update");
    ///<summary>iPhone Device Tracker update</summary>
    public UpdateEntity IphoneDeviceTrackerUpdate => new(_haContext, "update.iphone_device_tracker_update");
    ///<summary>Jayden 1 Firmware</summary>
    public UpdateEntity Jayden1Firmware => new(_haContext, "update.jayden_1_firmware");
    ///<summary>Jayden 2 Firmware</summary>
    public UpdateEntity Jayden2Firmware => new(_haContext, "update.jayden_2_firmware");
    ///<summary>Jayden 3 Firmware</summary>
    public UpdateEntity Jayden3Firmware => new(_haContext, "update.jayden_3_firmware");
    ///<summary>Jayden 4 Firmware</summary>
    public UpdateEntity Jayden4Firmware => new(_haContext, "update.jayden_4_firmware");
    ///<summary>Jayden motion  Firmware</summary>
    public UpdateEntity JaydenMotionFirmware => new(_haContext, "update.jayden_motion_firmware");
    ///<summary>kitchen 1 Firmware</summary>
    public UpdateEntity Kitchen1Firmware => new(_haContext, "update.kitchen_1_firmware");
    ///<summary>kitchen 2 Firmware</summary>
    public UpdateEntity Kitchen2Firmware => new(_haContext, "update.kitchen_2_firmware");
    ///<summary>kitchen 3 Firmware</summary>
    public UpdateEntity Kitchen3Firmware => new(_haContext, "update.kitchen_3_firmware");
    ///<summary>kitchen 4 Firmware</summary>
    public UpdateEntity Kitchen4Firmware => new(_haContext, "update.kitchen_4_firmware");
    ///<summary>kitchen 5 Firmware</summary>
    public UpdateEntity Kitchen5Firmware => new(_haContext, "update.kitchen_5_firmware");
    ///<summary>kitchen 6 Firmware</summary>
    public UpdateEntity Kitchen6Firmware => new(_haContext, "update.kitchen_6_firmware");
    ///<summary>kitchen motion Firmware</summary>
    public UpdateEntity KitchenMotionFirmware => new(_haContext, "update.kitchen_motion_firmware");
    ///<summary>Landing 1 Firmware</summary>
    public UpdateEntity Landing1Firmware => new(_haContext, "update.landing_1_firmware");
    ///<summary>Landing 2 Firmware</summary>
    public UpdateEntity Landing2Firmware => new(_haContext, "update.landing_2_firmware");
    ///<summary>Landing 3 Firmware</summary>
    public UpdateEntity Landing3Firmware => new(_haContext, "update.landing_3_firmware");
    ///<summary>Landing 4 Firmware</summary>
    public UpdateEntity Landing4Firmware => new(_haContext, "update.landing_4_firmware");
    ///<summary>Landing 5 Firmware</summary>
    public UpdateEntity Landing5Firmware => new(_haContext, "update.landing_5_firmware");
    ///<summary>Landing 7 Firmware</summary>
    public UpdateEntity Landing7Firmware => new(_haContext, "update.landing_7_firmware");
    ///<summary>landing blind Firmware</summary>
    public UpdateEntity LandingBlindFirmware => new(_haContext, "update.landing_blind_firmware");
    ///<summary>landing motion Firmware</summary>
    public UpdateEntity LandingMotionFirmware => new(_haContext, "update.landing_motion_firmware");
    ///<summary>layout-card update</summary>
    public UpdateEntity LayoutCardUpdate => new(_haContext, "update.layout_card_update");
    ///<summary>Light Brightness Preset Row update</summary>
    public UpdateEntity LightBrightnessPresetRowUpdate => new(_haContext, "update.light_brightness_preset_row_update");
    ///<summary>Lightener update</summary>
    public UpdateEntity LightenerUpdate => new(_haContext, "update.lightener_update");
    ///<summary>Local Tuya update</summary>
    public UpdateEntity LocalTuyaUpdate => new(_haContext, "update.local_tuya_update");
    ///<summary>Kitchen</summary>
    public UpdateEntity Lounge => new(_haContext, "update.lounge");
    ///<summary>lounge back Firmware</summary>
    public UpdateEntity LoungeBackFirmware => new(_haContext, "update.lounge_back_firmware");
    ///<summary>lounge front Firmware</summary>
    public UpdateEntity LoungeFrontFirmware => new(_haContext, "update.lounge_front_firmware");
    ///<summary>Lounge Motion Firmware</summary>
    public UpdateEntity LoungeMotionFirmware => new(_haContext, "update.lounge_motion_firmware");
    ///<summary>master 1 Firmware</summary>
    public UpdateEntity Master1Firmware => new(_haContext, "update.master_1_firmware");
    ///<summary>Master 2 Firmware</summary>
    public UpdateEntity Master2Firmware => new(_haContext, "update.master_2_firmware");
    ///<summary>master 3 Firmware</summary>
    public UpdateEntity Master3Firmware => new(_haContext, "update.master_3_firmware");
    ///<summary>master 4 Firmware</summary>
    public UpdateEntity Master4Firmware => new(_haContext, "update.master_4_firmware");
    ///<summary>master motion Firmware</summary>
    public UpdateEntity MasterMotionFirmware => new(_haContext, "update.master_motion_firmware");
    ///<summary>Master Nightlight Firmware</summary>
    public UpdateEntity MasterNightlightFirmware => new(_haContext, "update.master_nightlight_firmware");
    ///<summary>Microsoft Family Safety update</summary>
    public UpdateEntity MicrosoftFamilySafetyUpdate => new(_haContext, "update.microsoft_family_safety_update");
    ///<summary>mini-graph-card update</summary>
    public UpdateEntity MiniGraphCardUpdate => new(_haContext, "update.mini_graph_card_update");
    ///<summary>Mini Media Player update</summary>
    public UpdateEntity MiniMediaPlayerUpdate => new(_haContext, "update.mini_media_player_update");
    ///<summary>Multiple Entity Row update</summary>
    public UpdateEntity MultipleEntityRowUpdate => new(_haContext, "update.multiple_entity_row_update");
    ///<summary>Mushroom update</summary>
    public UpdateEntity MushroomUpdate => new(_haContext, "update.mushroom_update");
    ///<summary>Neerslag App update</summary>
    public UpdateEntity NeerslagAppUpdate => new(_haContext, "update.neerslag_app_update");
    ///<summary>Neerslag Card update</summary>
    public UpdateEntity NeerslagCardUpdate => new(_haContext, "update.neerslag_card_update");
    ///<summary>NetDaemon update</summary>
    public UpdateEntity NetdaemonUpdate => new(_haContext, "update.netdaemon_update");
    ///<summary>Octopus Agile update</summary>
    public UpdateEntity OctopusAgileUpdate => new(_haContext, "update.octopus_agile_update");
    ///<summary>octopus-energy-rates-card update</summary>
    public UpdateEntity OctopusEnergyRatesCardUpdate => new(_haContext, "update.octopus_energy_rates_card_update");
    ///<summary>Octopus Energy update</summary>
    public UpdateEntity OctopusEnergyUpdate => new(_haContext, "update.octopus_energy_update");
    ///<summary>Lounge</summary>
    public UpdateEntity Office => new(_haContext, "update.office");
    ///<summary>office 1 Firmware</summary>
    public UpdateEntity Office1Firmware => new(_haContext, "update.office_1_firmware");
    ///<summary>office 3 Firmware</summary>
    public UpdateEntity Office3Firmware => new(_haContext, "update.office_3_firmware");
    ///<summary>office motion Firmware</summary>
    public UpdateEntity OfficeMotionFirmware => new(_haContext, "update.office_motion_firmware");
    ///<summary>Pi-Hole Core update available</summary>
    public UpdateEntity PiHoleCoreUpdateAvailable => new(_haContext, "update.pi_hole_core_update_available");
    ///<summary>Pi-Hole FTL update available</summary>
    public UpdateEntity PiHoleFtlUpdateAvailable => new(_haContext, "update.pi_hole_ftl_update_available");
    ///<summary>Pi-Hole Web update available</summary>
    public UpdateEntity PiHoleWebUpdateAvailable => new(_haContext, "update.pi_hole_web_update_available");
    ///<summary>Playroom 1 Firmware</summary>
    public UpdateEntity Playroom1Firmware => new(_haContext, "update.playroom_1_firmware");
    ///<summary>Playroom 2 Firmware</summary>
    public UpdateEntity Playroom2Firmware => new(_haContext, "update.playroom_2_firmware");
    ///<summary>Playroom 3 Firmware</summary>
    public UpdateEntity Playroom3Firmware => new(_haContext, "update.playroom_3_firmware");
    ///<summary>Playroom 4 Firmware</summary>
    public UpdateEntity Playroom4Firmware => new(_haContext, "update.playroom_4_firmware");
    ///<summary>Playroom Main Firmware</summary>
    public UpdateEntity PlayroomMainFirmware => new(_haContext, "update.playroom_main_firmware");
    ///<summary>playroom motion Firmware</summary>
    public UpdateEntity PlayroomMotionFirmware => new(_haContext, "update.playroom_motion_firmware");
    ///<summary>Plotly Graph Card update</summary>
    public UpdateEntity PlotlyGraphCardUpdate => new(_haContext, "update.plotly_graph_card_update");
    ///<summary>Powercalc update</summary>
    public UpdateEntity PowercalcUpdate => new(_haContext, "update.powercalc_update");
    ///<summary>Restriction Card update</summary>
    public UpdateEntity RestrictionCardUpdate => new(_haContext, "update.restriction_card_update");
    ///<summary>Retry update</summary>
    public UpdateEntity RetryUpdate => new(_haContext, "update.retry_update");
    ///<summary>Ring Hass-io Add-on update</summary>
    public UpdateEntity RingHassIoAddOnUpdate => new(_haContext, "update.ring_hass_io_add_on_update");
    ///<summary>Scheduler Card update</summary>
    public UpdateEntity SchedulerCardUpdate => new(_haContext, "update.scheduler_card_update");
    ///<summary>Scheduler component update</summary>
    public UpdateEntity SchedulerComponentUpdate => new(_haContext, "update.scheduler_component_update");
    ///<summary>Simple Thermostat update</summary>
    public UpdateEntity SimpleThermostatUpdate => new(_haContext, "update.simple_thermostat_update");
    ///<summary>slider-entity-row update</summary>
    public UpdateEntity SliderEntityRowUpdate => new(_haContext, "update.slider_entity_row_update");
    ///<summary>SmartThinQ LGE Sensors update</summary>
    public UpdateEntity SmartthinqLgeSensorsUpdate => new(_haContext, "update.smartthinq_lge_sensors_update");
    ///<summary>toilet Firmware</summary>
    public UpdateEntity ToiletFirmware => new(_haContext, "update.toilet_firmware");
    ///<summary>Toilet Motion Firmware</summary>
    public UpdateEntity ToiletMotionFirmware => new(_haContext, "update.toilet_motion_firmware");
    ///<summary>UK Bin Collection Data update</summary>
    public UpdateEntity UkBinCollectionDataUpdate => new(_haContext, "update.uk_bin_collection_data_update");
    ///<summary>Upstairs</summary>
    public UpdateEntity Upstairs => new(_haContext, "update.upstairs");
    ///<summary>utility 1 Firmware</summary>
    public UpdateEntity Utility1Firmware => new(_haContext, "update.utility_1_firmware");
    ///<summary>utility 2 Firmware</summary>
    public UpdateEntity Utility2Firmware => new(_haContext, "update.utility_2_firmware");
    ///<summary>utility 3 Firmware</summary>
    public UpdateEntity Utility3Firmware => new(_haContext, "update.utility_3_firmware");
    ///<summary>utility motion Firmware</summary>
    public UpdateEntity UtilityMotionFirmware => new(_haContext, "update.utility_motion_firmware");
    ///<summary>Watchman update</summary>
    public UpdateEntity WatchmanUpdate => new(_haContext, "update.watchman_update");
    ///<summary>Weather Chart Card update</summary>
    public UpdateEntity WeatherChartCardUpdate => new(_haContext, "update.weather_chart_card_update");
    ///<summary>Weather Radar Card update</summary>
    public UpdateEntity WeatherRadarCardUpdate => new(_haContext, "update.weather_radar_card_update");
    ///<summary>WebRTC Camera update</summary>
    public UpdateEntity WebrtcCameraUpdate => new(_haContext, "update.webrtc_camera_update");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>AccuWeather Home</summary>
    public WeatherEntity AccuweatherHome => new(_haContext, "weather.accuweather_home");
    ///<summary>OpenWeatherMap</summary>
    public WeatherEntity Openweathermap => new(_haContext, "weather.openweathermap");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Mum Home</summary>
    public ZoneEntity MumHome => new(_haContext, "zone.mum_home");
}

public partial class InputDatetimeEntities
{
    private readonly IHaContext _haContext;
    public InputDatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Clock Time</summary>
    public InputDatetimeEntity AlarmClockTime => new(_haContext, "input_datetime.alarm_clock_time");
    ///<summary>Device Ban Ends Aaron</summary>
    public InputDatetimeEntity DeviceBanEndsAaron => new(_haContext, "input_datetime.device_ban_ends_aaron");
    ///<summary>Device Ban Ends Jayden</summary>
    public InputDatetimeEntity DeviceBanEndsJayden => new(_haContext, "input_datetime.device_ban_ends_jayden");
    ///<summary>Energy 1 Hour Window</summary>
    public InputDatetimeEntity Energy1HourWindow => new(_haContext, "input_datetime.energy_1_hour_window");
    ///<summary>Energy 2 Hour Window</summary>
    public InputDatetimeEntity Energy2HourWindow => new(_haContext, "input_datetime.energy_2_hour_window");
    ///<summary>Energy 3 Hour Window</summary>
    public InputDatetimeEntity Energy3HourWindow => new(_haContext, "input_datetime.energy_3_hour_window");
    ///<summary>Fed Rex</summary>
    public InputDatetimeEntity FedRex => new(_haContext, "input_datetime.fed_rex");
    ///<summary>Rex Water Change</summary>
    public InputDatetimeEntity RexWaterChange => new(_haContext, "input_datetime.rex_water_change");
    ///<summary>Rex Weigh In</summary>
    public InputDatetimeEntity RexWeighIn => new(_haContext, "input_datetime.rex_weigh_in");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aubrecia Drive Motion</summary>
    public EventEntity AubreciaDriveMotion => new(_haContext, "event.aubrecia_drive_motion");
    ///<summary>Aubrecia Front Door Ding</summary>
    public EventEntity AubreciaFrontDoorDing => new(_haContext, "event.aubrecia_front_door_ding");
    ///<summary>Aubrecia Front Door Motion</summary>
    public EventEntity AubreciaFrontDoorMotion => new(_haContext, "event.aubrecia_front_door_motion");
    ///<summary>Garden Motion</summary>
    public EventEntity GardenMotion => new(_haContext, "event.garden_motion");
    ///<summary>Indoor 2 Motion</summary>
    public EventEntity Indoor2Motion => new(_haContext, "event.indoor_2_motion");
    ///<summary>Johan Front Door Ding</summary>
    public EventEntity JohanFrontDoorDing => new(_haContext, "event.johan_front_door_ding");
    ///<summary>Johan Front Door Motion</summary>
    public EventEntity JohanFrontDoorMotion => new(_haContext, "event.johan_front_door_motion");
    ///<summary>Niemand Drive Motion</summary>
    public EventEntity NiemandDriveMotion => new(_haContext, "event.niemand_drive_motion");
    ///<summary>Niemand Front Door Ding</summary>
    public EventEntity NiemandFrontDoorDing => new(_haContext, "event.niemand_front_door_ding");
    ///<summary>Niemand Front Door Motion</summary>
    public EventEntity NiemandFrontDoorMotion => new(_haContext, "event.niemand_front_door_motion");
    ///<summary>Niemand Garage Motion</summary>
    public EventEntity NiemandGarageMotion => new(_haContext, "event.niemand_garage_motion");
    ///<summary>Niemand Garden Motion</summary>
    public EventEntity NiemandGardenMotion => new(_haContext, "event.niemand_garden_motion");
    ///<summary>Niemand Indoor 1 Motion</summary>
    public EventEntity NiemandIndoor1Motion => new(_haContext, "event.niemand_indoor_1_motion");
    ///<summary>Niemand Side Motion</summary>
    public EventEntity NiemandSideMotion => new(_haContext, "event.niemand_side_motion");
    ///<summary>Octoplus Saving Session Events (A-713CD539)</summary>
    public EventEntity OctopusEnergyA713cd539OctoplusSavingSessionEvents => new(_haContext, "event.octopus_energy_a_713cd539_octoplus_saving_session_events");
    ///<summary>Current Day Rates Electricity (18L2161921/1015682729636)</summary>
    public EventEntity OctopusEnergyElectricity18l21619211015682729636CurrentDayRates => new(_haContext, "event.octopus_energy_electricity_18l2161921_1015682729636_current_day_rates");
    ///<summary>Next Day Rates Electricity (18L2161921/1015682729636)</summary>
    public EventEntity OctopusEnergyElectricity18l21619211015682729636NextDayRates => new(_haContext, "event.octopus_energy_electricity_18l2161921_1015682729636_next_day_rates");
    ///<summary>Previous Day Rates Electricity (18L2161921/1015682729636)</summary>
    public EventEntity OctopusEnergyElectricity18l21619211015682729636PreviousDayRates => new(_haContext, "event.octopus_energy_electricity_18l2161921_1015682729636_previous_day_rates");
    ///<summary>Current Day Rates Gas (E6S16735201861/7401432210)</summary>
    public EventEntity OctopusEnergyGasE6s167352018617401432210CurrentDayRates => new(_haContext, "event.octopus_energy_gas_e6s16735201861_7401432210_current_day_rates");
    ///<summary>Next Day Rates Gas (E6S16735201861/7401432210)</summary>
    public EventEntity OctopusEnergyGasE6s167352018617401432210NextDayRates => new(_haContext, "event.octopus_energy_gas_e6s16735201861_7401432210_next_day_rates");
    ///<summary>Previous Day Rates Gas (E6S16735201861/7401432210)</summary>
    public EventEntity OctopusEnergyGasE6s167352018617401432210PreviousDayRates => new(_haContext, "event.octopus_energy_gas_e6s16735201861_7401432210_previous_day_rates");
}

public partial class SttEntities
{
    private readonly IHaContext _haContext;
    public SttEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home Assistant Cloud</summary>
    public SttEntity HomeAssistantCloud => new(_haContext, "stt.home_assistant_cloud");
}

public partial class TagEntities
{
    private readonly IHaContext _haContext;
    public TagEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tag back_door</summary>
    public TagEntity BackDoor => new(_haContext, "tag.back_door");
    ///<summary>Tag dining_door</summary>
    public TagEntity DiningDoor => new(_haContext, "tag.dining_door");
    ///<summary>Tag dryer</summary>
    public TagEntity Dryer => new(_haContext, "tag.dryer");
    ///<summary>Tag front_door</summary>
    public TagEntity FrontDoor => new(_haContext, "tag.front_door");
    ///<summary>Tag garage_back_door</summary>
    public TagEntity GarageBackDoor => new(_haContext, "tag.garage_back_door");
    ///<summary>Tag lounge_door</summary>
    public TagEntity LoungeDoor => new(_haContext, "tag.lounge_door");
    ///<summary>Tag washer</summary>
    public TagEntity Washer => new(_haContext, "tag.washer");
}

public partial class TtsEntities
{
    private readonly IHaContext _haContext;
    public TtsEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home Assistant Cloud</summary>
    public TtsEntity HomeAssistantCloud => new(_haContext, "tts.home_assistant_cloud");
}

public partial record AlarmControlPanelEntity : Entity<AlarmControlPanelEntity, EntityState<AlarmControlPanelAttributes>, AlarmControlPanelAttributes>
{
    public AlarmControlPanelEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AlarmControlPanelEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AlarmControlPanelAttributes
{
    [JsonPropertyName("code_format")]
    public object? CodeFormat { get; init; }

    [JsonPropertyName("changed_by")]
    public object? ChangedBy { get; init; }

    [JsonPropertyName("code_arm_required")]
    public bool? CodeArmRequired { get; init; }

    [JsonPropertyName("arm_mode")]
    public object? ArmMode { get; init; }

    [JsonPropertyName("open_sensors")]
    public object? OpenSensors { get; init; }

    [JsonPropertyName("bypassed_sensors")]
    public object? BypassedSensors { get; init; }

    [JsonPropertyName("delay")]
    public object? Delay { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("ready_to_arm_modes")]
    public IReadOnlyList<string>? ReadyToArmModes { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("next_state")]
    public string? NextState { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("current_version")]
    public string? CurrentVersion { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("round_trip_time_avg")]
    public double? RoundTripTimeAvg { get; init; }

    [JsonPropertyName("round_trip_time_max")]
    public double? RoundTripTimeMax { get; init; }

    [JsonPropertyName("round_trip_time_mdev")]
    public object? RoundTripTimeMdev { get; init; }

    [JsonPropertyName("round_trip_time_min")]
    public double? RoundTripTimeMin { get; init; }

    [JsonPropertyName("workdays")]
    public IReadOnlyList<string>? Workdays { get; init; }

    [JsonPropertyName("excludes")]
    public IReadOnlyList<string>? Excludes { get; init; }

    [JsonPropertyName("days_offset")]
    public double? DaysOffset { get; init; }

    [JsonPropertyName("joined_events")]
    public IReadOnlyList<object>? JoinedEvents { get; init; }

    [JsonPropertyName("next_joined_event_start")]
    public object? NextJoinedEventStart { get; init; }

    [JsonPropertyName("next_joined_event_end")]
    public object? NextJoinedEventEnd { get; init; }

    [JsonPropertyName("next_joined_event_duration_in_minutes")]
    public object? NextJoinedEventDurationInMinutes { get; init; }

    [JsonPropertyName("migrated_to_cache")]
    public bool? MigratedToCache { get; init; }

    [JsonPropertyName("Manufacturer")]
    public string? Manufacturer { get; init; }

    [JsonPropertyName("Fast User Switched")]
    public bool? FastUserSwitched { get; init; }

    [JsonPropertyName("Idle")]
    public bool? Idle { get; init; }

    [JsonPropertyName("Locked")]
    public bool? Locked { get; init; }

    [JsonPropertyName("Screen Off")]
    public bool? ScreenOff { get; init; }

    [JsonPropertyName("Screensaver")]
    public bool? Screensaver { get; init; }

    [JsonPropertyName("Sleeping")]
    public bool? Sleeping { get; init; }

    [JsonPropertyName("Terminating")]
    public bool? Terminating { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("state")]
    public string? State { get; init; }

    [JsonPropertyName("expires_at")]
    public string? ExpiresAt { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("lastMotion")]
    public double? LastMotion { get; init; }

    [JsonPropertyName("lastMotionTime")]
    public string? LastMotionTime { get; init; }

    [JsonPropertyName("personDetected")]
    public bool? PersonDetected { get; init; }

    [JsonPropertyName("motionDetectionEnabled")]
    public bool? MotionDetectionEnabled { get; init; }

    [JsonPropertyName("lastDing")]
    public double? LastDing { get; init; }

    [JsonPropertyName("lastDingTime")]
    public string? LastDingTime { get; init; }

    [JsonPropertyName("Name")]
    public string? Name_0 { get; init; }

    [JsonPropertyName("name")]
    public string? Name_1 { get; init; }

    [JsonPropertyName("Hours")]
    public double? Hours_0 { get; init; }

    [JsonPropertyName("hours")]
    public double? Hours_1 { get; init; }

    [JsonPropertyName("Type")]
    public string? Type_0 { get; init; }

    [JsonPropertyName("type")]
    public string? Type_1 { get; init; }

    [JsonPropertyName("MPAN")]
    public string? MPAN { get; init; }

    [JsonPropertyName("rolling_target")]
    public bool? RollingTarget { get; init; }

    [JsonPropertyName("is_target_export")]
    public bool? IsTargetExport { get; init; }

    [JsonPropertyName("target_times")]
    public IReadOnlyList<object>? TargetTimes { get; init; }

    [JsonPropertyName("next_time")]
    public object? NextTime { get; init; }

    [JsonPropertyName("current_duration_in_hours")]
    public double? CurrentDurationInHours { get; init; }

    [JsonPropertyName("next_duration_in_hours")]
    public double? NextDurationInHours { get; init; }

    [JsonPropertyName("last_rates")]
    public bool? LastRates { get; init; }

    [JsonPropertyName("overall_average_cost")]
    public object? OverallAverageCost { get; init; }

    [JsonPropertyName("overall_min_cost")]
    public object? OverallMinCost { get; init; }

    [JsonPropertyName("overall_max_cost")]
    public object? OverallMaxCost { get; init; }

    [JsonPropertyName("current_average_cost")]
    public object? CurrentAverageCost { get; init; }

    [JsonPropertyName("current_min_cost")]
    public object? CurrentMinCost { get; init; }

    [JsonPropertyName("current_max_cost")]
    public object? CurrentMaxCost { get; init; }

    [JsonPropertyName("next_average_cost")]
    public object? NextAverageCost { get; init; }

    [JsonPropertyName("next_min_cost")]
    public object? NextMinCost { get; init; }

    [JsonPropertyName("next_max_cost")]
    public object? NextMaxCost { get; init; }

    [JsonPropertyName("current_joined_event_start")]
    public object? CurrentJoinedEventStart { get; init; }

    [JsonPropertyName("current_joined_event_end")]
    public object? CurrentJoinedEventEnd { get; init; }

    [JsonPropertyName("current_joined_event_duration_in_minutes")]
    public object? CurrentJoinedEventDurationInMinutes { get; init; }

    [JsonPropertyName("data_last_retrieved")]
    public string? DataLastRetrieved { get; init; }

    [JsonPropertyName("last_evaluated")]
    public string? LastEvaluated { get; init; }

    [JsonPropertyName("current_start")]
    public object? CurrentStart { get; init; }

    [JsonPropertyName("current_end")]
    public object? CurrentEnd { get; init; }

    [JsonPropertyName("next_start")]
    public object? NextStart { get; init; }

    [JsonPropertyName("next_end")]
    public object? NextEnd { get; init; }

    [JsonPropertyName("mpan")]
    public string? Mpan { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("target_invert_target_rates")]
    public bool? TargetInvertTargetRates { get; init; }

    [JsonPropertyName("kind")]
    public string? Kind { get; init; }

    [JsonPropertyName("account_id")]
    public string? AccountId { get; init; }

    [JsonPropertyName("rates_incomplete")]
    public bool? RatesIncomplete { get; init; }

    [JsonPropertyName("target_times_last_evaluated")]
    public string? TargetTimesLastEvaluated { get; init; }

    [JsonPropertyName("hours_mode")]
    public string? HoursMode { get; init; }

    [JsonPropertyName("maximum_rate")]
    public double? MaximumRate { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>, ICalendarEntityCore
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("offset_reached")]
    public bool? OffsetReached { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("all_day")]
    public bool? AllDay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("video_url")]
    public string? VideoUrl { get; init; }

    [JsonPropertyName("last_video_id")]
    public double? LastVideoId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("motion_detection")]
    public bool? MotionDetection { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("target_temp_step")]
    public double? TargetTempStep { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("window_state")]
    public string? WindowState { get; init; }

    [JsonPropertyName("window_detection_active")]
    public bool? WindowDetectionActive { get; init; }

    [JsonPropertyName("away_mode_supressed")]
    public object? AwayModeSupressed { get; init; }

    [JsonPropertyName("heating_type")]
    public string? HeatingType { get; init; }

    [JsonPropertyName("number_of_heating_actuators")]
    public double? NumberOfHeatingActuators { get; init; }

    [JsonPropertyName("demand_type")]
    public string? DemandType { get; init; }

    [JsonPropertyName("target_temperature_origin")]
    public string? TargetTemperatureOrigin { get; init; }

    [JsonPropertyName("is_boosted")]
    public bool? IsBoosted { get; init; }

    [JsonPropertyName("is_override")]
    public bool? IsOverride { get; init; }

    [JsonPropertyName("is_heating")]
    public bool? IsHeating { get; init; }

    [JsonPropertyName("control_output_state")]
    public string? ControlOutputState { get; init; }

    [JsonPropertyName("heating_rate")]
    public double? HeatingRate { get; init; }

    [JsonPropertyName("boost_time_remaining")]
    public double? BoostTimeRemaining { get; init; }

    [JsonPropertyName("percentage_demand")]
    public double? PercentageDemand { get; init; }

    [JsonPropertyName("comfort_mode_score")]
    public double? ComfortModeScore { get; init; }

    [JsonPropertyName("control_direction")]
    public string? ControlDirection { get; init; }

    [JsonPropertyName("displayed_setpoint")]
    public double? DisplayedSetpoint { get; init; }

    [JsonPropertyName("schedule_id")]
    public double? ScheduleId { get; init; }

    [JsonPropertyName("schedule_name")]
    public string? ScheduleName { get; init; }

    [JsonPropertyName("current_schedule_temp")]
    public double? CurrentScheduleTemp { get; init; }

    [JsonPropertyName("next_day_change")]
    public string? NextDayChange { get; init; }

    [JsonPropertyName("next_schedule_change")]
    public string? NextScheduleChange { get; init; }

    [JsonPropertyName("next_schedule_datetime")]
    public string? NextScheduleDatetime { get; init; }

    [JsonPropertyName("next_schedule_temp")]
    public double? NextScheduleTemp { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("current_humidity")]
    public double? CurrentHumidity { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("swing_modes")]
    public IReadOnlyList<string>? SwingModes { get; init; }

    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }

    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }

    [JsonPropertyName("vane_horizontal")]
    public string? VaneHorizontal { get; init; }

    [JsonPropertyName("vane_horizontal_positions")]
    public IReadOnlyList<string>? VaneHorizontalPositions { get; init; }

    [JsonPropertyName("vane_vertical")]
    public string? VaneVertical { get; init; }

    [JsonPropertyName("vane_vertical_positions")]
    public IReadOnlyList<string>? VaneVerticalPositions { get; init; }

    [JsonPropertyName("is_passive")]
    public bool? IsPassive { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("include_in_summer_comfort")]
    public object? IncludeInSummerComfort { get; init; }

    [JsonPropertyName("floor_sensor_state")]
    public string? FloorSensorState { get; init; }

    [JsonPropertyName("occupancy_capable")]
    public bool? OccupancyCapable { get; init; }

    [JsonPropertyName("number_of_trvs")]
    public double? NumberOfTrvs { get; init; }

    [JsonPropertyName("number_of_trvs_locked")]
    public double? NumberOfTrvsLocked { get; init; }

    [JsonPropertyName("is_roomstat_locked")]
    public bool? IsRoomstatLocked { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record CoverEntity : Entity<CoverEntity, EntityState<CoverAttributes>, CoverAttributes>, ICoverEntityCore
{
    public CoverEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CoverEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CoverAttributes
{
    [JsonPropertyName("current_position")]
    public double? CurrentPosition { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("target_lift_position")]
    public object? TargetLiftPosition { get; init; }

    [JsonPropertyName("target_tilt_position")]
    public object? TargetTiltPosition { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    [JsonPropertyName("_is_guest_by_uap")]
    public bool? IsGuestByUap { get; init; }

    [JsonPropertyName("ap_mac")]
    public string? ApMac { get; init; }

    [JsonPropertyName("authorized")]
    public bool? Authorized { get; init; }

    [JsonPropertyName("essid")]
    public string? Essid { get; init; }

    [JsonPropertyName("is_11r")]
    public bool? Is11r { get; init; }

    [JsonPropertyName("is_guest")]
    public bool? IsGuest { get; init; }

    [JsonPropertyName("qos_policy_applied")]
    public bool? QosPolicyApplied { get; init; }

    [JsonPropertyName("radio")]
    public string? Radio { get; init; }

    [JsonPropertyName("radio_proto")]
    public string? RadioProto { get; init; }

    [JsonPropertyName("vlan")]
    public double? Vlan { get; init; }

    [JsonPropertyName("oui")]
    public string? Oui { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("note")]
    public string? Note { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }
}

public partial record GroupEntity : Entity<GroupEntity, EntityState<GroupAttributes>, GroupAttributes>, IGroupEntityCore
{
    public GroupEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public GroupEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record GroupAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("order")]
    public double? Order { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputButtonEntity : Entity<InputButtonEntity, EntityState<InputButtonAttributes>, InputButtonAttributes>, IInputButtonEntityCore
{
    public InputButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputButtonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>, IInputNumberEntityCore
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public double? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputSelectEntity : Entity<InputSelectEntity, EntityState<InputSelectAttributes>, InputSelectAttributes>, IInputSelectEntityCore
{
    public InputSelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputSelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputSelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>, IInputTextEntityCore
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("off_with_transition")]
    public bool? OffWithTransition { get; init; }

    [JsonPropertyName("off_brightness")]
    public double? OffBrightness { get; init; }

    [JsonPropertyName("brightness")]
    public object? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public object? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("group_members")]
    public IReadOnlyList<string>? GroupMembers { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("available")]
    public bool? Available { get; init; }

    [JsonPropertyName("last_called")]
    public bool? LastCalled { get; init; }

    [JsonPropertyName("last_called_timestamp")]
    public double? LastCalledTimestamp { get; init; }

    [JsonPropertyName("last_called_summary")]
    public string? LastCalledSummary { get; init; }

    [JsonPropertyName("connected_bluetooth")]
    public object? ConnectedBluetooth { get; init; }

    [JsonPropertyName("bluetooth_list")]
    public IReadOnlyList<string>? BluetoothList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("queue_size")]
    public double? QueueSize { get; init; }

    [JsonPropertyName("previous_volume")]
    public double? PreviousVolume { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ProximityEntity : NumericEntity<ProximityEntity, NumericEntityState<ProximityAttributes>, ProximityAttributes>, IProximityEntityCore
{
    public ProximityEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ProximityEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ProximityAttributes
{
    [JsonPropertyName("dir_of_travel")]
    public string? DirOfTravel { get; init; }

    [JsonPropertyName("nearest")]
    public string? Nearest { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("recordingUrl")]
    public string? RecordingUrl { get; init; }

    [JsonPropertyName("eventId")]
    public string? EventId { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("last_changed")]
    public string? LastChanged { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("current_bans")]
    public object? CurrentBans { get; init; }

    [JsonPropertyName("total_bans")]
    public object? TotalBans { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("number_of_loaded_apps")]
    public double? NumberOfLoadedApps { get; init; }

    [JsonPropertyName("number_of_running_apps")]
    public double? NumberOfRunningApps { get; init; }

    [JsonPropertyName("version")]
    public string? Version { get; init; }

    [JsonPropertyName("Resolver")]
    public string? Resolver_0 { get; init; }

    [JsonPropertyName("resolver")]
    public string? Resolver_1 { get; init; }

    [JsonPropertyName("Querytype")]
    public string? Querytype_0 { get; init; }

    [JsonPropertyName("querytype")]
    public string? Querytype_1 { get; init; }

    [JsonPropertyName("vendor")]
    public string? Vendor { get; init; }

    [JsonPropertyName("product_type")]
    public string? ProductType { get; init; }

    [JsonPropertyName("model_identifier")]
    public string? ModelIdentifier { get; init; }

    [JsonPropertyName("firmware")]
    public string? Firmware { get; init; }

    [JsonPropertyName("node_id")]
    public double? NodeId { get; init; }

    [JsonPropertyName("zigbee_channel")]
    public double? ZigbeeChannel { get; init; }

    [JsonPropertyName("displayed_signal_strength")]
    public string? DisplayedSignalStrength { get; init; }

    [JsonPropertyName("serial_number")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("hub_route")]
    public string? HubRoute { get; init; }

    [JsonPropertyName("device_reception_RSSI")]
    public double? DeviceReceptionRSSI { get; init; }

    [JsonPropertyName("device_reception_LQI")]
    public double? DeviceReceptionLQI { get; init; }

    [JsonPropertyName("device_reception_percent")]
    public double? DeviceReceptionPercent { get; init; }

    [JsonPropertyName("controller_reception_RSSI")]
    public double? ControllerReceptionRSSI { get; init; }

    [JsonPropertyName("controller_reception_LQI")]
    public double? ControllerReceptionLQI { get; init; }

    [JsonPropertyName("controller_reception_percent")]
    public double? ControllerReceptionPercent { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("last_updated")]
    public string? LastUpdated { get; init; }

    [JsonPropertyName("minutes_since_last_update")]
    public double? MinutesSinceLastUpdate { get; init; }

    [JsonPropertyName("last_update_status")]
    public string? LastUpdateStatus { get; init; }

    [JsonPropertyName("percentage_demand_Channel-1")]
    public double? PercentageDemandChannel1 { get; init; }

    [JsonPropertyName("room_ids_Channel-1")]
    public IReadOnlyList<double>? RoomIdsChannel1 { get; init; }

    [JsonPropertyName("is_smartvalve_preventing_demand_Channel-1")]
    public bool? IsSmartvalvePreventingDemandChannel1 { get; init; }

    [JsonPropertyName("boost_time_remaining")]
    public double? BoostTimeRemaining { get; init; }

    [JsonPropertyName("away_mode_supressed")]
    public object? AwayModeSupressed { get; init; }

    [JsonPropertyName("is_away_mode")]
    public bool? IsAwayMode { get; init; }

    [JsonPropertyName("is_boosted")]
    public bool? IsBoosted { get; init; }

    [JsonPropertyName("is_override")]
    public bool? IsOverride { get; init; }

    [JsonPropertyName("schedule_id")]
    public double? ScheduleId { get; init; }

    [JsonPropertyName("schedule_name")]
    public string? ScheduleName { get; init; }

    [JsonPropertyName("next_day_change")]
    public string? NextDayChange { get; init; }

    [JsonPropertyName("next_schedule_change")]
    public string? NextScheduleChange { get; init; }

    [JsonPropertyName("next_schedule_datetime")]
    public string? NextScheduleDatetime { get; init; }

    [JsonPropertyName("next_schedule_state")]
    public string? NextScheduleState { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("data")]
    public object? Data { get; init; }

    [JsonPropertyName("event")]
    public string? Event { get; init; }

    [JsonPropertyName("text")]
    public string? Text { get; init; }

    [JsonPropertyName("wifi_strength")]
    public double? WifiStrength { get; init; }

    [JsonPropertyName("wifi_strength_percent")]
    public double? WifiStrengthPercent { get; init; }

    [JsonPropertyName("wifi_SSID")]
    public string? WifiSSID { get; init; }

    [JsonPropertyName("wifi_IP")]
    public string? WifiIP { get; init; }

    [JsonPropertyName("api_version")]
    public string? ApiVersion { get; init; }

    [JsonPropertyName("integration_version")]
    public string? IntegrationVersion { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea { get; init; }

    [JsonPropertyName("Areas Of Interest")]
    public object? AreasOfInterest { get; init; }

    [JsonPropertyName("Country")]
    public string? Country { get; init; }

    [JsonPropertyName("Inland Water")]
    public string? InlandWater { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality { get; init; }

    [JsonPropertyName("Location")]
    public IReadOnlyList<double>? Location_0 { get; init; }

    [JsonPropertyName("location")]
    public string? Location_1 { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Ocean")]
    public string? Ocean { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare { get; init; }

    [JsonPropertyName("Time Zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("Zones")]
    public IReadOnlyList<string>? Zones { get; init; }

    [JsonPropertyName("Hardware Address")]
    public string? HardwareAddress { get; init; }

    [JsonPropertyName("Active Camera")]
    public IReadOnlyList<object>? ActiveCamera { get; init; }

    [JsonPropertyName("All Camera")]
    public IReadOnlyList<string>? AllCamera { get; init; }

    [JsonPropertyName("Active Audio Input")]
    public IReadOnlyList<object>? ActiveAudioInput { get; init; }

    [JsonPropertyName("All Audio Input")]
    public IReadOnlyList<string>? AllAudioInput { get; init; }

    [JsonPropertyName("Display IDs")]
    public IReadOnlyList<string>? DisplayIDs { get; init; }

    [JsonPropertyName("Display Names")]
    public IReadOnlyList<string>? DisplayNames { get; init; }

    [JsonPropertyName("Bundle Identifier")]
    public string? BundleIdentifier { get; init; }

    [JsonPropertyName("Is Hidden")]
    public bool? IsHidden { get; init; }

    [JsonPropertyName("Launch Date")]
    public string? LaunchDate { get; init; }

    [JsonPropertyName("Owns Menu Bar")]
    public bool? OwnsMenuBar { get; init; }

    [JsonPropertyName("Active Audio Output")]
    public object? ActiveAudioOutput { get; init; }

    [JsonPropertyName("All Audio Output")]
    public IReadOnlyList<string>? AllAudioOutput { get; init; }

    [JsonPropertyName("Confidence")]
    public string? Confidence { get; init; }

    [JsonPropertyName("Types")]
    public IReadOnlyList<string>? Types { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Battery Provides Time Remaining")]
    public bool? BatteryProvidesTimeRemaining { get; init; }

    [JsonPropertyName("BatteryHealth")]
    public string? BatteryHealth { get; init; }

    [JsonPropertyName("BatteryHealthCondition")]
    public string? BatteryHealthCondition { get; init; }

    [JsonPropertyName("Current")]
    public double? Current { get; init; }

    [JsonPropertyName("Current Capacity")]
    public double? CurrentCapacity { get; init; }

    [JsonPropertyName("DesignCycleCount")]
    public double? DesignCycleCount { get; init; }

    [JsonPropertyName("Hardware Serial Number")]
    public string? HardwareSerialNumber { get; init; }

    [JsonPropertyName("Is Charged")]
    public bool? IsCharged { get; init; }

    [JsonPropertyName("Is Charging")]
    public bool? IsCharging { get; init; }

    [JsonPropertyName("Is Present")]
    public bool? IsPresent { get; init; }

    [JsonPropertyName("LPM Active")]
    public bool? LPMActive { get; init; }

    [JsonPropertyName("Max Capacity")]
    public double? MaxCapacity { get; init; }

    [JsonPropertyName("Optimized Battery Charging Engaged")]
    public bool? OptimizedBatteryChargingEngaged { get; init; }

    [JsonPropertyName("Power Source ID")]
    public double? PowerSourceID { get; init; }

    [JsonPropertyName("Power Source State")]
    public string? PowerSourceState { get; init; }

    [JsonPropertyName("Time to Empty")]
    public double? TimetoEmpty { get; init; }

    [JsonPropertyName("Time to Full Charge")]
    public double? TimetoFullCharge { get; init; }

    [JsonPropertyName("Transport Type")]
    public string? TransportType { get; init; }

    [JsonPropertyName("Type")]
    public string? Type_0 { get; init; }

    [JsonPropertyName("type")]
    public string? Type_1 { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("2023-06-27T21:30:00Z")]
    public double? _20230627T213000Z { get; init; }

    [JsonPropertyName("2023-06-27T21:00:00Z")]
    public double? _20230627T210000Z { get; init; }

    [JsonPropertyName("2023-06-27T20:30:00Z")]
    public double? _20230627T203000Z { get; init; }

    [JsonPropertyName("2023-06-27T20:00:00Z")]
    public double? _20230627T200000Z { get; init; }

    [JsonPropertyName("2023-06-27T19:30:00Z")]
    public double? _20230627T193000Z { get; init; }

    [JsonPropertyName("2023-06-27T19:00:00Z")]
    public double? _20230627T190000Z { get; init; }

    [JsonPropertyName("2023-06-27T18:30:00Z")]
    public double? _20230627T183000Z { get; init; }

    [JsonPropertyName("2023-06-27T18:00:00Z")]
    public double? _20230627T180000Z { get; init; }

    [JsonPropertyName("2023-06-27T17:30:00Z")]
    public double? _20230627T173000Z { get; init; }

    [JsonPropertyName("2023-06-27T17:00:00Z")]
    public double? _20230627T170000Z { get; init; }

    [JsonPropertyName("2023-06-27T16:30:00Z")]
    public double? _20230627T163000Z { get; init; }

    [JsonPropertyName("2023-06-27T16:00:00Z")]
    public double? _20230627T160000Z { get; init; }

    [JsonPropertyName("2023-06-27T15:30:00Z")]
    public double? _20230627T153000Z { get; init; }

    [JsonPropertyName("2023-06-27T15:00:00Z")]
    public double? _20230627T150000Z { get; init; }

    [JsonPropertyName("2023-06-27T14:30:00Z")]
    public double? _20230627T143000Z { get; init; }

    [JsonPropertyName("2023-06-27T14:00:00Z")]
    public double? _20230627T140000Z { get; init; }

    [JsonPropertyName("2023-06-27T13:30:00Z")]
    public double? _20230627T133000Z { get; init; }

    [JsonPropertyName("2023-06-27T13:00:00Z")]
    public double? _20230627T130000Z { get; init; }

    [JsonPropertyName("2023-06-27T12:30:00Z")]
    public double? _20230627T123000Z { get; init; }

    [JsonPropertyName("2023-06-27T12:00:00Z")]
    public double? _20230627T120000Z { get; init; }

    [JsonPropertyName("2023-06-27T11:30:00Z")]
    public double? _20230627T113000Z { get; init; }

    [JsonPropertyName("2023-06-27T11:00:00Z")]
    public double? _20230627T110000Z { get; init; }

    [JsonPropertyName("2023-06-27T10:30:00Z")]
    public double? _20230627T103000Z { get; init; }

    [JsonPropertyName("2023-06-27T10:00:00Z")]
    public double? _20230627T100000Z { get; init; }

    [JsonPropertyName("2023-06-27T09:30:00Z")]
    public double? _20230627T093000Z { get; init; }

    [JsonPropertyName("2023-06-27T09:00:00Z")]
    public double? _20230627T090000Z { get; init; }

    [JsonPropertyName("2023-06-27T08:30:00Z")]
    public double? _20230627T083000Z { get; init; }

    [JsonPropertyName("2023-06-27T08:00:00Z")]
    public double? _20230627T080000Z { get; init; }

    [JsonPropertyName("2023-06-27T07:30:00Z")]
    public double? _20230627T073000Z { get; init; }

    [JsonPropertyName("2023-06-27T07:00:00Z")]
    public double? _20230627T070000Z { get; init; }

    [JsonPropertyName("2023-06-27T06:30:00Z")]
    public double? _20230627T063000Z { get; init; }

    [JsonPropertyName("2023-06-27T06:00:00Z")]
    public double? _20230627T060000Z { get; init; }

    [JsonPropertyName("2023-06-27T05:30:00Z")]
    public double? _20230627T053000Z { get; init; }

    [JsonPropertyName("2023-06-27T05:00:00Z")]
    public double? _20230627T050000Z { get; init; }

    [JsonPropertyName("2023-06-27T04:30:00Z")]
    public double? _20230627T043000Z { get; init; }

    [JsonPropertyName("2023-06-27T04:00:00Z")]
    public double? _20230627T040000Z { get; init; }

    [JsonPropertyName("2023-06-27T03:30:00Z")]
    public double? _20230627T033000Z { get; init; }

    [JsonPropertyName("2023-06-27T03:00:00Z")]
    public double? _20230627T030000Z { get; init; }

    [JsonPropertyName("2023-06-27T02:30:00Z")]
    public double? _20230627T023000Z { get; init; }

    [JsonPropertyName("2023-06-27T02:00:00Z")]
    public double? _20230627T020000Z { get; init; }

    [JsonPropertyName("2023-06-27T01:30:00Z")]
    public double? _20230627T013000Z { get; init; }

    [JsonPropertyName("2023-06-27T01:00:00Z")]
    public double? _20230627T010000Z { get; init; }

    [JsonPropertyName("2023-06-27T00:30:00Z")]
    public double? _20230627T003000Z { get; init; }

    [JsonPropertyName("2023-06-27T00:00:00Z")]
    public double? _20230627T000000Z { get; init; }

    [JsonPropertyName("2023-06-26T23:30:00Z")]
    public double? _20230626T233000Z { get; init; }

    [JsonPropertyName("2023-06-26T23:00:00Z")]
    public double? _20230626T230000Z { get; init; }

    [JsonPropertyName("2023-06-26T22:30:00Z")]
    public double? _20230626T223000Z { get; init; }

    [JsonPropertyName("2023-06-26T22:00:00Z")]
    public double? _20230626T220000Z { get; init; }

    [JsonPropertyName("2023-06-26T21:30:00Z")]
    public double? _20230626T213000Z { get; init; }

    [JsonPropertyName("created_at")]
    public string? CreatedAt { get; init; }

    [JsonPropertyName("answered")]
    public bool? Answered { get; init; }

    [JsonPropertyName("recording_status")]
    public string? RecordingStatus { get; init; }

    [JsonPropertyName("category")]
    public string? Category { get; init; }

    [JsonPropertyName("device_id")]
    public object? DeviceId { get; init; }

    [JsonPropertyName("recurrence")]
    public object? Recurrence { get; init; }

    [JsonPropertyName("process_timestamp")]
    public string? ProcessTimestamp { get; init; }

    [JsonPropertyName("prior_value")]
    public object? PriorValue { get; init; }

    [JsonPropertyName("total_active")]
    public double? TotalActive { get; init; }

    [JsonPropertyName("total_all")]
    public double? TotalAll { get; init; }

    [JsonPropertyName("sorted_active")]
    public string? SortedActive { get; init; }

    [JsonPropertyName("sorted_all")]
    public string? SortedAll { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("dismissed")]
    public object? Dismissed { get; init; }

    [JsonPropertyName("reminder")]
    public object? Reminder { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("firmwareStatus")]
    public string? FirmwareStatus { get; init; }

    [JsonPropertyName("lastUpdate")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("wirelessNetwork")]
    public string? WirelessNetwork { get; init; }

    [JsonPropertyName("wirelessSignal")]
    public double? WirelessSignal { get; init; }

    [JsonPropertyName("stream_Source")]
    public string? StreamSource { get; init; }

    [JsonPropertyName("still_Image_URL")]
    public string? StillImageURL { get; init; }

    [JsonPropertyName("batteryLevel")]
    public object? BatteryLevel { get; init; }

    [JsonPropertyName("Cellular Technology")]
    public string? CellularTechnology { get; init; }

    [JsonPropertyName("2023-07-05T21:30:00Z")]
    public double? _20230705T213000Z { get; init; }

    [JsonPropertyName("2023-07-05T21:00:00Z")]
    public double? _20230705T210000Z { get; init; }

    [JsonPropertyName("2023-07-05T20:30:00Z")]
    public double? _20230705T203000Z { get; init; }

    [JsonPropertyName("2023-07-05T20:00:00Z")]
    public double? _20230705T200000Z { get; init; }

    [JsonPropertyName("2023-07-05T19:30:00Z")]
    public double? _20230705T193000Z { get; init; }

    [JsonPropertyName("2023-07-05T19:00:00Z")]
    public double? _20230705T190000Z { get; init; }

    [JsonPropertyName("2023-07-05T18:30:00Z")]
    public double? _20230705T183000Z { get; init; }

    [JsonPropertyName("2023-07-05T18:00:00Z")]
    public double? _20230705T180000Z { get; init; }

    [JsonPropertyName("2023-07-05T17:30:00Z")]
    public double? _20230705T173000Z { get; init; }

    [JsonPropertyName("2023-07-05T17:00:00Z")]
    public double? _20230705T170000Z { get; init; }

    [JsonPropertyName("2023-07-05T16:30:00Z")]
    public double? _20230705T163000Z { get; init; }

    [JsonPropertyName("2023-07-05T16:00:00Z")]
    public double? _20230705T160000Z { get; init; }

    [JsonPropertyName("2023-07-05T15:30:00Z")]
    public double? _20230705T153000Z { get; init; }

    [JsonPropertyName("2023-07-05T15:00:00Z")]
    public double? _20230705T150000Z { get; init; }

    [JsonPropertyName("2023-07-05T14:30:00Z")]
    public double? _20230705T143000Z { get; init; }

    [JsonPropertyName("2023-07-05T14:00:00Z")]
    public double? _20230705T140000Z { get; init; }

    [JsonPropertyName("2023-07-05T13:30:00Z")]
    public double? _20230705T133000Z { get; init; }

    [JsonPropertyName("2023-07-05T13:00:00Z")]
    public double? _20230705T130000Z { get; init; }

    [JsonPropertyName("2023-07-05T12:30:00Z")]
    public double? _20230705T123000Z { get; init; }

    [JsonPropertyName("2023-07-05T12:00:00Z")]
    public double? _20230705T120000Z { get; init; }

    [JsonPropertyName("2023-07-05T11:30:00Z")]
    public double? _20230705T113000Z { get; init; }

    [JsonPropertyName("2023-07-05T11:00:00Z")]
    public double? _20230705T110000Z { get; init; }

    [JsonPropertyName("2023-07-05T10:30:00Z")]
    public double? _20230705T103000Z { get; init; }

    [JsonPropertyName("2023-07-05T10:00:00Z")]
    public double? _20230705T100000Z { get; init; }

    [JsonPropertyName("2023-07-05T09:30:00Z")]
    public double? _20230705T093000Z { get; init; }

    [JsonPropertyName("2023-07-05T09:00:00Z")]
    public double? _20230705T090000Z { get; init; }

    [JsonPropertyName("2023-07-05T08:30:00Z")]
    public double? _20230705T083000Z { get; init; }

    [JsonPropertyName("2023-07-05T08:00:00Z")]
    public double? _20230705T080000Z { get; init; }

    [JsonPropertyName("2023-07-05T07:30:00Z")]
    public double? _20230705T073000Z { get; init; }

    [JsonPropertyName("2023-07-05T07:00:00Z")]
    public double? _20230705T070000Z { get; init; }

    [JsonPropertyName("2023-07-05T06:30:00Z")]
    public double? _20230705T063000Z { get; init; }

    [JsonPropertyName("2023-07-05T06:00:00Z")]
    public double? _20230705T060000Z { get; init; }

    [JsonPropertyName("2023-07-05T05:30:00Z")]
    public double? _20230705T053000Z { get; init; }

    [JsonPropertyName("2023-07-05T05:00:00Z")]
    public double? _20230705T050000Z { get; init; }

    [JsonPropertyName("2023-07-05T04:30:00Z")]
    public double? _20230705T043000Z { get; init; }

    [JsonPropertyName("2023-07-05T04:00:00Z")]
    public double? _20230705T040000Z { get; init; }

    [JsonPropertyName("2023-07-05T03:30:00Z")]
    public double? _20230705T033000Z { get; init; }

    [JsonPropertyName("2023-07-05T03:00:00Z")]
    public double? _20230705T030000Z { get; init; }

    [JsonPropertyName("2023-07-05T02:30:00Z")]
    public double? _20230705T023000Z { get; init; }

    [JsonPropertyName("2023-07-05T02:00:00Z")]
    public double? _20230705T020000Z { get; init; }

    [JsonPropertyName("2023-07-05T01:30:00Z")]
    public double? _20230705T013000Z { get; init; }

    [JsonPropertyName("2023-07-05T01:00:00Z")]
    public double? _20230705T010000Z { get; init; }

    [JsonPropertyName("2023-07-05T00:30:00Z")]
    public double? _20230705T003000Z { get; init; }

    [JsonPropertyName("2023-07-05T00:00:00Z")]
    public double? _20230705T000000Z { get; init; }

    [JsonPropertyName("2023-07-04T23:30:00Z")]
    public double? _20230704T233000Z { get; init; }

    [JsonPropertyName("2023-07-04T23:00:00Z")]
    public double? _20230704T230000Z { get; init; }

    [JsonPropertyName("2023-07-04T22:30:00Z")]
    public double? _20230704T223000Z { get; init; }

    [JsonPropertyName("2023-07-04T22:00:00Z")]
    public double? _20230704T220000Z { get; init; }

    [JsonPropertyName("2023-07-26T21:30:00Z")]
    public double? _20230726T213000Z { get; init; }

    [JsonPropertyName("2023-07-26T21:00:00Z")]
    public double? _20230726T210000Z { get; init; }

    [JsonPropertyName("2023-07-26T20:30:00Z")]
    public double? _20230726T203000Z { get; init; }

    [JsonPropertyName("2023-07-26T20:00:00Z")]
    public double? _20230726T200000Z { get; init; }

    [JsonPropertyName("2023-07-26T19:30:00Z")]
    public double? _20230726T193000Z { get; init; }

    [JsonPropertyName("2023-07-26T19:00:00Z")]
    public double? _20230726T190000Z { get; init; }

    [JsonPropertyName("2023-07-26T18:30:00Z")]
    public double? _20230726T183000Z { get; init; }

    [JsonPropertyName("2023-07-26T18:00:00Z")]
    public double? _20230726T180000Z { get; init; }

    [JsonPropertyName("2023-07-26T17:30:00Z")]
    public double? _20230726T173000Z { get; init; }

    [JsonPropertyName("2023-07-26T17:00:00Z")]
    public double? _20230726T170000Z { get; init; }

    [JsonPropertyName("2023-07-26T16:30:00Z")]
    public double? _20230726T163000Z { get; init; }

    [JsonPropertyName("2023-07-26T16:00:00Z")]
    public double? _20230726T160000Z { get; init; }

    [JsonPropertyName("2023-07-26T15:30:00Z")]
    public double? _20230726T153000Z { get; init; }

    [JsonPropertyName("2023-07-26T15:00:00Z")]
    public double? _20230726T150000Z { get; init; }

    [JsonPropertyName("2023-07-26T14:30:00Z")]
    public double? _20230726T143000Z { get; init; }

    [JsonPropertyName("2023-07-26T14:00:00Z")]
    public double? _20230726T140000Z { get; init; }

    [JsonPropertyName("2023-07-26T13:30:00Z")]
    public double? _20230726T133000Z { get; init; }

    [JsonPropertyName("2023-07-26T13:00:00Z")]
    public double? _20230726T130000Z { get; init; }

    [JsonPropertyName("2023-07-26T12:30:00Z")]
    public double? _20230726T123000Z { get; init; }

    [JsonPropertyName("2023-07-26T12:00:00Z")]
    public double? _20230726T120000Z { get; init; }

    [JsonPropertyName("2023-07-26T11:30:00Z")]
    public double? _20230726T113000Z { get; init; }

    [JsonPropertyName("2023-07-26T11:00:00Z")]
    public double? _20230726T110000Z { get; init; }

    [JsonPropertyName("2023-07-26T10:30:00Z")]
    public double? _20230726T103000Z { get; init; }

    [JsonPropertyName("2023-07-26T10:00:00Z")]
    public double? _20230726T100000Z { get; init; }

    [JsonPropertyName("2023-07-26T09:30:00Z")]
    public double? _20230726T093000Z { get; init; }

    [JsonPropertyName("2023-07-26T09:00:00Z")]
    public double? _20230726T090000Z { get; init; }

    [JsonPropertyName("2023-07-26T08:30:00Z")]
    public double? _20230726T083000Z { get; init; }

    [JsonPropertyName("2023-07-26T08:00:00Z")]
    public double? _20230726T080000Z { get; init; }

    [JsonPropertyName("2023-07-26T07:30:00Z")]
    public double? _20230726T073000Z { get; init; }

    [JsonPropertyName("Is Finishing Charge")]
    public bool? IsFinishingCharge { get; init; }

    [JsonPropertyName("2023-07-29T21:30:00Z")]
    public double? _20230729T213000Z { get; init; }

    [JsonPropertyName("2023-07-29T21:00:00Z")]
    public double? _20230729T210000Z { get; init; }

    [JsonPropertyName("2023-07-29T20:30:00Z")]
    public double? _20230729T203000Z { get; init; }

    [JsonPropertyName("2023-07-29T20:00:00Z")]
    public double? _20230729T200000Z { get; init; }

    [JsonPropertyName("2023-07-29T19:30:00Z")]
    public double? _20230729T193000Z { get; init; }

    [JsonPropertyName("2023-07-29T19:00:00Z")]
    public double? _20230729T190000Z { get; init; }

    [JsonPropertyName("2023-07-29T18:30:00Z")]
    public double? _20230729T183000Z { get; init; }

    [JsonPropertyName("2023-07-29T18:00:00Z")]
    public double? _20230729T180000Z { get; init; }

    [JsonPropertyName("2023-07-29T17:30:00Z")]
    public double? _20230729T173000Z { get; init; }

    [JsonPropertyName("2023-07-29T17:00:00Z")]
    public double? _20230729T170000Z { get; init; }

    [JsonPropertyName("2023-07-29T16:30:00Z")]
    public double? _20230729T163000Z { get; init; }

    [JsonPropertyName("2023-07-29T16:00:00Z")]
    public double? _20230729T160000Z { get; init; }

    [JsonPropertyName("2023-07-29T15:30:00Z")]
    public double? _20230729T153000Z { get; init; }

    [JsonPropertyName("2023-07-29T15:00:00Z")]
    public double? _20230729T150000Z { get; init; }

    [JsonPropertyName("2023-07-29T14:30:00Z")]
    public double? _20230729T143000Z { get; init; }

    [JsonPropertyName("2023-07-29T14:00:00Z")]
    public double? _20230729T140000Z { get; init; }

    [JsonPropertyName("2023-07-29T13:30:00Z")]
    public double? _20230729T133000Z { get; init; }

    [JsonPropertyName("2023-07-29T13:00:00Z")]
    public double? _20230729T130000Z { get; init; }

    [JsonPropertyName("2023-07-29T12:30:00Z")]
    public double? _20230729T123000Z { get; init; }

    [JsonPropertyName("2023-07-29T12:00:00Z")]
    public double? _20230729T120000Z { get; init; }

    [JsonPropertyName("2023-07-29T11:30:00Z")]
    public double? _20230729T113000Z { get; init; }

    [JsonPropertyName("2023-07-29T11:00:00Z")]
    public double? _20230729T110000Z { get; init; }

    [JsonPropertyName("2023-07-29T10:30:00Z")]
    public double? _20230729T103000Z { get; init; }

    [JsonPropertyName("2023-07-29T10:00:00Z")]
    public double? _20230729T100000Z { get; init; }

    [JsonPropertyName("2023-07-29T09:30:00Z")]
    public double? _20230729T093000Z { get; init; }

    [JsonPropertyName("2023-08-04T21:30:00Z")]
    public double? _20230804T213000Z { get; init; }

    [JsonPropertyName("2023-08-04T21:00:00Z")]
    public double? _20230804T210000Z { get; init; }

    [JsonPropertyName("2023-08-04T20:30:00Z")]
    public double? _20230804T203000Z { get; init; }

    [JsonPropertyName("2023-08-04T20:00:00Z")]
    public double? _20230804T200000Z { get; init; }

    [JsonPropertyName("2023-08-04T19:30:00Z")]
    public double? _20230804T193000Z { get; init; }

    [JsonPropertyName("2023-08-04T19:00:00Z")]
    public double? _20230804T190000Z { get; init; }

    [JsonPropertyName("2023-08-04T18:30:00Z")]
    public double? _20230804T183000Z { get; init; }

    [JsonPropertyName("2023-08-04T18:00:00Z")]
    public double? _20230804T180000Z { get; init; }

    [JsonPropertyName("2023-08-04T17:30:00Z")]
    public double? _20230804T173000Z { get; init; }

    [JsonPropertyName("2023-08-04T17:00:00Z")]
    public double? _20230804T170000Z { get; init; }

    [JsonPropertyName("2023-08-04T16:30:00Z")]
    public double? _20230804T163000Z { get; init; }

    [JsonPropertyName("2023-08-04T16:00:00Z")]
    public double? _20230804T160000Z { get; init; }

    [JsonPropertyName("2023-08-04T15:30:00Z")]
    public double? _20230804T153000Z { get; init; }

    [JsonPropertyName("2023-08-04T15:00:00Z")]
    public double? _20230804T150000Z { get; init; }

    [JsonPropertyName("2023-08-04T14:30:00Z")]
    public double? _20230804T143000Z { get; init; }

    [JsonPropertyName("2023-08-04T14:00:00Z")]
    public double? _20230804T140000Z { get; init; }

    [JsonPropertyName("2023-08-04T13:30:00Z")]
    public double? _20230804T133000Z { get; init; }

    [JsonPropertyName("2023-08-04T13:00:00Z")]
    public double? _20230804T130000Z { get; init; }

    [JsonPropertyName("2023-09-08T21:30:00Z")]
    public double? _20230908T213000Z { get; init; }

    [JsonPropertyName("2023-09-08T21:00:00Z")]
    public double? _20230908T210000Z { get; init; }

    [JsonPropertyName("2023-09-08T20:30:00Z")]
    public double? _20230908T203000Z { get; init; }

    [JsonPropertyName("2023-09-08T20:00:00Z")]
    public double? _20230908T200000Z { get; init; }

    [JsonPropertyName("2023-09-08T19:30:00Z")]
    public double? _20230908T193000Z { get; init; }

    [JsonPropertyName("2023-09-08T19:00:00Z")]
    public double? _20230908T190000Z { get; init; }

    [JsonPropertyName("2023-09-08T18:30:00Z")]
    public double? _20230908T183000Z { get; init; }

    [JsonPropertyName("2023-09-08T18:00:00Z")]
    public double? _20230908T180000Z { get; init; }

    [JsonPropertyName("2023-09-08T17:30:00Z")]
    public double? _20230908T173000Z { get; init; }

    [JsonPropertyName("2023-09-08T17:00:00Z")]
    public double? _20230908T170000Z { get; init; }

    [JsonPropertyName("2023-09-08T16:30:00Z")]
    public double? _20230908T163000Z { get; init; }

    [JsonPropertyName("2023-09-08T16:00:00Z")]
    public double? _20230908T160000Z { get; init; }

    [JsonPropertyName("2023-09-08T15:30:00Z")]
    public double? _20230908T153000Z { get; init; }

    [JsonPropertyName("2023-09-08T15:00:00Z")]
    public double? _20230908T150000Z { get; init; }

    [JsonPropertyName("2023-09-08T14:30:00Z")]
    public double? _20230908T143000Z { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public string? Serial { get; init; }

    [JsonPropertyName("state_message")]
    public object? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public string? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public object? UriSupported { get; init; }

    [JsonPropertyName("2024-01-25T22:30:00Z")]
    public double? _20240125T223000Z { get; init; }

    [JsonPropertyName("2024-01-25T22:00:00Z")]
    public double? _20240125T220000Z { get; init; }

    [JsonPropertyName("2024-01-25T21:30:00Z")]
    public double? _20240125T213000Z { get; init; }

    [JsonPropertyName("2024-01-25T21:00:00Z")]
    public double? _20240125T210000Z { get; init; }

    [JsonPropertyName("2024-01-25T20:30:00Z")]
    public double? _20240125T203000Z { get; init; }

    [JsonPropertyName("2024-01-25T20:00:00Z")]
    public double? _20240125T200000Z { get; init; }

    [JsonPropertyName("2024-01-25T19:30:00Z")]
    public double? _20240125T193000Z { get; init; }

    [JsonPropertyName("2024-01-25T19:00:00Z")]
    public double? _20240125T190000Z { get; init; }

    [JsonPropertyName("2024-01-25T18:30:00Z")]
    public double? _20240125T183000Z { get; init; }

    [JsonPropertyName("2024-01-25T18:00:00Z")]
    public double? _20240125T180000Z { get; init; }

    [JsonPropertyName("2024-01-25T17:30:00Z")]
    public double? _20240125T173000Z { get; init; }

    [JsonPropertyName("2024-01-25T17:00:00Z")]
    public double? _20240125T170000Z { get; init; }

    [JsonPropertyName("2024-01-25T16:30:00Z")]
    public double? _20240125T163000Z { get; init; }

    [JsonPropertyName("2024-01-25T16:00:00Z")]
    public double? _20240125T160000Z { get; init; }

    [JsonPropertyName("2024-01-25T15:30:00Z")]
    public double? _20240125T153000Z { get; init; }

    [JsonPropertyName("2024-01-25T15:00:00Z")]
    public double? _20240125T150000Z { get; init; }

    [JsonPropertyName("2024-01-25T14:30:00Z")]
    public double? _20240125T143000Z { get; init; }

    [JsonPropertyName("2024-01-25T14:00:00Z")]
    public double? _20240125T140000Z { get; init; }

    [JsonPropertyName("2024-01-25T13:30:00Z")]
    public double? _20240125T133000Z { get; init; }

    [JsonPropertyName("2024-01-25T13:00:00Z")]
    public double? _20240125T130000Z { get; init; }

    [JsonPropertyName("2024-01-25T12:30:00Z")]
    public double? _20240125T123000Z { get; init; }

    [JsonPropertyName("2024-01-25T12:00:00Z")]
    public double? _20240125T120000Z { get; init; }

    [JsonPropertyName("2024-01-25T11:30:00Z")]
    public double? _20240125T113000Z { get; init; }

    [JsonPropertyName("2024-01-25T11:00:00Z")]
    public double? _20240125T110000Z { get; init; }

    [JsonPropertyName("2024-01-25T10:30:00Z")]
    public double? _20240125T103000Z { get; init; }

    [JsonPropertyName("2024-01-25T10:00:00Z")]
    public double? _20240125T100000Z { get; init; }

    [JsonPropertyName("2024-01-25T09:30:00Z")]
    public double? _20240125T093000Z { get; init; }

    [JsonPropertyName("2024-01-25T09:00:00Z")]
    public double? _20240125T090000Z { get; init; }

    [JsonPropertyName("2024-01-25T08:30:00Z")]
    public double? _20240125T083000Z { get; init; }

    [JsonPropertyName("2024-01-25T08:00:00Z")]
    public double? _20240125T080000Z { get; init; }

    [JsonPropertyName("2024-01-25T07:30:00Z")]
    public double? _20240125T073000Z { get; init; }

    [JsonPropertyName("2024-01-25T07:00:00Z")]
    public double? _20240125T070000Z { get; init; }

    [JsonPropertyName("2024-01-25T06:30:00Z")]
    public double? _20240125T063000Z { get; init; }

    [JsonPropertyName("2024-01-25T06:00:00Z")]
    public double? _20240125T060000Z { get; init; }

    [JsonPropertyName("2024-01-25T05:30:00Z")]
    public double? _20240125T053000Z { get; init; }

    [JsonPropertyName("2024-01-25T05:00:00Z")]
    public double? _20240125T050000Z { get; init; }

    [JsonPropertyName("2024-01-25T04:30:00Z")]
    public double? _20240125T043000Z { get; init; }

    [JsonPropertyName("2024-01-25T04:00:00Z")]
    public double? _20240125T040000Z { get; init; }

    [JsonPropertyName("2024-01-25T03:30:00Z")]
    public double? _20240125T033000Z { get; init; }

    [JsonPropertyName("2024-01-25T03:00:00Z")]
    public double? _20240125T030000Z { get; init; }

    [JsonPropertyName("2024-01-25T02:30:00Z")]
    public double? _20240125T023000Z { get; init; }

    [JsonPropertyName("2024-01-25T02:00:00Z")]
    public double? _20240125T020000Z { get; init; }

    [JsonPropertyName("2024-01-25T01:30:00Z")]
    public double? _20240125T013000Z { get; init; }

    [JsonPropertyName("2024-01-25T01:00:00Z")]
    public double? _20240125T010000Z { get; init; }

    [JsonPropertyName("2024-01-25T00:30:00Z")]
    public double? _20240125T003000Z { get; init; }

    [JsonPropertyName("2024-01-25T00:00:00Z")]
    public double? _20240125T000000Z { get; init; }

    [JsonPropertyName("fridge_temp")]
    public double? FridgeTemp { get; init; }

    [JsonPropertyName("freezer_temp")]
    public double? FreezerTemp { get; init; }

    [JsonPropertyName("temp_unit")]
    public string? TempUnit { get; init; }

    [JsonPropertyName("door_open")]
    public string? DoorOpen { get; init; }

    [JsonPropertyName("express_cool")]
    public string? ExpressCool { get; init; }

    [JsonPropertyName("ice_plus")]
    public string? IcePlus { get; init; }

    [JsonPropertyName("2024-02-13T22:30:00Z")]
    public double? _20240213T223000Z { get; init; }

    [JsonPropertyName("2024-02-13T22:00:00Z")]
    public double? _20240213T220000Z { get; init; }

    [JsonPropertyName("2024-02-13T21:30:00Z")]
    public double? _20240213T213000Z { get; init; }

    [JsonPropertyName("2024-02-13T21:00:00Z")]
    public double? _20240213T210000Z { get; init; }

    [JsonPropertyName("2024-02-13T20:30:00Z")]
    public double? _20240213T203000Z { get; init; }

    [JsonPropertyName("2024-02-13T20:00:00Z")]
    public double? _20240213T200000Z { get; init; }

    [JsonPropertyName("2024-02-13T19:30:00Z")]
    public double? _20240213T193000Z { get; init; }

    [JsonPropertyName("2024-02-13T19:00:00Z")]
    public double? _20240213T190000Z { get; init; }

    [JsonPropertyName("2024-02-13T18:30:00Z")]
    public double? _20240213T183000Z { get; init; }

    [JsonPropertyName("2024-02-13T18:00:00Z")]
    public double? _20240213T180000Z { get; init; }

    [JsonPropertyName("2024-02-13T17:30:00Z")]
    public double? _20240213T173000Z { get; init; }

    [JsonPropertyName("2024-02-13T17:00:00Z")]
    public double? _20240213T170000Z { get; init; }

    [JsonPropertyName("2024-02-13T16:30:00Z")]
    public double? _20240213T163000Z { get; init; }

    [JsonPropertyName("2024-02-13T16:00:00Z")]
    public double? _20240213T160000Z { get; init; }

    [JsonPropertyName("2024-02-13T15:30:00Z")]
    public double? _20240213T153000Z { get; init; }

    [JsonPropertyName("2024-02-13T15:00:00Z")]
    public double? _20240213T150000Z { get; init; }

    [JsonPropertyName("2024-02-13T14:30:00Z")]
    public double? _20240213T143000Z { get; init; }

    [JsonPropertyName("2024-02-13T14:00:00Z")]
    public double? _20240213T140000Z { get; init; }

    [JsonPropertyName("2024-02-13T13:30:00Z")]
    public double? _20240213T133000Z { get; init; }

    [JsonPropertyName("2024-02-13T13:00:00Z")]
    public double? _20240213T130000Z { get; init; }

    [JsonPropertyName("2024-02-13T12:30:00Z")]
    public double? _20240213T123000Z { get; init; }

    [JsonPropertyName("2024-02-13T12:00:00Z")]
    public double? _20240213T120000Z { get; init; }

    [JsonPropertyName("2024-02-13T11:30:00Z")]
    public double? _20240213T113000Z { get; init; }

    [JsonPropertyName("2024-02-13T11:00:00Z")]
    public double? _20240213T110000Z { get; init; }

    [JsonPropertyName("2024-02-13T10:30:00Z")]
    public double? _20240213T103000Z { get; init; }

    [JsonPropertyName("last_evaluated")]
    public string? LastEvaluated { get; init; }

    [JsonPropertyName("data_last_retrieved")]
    public string? DataLastRetrieved { get; init; }

    [JsonPropertyName("uptime")]
    public string? Uptime { get; init; }

    [JsonPropertyName("last_reset_reason")]
    public string? LastResetReason { get; init; }

    [JsonPropertyName("ip_addresses")]
    public IReadOnlyList<string>? IpAddresses { get; init; }

    [JsonPropertyName("2024-06-17T21:30:00Z")]
    public double? _20240617T213000Z { get; init; }

    [JsonPropertyName("2024-06-17T21:00:00Z")]
    public double? _20240617T210000Z { get; init; }

    [JsonPropertyName("2024-06-17T20:30:00Z")]
    public double? _20240617T203000Z { get; init; }

    [JsonPropertyName("2024-06-17T20:00:00Z")]
    public double? _20240617T200000Z { get; init; }

    [JsonPropertyName("2024-06-17T19:30:00Z")]
    public double? _20240617T193000Z { get; init; }

    [JsonPropertyName("2024-06-17T19:00:00Z")]
    public double? _20240617T190000Z { get; init; }

    [JsonPropertyName("2024-06-17T18:30:00Z")]
    public double? _20240617T183000Z { get; init; }

    [JsonPropertyName("2024-06-17T18:00:00Z")]
    public double? _20240617T180000Z { get; init; }

    [JsonPropertyName("2024-06-17T17:30:00Z")]
    public double? _20240617T173000Z { get; init; }

    [JsonPropertyName("2024-06-17T17:00:00Z")]
    public double? _20240617T170000Z { get; init; }

    [JsonPropertyName("2024-06-17T16:30:00Z")]
    public double? _20240617T163000Z { get; init; }

    [JsonPropertyName("2024-06-17T16:00:00Z")]
    public double? _20240617T160000Z { get; init; }

    [JsonPropertyName("2024-06-17T15:30:00Z")]
    public double? _20240617T153000Z { get; init; }

    [JsonPropertyName("2024-06-17T15:00:00Z")]
    public double? _20240617T150000Z { get; init; }

    [JsonPropertyName("2024-06-17T14:30:00Z")]
    public double? _20240617T143000Z { get; init; }

    [JsonPropertyName("2024-06-17T14:00:00Z")]
    public double? _20240617T140000Z { get; init; }

    [JsonPropertyName("2024-06-17T13:30:00Z")]
    public double? _20240617T133000Z { get; init; }

    [JsonPropertyName("2024-06-17T13:00:00Z")]
    public double? _20240617T130000Z { get; init; }

    [JsonPropertyName("2024-06-17T12:30:00Z")]
    public double? _20240617T123000Z { get; init; }

    [JsonPropertyName("2024-06-17T12:00:00Z")]
    public double? _20240617T120000Z { get; init; }

    [JsonPropertyName("2024-06-17T11:30:00Z")]
    public double? _20240617T113000Z { get; init; }

    [JsonPropertyName("colour")]
    public string? Colour { get; init; }

    [JsonPropertyName("next_collection")]
    public string? NextCollection { get; init; }

    [JsonPropertyName("days")]
    public double? Days { get; init; }

    [JsonPropertyName("raw_data")]
    public object? RawData { get; init; }

    [JsonPropertyName("uuid")]
    public string? Uuid { get; init; }

    [JsonPropertyName("hardware_generation")]
    public double? HardwareGeneration { get; init; }

    [JsonPropertyName("product_model")]
    public string? ProductModel { get; init; }

    [JsonPropertyName("product_identifier")]
    public string? ProductIdentifier { get; init; }

    [JsonPropertyName("2025-01-17T22:30:00Z")]
    public double? _20250117T223000Z { get; init; }

    [JsonPropertyName("2025-01-17T22:00:00Z")]
    public double? _20250117T220000Z { get; init; }

    [JsonPropertyName("2025-01-17T21:30:00Z")]
    public double? _20250117T213000Z { get; init; }

    [JsonPropertyName("2025-01-17T21:00:00Z")]
    public double? _20250117T210000Z { get; init; }

    [JsonPropertyName("2025-01-17T20:30:00Z")]
    public double? _20250117T203000Z { get; init; }

    [JsonPropertyName("2025-01-17T20:00:00Z")]
    public double? _20250117T200000Z { get; init; }

    [JsonPropertyName("2025-01-17T19:30:00Z")]
    public double? _20250117T193000Z { get; init; }

    [JsonPropertyName("2025-01-17T19:00:00Z")]
    public double? _20250117T190000Z { get; init; }

    [JsonPropertyName("2025-01-17T18:30:00Z")]
    public double? _20250117T183000Z { get; init; }

    [JsonPropertyName("2025-01-17T18:00:00Z")]
    public double? _20250117T180000Z { get; init; }

    [JsonPropertyName("2025-01-17T17:30:00Z")]
    public double? _20250117T173000Z { get; init; }

    [JsonPropertyName("2025-01-17T17:00:00Z")]
    public double? _20250117T170000Z { get; init; }

    [JsonPropertyName("2025-01-17T16:30:00Z")]
    public double? _20250117T163000Z { get; init; }

    [JsonPropertyName("2025-01-17T16:00:00Z")]
    public double? _20250117T160000Z { get; init; }

    [JsonPropertyName("2025-01-17T15:30:00Z")]
    public double? _20250117T153000Z { get; init; }

    [JsonPropertyName("timer")]
    public object? Timer { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("last_period")]
    public string? LastPeriod { get; init; }

    [JsonPropertyName("last_valid_state")]
    public string? LastValidState { get; init; }

    [JsonPropertyName("meter_period")]
    public string? MeterPeriod { get; init; }

    [JsonPropertyName("cron pattern")]
    public string? Cronpattern { get; init; }

    [JsonPropertyName("battery_voltage")]
    public double? BatteryVoltage { get; init; }

    [JsonPropertyName("battery_level")]
    public string? BatteryLevel_0 { get; init; }

    [JsonPropertyName("batteryLevel")]
    public object? BatteryLevel_1 { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("type")]
    public object? Type_0 { get; init; }

    [JsonPropertyName("Type")]
    public string? Type_1 { get; init; }

    [JsonPropertyName("level")]
    public string? Level { get; init; }

    [JsonPropertyName("direction")]
    public string? Direction { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("power_consumption_start")]
    public string? PowerConsumptionStart { get; init; }

    [JsonPropertyName("power_consumption_end")]
    public string? PowerConsumptionEnd { get; init; }

    [JsonPropertyName("server_name")]
    public string? ServerName { get; init; }

    [JsonPropertyName("server_country")]
    public string? ServerCountry { get; init; }

    [JsonPropertyName("server_id")]
    public string? ServerId { get; init; }

    [JsonPropertyName("bytes_received")]
    public double? BytesReceived { get; init; }

    [JsonPropertyName("bytes_sent")]
    public double? BytesSent { get; init; }

    [JsonPropertyName("years_at_next_anniversary")]
    public double? YearsAtNextAnniversary { get; init; }

    [JsonPropertyName("current_years")]
    public double? CurrentYears { get; init; }

    [JsonPropertyName("date")]
    public string? Date { get; init; }

    [JsonPropertyName("weeks_remaining")]
    public double? WeeksRemaining { get; init; }

    [JsonPropertyName("battery_size")]
    public string? BatterySize { get; init; }

    [JsonPropertyName("battery_quantity")]
    public double? BatteryQuantity { get; init; }

    [JsonPropertyName("Battery Provides Time Remaining")]
    public bool? BatteryProvidesTimeRemaining { get; init; }

    [JsonPropertyName("BatteryHealth")]
    public string? BatteryHealth { get; init; }

    [JsonPropertyName("BatteryHealthCondition")]
    public string? BatteryHealthCondition { get; init; }

    [JsonPropertyName("Current")]
    public double? Current { get; init; }

    [JsonPropertyName("Current Capacity")]
    public double? CurrentCapacity { get; init; }

    [JsonPropertyName("DesignCycleCount")]
    public double? DesignCycleCount { get; init; }

    [JsonPropertyName("Hardware Serial Number")]
    public string? HardwareSerialNumber { get; init; }

    [JsonPropertyName("Is Charged")]
    public bool? IsCharged { get; init; }

    [JsonPropertyName("Is Charging")]
    public bool? IsCharging { get; init; }

    [JsonPropertyName("Is Present")]
    public bool? IsPresent { get; init; }

    [JsonPropertyName("LPM Active")]
    public bool? LPMActive { get; init; }

    [JsonPropertyName("Max Capacity")]
    public double? MaxCapacity { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Optimized Battery Charging Engaged")]
    public bool? OptimizedBatteryChargingEngaged { get; init; }

    [JsonPropertyName("Power Source ID")]
    public double? PowerSourceID { get; init; }

    [JsonPropertyName("Power Source State")]
    public string? PowerSourceState { get; init; }

    [JsonPropertyName("Time to Empty")]
    public double? TimetoEmpty { get; init; }

    [JsonPropertyName("Time to Full Charge")]
    public double? TimetoFullCharge { get; init; }

    [JsonPropertyName("Transport Type")]
    public string? TransportType { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total_0 { get; init; }

    [JsonPropertyName("total")]
    public object? Total_1 { get; init; }

    [JsonPropertyName("mpan")]
    public string? Mpan { get; init; }

    [JsonPropertyName("serial_number")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("is_export")]
    public bool? IsExport { get; init; }

    [JsonPropertyName("is_smart_meter")]
    public bool? IsSmartMeter { get; init; }

    [JsonPropertyName("tariff_code")]
    public string? TariffCode { get; init; }

    [JsonPropertyName("standing_charge")]
    public object? StandingCharge { get; init; }

    [JsonPropertyName("total_without_standing_charge")]
    public object? TotalWithoutStandingCharge { get; init; }

    [JsonPropertyName("last_calculated_timestamp")]
    public string? LastCalculatedTimestamp { get; init; }

    [JsonPropertyName("charges")]
    public IReadOnlyList<object>? Charges { get; init; }

    [JsonPropertyName("rate")]
    public object? Rate { get; init; }

    [JsonPropertyName("mprn")]
    public string? Mprn { get; init; }

    [JsonPropertyName("is_estimated")]
    public bool? IsEstimated { get; init; }

    [JsonPropertyName("rates")]
    public IReadOnlyList<object>? Rates { get; init; }

    [JsonPropertyName("total_kwh")]
    public double? TotalKwh { get; init; }

    [JsonPropertyName("total_m3")]
    public double? TotalM3 { get; init; }

    [JsonPropertyName("calculation_mode")]
    public string? CalculationMode { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("source_entity")]
    public string? SourceEntity { get; init; }

    [JsonPropertyName("source_domain")]
    public string? SourceDomain { get; init; }

    [JsonPropertyName("energy_sensor_entity_id")]
    public string? EnergySensorEntityId { get; init; }

    [JsonPropertyName("valid_from")]
    public string? ValidFrom { get; init; }

    [JsonPropertyName("valid_to")]
    public string? ValidTo { get; init; }

    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    [JsonPropertyName("is_group")]
    public bool? IsGroup { get; init; }

    [JsonPropertyName("value_exc_vat")]
    public double? ValueExcVat { get; init; }

    [JsonPropertyName("value_inc_vat")]
    public double? ValueIncVat { get; init; }

    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("wirelessNetwork")]
    public string? WirelessNetwork { get; init; }

    [JsonPropertyName("wirelessSignal")]
    public double? WirelessSignal { get; init; }

    [JsonPropertyName("years_at_anniversary")]
    public double? YearsAtAnniversary { get; init; }

    [JsonPropertyName("next_date")]
    public string? NextDate { get; init; }

    [JsonPropertyName("current_day_min_rate")]
    public double? CurrentDayMinRate { get; init; }

    [JsonPropertyName("current_day_max_rate")]
    public double? CurrentDayMaxRate { get; init; }

    [JsonPropertyName("current_day_average_rate")]
    public double? CurrentDayAverageRate { get; init; }

    [JsonPropertyName("is_capped")]
    public bool? IsCapped { get; init; }

    [JsonPropertyName("calorific_value")]
    public double? CalorificValue { get; init; }

    [JsonPropertyName("Is Finishing Charge")]
    public bool? IsFinishingCharge { get; init; }

    [JsonPropertyName("applicable_rates")]
    public IReadOnlyList<object>? ApplicableRates { get; init; }

    [JsonPropertyName("tariff")]
    public string? Tariff { get; init; }

    [JsonPropertyName("is_intelligent_adjusted")]
    public bool? IsIntelligentAdjusted { get; init; }

    [JsonPropertyName("all_rates")]
    public IReadOnlyList<object>? AllRates { get; init; }

    [JsonPropertyName("marker_high_level")]
    public double? MarkerHighLevel { get; init; }

    [JsonPropertyName("marker_low_level")]
    public double? MarkerLowLevel { get; init; }

    [JsonPropertyName("marker_type")]
    public string? MarkerType { get; init; }

    [JsonPropertyName("next_reset")]
    public string? NextReset { get; init; }

    [JsonPropertyName("start")]
    public string? Start { get; init; }

    [JsonPropertyName("end")]
    public string? End { get; init; }

    [JsonPropertyName("data_last_retrieved")]
    public string? DataLastRetrieved { get; init; }

    [JsonPropertyName("last_evaluated")]
    public string? LastEvaluated { get; init; }

    [JsonPropertyName("latest_available_data_timestamp")]
    public string? LatestAvailableDataTimestamp { get; init; }

    [JsonPropertyName("total_cost_without_standing_charge")]
    public double? TotalCostWithoutStandingCharge { get; init; }

    [JsonPropertyName("application_usage")]
    public object? ApplicationUsage { get; init; }

    [JsonPropertyName("device_usage")]
    public object? DeviceUsage { get; init; }
}

public partial record SirenEntity : Entity<SirenEntity, EntityState<SirenAttributes>, SirenAttributes>
{
    public SirenEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SirenEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SirenAttributes
{
    [JsonPropertyName("available_tones")]
    public IReadOnlyList<string>? AvailableTones { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("sun_position")]
    public double? SunPosition { get; init; }

    [JsonPropertyName("manual_control")]
    public object? ManualControl { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("weekdays")]
    public IReadOnlyList<string>? Weekdays { get; init; }

    [JsonPropertyName("timeslots")]
    public IReadOnlyList<string>? Timeslots { get; init; }

    [JsonPropertyName("entities")]
    public IReadOnlyList<string>? Entities { get; init; }

    [JsonPropertyName("actions")]
    public IReadOnlyList<object>? Actions { get; init; }

    [JsonPropertyName("current_slot")]
    public object? CurrentSlot { get; init; }

    [JsonPropertyName("next_slot")]
    public double? NextSlot { get; init; }

    [JsonPropertyName("next_trigger")]
    public string? NextTrigger { get; init; }

    [JsonPropertyName("tags")]
    public IReadOnlyList<object>? Tags { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("current_consumption")]
    public double? CurrentConsumption { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("raw_state")]
    public bool? RawState { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("away_mode_temperature")]
    public double? AwayModeTemperature { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("OverrideActive")]
    public bool? OverrideActive { get; init; }

    [JsonPropertyName("TurningOff")]
    public string? TurningOff { get; init; }

    [JsonPropertyName("DynamicTimeout")]
    public string? DynamicTimeout { get; init; }

    [JsonPropertyName("IsOccupied")]
    public bool? IsOccupied { get; init; }

    [JsonPropertyName("IsTooBright")]
    public bool? IsTooBright { get; init; }

    [JsonPropertyName("ConditionEntityStateMet")]
    public string? ConditionEntityStateMet { get; init; }

    [JsonPropertyName("ConditionEntity")]
    public string? ConditionEntity { get; init; }

    [JsonPropertyName("ConditionEntityState")]
    public string? ConditionEntityState { get; init; }

    [JsonPropertyName("LastUpdated")]
    public string? LastUpdated { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("minutes_remaining")]
    public double? MinutesRemaining { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("configuration")]
    public object? Configuration { get; init; }

    [JsonPropertyName("color_temp_mired")]
    public double? ColorTempMired { get; init; }

    [JsonPropertyName("autoreset_time_remaining")]
    public object? AutoresetTimeRemaining { get; init; }

    [JsonPropertyName("force_rgb_color")]
    public bool? ForceRgbColor { get; init; }
}

public partial record TimerEntity : Entity<TimerEntity, EntityState<TimerAttributes>, TimerAttributes>, ITimerEntityCore
{
    public TimerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TimerAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public object? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("display_precision")]
    public double? DisplayPrecision { get; init; }

    [JsonPropertyName("update_percentage")]
    public object? UpdatePercentage { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("visibility")]
    public double? Visibility { get; init; }

    [JsonPropertyName("apparent_temperature")]
    public double? ApparentTemperature { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("uv_index")]
    public double? UvIndex { get; init; }

    [JsonPropertyName("wind_gust_speed")]
    public double? WindGustSpeed { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputDatetimeEntity : Entity<InputDatetimeEntity, EntityState<InputDatetimeAttributes>, InputDatetimeAttributes>, IInputDatetimeEntityCore
{
    public InputDatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputDatetimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputDatetimeAttributes
{
    [JsonPropertyName("has_date")]
    public bool? HasDate { get; init; }

    [JsonPropertyName("has_time")]
    public bool? HasTime { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("hour")]
    public double? Hour { get; init; }

    [JsonPropertyName("minute")]
    public double? Minute { get; init; }

    [JsonPropertyName("second")]
    public double? Second { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("year")]
    public double? Year { get; init; }

    [JsonPropertyName("month")]
    public double? Month { get; init; }

    [JsonPropertyName("day")]
    public double? Day { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("account_id")]
    public string? AccountId { get; init; }

    [JsonPropertyName("available_events")]
    public IReadOnlyList<object>? AvailableEvents { get; init; }

    [JsonPropertyName("joined_events")]
    public IReadOnlyList<object>? JoinedEvents { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("rates")]
    public IReadOnlyList<object>? Rates { get; init; }

    [JsonPropertyName("min_rate")]
    public double? MinRate { get; init; }

    [JsonPropertyName("max_rate")]
    public double? MaxRate { get; init; }

    [JsonPropertyName("average_rate")]
    public double? AverageRate { get; init; }

    [JsonPropertyName("mpan")]
    public string? Mpan { get; init; }

    [JsonPropertyName("serial_number")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("tariff_code")]
    public string? TariffCode { get; init; }

    [JsonPropertyName("mprn")]
    public string? Mprn { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record SttEntity : Entity<SttEntity, EntityState<SttAttributes>, SttAttributes>
{
    public SttEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SttEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SttAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TagEntity : Entity<TagEntity, EntityState<TagAttributes>, TagAttributes>
{
    public TagEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TagEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TagAttributes
{
    [JsonPropertyName("tag_id")]
    public string? TagId { get; init; }

    [JsonPropertyName("last_scanned_by_device_id")]
    public object? LastScannedByDeviceId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TtsEntity : Entity<TtsEntity, EntityState<TtsAttributes>, TtsAttributes>
{
    public TtsEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TtsEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TtsAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AlarmoServices Alarmo { get; }

    AlexaMediaServices AlexaMedia { get; }

    AutomationServices Automation { get; }

    BackupServices Backup { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    CommandLineServices CommandLine { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FamilySafetyServices FamilySafety { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GenericThermostatServices GenericThermostat { get; }

    GroupServices Group { get; }

    HistoryStatsServices HistoryStats { get; }

    HomeConnectServices HomeConnect { get; }

    HomeassistantServices Homeassistant { get; }

    HumidifierServices Humidifier { get; }

    ImageServices Image { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LocaltuyaServices Localtuya { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MelcloudServices Melcloud { get; }

    MinMaxServices MinMax { get; }

    MqttServices Mqtt { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    OctopusEnergyServices OctopusEnergy { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    PiHoleServices PiHole { get; }

    PowercalcServices Powercalc { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    SchedulerServices Scheduler { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    ShellCommandServices ShellCommand { get; }

    SirenServices Siren { get; }

    SmartthinqSensorsServices SmartthinqSensors { get; }

    SonosServices Sonos { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TelegramServices Telegram { get; }

    TelegramBotServices TelegramBot { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimeServices Time { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UnifiServices Unifi { get; }

    UpdateServices Update { get; }

    UtilityMeterServices UtilityMeter { get; }

    VacuumServices Vacuum { get; }

    ValveServices Valve { get; }

    WakeOnLanServices WakeOnLan { get; }

    WatchmanServices Watchman { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    WebostvServices Webostv { get; }

    WebrtcServices Webrtc { get; }

    WiserServices Wiser { get; }

    WorkdayServices Workday { get; }

    ZhaServices Zha { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AlarmoServices Alarmo => new(_haContext);
    public AlexaMediaServices AlexaMedia => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BackupServices Backup => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public CommandLineServices CommandLine => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FamilySafetyServices FamilySafety => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GenericThermostatServices GenericThermostat => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HistoryStatsServices HistoryStats => new(_haContext);
    public HomeConnectServices HomeConnect => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public ImageServices Image => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LocaltuyaServices Localtuya => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MelcloudServices Melcloud => new(_haContext);
    public MinMaxServices MinMax => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public OctopusEnergyServices OctopusEnergy => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public PiHoleServices PiHole => new(_haContext);
    public PowercalcServices Powercalc => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public SchedulerServices Scheduler => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public ShellCommandServices ShellCommand => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SmartthinqSensorsServices SmartthinqSensors => new(_haContext);
    public SonosServices Sonos => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TelegramServices Telegram => new(_haContext);
    public TelegramBotServices TelegramBot => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimeServices Time => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UnifiServices Unifi => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public UtilityMeterServices UtilityMeter => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public ValveServices Valve => new(_haContext);
    public WakeOnLanServices WakeOnLan => new(_haContext);
    public WatchmanServices Watchman => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public WebostvServices Webostv => new(_haContext);
    public WebrtcServices Webrtc => new(_haContext);
    public WiserServices Wiser => new(_haContext);
    public WorkdayServices Workday => new(_haContext);
    public ZhaServices Zha => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Trigger the alarm manually.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Trigger the alarm manually.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AlarmoServices
{
    private readonly IHaContext _haContext;
    public AlarmoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void Arm(AlarmoArmParameters data)
    {
        _haContext.CallService("alarmo", "arm", null, data);
    }

    ///<param name="entityId"> eg: alarm_control_panel.alarm</param>
    ///<param name="code"> eg: 1234</param>
    ///<param name="mode"> eg: away</param>
    ///<param name="skipDelay"> eg: False</param>
    ///<param name="force"> eg: False</param>
    public void Arm(string entityId, string? code = null, object? mode = null, bool? skipDelay = null, bool? force = null)
    {
        _haContext.CallService("alarmo", "arm", null, new AlarmoArmParameters { EntityId = entityId, Code = code, Mode = mode, SkipDelay = skipDelay, Force = force });
    }

    public void DisableUser(AlarmoDisableUserParameters data)
    {
        _haContext.CallService("alarmo", "disable_user", null, data);
    }

    ///<param name="name"> eg: Frank</param>
    public void DisableUser(string name)
    {
        _haContext.CallService("alarmo", "disable_user", null, new AlarmoDisableUserParameters { Name = name });
    }

    public void Disarm(AlarmoDisarmParameters data)
    {
        _haContext.CallService("alarmo", "disarm", null, data);
    }

    ///<param name="entityId"> eg: alarm_control_panel.alarm</param>
    ///<param name="code"> eg: 1234</param>
    public void Disarm(string entityId, string? code = null)
    {
        _haContext.CallService("alarmo", "disarm", null, new AlarmoDisarmParameters { EntityId = entityId, Code = code });
    }

    public void EnableUser(AlarmoEnableUserParameters data)
    {
        _haContext.CallService("alarmo", "enable_user", null, data);
    }

    ///<param name="name"> eg: Frank</param>
    public void EnableUser(string name)
    {
        _haContext.CallService("alarmo", "enable_user", null, new AlarmoEnableUserParameters { Name = name });
    }
}

public partial record AlarmoArmParameters
{
    ///<summary> eg: alarm_control_panel.alarm</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }

    ///<summary> eg: away</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }

    ///<summary> eg: False</summary>
    [JsonPropertyName("skip_delay")]
    public bool? SkipDelay { get; init; }

    ///<summary> eg: False</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }
}

public partial record AlarmoDisableUserParameters
{
    ///<summary> eg: Frank</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record AlarmoDisarmParameters
{
    ///<summary> eg: alarm_control_panel.alarm</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmoEnableUserParameters
{
    ///<summary> eg: Frank</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial class AlexaMediaServices
{
    private readonly IHaContext _haContext;
    public AlexaMediaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    public void ForceLogout(AlexaMediaForceLogoutParameters data)
    {
        _haContext.CallService("alexa_media", "force_logout", null, data);
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    ///<param name="email">Accounts to clear. Empty will clear all. eg: my_email@alexa.com</param>
    public void ForceLogout(object? email = null)
    {
        _haContext.CallService("alexa_media", "force_logout", null, new AlexaMediaForceLogoutParameters { Email = email });
    }

    ///<summary>Restore previous volume level on Alexa media player device</summary>
    public void RestoreVolume(AlexaMediaRestoreVolumeParameters data)
    {
        _haContext.CallService("alexa_media", "restore_volume", null, data);
    }

    ///<summary>Restore previous volume level on Alexa media player device</summary>
    ///<param name="entityId">Entity to restore the previous volume level on</param>
    public void RestoreVolume(string entityId)
    {
        _haContext.CallService("alexa_media", "restore_volume", null, new AlexaMediaRestoreVolumeParameters { EntityId = entityId });
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    public void UpdateLastCalled(AlexaMediaUpdateLastCalledParameters data)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, data);
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    ///<param name="email">List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</param>
    public void UpdateLastCalled(object? email = null)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, new AlexaMediaUpdateLastCalledParameters { Email = email });
    }
}

public partial record AlexaMediaForceLogoutParameters
{
    ///<summary>Accounts to clear. Empty will clear all. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial record AlexaMediaRestoreVolumeParameters
{
    ///<summary>Entity to restore the previous volume level on</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record AlexaMediaUpdateLastCalledParameters
{
    ///<summary>List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BackupServices
{
    private readonly IHaContext _haContext;
    public BackupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a new backup.</summary>
    public void Create()
    {
        _haContext.CallService("backup", "create", null);
    }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetEvents(ServiceTarget target, CalendarGetEventsParameters data)
    {
        _haContext.CallService("calendar", "get_events", target, data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public void GetEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarGetEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from Start time for the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingHorizontalMode(ServiceTarget target, ClimateSetSwingHorizontalModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public void SetSwingHorizontalMode(ServiceTarget target, string swingHorizontalMode)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("climate", "toggle", target);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingHorizontalModeParameters
{
    ///<summary>Horizontal swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_horizontal_mode")]
    public string? SwingHorizontalMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>The temperature setpoint.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>The max temperature setpoint.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>The min temperature setpoint.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class CommandLineServices
{
    private readonly IHaContext _haContext;
    public CommandLineServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads command line configuration from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("command_line", "reload", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increments a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Resets a counter to its initial value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class FamilySafetyServices
{
    private readonly IHaContext _haContext;
    public FamilySafetyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Block an application from running for the given Microsoft account.</summary>
    ///<param name="target">The target for this service call</param>
    public void BlockApp(ServiceTarget target, FamilySafetyBlockAppParameters data)
    {
        _haContext.CallService("family_safety", "block_app", target, data);
    }

    ///<summary>Block an application from running for the given Microsoft account.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="name">The name of the application to block (you can find this in the screen time sensor).</param>
    public void BlockApp(ServiceTarget target, string name)
    {
        _haContext.CallService("family_safety", "block_app", target, new FamilySafetyBlockAppParameters { Name = name });
    }

    ///<summary>Allow an application to run for the given Microsoft account.</summary>
    ///<param name="target">The target for this service call</param>
    public void UnblockApp(ServiceTarget target, FamilySafetyUnblockAppParameters data)
    {
        _haContext.CallService("family_safety", "unblock_app", target, data);
    }

    ///<summary>Allow an application to run for the given Microsoft account.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="name">The name of the application to block (you can find this in the screen time sensor).</param>
    public void UnblockApp(ServiceTarget target, string name)
    {
        _haContext.CallService("family_safety", "unblock_app", target, new FamilySafetyUnblockAppParameters { Name = name });
    }
}

public partial record FamilySafetyBlockAppParameters
{
    ///<summary>The name of the application to block (you can find this in the screen time sensor).</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record FamilySafetyUnblockAppParameters
{
    ///<summary>The name of the application to block (you can find this in the screen time sensor).</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">Direction of the fan rotation.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles a fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be decreased.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be increased.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turns oscillation on/off.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction of the fan rotation.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GenericThermostatServices
{
    private readonly IHaContext _haContext;
    public GenericThermostatServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads generic thermostats from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("generic_thermostat", "reload", null);
    }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HistoryStatsServices
{
    private readonly IHaContext _haContext;
    public HistoryStatsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads history stats sensors from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("history_stats", "reload", null);
    }
}

public partial class HomeConnectServices
{
    private readonly IHaContext _haContext;
    public HomeConnectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Changes a setting.</summary>
    public void ChangeSetting(HomeConnectChangeSettingParameters data)
    {
        _haContext.CallService("home_connect", "change_setting", null, data);
    }

    ///<summary>Changes a setting.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="key">Key of the setting. eg: BSH.Common.Setting.ChildLock</param>
    ///<param name="value">Value of the setting. eg: true</param>
    public void ChangeSetting(string deviceId, string key, object value)
    {
        _haContext.CallService("home_connect", "change_setting", null, new HomeConnectChangeSettingParameters { DeviceId = deviceId, Key = key, Value = value });
    }

    ///<summary>Pauses the current running program.</summary>
    public void PauseProgram(HomeConnectPauseProgramParameters data)
    {
        _haContext.CallService("home_connect", "pause_program", null, data);
    }

    ///<summary>Pauses the current running program.</summary>
    ///<param name="deviceId">ID of the device.</param>
    public void PauseProgram(string deviceId)
    {
        _haContext.CallService("home_connect", "pause_program", null, new HomeConnectPauseProgramParameters { DeviceId = deviceId });
    }

    ///<summary>Resumes a paused program.</summary>
    public void ResumeProgram(HomeConnectResumeProgramParameters data)
    {
        _haContext.CallService("home_connect", "resume_program", null, data);
    }

    ///<summary>Resumes a paused program.</summary>
    ///<param name="deviceId">ID of the device.</param>
    public void ResumeProgram(string deviceId)
    {
        _haContext.CallService("home_connect", "resume_program", null, new HomeConnectResumeProgramParameters { DeviceId = deviceId });
    }

    ///<summary>Selects a program without starting it.</summary>
    public void SelectProgram(HomeConnectSelectProgramParameters data)
    {
        _haContext.CallService("home_connect", "select_program", null, data);
    }

    ///<summary>Selects a program without starting it.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="program">Program to select. eg: Dishcare.Dishwasher.Program.Auto2</param>
    ///<param name="key">Key of the option. eg: BSH.Common.Option.StartInRelative</param>
    ///<param name="value">Value of the option. eg: 1800</param>
    ///<param name="unit">Unit for the option. eg: seconds</param>
    public void SelectProgram(string deviceId, string program, string? key = null, object? value = null, string? unit = null)
    {
        _haContext.CallService("home_connect", "select_program", null, new HomeConnectSelectProgramParameters { DeviceId = deviceId, Program = program, Key = key, Value = value, Unit = unit });
    }

    ///<summary>Sets an option for the active program.</summary>
    public void SetOptionActive(HomeConnectSetOptionActiveParameters data)
    {
        _haContext.CallService("home_connect", "set_option_active", null, data);
    }

    ///<summary>Sets an option for the active program.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="key">Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</param>
    ///<param name="value">Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</param>
    public void SetOptionActive(string deviceId, string key, object value)
    {
        _haContext.CallService("home_connect", "set_option_active", null, new HomeConnectSetOptionActiveParameters { DeviceId = deviceId, Key = key, Value = value });
    }

    ///<summary>Sets an option for the selected program.</summary>
    public void SetOptionSelected(HomeConnectSetOptionSelectedParameters data)
    {
        _haContext.CallService("home_connect", "set_option_selected", null, data);
    }

    ///<summary>Sets an option for the selected program.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="key">Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</param>
    ///<param name="value">Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</param>
    public void SetOptionSelected(string deviceId, string key, object value)
    {
        _haContext.CallService("home_connect", "set_option_selected", null, new HomeConnectSetOptionSelectedParameters { DeviceId = deviceId, Key = key, Value = value });
    }

    ///<summary>Selects a program and starts it.</summary>
    public void StartProgram(HomeConnectStartProgramParameters data)
    {
        _haContext.CallService("home_connect", "start_program", null, data);
    }

    ///<summary>Selects a program and starts it.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="program">Program to select. eg: Dishcare.Dishwasher.Program.Auto2</param>
    ///<param name="key">Key of the option. eg: BSH.Common.Option.StartInRelative</param>
    ///<param name="value">Value of the option. eg: 1800</param>
    ///<param name="unit">Unit for the option. eg: seconds</param>
    public void StartProgram(string deviceId, string program, string? key = null, object? value = null, string? unit = null)
    {
        _haContext.CallService("home_connect", "start_program", null, new HomeConnectStartProgramParameters { DeviceId = deviceId, Program = program, Key = key, Value = value, Unit = unit });
    }
}

public partial record HomeConnectChangeSettingParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Key of the setting. eg: BSH.Common.Setting.ChildLock</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the setting. eg: true</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record HomeConnectPauseProgramParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record HomeConnectResumeProgramParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record HomeConnectSelectProgramParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Program to select. eg: Dishcare.Dishwasher.Program.Auto2</summary>
    [JsonPropertyName("program")]
    public string? Program { get; init; }

    ///<summary>Key of the option. eg: BSH.Common.Option.StartInRelative</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: 1800</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>Unit for the option. eg: seconds</summary>
    [JsonPropertyName("unit")]
    public string? Unit { get; init; }
}

public partial record HomeConnectSetOptionActiveParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record HomeConnectSetOptionSelectedParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record HomeConnectStartProgramParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Program to select. eg: Dishcare.Dishwasher.Program.Auto2</summary>
    [JsonPropertyName("program")]
    public string? Program { get; init; }

    ///<summary>Key of the option. eg: BSH.Common.Option.StartInRelative</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: 1800</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>Unit for the option. eg: seconds</summary>
    [JsonPropertyName("unit")]
    public string? Unit { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig()
    {
        _haContext.CallService("homeassistant", "check_config", null);
    }

    ///<summary>Reload all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll()
    {
        _haContext.CallService("homeassistant", "reload_all", null);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig()
    {
        _haContext.CallService("homeassistant", "reload_core_config", null);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates()
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart()
    {
        _haContext.CallService("homeassistant", "restart", null);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates()
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location above sea level. eg: 120</param>
    public void SetLocation(long latitude, long longitude, long? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop()
    {
        _haContext.CallService("homeassistant", "stop", null);
    }

    ///<summary>Generic action to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "toggle", target);
    }

    ///<summary>Generic action to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_off", target);
    }

    ///<summary>Generic action to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_on", target);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    public void UpdateEntity(HomeassistantUpdateEntityParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity", null, data);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    ///<param name="entityId">List of entities to force update.</param>
    public void UpdateEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "update_entity", null, new HomeassistantUpdateEntityParameters { EntityId = entityId });
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public long? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public long? Longitude { get; init; }

    ///<summary>Elevation of your location above sea level. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public long? Elevation { get; init; }
}

public partial record HomeassistantUpdateEntityParameters
{
    ///<summary>List of entities to force update.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "toggle", target);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_off", target);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_on", target);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class ImageServices
{
    private readonly IHaContext _haContext;
    public ImageServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, ImageSnapshotParameters data)
    {
        _haContext.CallService("image", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("image", "snapshot", target, new ImageSnapshotParameters { Filename = filename });
    }
}

public partial record ImageSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, string? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public string? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("input_number", "decrement", target);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("input_number", "increment", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, string options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public string? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial class LocaltuyaServices
{
    private readonly IHaContext _haContext;
    public LocaltuyaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload localtuya and reconnect to all devices.</summary>
    public void Reload()
    {
        _haContext.CallService("localtuya", "reload", null);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    public void SetDp(LocaltuyaSetDpParameters data)
    {
        _haContext.CallService("localtuya", "set_dp", null, data);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    ///<param name="deviceId">Device ID of device to change datapoint value for eg: 11100118278aab4de001</param>
    ///<param name="dp">Datapoint index eg: 1</param>
    ///<param name="value">New value to set eg: False</param>
    public void SetDp(object? deviceId = null, object? dp = null, object? value = null)
    {
        _haContext.CallService("localtuya", "set_dp", null, new LocaltuyaSetDpParameters { DeviceId = deviceId, Dp = dp, Value = value });
    }
}

public partial record LocaltuyaSetDpParameters
{
    ///<summary>Device ID of device to change datapoint value for eg: 11100118278aab4de001</summary>
    [JsonPropertyName("device_id")]
    public object? DeviceId { get; init; }

    ///<summary>Datapoint index eg: 1</summary>
    [JsonPropertyName("dp")]
    public object? Dp { get; init; }

    ///<summary>New value to set eg: False</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all items from the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MelcloudServices
{
    private readonly IHaContext _haContext;
    public MelcloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets horizontal vane position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetVaneHorizontal(ServiceTarget target, MelcloudSetVaneHorizontalParameters data)
    {
        _haContext.CallService("melcloud", "set_vane_horizontal", target, data);
    }

    ///<summary>Sets horizontal vane position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute. eg: auto</param>
    public void SetVaneHorizontal(ServiceTarget target, string position)
    {
        _haContext.CallService("melcloud", "set_vane_horizontal", target, new MelcloudSetVaneHorizontalParameters { Position = position });
    }

    ///<summary>Sets vertical vane position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetVaneVertical(ServiceTarget target, MelcloudSetVaneVerticalParameters data)
    {
        _haContext.CallService("melcloud", "set_vane_vertical", target, data);
    }

    ///<summary>Sets vertical vane position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute. eg: auto</param>
    public void SetVaneVertical(ServiceTarget target, string position)
    {
        _haContext.CallService("melcloud", "set_vane_vertical", target, new MelcloudSetVaneVerticalParameters { Position = position });
    }
}

public partial record MelcloudSetVaneHorizontalParameters
{
    ///<summary>Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute. eg: auto</summary>
    [JsonPropertyName("position")]
    public string? Position { get; init; }
}

public partial record MelcloudSetVaneVerticalParameters
{
    ///<summary>Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute. eg: auto</summary>
    [JsonPropertyName("position")]
    public string? Position { get; init; }
}

public partial class MinMaxServices
{
    private readonly IHaContext _haContext;
    public MinMaxServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads min/max sensors from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("min_max", "reload", null);
    }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="evaluatePayload">When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data.</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, object payload, bool? evaluatePayload = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, EvaluatePayload = evaluatePayload, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }

    ///<summary>When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data.</summary>
    [JsonPropertyName("evaluate_payload")]
    public bool? EvaluatePayload { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps()
    {
        _haContext.CallService("netdaemon", "reload_apps", null);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    public void AlexaMedia(NotifyAlexaMediaParameters data)
    {
        _haContext.CallService("notify", "alexa_media", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMedia(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media", null, new NotifyAlexaMediaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_aaron integration.</summary>
    public void AlexaMediaAaron(NotifyAlexaMediaAaronParameters data)
    {
        _haContext.CallService("notify", "alexa_media_aaron", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_aaron integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaAaron(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_aaron", null, new NotifyAlexaMediaAaronParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_bose_qc35_ii integration.</summary>
    public void AlexaMediaBoseQc35Ii(NotifyAlexaMediaBoseQc35IiParameters data)
    {
        _haContext.CallService("notify", "alexa_media_bose_qc35_ii", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_bose_qc35_ii integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaBoseQc35Ii(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_bose_qc35_ii", null, new NotifyAlexaMediaBoseQc35IiParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_dining integration.</summary>
    public void AlexaMediaDining(NotifyAlexaMediaDiningParameters data)
    {
        _haContext.CallService("notify", "alexa_media_dining", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_dining integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaDining(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_dining", null, new NotifyAlexaMediaDiningParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_downstairs integration.</summary>
    public void AlexaMediaDownstairs(NotifyAlexaMediaDownstairsParameters data)
    {
        _haContext.CallService("notify", "alexa_media_downstairs", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_downstairs integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaDownstairs(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_downstairs", null, new NotifyAlexaMediaDownstairsParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_2nd_echo_dot integration.</summary>
    public void AlexaMediaEugeneS2ndEchoDot(NotifyAlexaMediaEugeneS2ndEchoDotParameters data)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_2nd_echo_dot", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_2nd_echo_dot integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEugeneS2ndEchoDot(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_2nd_echo_dot", null, new NotifyAlexaMediaEugeneS2ndEchoDotParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_5th_echo_dot integration.</summary>
    public void AlexaMediaEugeneS5thEchoDot(NotifyAlexaMediaEugeneS5thEchoDotParameters data)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_5th_echo_dot", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_5th_echo_dot integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEugeneS5thEchoDot(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_5th_echo_dot", null, new NotifyAlexaMediaEugeneS5thEchoDotParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_fire integration.</summary>
    public void AlexaMediaEugeneSFire(NotifyAlexaMediaEugeneSFireParameters data)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_fire", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_fire integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEugeneSFire(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_fire", null, new NotifyAlexaMediaEugeneSFireParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_lg_oled_webos_2021_tv integration.</summary>
    public void AlexaMediaEugeneSLgOledWebos2021Tv(NotifyAlexaMediaEugeneSLgOledWebos2021TvParameters data)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_lg_oled_webos_2021_tv", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_lg_oled_webos_2021_tv integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEugeneSLgOledWebos2021Tv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_lg_oled_webos_2021_tv", null, new NotifyAlexaMediaEugeneSLgOledWebos2021TvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_sonos_arc integration.</summary>
    public void AlexaMediaEugeneSSonosArc(NotifyAlexaMediaEugeneSSonosArcParameters data)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_sonos_arc", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_sonos_arc integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEugeneSSonosArc(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_sonos_arc", null, new NotifyAlexaMediaEugeneSSonosArcParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere_2 integration.</summary>
    public void AlexaMediaEverywhere2(NotifyAlexaMediaEverywhere2Parameters data)
    {
        _haContext.CallService("notify", "alexa_media_everywhere_2", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere_2 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEverywhere2(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_everywhere_2", null, new NotifyAlexaMediaEverywhere2Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_jayden integration.</summary>
    public void AlexaMediaJayden(NotifyAlexaMediaJaydenParameters data)
    {
        _haContext.CallService("notify", "alexa_media_jayden", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_jayden integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaJayden(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_jayden", null, new NotifyAlexaMediaJaydenParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen integration.</summary>
    public void AlexaMediaKitchen(NotifyAlexaMediaKitchenParameters data)
    {
        _haContext.CallService("notify", "alexa_media_kitchen", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaKitchen(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_kitchen", null, new NotifyAlexaMediaKitchenParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_last_called integration.</summary>
    public void AlexaMediaLastCalled(NotifyAlexaMediaLastCalledParameters data)
    {
        _haContext.CallService("notify", "alexa_media_last_called", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_last_called integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLastCalled(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_last_called", null, new NotifyAlexaMediaLastCalledParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_lounge_sonos integration.</summary>
    public void AlexaMediaLoungeSonos(NotifyAlexaMediaLoungeSonosParameters data)
    {
        _haContext.CallService("notify", "alexa_media_lounge_sonos", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_lounge_sonos integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLoungeSonos(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_lounge_sonos", null, new NotifyAlexaMediaLoungeSonosParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_master integration.</summary>
    public void AlexaMediaMaster(NotifyAlexaMediaMasterParameters data)
    {
        _haContext.CallService("notify", "alexa_media_master", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_master integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaMaster(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_master", null, new NotifyAlexaMediaMasterParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_master_tv_alexa integration.</summary>
    public void AlexaMediaMasterTvAlexa(NotifyAlexaMediaMasterTvAlexaParameters data)
    {
        _haContext.CallService("notify", "alexa_media_master_tv_alexa", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_master_tv_alexa integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaMasterTvAlexa(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_master_tv_alexa", null, new NotifyAlexaMediaMasterTvAlexaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_office integration.</summary>
    public void AlexaMediaOffice(NotifyAlexaMediaOfficeParameters data)
    {
        _haContext.CallService("notify", "alexa_media_office", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_office integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaOffice(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_office", null, new NotifyAlexaMediaOfficeParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_playroom integration.</summary>
    public void AlexaMediaPlayroom(NotifyAlexaMediaPlayroomParameters data)
    {
        _haContext.CallService("notify", "alexa_media_playroom", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_playroom integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaPlayroom(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_playroom", null, new NotifyAlexaMediaPlayroomParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    public void AlexaMediaThisDevice(NotifyAlexaMediaThisDeviceParameters data)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaThisDevice(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, new NotifyAlexaMediaThisDeviceParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_this_device_3 integration.</summary>
    public void AlexaMediaThisDevice3(NotifyAlexaMediaThisDevice3Parameters data)
    {
        _haContext.CallService("notify", "alexa_media_this_device_3", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_this_device_3 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaThisDevice3(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_this_device_3", null, new NotifyAlexaMediaThisDevice3Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_upstairs integration.</summary>
    public void AlexaMediaUpstairs(NotifyAlexaMediaUpstairsParameters data)
    {
        _haContext.CallService("notify", "alexa_media_upstairs", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_upstairs integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaUpstairs(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_upstairs", null, new NotifyAlexaMediaUpstairsParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the eugene service.</summary>
    public void Eugene(NotifyEugeneParameters data)
    {
        _haContext.CallService("notify", "eugene", null, data);
    }

    ///<summary>Sends a notification message using the eugene service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Eugene(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "eugene", null, new NotifyEugeneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the hailey service.</summary>
    public void Hailey(NotifyHaileyParameters data)
    {
        _haContext.CallService("notify", "hailey", null, data);
    }

    ///<summary>Sends a notification message using the hailey service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Hailey(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "hailey", null, new NotifyHaileyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the lounge_tv service.</summary>
    public void LoungeTv(NotifyLoungeTvParameters data)
    {
        _haContext.CallService("notify", "lounge_tv", null, data);
    }

    ///<summary>Sends a notification message using the lounge_tv service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void LoungeTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "lounge_tv", null, new NotifyLoungeTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the master_tv service.</summary>
    public void MasterTv(NotifyMasterTvParameters data)
    {
        _haContext.CallService("notify", "master_tv", null, data);
    }

    ///<summary>Sends a notification message using the master_tv service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MasterTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "master_tv", null, new NotifyMasterTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_aarons_ipad integration.</summary>
    public void MobileAppAaronsIpad(NotifyMobileAppAaronsIpadParameters data)
    {
        _haContext.CallService("notify", "mobile_app_aarons_ipad", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_aarons_ipad integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppAaronsIpad(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_aarons_ipad", null, new NotifyMobileAppAaronsIpadParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_aarons_iphone integration.</summary>
    public void MobileAppAaronsIphone(NotifyMobileAppAaronsIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_aarons_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_aarons_iphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppAaronsIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_aarons_iphone", null, new NotifyMobileAppAaronsIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_eugenes_iphone integration.</summary>
    public void MobileAppEugenesIphone(NotifyMobileAppEugenesIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_eugenes_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_eugenes_iphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppEugenesIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_eugenes_iphone", null, new NotifyMobileAppEugenesIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_g3061wm904 integration.</summary>
    public void MobileAppG3061wm904(NotifyMobileAppG3061wm904Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_g3061wm904", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_g3061wm904 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppG3061wm904(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_g3061wm904", null, new NotifyMobileAppG3061wm904Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_h_work_mac integration.</summary>
    public void MobileAppHWorkMac(NotifyMobileAppHWorkMacParameters data)
    {
        _haContext.CallService("notify", "mobile_app_h_work_mac", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_h_work_mac integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppHWorkMac(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_h_work_mac", null, new NotifyMobileAppHWorkMacParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_hailey_s_iphone_2 integration.</summary>
    public void MobileAppHaileySIphone2(NotifyMobileAppHaileySIphone2Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_hailey_s_iphone_2", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_hailey_s_iphone_2 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppHaileySIphone2(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_hailey_s_iphone_2", null, new NotifyMobileAppHaileySIphone2Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_haileys_macbook_air integration.</summary>
    public void MobileAppHaileysMacbookAir(NotifyMobileAppHaileysMacbookAirParameters data)
    {
        _haContext.CallService("notify", "mobile_app_haileys_macbook_air", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_haileys_macbook_air integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppHaileysMacbookAir(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_haileys_macbook_air", null, new NotifyMobileAppHaileysMacbookAirParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_ipad_2 integration.</summary>
    public void MobileAppIpad2(NotifyMobileAppIpad2Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_ipad_2", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_ipad_2 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppIpad2(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_ipad_2", null, new NotifyMobileAppIpad2Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_iphone integration.</summary>
    public void MobileAppIphone(NotifyMobileAppIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_iphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_iphone", null, new NotifyMobileAppIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_jayden_s_iphone integration.</summary>
    public void MobileAppJaydenSIphone(NotifyMobileAppJaydenSIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_jayden_s_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_jayden_s_iphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppJaydenSIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_jayden_s_iphone", null, new NotifyMobileAppJaydenSIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_ml_nx07kg671n integration.</summary>
    public void MobileAppMlNx07kg671n(NotifyMobileAppMlNx07kg671nParameters data)
    {
        _haContext.CallService("notify", "mobile_app_ml_nx07kg671n", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_ml_nx07kg671n integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppMlNx07kg671n(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_ml_nx07kg671n", null, new NotifyMobileAppMlNx07kg671nParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }

    ///<summary>Sends a notification message using the twinstead service.</summary>
    public void Twinstead(NotifyTwinsteadParameters data)
    {
        _haContext.CallService("notify", "twinstead", null, data);
    }

    ///<summary>Sends a notification message using the twinstead service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Twinstead(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "twinstead", null, new NotifyTwinsteadParameters { Message = message, Title = title, Target = target, Data = data });
    }
}

public partial record NotifyAlexaMediaParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaAaronParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaBoseQc35IiParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDiningParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDownstairsParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEugeneS2ndEchoDotParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEugeneS5thEchoDotParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEugeneSFireParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEugeneSLgOledWebos2021TvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEugeneSSonosArcParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEverywhere2Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaJaydenParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaKitchenParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLastCalledParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLoungeSonosParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMasterParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMasterTvAlexaParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaOfficeParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaPlayroomParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaThisDeviceParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaThisDevice3Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaUpstairsParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyEugeneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyHaileyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyLoungeTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMasterTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppAaronsIpadParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppAaronsIphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppEugenesIphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppG3061wm904Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppHWorkMacParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppHaileySIphone2Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppHaileysMacbookAirParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppIpad2Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppIphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppJaydenSIphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppMlNx07kg671nParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial record NotifyTwinsteadParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class OctopusEnergyServices
{
    private readonly IHaContext _haContext;
    public OctopusEnergyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Boost a given heat pump zone for a given time period</summary>
    ///<param name="target">The target for this service call</param>
    public void BoostHeatPumpZone(ServiceTarget target, OctopusEnergyBoostHeatPumpZoneParameters data)
    {
        _haContext.CallService("octopus_energy", "boost_heat_pump_zone", target, data);
    }

    ///<summary>Boost a given heat pump zone for a given time period</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hours">The number of hours to boost for</param>
    ///<param name="minutes">The number of minutes to boost for</param>
    ///<param name="targetTemperature">The optional target temperature to boost to. If not supplied, then the current target temperature will be used</param>
    public void BoostHeatPumpZone(ServiceTarget target, long hours, long minutes, double? targetTemperature = null)
    {
        _haContext.CallService("octopus_energy", "boost_heat_pump_zone", target, new OctopusEnergyBoostHeatPumpZoneParameters { Hours = hours, Minutes = minutes, TargetTemperature = targetTemperature });
    }

    ///<summary>Joins a given Octoplus saving session event.</summary>
    ///<param name="target">The target for this service call</param>
    public void JoinOctoplusSavingSessionEvent(ServiceTarget target, OctopusEnergyJoinOctoplusSavingSessionEventParameters data)
    {
        _haContext.CallService("octopus_energy", "join_octoplus_saving_session_event", target, data);
    }

    ///<summary>Joins a given Octoplus saving session event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="eventCode">The code of the event that is to be joined.</param>
    public void JoinOctoplusSavingSessionEvent(ServiceTarget target, string? eventCode = null)
    {
        _haContext.CallService("octopus_energy", "join_octoplus_saving_session_event", target, new OctopusEnergyJoinOctoplusSavingSessionEventParameters { EventCode = eventCode });
    }

    ///<summary>Removes external statistics for all meters that don&apos;t have an active tariff</summary>
    public void PurgeInvalidExternalStatisticIds()
    {
        _haContext.CallService("octopus_energy", "purge_invalid_external_statistic_ids", null);
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    ///<param name="target">The target for this service call</param>
    public void RefreshPreviousConsumptionData(ServiceTarget target, OctopusEnergyRefreshPreviousConsumptionDataParameters data)
    {
        _haContext.CallService("octopus_energy", "refresh_previous_consumption_data", target, data);
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDate">The date the data should be loaded from.</param>
    public void RefreshPreviousConsumptionData(ServiceTarget target, object startDate)
    {
        _haContext.CallService("octopus_energy", "refresh_previous_consumption_data", target, new OctopusEnergyRefreshPreviousConsumptionDataParameters { StartDate = startDate });
    }

    ///<summary>Registers external weightings against rates, for use with target rate sensors when calculating target periods.</summary>
    ///<param name="target">The target for this service call</param>
    public void RegisterRateWeightings(ServiceTarget target, OctopusEnergyRegisterRateWeightingsParameters data)
    {
        _haContext.CallService("octopus_energy", "register_rate_weightings", target, data);
    }

    ///<summary>Registers external weightings against rates, for use with target rate sensors when calculating target periods.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="weightings">The collection of time periods and associated weightings to apply. eg: [   {     &quot;start&quot;: &quot;2025-01-01T00:00:00Z&quot;,     &quot;end&quot;: &quot;2025-01-01T00:30:00Z&quot;,     &quot;weighting&quot;: 0.1   } ]</param>
    public void RegisterRateWeightings(ServiceTarget target, object? weightings = null)
    {
        _haContext.CallService("octopus_energy", "register_rate_weightings", target, new OctopusEnergyRegisterRateWeightingsParameters { Weightings = weightings });
    }

    ///<summary>Sets the full flow temperature configuration for fixed and weather compensated flow temperatures, with the option to select which is active. Changing this configuration without a good understanding of heat loss and emitter output can cause cycling, defrosting, or incorrect heat delivery.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHeatPumpFlowTempConfig(ServiceTarget target, OctopusEnergySetHeatPumpFlowTempConfigParameters data)
    {
        _haContext.CallService("octopus_energy", "set_heat_pump_flow_temp_config", target, data);
    }

    ///<summary>Sets the full flow temperature configuration for fixed and weather compensated flow temperatures, with the option to select which is active. Changing this configuration without a good understanding of heat loss and emitter output can cause cycling, defrosting, or incorrect heat delivery.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="weatherCompEnabled">Switches weather compensation on or off</param>
    ///<param name="weatherCompMinTemperature">Minimum allowable temperature for weather compensation</param>
    ///<param name="weatherCompMaxTemperature">Maximum allowable temperature for weather compensation</param>
    ///<param name="fixedFlowTemperature">Temperature for a fixed flow without weather compensation</param>
    public void SetHeatPumpFlowTempConfig(ServiceTarget target, bool weatherCompEnabled, double weatherCompMinTemperature, double weatherCompMaxTemperature, double fixedFlowTemperature)
    {
        _haContext.CallService("octopus_energy", "set_heat_pump_flow_temp_config", target, new OctopusEnergySetHeatPumpFlowTempConfigParameters { WeatherCompEnabled = weatherCompEnabled, WeatherCompMinTemperature = weatherCompMinTemperature, WeatherCompMaxTemperature = weatherCompMaxTemperature, FixedFlowTemperature = fixedFlowTemperature });
    }

    ///<summary>Spins the wheel of fortune for a given energy type</summary>
    ///<param name="target">The target for this service call</param>
    public void SpinWheelOfFortune(ServiceTarget target)
    {
        _haContext.CallService("octopus_energy", "spin_wheel_of_fortune", target);
    }

    ///<summary>Updates a given target rate&apos;s config.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateTargetConfig(ServiceTarget target, OctopusEnergyUpdateTargetConfigParameters data)
    {
        _haContext.CallService("octopus_energy", "update_target_config", target, data);
    }

    ///<summary>Updates a given target rate&apos;s config.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="targetHours">The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</param>
    ///<param name="targetStartTime">The optional time the evaluation period should start. eg: 06:00</param>
    ///<param name="targetEndTime">The optional time the evaluation period should end. eg: 19:00</param>
    ///<param name="targetOffset">The optional offset to apply to the target rate when it starts</param>
    ///<param name="targetMinimumRate">The optional minimum rate the selected rates should not go below eg: 0.10</param>
    ///<param name="targetMaximumRate">The optional maximum rate the selected rates should not go above eg: 0.10</param>
    ///<param name="targetWeighting">The optional weighting that should be applied to the selected rates eg: 1,2,1</param>
    ///<param name="persistChanges">Determines if the changes should be persisted to the original configuration or should be temporary and reset upon integration reload.</param>
    public void UpdateTargetConfig(ServiceTarget target, string? targetHours = null, string? targetStartTime = null, string? targetEndTime = null, string? targetOffset = null, string? targetMinimumRate = null, string? targetMaximumRate = null, string? targetWeighting = null, bool? persistChanges = null)
    {
        _haContext.CallService("octopus_energy", "update_target_config", target, new OctopusEnergyUpdateTargetConfigParameters { TargetHours = targetHours, TargetStartTime = targetStartTime, TargetEndTime = targetEndTime, TargetOffset = targetOffset, TargetMinimumRate = targetMinimumRate, TargetMaximumRate = targetMaximumRate, TargetWeighting = targetWeighting, PersistChanges = persistChanges });
    }
}

public partial record OctopusEnergyBoostHeatPumpZoneParameters
{
    ///<summary>The number of hours to boost for</summary>
    [JsonPropertyName("hours")]
    public long? Hours { get; init; }

    ///<summary>The number of minutes to boost for</summary>
    [JsonPropertyName("minutes")]
    public long? Minutes { get; init; }

    ///<summary>The optional target temperature to boost to. If not supplied, then the current target temperature will be used</summary>
    [JsonPropertyName("target_temperature")]
    public double? TargetTemperature { get; init; }
}

public partial record OctopusEnergyJoinOctoplusSavingSessionEventParameters
{
    ///<summary>The code of the event that is to be joined.</summary>
    [JsonPropertyName("event_code")]
    public string? EventCode { get; init; }
}

public partial record OctopusEnergyRefreshPreviousConsumptionDataParameters
{
    ///<summary>The date the data should be loaded from.</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }
}

public partial record OctopusEnergyRegisterRateWeightingsParameters
{
    ///<summary>The collection of time periods and associated weightings to apply. eg: [   {     &quot;start&quot;: &quot;2025-01-01T00:00:00Z&quot;,     &quot;end&quot;: &quot;2025-01-01T00:30:00Z&quot;,     &quot;weighting&quot;: 0.1   } ]</summary>
    [JsonPropertyName("weightings")]
    public object? Weightings { get; init; }
}

public partial record OctopusEnergySetHeatPumpFlowTempConfigParameters
{
    ///<summary>Switches weather compensation on or off</summary>
    [JsonPropertyName("weather_comp_enabled")]
    public bool? WeatherCompEnabled { get; init; }

    ///<summary>Minimum allowable temperature for weather compensation</summary>
    [JsonPropertyName("weather_comp_min_temperature")]
    public double? WeatherCompMinTemperature { get; init; }

    ///<summary>Maximum allowable temperature for weather compensation</summary>
    [JsonPropertyName("weather_comp_max_temperature")]
    public double? WeatherCompMaxTemperature { get; init; }

    ///<summary>Temperature for a fixed flow without weather compensation</summary>
    [JsonPropertyName("fixed_flow_temperature")]
    public double? FixedFlowTemperature { get; init; }
}

public partial record OctopusEnergyUpdateTargetConfigParameters
{
    ///<summary>The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</summary>
    [JsonPropertyName("target_hours")]
    public string? TargetHours { get; init; }

    ///<summary>The optional time the evaluation period should start. eg: 06:00</summary>
    [JsonPropertyName("target_start_time")]
    public string? TargetStartTime { get; init; }

    ///<summary>The optional time the evaluation period should end. eg: 19:00</summary>
    [JsonPropertyName("target_end_time")]
    public string? TargetEndTime { get; init; }

    ///<summary>The optional offset to apply to the target rate when it starts</summary>
    [JsonPropertyName("target_offset")]
    public string? TargetOffset { get; init; }

    ///<summary>The optional minimum rate the selected rates should not go below eg: 0.10</summary>
    [JsonPropertyName("target_minimum_rate")]
    public string? TargetMinimumRate { get; init; }

    ///<summary>The optional maximum rate the selected rates should not go above eg: 0.10</summary>
    [JsonPropertyName("target_maximum_rate")]
    public string? TargetMaximumRate { get; init; }

    ///<summary>The optional weighting that should be applied to the selected rates eg: 1,2,1</summary>
    [JsonPropertyName("target_weighting")]
    public string? TargetWeighting { get; init; }

    ///<summary>Determines if the changes should be persisted to the original configuration or should be temporary and reset upon integration reload.</summary>
    [JsonPropertyName("persist_changes")]
    public bool? PersistChanges { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    ///<param name="notificationId">ID of the notification to be deleted. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Deletes all notifications from the notifications panel.</summary>
    public void DismissAll()
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be deleted. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class PiHoleServices
{
    private readonly IHaContext _haContext;
    public PiHoleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    ///<param name="target">The target for this service call</param>
    public void Disable(ServiceTarget target, PiHoleDisableParameters data)
    {
        _haContext.CallService("pi_hole", "disable", target, data);
    }

    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for. eg: 00:00:15</param>
    public void Disable(ServiceTarget target, string duration)
    {
        _haContext.CallService("pi_hole", "disable", target, new PiHoleDisableParameters { Duration = duration });
    }
}

public partial record PiHoleDisableParameters
{
    ///<summary>Time that the Pi-hole should be disabled for. eg: 00:00:15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class PowercalcServices
{
    private readonly IHaContext _haContext;
    public PowercalcServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The target for this service call</param>
    public void ActivatePlaybook(ServiceTarget target, PowercalcActivatePlaybookParameters data)
    {
        _haContext.CallService("powercalc", "activate_playbook", target, data);
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="playbookId">Playbook identifier. eg: program1</param>
    public void ActivatePlaybook(ServiceTarget target, string playbookId)
    {
        _haContext.CallService("powercalc", "activate_playbook", target, new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The target for this service call</param>
    public void CalibrateEnergy(ServiceTarget target, PowercalcCalibrateEnergyParameters data)
    {
        _haContext.CallService("powercalc", "calibrate_energy", target, data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The value to set. eg: 100</param>
    public void CalibrateEnergy(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "calibrate_energy", target, new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    public void CalibrateUtilityMeter(ServiceTarget target, PowercalcCalibrateUtilityMeterParameters data)
    {
        _haContext.CallService("powercalc", "calibrate_utility_meter", target, data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The value to set. eg: 100</param>
    public void CalibrateUtilityMeter(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "calibrate_utility_meter", target, new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Batch change configuration of all Powercalc config entries</summary>
    public void ChangeGuiConfig(PowercalcChangeGuiConfigParameters data)
    {
        _haContext.CallService("powercalc", "change_gui_config", null, data);
    }

    ///<summary>Batch change configuration of all Powercalc config entries</summary>
    ///<param name="field">The field you&apos;d like to change</param>
    ///<param name="value">The value to set.</param>
    public void ChangeGuiConfig(object @field, string value)
    {
        _haContext.CallService("powercalc", "change_gui_config", null, new PowercalcChangeGuiConfigParameters { Field = @field, Value = value });
    }

    ///<summary>Get current running playbook</summary>
    public void GetActivePlaybook()
    {
        _haContext.CallService("powercalc", "get_active_playbook", null);
    }

    ///<summary>Retrieve all entity id&apos;s of a group energy or power sensor</summary>
    ///<param name="target">The target for this service call</param>
    public void GetGroupEntities(ServiceTarget target)
    {
        _haContext.CallService("powercalc", "get_group_entities", target);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseDailyEnergy(ServiceTarget target, PowercalcIncreaseDailyEnergyParameters data)
    {
        _haContext.CallService("powercalc", "increase_daily_energy", target, data);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Amount to add to the sensor. eg: 100</param>
    public void IncreaseDailyEnergy(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "increase_daily_energy", target, new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Reset an energy sensor to zero kWh.</summary>
    ///<param name="target">The target for this service call</param>
    public void ResetEnergy(ServiceTarget target)
    {
        _haContext.CallService("powercalc", "reset_energy", target);
    }

    ///<summary>Stop currently active playbook.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopPlaybook(ServiceTarget target)
    {
        _haContext.CallService("powercalc", "stop_playbook", target);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The target for this service call</param>
    public void SwitchSubProfile(ServiceTarget target, PowercalcSwitchSubProfileParameters data)
    {
        _haContext.CallService("powercalc", "switch_sub_profile", target, data);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="profile">Define one of the possible sub profiles eg: night_vision</param>
    public void SwitchSubProfile(ServiceTarget target, string profile)
    {
        _haContext.CallService("powercalc", "switch_sub_profile", target, new PowercalcSwitchSubProfileParameters { Profile = profile });
    }

    ///<summary>Update the profile library and reinitialize discovery</summary>
    public void UpdateLibrary()
    {
        _haContext.CallService("powercalc", "update_library", null);
    }
}

public partial record PowercalcActivatePlaybookParameters
{
    ///<summary>Playbook identifier. eg: program1</summary>
    [JsonPropertyName("playbook_id")]
    public string? PlaybookId { get; init; }
}

public partial record PowercalcCalibrateEnergyParameters
{
    ///<summary>The value to set. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcCalibrateUtilityMeterParameters
{
    ///<summary>The value to set. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcChangeGuiConfigParameters
{
    ///<summary>The field you&apos;d like to change</summary>
    [JsonPropertyName("field")]
    public object? Field { get; init; }

    ///<summary>The value to set.</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcIncreaseDailyEnergyParameters
{
    ///<summary>Amount to add to the sensor. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcSwitchSubProfileParameters
{
    ///<summary>Define one of the possible sub profiles eg: night_vision</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("remote", "toggle", target);
    }

    ///<summary>Sends the turn off command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("remote", "turn_off", target);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target)
    {
        _haContext.CallService("scene", "delete", target);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class SchedulerServices
{
    private readonly IHaContext _haContext;
    public SchedulerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a new schedule entity</summary>
    public void Add(SchedulerAddParameters data)
    {
        _haContext.CallService("scheduler", "add", null, data);
    }

    ///<summary>Create a new schedule entity</summary>
    ///<param name="weekdays">Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</param>
    ///<param name="startDate">Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</param>
    ///<param name="endDate">Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</param>
    ///<param name="timeslots">list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</param>
    ///<param name="repeatType">Control what happens after the schedule is triggered eg: &quot;repeat&quot;</param>
    ///<param name="name">Friendly name for the schedule eg: My schedule</param>
    public void Add(object timeslots, object repeatType, object? weekdays = null, object? startDate = null, object? endDate = null, string? name = null)
    {
        _haContext.CallService("scheduler", "add", null, new SchedulerAddParameters { Weekdays = weekdays, StartDate = startDate, EndDate = endDate, Timeslots = timeslots, RepeatType = repeatType, Name = name });
    }

    ///<summary>Duplicate a schedule entity</summary>
    public void Copy(SchedulerCopyParameters data)
    {
        _haContext.CallService("scheduler", "copy", null, data);
    }

    ///<summary>Duplicate a schedule entity</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    ///<param name="name">Friendly name for the copied schedule eg: My schedule</param>
    public void Copy(string entityId, string? name = null)
    {
        _haContext.CallService("scheduler", "copy", null, new SchedulerCopyParameters { EntityId = entityId, Name = name });
    }

    ///<summary>Disables all schedules</summary>
    public void DisableAll()
    {
        _haContext.CallService("scheduler", "disable_all", null);
    }

    ///<summary>Edit a schedule entity</summary>
    public void Edit(SchedulerEditParameters data)
    {
        _haContext.CallService("scheduler", "edit", null, data);
    }

    ///<summary>Edit a schedule entity</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    ///<param name="weekdays">Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</param>
    ///<param name="startDate">Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</param>
    ///<param name="endDate">Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</param>
    ///<param name="timeslots">list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</param>
    ///<param name="repeatType">Control what happens after the schedule is triggered eg: &quot;repeat&quot;</param>
    ///<param name="name">Friendly name for the schedule eg: My schedule</param>
    public void Edit(string entityId, object? weekdays = null, object? startDate = null, object? endDate = null, object? timeslots = null, object? repeatType = null, string? name = null)
    {
        _haContext.CallService("scheduler", "edit", null, new SchedulerEditParameters { EntityId = entityId, Weekdays = weekdays, StartDate = startDate, EndDate = endDate, Timeslots = timeslots, RepeatType = repeatType, Name = name });
    }

    ///<summary>Enables all schedules</summary>
    public void EnableAll()
    {
        _haContext.CallService("scheduler", "enable_all", null);
    }

    ///<summary>Remove a schedule entity</summary>
    public void Remove(SchedulerRemoveParameters data)
    {
        _haContext.CallService("scheduler", "remove", null, data);
    }

    ///<summary>Remove a schedule entity</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    public void Remove(string entityId)
    {
        _haContext.CallService("scheduler", "remove", null, new SchedulerRemoveParameters { EntityId = entityId });
    }

    ///<summary>Execute the action of a schedule, optionally at a given time.</summary>
    public void RunAction(SchedulerRunActionParameters data)
    {
        _haContext.CallService("scheduler", "run_action", null, data);
    }

    ///<summary>Execute the action of a schedule, optionally at a given time.</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    ///<param name="time">Time for which to evaluate the action (only useful for schedules with multiple timeslot) eg: &quot;12:00&quot;</param>
    ///<param name="skipConditions">Whether the conditions of the schedule should be skipped or not</param>
    public void RunAction(string entityId, DateTime? time = null, bool? skipConditions = null)
    {
        _haContext.CallService("scheduler", "run_action", null, new SchedulerRunActionParameters { EntityId = entityId, Time = time, SkipConditions = skipConditions });
    }
}

public partial record SchedulerAddParameters
{
    ///<summary>Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</summary>
    [JsonPropertyName("weekdays")]
    public object? Weekdays { get; init; }

    ///<summary>Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</summary>
    [JsonPropertyName("timeslots")]
    public object? Timeslots { get; init; }

    ///<summary>Control what happens after the schedule is triggered eg: &quot;repeat&quot;</summary>
    [JsonPropertyName("repeat_type")]
    public object? RepeatType { get; init; }

    ///<summary>Friendly name for the schedule eg: My schedule</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record SchedulerCopyParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Friendly name for the copied schedule eg: My schedule</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record SchedulerEditParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</summary>
    [JsonPropertyName("weekdays")]
    public object? Weekdays { get; init; }

    ///<summary>Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</summary>
    [JsonPropertyName("timeslots")]
    public object? Timeslots { get; init; }

    ///<summary>Control what happens after the schedule is triggered eg: &quot;repeat&quot;</summary>
    [JsonPropertyName("repeat_type")]
    public object? RepeatType { get; init; }

    ///<summary>Friendly name for the schedule eg: My schedule</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record SchedulerRemoveParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record SchedulerRunActionParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Time for which to evaluate the action (only useful for schedules with multiple timeslot) eg: &quot;12:00&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>Whether the conditions of the schedule should be skipped or not</summary>
    [JsonPropertyName("skip_conditions")]
    public bool? SkipConditions { get; init; }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates an actionable notification on a specific echo device</summary>
    public void ActivateAlexaActionableNotification(ScriptActivateAlexaActionableNotificationParameters data)
    {
        _haContext.CallService("script", "activate_alexa_actionable_notification", null, data);
    }

    ///<summary>Activates an actionable notification on a specific echo device</summary>
    ///<param name="text">The text you would like alexa to speak. eg: What would you like the thermostat set to?</param>
    ///<param name="eventId">Correlation ID for event responses eg: ask_for_temperature</param>
    ///<param name="alexaDevice">Alexa device you want to trigger eg: media_player.bedroom_echo</param>
    public void ActivateAlexaActionableNotification(object? text = null, object? eventId = null, object? alexaDevice = null)
    {
        _haContext.CallService("script", "activate_alexa_actionable_notification", null, new ScriptActivateAlexaActionableNotificationParameters { Text = text, EventId = eventId, AlexaDevice = alexaDevice });
    }

    public void ArriveHome()
    {
        _haContext.CallService("script", "arrive_home", null);
    }

    public void ImText()
    {
        _haContext.CallService("script", "im_text", null);
    }

    public void PlayYoutubeOnLg()
    {
        _haContext.CallService("script", "play_youtube_on_lg", null);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    public void RingMqttInterval()
    {
        _haContext.CallService("script", "ring_mqtt_interval", null);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    public void Tts()
    {
        _haContext.CallService("script", "tts", null);
    }

    public void TtsText()
    {
        _haContext.CallService("script", "tts_text", null);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }

    public void TurnOnLgTeleLounge()
    {
        _haContext.CallService("script", "turn_on_lg_tele_lounge", null);
    }

    public void TurnOnLgTeleMaster()
    {
        _haContext.CallService("script", "turn_on_lg_tele_master", null);
    }

    public void Weather()
    {
        _haContext.CallService("script", "weather", null);
    }
}

public partial record ScriptActivateAlexaActionableNotificationParameters
{
    ///<summary>The text you would like alexa to speak. eg: What would you like the thermostat set to?</summary>
    [JsonPropertyName("text")]
    public object? Text { get; init; }

    ///<summary>Correlation ID for event responses eg: ask_for_temperature</summary>
    [JsonPropertyName("event_id")]
    public object? EventId { get; init; }

    ///<summary>Alexa device you want to trigger eg: media_player.bedroom_echo</summary>
    [JsonPropertyName("alexa_device")]
    public object? AlexaDevice { get; init; }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class ShellCommandServices
{
    private readonly IHaContext _haContext;
    public ShellCommandServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void CheckScanStatus()
    {
        _haContext.CallService("shell_command", "check_scan_status", null);
    }

    public void SendScanRequest()
    {
        _haContext.CallService("shell_command", "send_scan_request", null);
    }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("siren", "toggle", target);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("siren", "turn_off", target);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SmartthinqSensorsServices
{
    private readonly IHaContext _haContext;
    public SmartthinqSensorsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send to ThinQ device the remote start command.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoteStart(ServiceTarget target, SmartthinqSensorsRemoteStartParameters data)
    {
        _haContext.CallService("smartthinq_sensors", "remote_start", target, data);
    }

    ///<summary>Send to ThinQ device the remote start command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="course">Course (if not set will use current)</param>
    public void RemoteStart(ServiceTarget target, string? course = null)
    {
        _haContext.CallService("smartthinq_sensors", "remote_start", target, new SmartthinqSensorsRemoteStartParameters { Course = course });
    }

    ///<summary>Set fan operation for dehumidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, SmartthinqSensorsSetFanModeParameters data)
    {
        _haContext.CallService("smartthinq_sensors", "set_fan_mode", target, data);
    }

    ///<summary>Set fan operation for dehumidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">New value of fan mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("smartthinq_sensors", "set_fan_mode", target, new SmartthinqSensorsSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Set sleep time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSleepTime(ServiceTarget target, SmartthinqSensorsSetSleepTimeParameters data)
    {
        _haContext.CallService("smartthinq_sensors", "set_sleep_time", target, data);
    }

    ///<summary>Set sleep time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="sleepTime">Timeout for sleep mode in minutes</param>
    public void SetSleepTime(ServiceTarget target, long sleepTime)
    {
        _haContext.CallService("smartthinq_sensors", "set_sleep_time", target, new SmartthinqSensorsSetSleepTimeParameters { SleepTime = sleepTime });
    }

    ///<summary>Set time device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTime(ServiceTarget target, SmartthinqSensorsSetTimeParameters data)
    {
        _haContext.CallService("smartthinq_sensors", "set_time", target, data);
    }

    ///<summary>Set time device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="timeWanted">Time (if not set will use Home-Assistant time)</param>
    public void SetTime(ServiceTarget target, DateTime? timeWanted = null)
    {
        _haContext.CallService("smartthinq_sensors", "set_time", target, new SmartthinqSensorsSetTimeParameters { TimeWanted = timeWanted });
    }

    ///<summary>Send to ThinQ device the wakeup command.</summary>
    ///<param name="target">The target for this service call</param>
    public void WakeUp(ServiceTarget target)
    {
        _haContext.CallService("smartthinq_sensors", "wake_up", target);
    }
}

public partial record SmartthinqSensorsRemoteStartParameters
{
    ///<summary>Course (if not set will use current)</summary>
    [JsonPropertyName("course")]
    public string? Course { get; init; }
}

public partial record SmartthinqSensorsSetFanModeParameters
{
    ///<summary>New value of fan mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record SmartthinqSensorsSetSleepTimeParameters
{
    ///<summary>Timeout for sleep mode in minutes</summary>
    [JsonPropertyName("sleep_time")]
    public long? SleepTime { get; init; }
}

public partial record SmartthinqSensorsSetTimeParameters
{
    ///<summary>Time (if not set will use Home-Assistant time)</summary>
    [JsonPropertyName("time_wanted")]
    public DateTime? TimeWanted { get; init; }
}

public partial class SonosServices
{
    private readonly IHaContext _haContext;
    public SonosServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSleepTimer(ServiceTarget target)
    {
        _haContext.CallService("sonos", "clear_sleep_timer", target);
    }

    ///<summary>Returns the contents of the queue.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetQueue(ServiceTarget target)
    {
        _haContext.CallService("sonos", "get_queue", target);
    }

    ///<summary>Start playing the queue from the first item.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayQueue(ServiceTarget target, SonosPlayQueueParameters data)
    {
        _haContext.CallService("sonos", "play_queue", target, data);
    }

    ///<summary>Start playing the queue from the first item.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="queuePosition">Position of the song in the queue to start playing from.</param>
    public void PlayQueue(ServiceTarget target, long? queuePosition = null)
    {
        _haContext.CallService("sonos", "play_queue", target, new SonosPlayQueueParameters { QueuePosition = queuePosition });
    }

    ///<summary>Removes an item from the queue.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveFromQueue(ServiceTarget target, SonosRemoveFromQueueParameters data)
    {
        _haContext.CallService("sonos", "remove_from_queue", target, data);
    }

    ///<summary>Removes an item from the queue.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="queuePosition">Position in the queue to remove.</param>
    public void RemoveFromQueue(ServiceTarget target, long? queuePosition = null)
    {
        _haContext.CallService("sonos", "remove_from_queue", target, new SonosRemoveFromQueueParameters { QueuePosition = queuePosition });
    }

    ///<summary>Restores a snapshot of the media player.</summary>
    public void Restore(SonosRestoreParameters data)
    {
        _haContext.CallService("sonos", "restore", null, data);
    }

    ///<summary>Restores a snapshot of the media player.</summary>
    ///<param name="entityId">Name of entity that will be restored.</param>
    ///<param name="withGroup">True or False. Also restore the group layout.</param>
    public void Restore(string? entityId = null, bool? withGroup = null)
    {
        _haContext.CallService("sonos", "restore", null, new SonosRestoreParameters { EntityId = entityId, WithGroup = withGroup });
    }

    ///<summary>Sets a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSleepTimer(ServiceTarget target, SonosSetSleepTimerParameters data)
    {
        _haContext.CallService("sonos", "set_sleep_timer", target, data);
    }

    ///<summary>Sets a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="sleepTime">Number of seconds to set the timer.</param>
    public void SetSleepTimer(ServiceTarget target, long? sleepTime = null)
    {
        _haContext.CallService("sonos", "set_sleep_timer", target, new SonosSetSleepTimerParameters { SleepTime = sleepTime });
    }

    ///<summary>Takes a snapshot of the media player.</summary>
    public void Snapshot(SonosSnapshotParameters data)
    {
        _haContext.CallService("sonos", "snapshot", null, data);
    }

    ///<summary>Takes a snapshot of the media player.</summary>
    ///<param name="entityId">Name of entity that will be snapshot.</param>
    ///<param name="withGroup">True or False. Also snapshot the group layout.</param>
    public void Snapshot(string? entityId = null, bool? withGroup = null)
    {
        _haContext.CallService("sonos", "snapshot", null, new SonosSnapshotParameters { EntityId = entityId, WithGroup = withGroup });
    }

    ///<summary>Updates an alarm with new time and volume settings.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateAlarm(ServiceTarget target, SonosUpdateAlarmParameters data)
    {
        _haContext.CallService("sonos", "update_alarm", target, data);
    }

    ///<summary>Updates an alarm with new time and volume settings.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="alarmId">ID for the alarm to be updated.</param>
    ///<param name="time">Set time for the alarm. eg: 07:00</param>
    ///<param name="volume">Set alarm volume level.</param>
    ///<param name="enabled">Enable or disable the alarm.</param>
    ///<param name="includeLinkedZones">Enable or disable including grouped rooms.</param>
    public void UpdateAlarm(ServiceTarget target, long alarmId, DateTime? time = null, double? volume = null, bool? enabled = null, bool? includeLinkedZones = null)
    {
        _haContext.CallService("sonos", "update_alarm", target, new SonosUpdateAlarmParameters { AlarmId = alarmId, Time = time, Volume = volume, Enabled = enabled, IncludeLinkedZones = includeLinkedZones });
    }
}

public partial record SonosPlayQueueParameters
{
    ///<summary>Position of the song in the queue to start playing from.</summary>
    [JsonPropertyName("queue_position")]
    public long? QueuePosition { get; init; }
}

public partial record SonosRemoveFromQueueParameters
{
    ///<summary>Position in the queue to remove.</summary>
    [JsonPropertyName("queue_position")]
    public long? QueuePosition { get; init; }
}

public partial record SonosRestoreParameters
{
    ///<summary>Name of entity that will be restored.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>True or False. Also restore the group layout.</summary>
    [JsonPropertyName("with_group")]
    public bool? WithGroup { get; init; }
}

public partial record SonosSetSleepTimerParameters
{
    ///<summary>Number of seconds to set the timer.</summary>
    [JsonPropertyName("sleep_time")]
    public long? SleepTime { get; init; }
}

public partial record SonosSnapshotParameters
{
    ///<summary>Name of entity that will be snapshot.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>True or False. Also snapshot the group layout.</summary>
    [JsonPropertyName("with_group")]
    public bool? WithGroup { get; init; }
}

public partial record SonosUpdateAlarmParameters
{
    ///<summary>ID for the alarm to be updated.</summary>
    [JsonPropertyName("alarm_id")]
    public long? AlarmId { get; init; }

    ///<summary>Set time for the alarm. eg: 07:00</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>Set alarm volume level.</summary>
    [JsonPropertyName("volume")]
    public double? Volume { get; init; }

    ///<summary>Enable or disable the alarm.</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }

    ///<summary>Enable or disable including grouped rooms.</summary>
    [JsonPropertyName("include_linked_zones")]
    public bool? IncludeLinkedZones { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TelegramServices
{
    private readonly IHaContext _haContext;
    public TelegramServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads telegram notify services.</summary>
    public void Reload()
    {
        _haContext.CallService("telegram", "reload", null);
    }
}

public partial class TelegramBotServices
{
    private readonly IHaContext _haContext;
    public TelegramBotServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Responds to a callback query originated by clicking on an online keyboard button. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.</summary>
    public void AnswerCallbackQuery(TelegramBotAnswerCallbackQueryParameters data)
    {
        _haContext.CallService("telegram_bot", "answer_callback_query", null, data);
    }

    ///<summary>Responds to a callback query originated by clicking on an online keyboard button. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.</summary>
    ///<param name="message">Unformatted text message body of the notification. eg: OK, I&apos;m listening</param>
    ///<param name="callbackQueryId">Unique id of the callback response. eg: {{ trigger.event.data.id }}</param>
    ///<param name="showAlert">Show a permanent notification.</param>
    ///<param name="timeout">Read timeout for sending the answer.</param>
    public void AnswerCallbackQuery(string message, string callbackQueryId, bool showAlert, long? timeout = null)
    {
        _haContext.CallService("telegram_bot", "answer_callback_query", null, new TelegramBotAnswerCallbackQueryParameters { Message = message, CallbackQueryId = callbackQueryId, ShowAlert = showAlert, Timeout = timeout });
    }

    ///<summary>Deletes a previously sent message.</summary>
    public void DeleteMessage(TelegramBotDeleteMessageParameters data)
    {
        _haContext.CallService("telegram_bot", "delete_message", null, data);
    }

    ///<summary>Deletes a previously sent message.</summary>
    ///<param name="messageId">Id of the message to delete. eg: {{ trigger.event.data.message.message_id }}</param>
    ///<param name="chatId">The chat_id where to delete the message. eg: 12345</param>
    public void DeleteMessage(string messageId, string chatId)
    {
        _haContext.CallService("telegram_bot", "delete_message", null, new TelegramBotDeleteMessageParameters { MessageId = messageId, ChatId = chatId });
    }

    ///<summary>Edits the caption of a previously sent message.</summary>
    public void EditCaption(TelegramBotEditCaptionParameters data)
    {
        _haContext.CallService("telegram_bot", "edit_caption", null, data);
    }

    ///<summary>Edits the caption of a previously sent message.</summary>
    ///<param name="messageId">Id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</param>
    ///<param name="chatId">The chat_id where to edit the caption. eg: 12345</param>
    ///<param name="caption">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    public void EditCaption(string messageId, string chatId, string caption, object? inlineKeyboard = null)
    {
        _haContext.CallService("telegram_bot", "edit_caption", null, new TelegramBotEditCaptionParameters { MessageId = messageId, ChatId = chatId, Caption = caption, InlineKeyboard = inlineKeyboard });
    }

    ///<summary>Edits a previously sent message.</summary>
    public void EditMessage(TelegramBotEditMessageParameters data)
    {
        _haContext.CallService("telegram_bot", "edit_message", null, data);
    }

    ///<summary>Edits a previously sent message.</summary>
    ///<param name="messageId">Id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</param>
    ///<param name="chatId">The chat_id where to edit the message. eg: 12345</param>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Optional title for your notification. Will be composed as &apos;%title %message&apos;. eg: Your Garage Door Friend</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableWebPagePreview">Disables link previews for links in the message.</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    public void EditMessage(string messageId, string chatId, string? message = null, string? title = null, object? parseMode = null, bool? disableWebPagePreview = null, object? inlineKeyboard = null)
    {
        _haContext.CallService("telegram_bot", "edit_message", null, new TelegramBotEditMessageParameters { MessageId = messageId, ChatId = chatId, Message = message, Title = title, ParseMode = parseMode, DisableWebPagePreview = disableWebPagePreview, InlineKeyboard = inlineKeyboard });
    }

    ///<summary>Edit the inline keyboard of a previously sent message.</summary>
    public void EditReplymarkup(TelegramBotEditReplymarkupParameters data)
    {
        _haContext.CallService("telegram_bot", "edit_replymarkup", null, data);
    }

    ///<summary>Edit the inline keyboard of a previously sent message.</summary>
    ///<param name="messageId">Id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</param>
    ///<param name="chatId">The chat_id where to edit the reply_markup. eg: 12345</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    public void EditReplymarkup(string messageId, string chatId, object inlineKeyboard)
    {
        _haContext.CallService("telegram_bot", "edit_replymarkup", null, new TelegramBotEditReplymarkupParameters { MessageId = messageId, ChatId = chatId, InlineKeyboard = inlineKeyboard });
    }

    public void LeaveChat()
    {
        _haContext.CallService("telegram_bot", "leave_chat", null);
    }

    ///<summary>Sends an animation.</summary>
    public void SendAnimation(TelegramBotSendAnimationParameters data)
    {
        _haContext.CallService("telegram_bot", "send_animation", null, data);
    }

    ///<summary>Sends an animation.</summary>
    ///<param name="url">Remote path to a GIF or H.264/MPEG-4 AVC video without sound. eg: http://example.org/path/to/the/animation.gif</param>
    ///<param name="file">Local path to a GIF or H.264/MPEG-4 AVC video without sound. eg: /path/to/the/animation.gif</param>
    ///<param name="caption">The title of the animation. eg: My animation</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Read timeout for send sticker.</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. eg: msg_to_edit</param>
    ///<param name="replyToMessageId">Mark the message as a reply to a previous message.</param>
    ///<param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</param>
    public void SendAnimation(string? url = null, string? @file = null, string? caption = null, string? username = null, string? password = null, object? authentication = null, object? target = null, object? parseMode = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null, long? replyToMessageId = null, long? messageThreadId = null)
    {
        _haContext.CallService("telegram_bot", "send_animation", null, new TelegramBotSendAnimationParameters { Url = url, File = @file, Caption = caption, Username = username, Password = password, Authentication = authentication, Target = target, ParseMode = parseMode, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag, ReplyToMessageId = replyToMessageId, MessageThreadId = messageThreadId });
    }

    ///<summary>Sends a document.</summary>
    public void SendDocument(TelegramBotSendDocumentParameters data)
    {
        _haContext.CallService("telegram_bot", "send_document", null, data);
    }

    ///<summary>Sends a document.</summary>
    ///<param name="url">Remote path to a document. eg: http://example.org/path/to/the/document.odf</param>
    ///<param name="file">Local path to a document. eg: /tmp/whatever.odf</param>
    ///<param name="caption">The title of the document. eg: Document Title xy</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Read timeout for send document.</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. eg: msg_to_edit</param>
    ///<param name="replyToMessageId">Mark the message as a reply to a previous message.</param>
    ///<param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</param>
    public void SendDocument(string? url = null, string? @file = null, string? caption = null, string? username = null, string? password = null, object? authentication = null, object? target = null, object? parseMode = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null, long? replyToMessageId = null, long? messageThreadId = null)
    {
        _haContext.CallService("telegram_bot", "send_document", null, new TelegramBotSendDocumentParameters { Url = url, File = @file, Caption = caption, Username = username, Password = password, Authentication = authentication, Target = target, ParseMode = parseMode, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag, ReplyToMessageId = replyToMessageId, MessageThreadId = messageThreadId });
    }

    ///<summary>Sends a location.</summary>
    public void SendLocation(TelegramBotSendLocationParameters data)
    {
        _haContext.CallService("telegram_bot", "send_location", null, data);
    }

    ///<summary>Sends a location.</summary>
    ///<param name="latitude">The latitude to send.</param>
    ///<param name="longitude">The longitude to send.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="timeout">Read timeout for send photo.</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. eg: msg_to_edit</param>
    ///<param name="replyToMessageId">Mark the message as a reply to a previous message.</param>
    ///<param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</param>
    public void SendLocation(double latitude, double longitude, object? target = null, bool? disableNotification = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null, long? replyToMessageId = null, long? messageThreadId = null)
    {
        _haContext.CallService("telegram_bot", "send_location", null, new TelegramBotSendLocationParameters { Latitude = latitude, Longitude = longitude, Target = target, DisableNotification = disableNotification, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag, ReplyToMessageId = replyToMessageId, MessageThreadId = messageThreadId });
    }

    ///<summary>Sends a notification.</summary>
    public void SendMessage(TelegramBotSendMessageParameters data)
    {
        _haContext.CallService("telegram_bot", "send_message", null, data);
    }

    ///<summary>Sends a notification.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Optional title for your notification. Will be composed as &apos;%title %message&apos;. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the notification to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="disableWebPagePreview">Disables link previews for links in the message.</param>
    ///<param name="timeout">Read timeout for send message. Will help with timeout errors (poor internet connection, etc)s.</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. Empty list clears a previously set keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [&quot;Text button1:/button1, Text button2:/button2&quot;, &quot;Text button3:/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. eg: msg_to_edit</param>
    ///<param name="replyToMessageId">Mark the message as a reply to a previous message.</param>
    ///<param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</param>
    public void SendMessage(string message, string? title = null, object? target = null, object? parseMode = null, bool? disableNotification = null, bool? disableWebPagePreview = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null, long? replyToMessageId = null, long? messageThreadId = null)
    {
        _haContext.CallService("telegram_bot", "send_message", null, new TelegramBotSendMessageParameters { Message = message, Title = title, Target = target, ParseMode = parseMode, DisableNotification = disableNotification, DisableWebPagePreview = disableWebPagePreview, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag, ReplyToMessageId = replyToMessageId, MessageThreadId = messageThreadId });
    }

    ///<summary>Sends a photo.</summary>
    public void SendPhoto(TelegramBotSendPhotoParameters data)
    {
        _haContext.CallService("telegram_bot", "send_photo", null, data);
    }

    ///<summary>Sends a photo.</summary>
    ///<param name="url">Remote path to an image. eg: http://example.org/path/to/the/image.png</param>
    ///<param name="file">Local path to an image. eg: /path/to/the/image.png</param>
    ///<param name="caption">The title of the image. eg: My image</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Read timeout for send photo.</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. eg: msg_to_edit</param>
    ///<param name="replyToMessageId">Mark the message as a reply to a previous message.</param>
    ///<param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</param>
    public void SendPhoto(string? url = null, string? @file = null, string? caption = null, string? username = null, string? password = null, object? authentication = null, object? target = null, object? parseMode = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null, long? replyToMessageId = null, long? messageThreadId = null)
    {
        _haContext.CallService("telegram_bot", "send_photo", null, new TelegramBotSendPhotoParameters { Url = url, File = @file, Caption = caption, Username = username, Password = password, Authentication = authentication, Target = target, ParseMode = parseMode, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag, ReplyToMessageId = replyToMessageId, MessageThreadId = messageThreadId });
    }

    ///<summary>Sends a poll.</summary>
    public void SendPoll(TelegramBotSendPollParameters data)
    {
        _haContext.CallService("telegram_bot", "send_poll", null, data);
    }

    ///<summary>Sends a poll.</summary>
    ///<param name="target">An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="question">Poll question, 1-300 characters.</param>
    ///<param name="options">List of answer options, 2-10 strings 1-100 characters each.</param>
    ///<param name="isAnonymous">If the poll needs to be anonymous, defaults to True.</param>
    ///<param name="allowsMultipleAnswers">If the poll allows multiple answers, defaults to False.</param>
    ///<param name="openPeriod">Amount of time in seconds the poll will be active after creation, 5-600.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="timeout">Read timeout for send poll.</param>
    ///<param name="messageTag">Tag for sent message. eg: msg_to_edit</param>
    ///<param name="replyToMessageId">Mark the message as a reply to a previous message.</param>
    ///<param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</param>
    public void SendPoll(string question, object options, object? target = null, bool? isAnonymous = null, bool? allowsMultipleAnswers = null, long? openPeriod = null, bool? disableNotification = null, long? timeout = null, string? messageTag = null, long? replyToMessageId = null, long? messageThreadId = null)
    {
        _haContext.CallService("telegram_bot", "send_poll", null, new TelegramBotSendPollParameters { Target = target, Question = question, Options = options, IsAnonymous = isAnonymous, AllowsMultipleAnswers = allowsMultipleAnswers, OpenPeriod = openPeriod, DisableNotification = disableNotification, Timeout = timeout, MessageTag = messageTag, ReplyToMessageId = replyToMessageId, MessageThreadId = messageThreadId });
    }

    ///<summary>Sends a sticker.</summary>
    public void SendSticker(TelegramBotSendStickerParameters data)
    {
        _haContext.CallService("telegram_bot", "send_sticker", null, data);
    }

    ///<summary>Sends a sticker.</summary>
    ///<param name="url">Remote path to a static .webp or animated .tgs sticker. eg: http://example.org/path/to/the/sticker.webp</param>
    ///<param name="file">Local path to a static .webp or animated .tgs sticker. eg: /path/to/the/sticker.webp</param>
    ///<param name="stickerId">ID of a sticker that exists on telegram servers. eg: CAACAgIAAxkBAAEDDldhZD-hqWclr6krLq-FWSfCrGNmOQAC9gAD9HsZAAFeYY-ltPYnrCEE</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Read timeout for send sticker.</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. eg: msg_to_edit</param>
    ///<param name="replyToMessageId">Mark the message as a reply to a previous message.</param>
    ///<param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</param>
    public void SendSticker(string? url = null, string? @file = null, string? stickerId = null, string? username = null, string? password = null, object? authentication = null, object? target = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null, long? replyToMessageId = null, long? messageThreadId = null)
    {
        _haContext.CallService("telegram_bot", "send_sticker", null, new TelegramBotSendStickerParameters { Url = url, File = @file, StickerId = stickerId, Username = username, Password = password, Authentication = authentication, Target = target, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag, ReplyToMessageId = replyToMessageId, MessageThreadId = messageThreadId });
    }

    ///<summary>Sends a video.</summary>
    public void SendVideo(TelegramBotSendVideoParameters data)
    {
        _haContext.CallService("telegram_bot", "send_video", null, data);
    }

    ///<summary>Sends a video.</summary>
    ///<param name="url">Remote path to a video. eg: http://example.org/path/to/the/video.mp4</param>
    ///<param name="file">Local path to a video. eg: /path/to/the/video.mp4</param>
    ///<param name="caption">The title of the video. eg: My video</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Read timeout for send video.</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. eg: msg_to_edit</param>
    ///<param name="replyToMessageId">Mark the message as a reply to a previous message.</param>
    ///<param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</param>
    public void SendVideo(string? url = null, string? @file = null, string? caption = null, string? username = null, string? password = null, object? authentication = null, object? target = null, object? parseMode = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null, long? replyToMessageId = null, long? messageThreadId = null)
    {
        _haContext.CallService("telegram_bot", "send_video", null, new TelegramBotSendVideoParameters { Url = url, File = @file, Caption = caption, Username = username, Password = password, Authentication = authentication, Target = target, ParseMode = parseMode, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag, ReplyToMessageId = replyToMessageId, MessageThreadId = messageThreadId });
    }

    ///<summary>Sends a voice message.</summary>
    public void SendVoice(TelegramBotSendVoiceParameters data)
    {
        _haContext.CallService("telegram_bot", "send_voice", null, data);
    }

    ///<summary>Sends a voice message.</summary>
    ///<param name="url">Remote path to a voice message. eg: http://example.org/path/to/the/voice.opus</param>
    ///<param name="file">Local path to a voice message. eg: /path/to/the/voice.opus</param>
    ///<param name="caption">The title of the voice message. eg: My microphone recording</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Read timeout for send voice.</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. eg: msg_to_edit</param>
    ///<param name="replyToMessageId">Mark the message as a reply to a previous message.</param>
    ///<param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</param>
    public void SendVoice(string? url = null, string? @file = null, string? caption = null, string? username = null, string? password = null, object? authentication = null, object? target = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null, long? replyToMessageId = null, long? messageThreadId = null)
    {
        _haContext.CallService("telegram_bot", "send_voice", null, new TelegramBotSendVoiceParameters { Url = url, File = @file, Caption = caption, Username = username, Password = password, Authentication = authentication, Target = target, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag, ReplyToMessageId = replyToMessageId, MessageThreadId = messageThreadId });
    }
}

public partial record TelegramBotAnswerCallbackQueryParameters
{
    ///<summary>Unformatted text message body of the notification. eg: OK, I&apos;m listening</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Unique id of the callback response. eg: {{ trigger.event.data.id }}</summary>
    [JsonPropertyName("callback_query_id")]
    public string? CallbackQueryId { get; init; }

    ///<summary>Show a permanent notification.</summary>
    [JsonPropertyName("show_alert")]
    public bool? ShowAlert { get; init; }

    ///<summary>Read timeout for sending the answer.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record TelegramBotDeleteMessageParameters
{
    ///<summary>Id of the message to delete. eg: {{ trigger.event.data.message.message_id }}</summary>
    [JsonPropertyName("message_id")]
    public string? MessageId { get; init; }

    ///<summary>The chat_id where to delete the message. eg: 12345</summary>
    [JsonPropertyName("chat_id")]
    public string? ChatId { get; init; }
}

public partial record TelegramBotEditCaptionParameters
{
    ///<summary>Id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</summary>
    [JsonPropertyName("message_id")]
    public string? MessageId { get; init; }

    ///<summary>The chat_id where to edit the caption. eg: 12345</summary>
    [JsonPropertyName("chat_id")]
    public string? ChatId { get; init; }

    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }
}

public partial record TelegramBotEditMessageParameters
{
    ///<summary>Id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</summary>
    [JsonPropertyName("message_id")]
    public string? MessageId { get; init; }

    ///<summary>The chat_id where to edit the message. eg: 12345</summary>
    [JsonPropertyName("chat_id")]
    public string? ChatId { get; init; }

    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title for your notification. Will be composed as &apos;%title %message&apos;. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Disables link previews for links in the message.</summary>
    [JsonPropertyName("disable_web_page_preview")]
    public bool? DisableWebPagePreview { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }
}

public partial record TelegramBotEditReplymarkupParameters
{
    ///<summary>Id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</summary>
    [JsonPropertyName("message_id")]
    public string? MessageId { get; init; }

    ///<summary>The chat_id where to edit the reply_markup. eg: 12345</summary>
    [JsonPropertyName("chat_id")]
    public string? ChatId { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }
}

public partial record TelegramBotSendAnimationParameters
{
    ///<summary>Remote path to a GIF or H.264/MPEG-4 AVC video without sound. eg: http://example.org/path/to/the/animation.gif</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to a GIF or H.264/MPEG-4 AVC video without sound. eg: /path/to/the/animation.gif</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>The title of the animation. eg: My animation</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Read timeout for send sticker.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }

    ///<summary>Mark the message as a reply to a previous message.</summary>
    [JsonPropertyName("reply_to_message_id")]
    public long? ReplyToMessageId { get; init; }

    ///<summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</summary>
    [JsonPropertyName("message_thread_id")]
    public long? MessageThreadId { get; init; }
}

public partial record TelegramBotSendDocumentParameters
{
    ///<summary>Remote path to a document. eg: http://example.org/path/to/the/document.odf</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to a document. eg: /tmp/whatever.odf</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>The title of the document. eg: Document Title xy</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Read timeout for send document.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }

    ///<summary>Mark the message as a reply to a previous message.</summary>
    [JsonPropertyName("reply_to_message_id")]
    public long? ReplyToMessageId { get; init; }

    ///<summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</summary>
    [JsonPropertyName("message_thread_id")]
    public long? MessageThreadId { get; init; }
}

public partial record TelegramBotSendLocationParameters
{
    ///<summary>The latitude to send.</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>The longitude to send.</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Read timeout for send photo.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }

    ///<summary>Mark the message as a reply to a previous message.</summary>
    [JsonPropertyName("reply_to_message_id")]
    public long? ReplyToMessageId { get; init; }

    ///<summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</summary>
    [JsonPropertyName("message_thread_id")]
    public long? MessageThreadId { get; init; }
}

public partial record TelegramBotSendMessageParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title for your notification. Will be composed as &apos;%title %message&apos;. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the notification to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Disables link previews for links in the message.</summary>
    [JsonPropertyName("disable_web_page_preview")]
    public bool? DisableWebPagePreview { get; init; }

    ///<summary>Read timeout for send message. Will help with timeout errors (poor internet connection, etc)s.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. Empty list clears a previously set keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [&quot;Text button1:/button1, Text button2:/button2&quot;, &quot;Text button3:/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }

    ///<summary>Mark the message as a reply to a previous message.</summary>
    [JsonPropertyName("reply_to_message_id")]
    public long? ReplyToMessageId { get; init; }

    ///<summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</summary>
    [JsonPropertyName("message_thread_id")]
    public long? MessageThreadId { get; init; }
}

public partial record TelegramBotSendPhotoParameters
{
    ///<summary>Remote path to an image. eg: http://example.org/path/to/the/image.png</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to an image. eg: /path/to/the/image.png</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>The title of the image. eg: My image</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Read timeout for send photo.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }

    ///<summary>Mark the message as a reply to a previous message.</summary>
    [JsonPropertyName("reply_to_message_id")]
    public long? ReplyToMessageId { get; init; }

    ///<summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</summary>
    [JsonPropertyName("message_thread_id")]
    public long? MessageThreadId { get; init; }
}

public partial record TelegramBotSendPollParameters
{
    ///<summary>An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Poll question, 1-300 characters.</summary>
    [JsonPropertyName("question")]
    public string? Question { get; init; }

    ///<summary>List of answer options, 2-10 strings 1-100 characters each.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>If the poll needs to be anonymous, defaults to True.</summary>
    [JsonPropertyName("is_anonymous")]
    public bool? IsAnonymous { get; init; }

    ///<summary>If the poll allows multiple answers, defaults to False.</summary>
    [JsonPropertyName("allows_multiple_answers")]
    public bool? AllowsMultipleAnswers { get; init; }

    ///<summary>Amount of time in seconds the poll will be active after creation, 5-600.</summary>
    [JsonPropertyName("open_period")]
    public long? OpenPeriod { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Read timeout for send poll.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>Tag for sent message. eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }

    ///<summary>Mark the message as a reply to a previous message.</summary>
    [JsonPropertyName("reply_to_message_id")]
    public long? ReplyToMessageId { get; init; }

    ///<summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</summary>
    [JsonPropertyName("message_thread_id")]
    public long? MessageThreadId { get; init; }
}

public partial record TelegramBotSendStickerParameters
{
    ///<summary>Remote path to a static .webp or animated .tgs sticker. eg: http://example.org/path/to/the/sticker.webp</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to a static .webp or animated .tgs sticker. eg: /path/to/the/sticker.webp</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>ID of a sticker that exists on telegram servers. eg: CAACAgIAAxkBAAEDDldhZD-hqWclr6krLq-FWSfCrGNmOQAC9gAD9HsZAAFeYY-ltPYnrCEE</summary>
    [JsonPropertyName("sticker_id")]
    public string? StickerId { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Read timeout for send sticker.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }

    ///<summary>Mark the message as a reply to a previous message.</summary>
    [JsonPropertyName("reply_to_message_id")]
    public long? ReplyToMessageId { get; init; }

    ///<summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</summary>
    [JsonPropertyName("message_thread_id")]
    public long? MessageThreadId { get; init; }
}

public partial record TelegramBotSendVideoParameters
{
    ///<summary>Remote path to a video. eg: http://example.org/path/to/the/video.mp4</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to a video. eg: /path/to/the/video.mp4</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>The title of the video. eg: My video</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Read timeout for send video.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }

    ///<summary>Mark the message as a reply to a previous message.</summary>
    [JsonPropertyName("reply_to_message_id")]
    public long? ReplyToMessageId { get; init; }

    ///<summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</summary>
    [JsonPropertyName("message_thread_id")]
    public long? MessageThreadId { get; init; }
}

public partial record TelegramBotSendVoiceParameters
{
    ///<summary>Remote path to a voice message. eg: http://example.org/path/to/the/voice.opus</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to a voice message. eg: /path/to/the/voice.opus</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>The title of the voice message. eg: My microphone recording</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Read timeout for send voice.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }

    ///<summary>Mark the message as a reply to a previous message.</summary>
    [JsonPropertyName("reply_to_message_id")]
    public long? ReplyToMessageId { get; init; }

    ///<summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.</summary>
    [JsonPropertyName("message_thread_id")]
    public long? MessageThreadId { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("template", "reload", null);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Enter your text. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimeServices
{
    private readonly IHaContext _haContext;
    public TimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TimeSetValueParameters data)
    {
        _haContext.CallService("time", "set_value", target, data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="time">The time to set. eg: 22:15</param>
    public void SetValue(ServiceTarget target, DateTime time)
    {
        _haContext.CallService("time", "set_value", target, new TimeSetValueParameters { Time = time });
    }
}

public partial record TimeSetValueParameters
{
    ///<summary>The time to set. eg: 22:15</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Custom duration to restart the timer with. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleTranslateSay(TtsGoogleTranslateSayParameters data)
    {
        _haContext.CallService("tts", "google_translate_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void GoogleTranslateSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_translate_say", null, new TtsGoogleTranslateSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleTranslateSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UnifiServices
{
    private readonly IHaContext _haContext;
    public UnifiServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tries to get wireless client to reconnect to UniFi Network.</summary>
    public void ReconnectClient(UnifiReconnectClientParameters data)
    {
        _haContext.CallService("unifi", "reconnect_client", null, data);
    }

    ///<summary>Tries to get wireless client to reconnect to UniFi Network.</summary>
    ///<param name="deviceId">The device that should be forced to reconnect to the wireless network.</param>
    public void ReconnectClient(string deviceId)
    {
        _haContext.CallService("unifi", "reconnect_client", null, new UnifiReconnectClientParameters { DeviceId = deviceId });
    }

    ///<summary>Cleans up clients that has only been associated with the controller for a short period of time.</summary>
    public void RemoveClients()
    {
        _haContext.CallService("unifi", "remove_clients", null);
    }
}

public partial record UnifiReconnectClientParameters
{
    ///<summary>The device that should be forced to reconnect to the wireless network.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class UtilityMeterServices
{
    private readonly IHaContext _haContext;
    public UtilityMeterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    public void Calibrate(ServiceTarget target, UtilityMeterCalibrateParameters data)
    {
        _haContext.CallService("utility_meter", "calibrate", target, data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public void Calibrate(ServiceTarget target, string value)
    {
        _haContext.CallService("utility_meter", "calibrate", target, new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("utility_meter", "reset", target);
    }
}

public partial record UtilityMeterCalibrateParameters
{
    ///<summary>Value to which set the meter. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "clean_spot", target);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "locate", target);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "pause", target);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "return_to_base", target);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start", target);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "stop", target);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class ValveServices
{
    private readonly IHaContext _haContext;
    public ValveServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a valve.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseValve(ServiceTarget target)
    {
        _haContext.CallService("valve", "close_valve", target);
    }

    ///<summary>Opens a valve.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenValve(ServiceTarget target)
    {
        _haContext.CallService("valve", "open_valve", target);
    }

    ///<summary>Moves a valve to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValvePosition(ServiceTarget target, ValveSetValvePositionParameters data)
    {
        _haContext.CallService("valve", "set_valve_position", target, data);
    }

    ///<summary>Moves a valve to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetValvePosition(ServiceTarget target, long position)
    {
        _haContext.CallService("valve", "set_valve_position", target, new ValveSetValvePositionParameters { Position = position });
    }

    ///<summary>Stops the valve movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopValve(ServiceTarget target)
    {
        _haContext.CallService("valve", "stop_valve", target);
    }

    ///<summary>Toggles a valve open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("valve", "toggle", target);
    }
}

public partial record ValveSetValvePositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial class WakeOnLanServices
{
    private readonly IHaContext _haContext;
    public WakeOnLanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    public void SendMagicPacket(WakeOnLanSendMagicPacketParameters data)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, data);
    }

    ///<summary>Sends a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    ///<param name="mac">MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</param>
    ///<param name="broadcastAddress">The IP address of the host to send the magic packet to. Defaults to `255.255.255.255` and is normally not changed. eg: 192.168.255.255</param>
    ///<param name="broadcastPort">The port to send the magic packet to. Defaults to `9` and is normally not changed.</param>
    public void SendMagicPacket(string mac, string? broadcastAddress = null, long? broadcastPort = null)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, new WakeOnLanSendMagicPacketParameters { Mac = mac, BroadcastAddress = broadcastAddress, BroadcastPort = broadcastPort });
    }
}

public partial record WakeOnLanSendMagicPacketParameters
{
    ///<summary>MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>The IP address of the host to send the magic packet to. Defaults to `255.255.255.255` and is normally not changed. eg: 192.168.255.255</summary>
    [JsonPropertyName("broadcast_address")]
    public string? BroadcastAddress { get; init; }

    ///<summary>The port to send the magic packet to. Defaults to `9` and is normally not changed.</summary>
    [JsonPropertyName("broadcast_port")]
    public long? BroadcastPort { get; init; }
}

public partial class WatchmanServices
{
    private readonly IHaContext _haContext;
    public WatchmanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Run the Watchman report</summary>
    public void Report(WatchmanReportParameters data)
    {
        _haContext.CallService("watchman", "report", null, data);
    }

    ///<summary>Run the Watchman report</summary>
    ///<param name="parseConfig">Parse configuration files before generating the report. Usually, this is done automatically by Watchman, so this flag is typically not required. eg: True</param>
    ///<param name="advancedOptions"></param>
    public void Report(bool? parseConfig = null, object? advancedOptions = null)
    {
        _haContext.CallService("watchman", "report", null, new WatchmanReportParameters { ParseConfig = parseConfig, AdvancedOptions = advancedOptions });
    }
}

public partial record WatchmanReportParameters
{
    ///<summary>Parse configuration files before generating the report. Usually, this is done automatically by Watchman, so this flag is typically not required. eg: True</summary>
    [JsonPropertyName("parse_config")]
    public bool? ParseConfig { get; init; }

    [JsonPropertyName("advanced_options")]
    public object? AdvancedOptions { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_off", target);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_on", target);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecasts(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        _haContext.CallService("weather", "get_forecasts", target, data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecasts(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }
}

public partial record WeatherGetForecastsParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class WebostvServices
{
    private readonly IHaContext _haContext;
    public WebostvServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a button press command.</summary>
    public void Button(WebostvButtonParameters data)
    {
        _haContext.CallService("webostv", "button", null, data);
    }

    ///<summary>Sends a button press command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="button">Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. eg: LEFT</param>
    public void Button(string entityId, string button)
    {
        _haContext.CallService("webostv", "button", null, new WebostvButtonParameters { EntityId = entityId, Button = button });
    }

    ///<summary>Sends a command.</summary>
    public void Command(WebostvCommandParameters data)
    {
        _haContext.CallService("webostv", "command", null, data);
    }

    ///<summary>Sends a command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="command">Endpoint of the command. eg: system.launcher/open</param>
    ///<param name="payload">An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</param>
    public void Command(string entityId, string command, object? payload = null)
    {
        _haContext.CallService("webostv", "command", null, new WebostvCommandParameters { EntityId = entityId, Command = command, Payload = payload });
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    public void SelectSoundOutput(WebostvSelectSoundOutputParameters data)
    {
        _haContext.CallService("webostv", "select_sound_output", null, data);
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    ///<param name="entityId">Name(s) of the webostv entities to change sound output on.</param>
    ///<param name="soundOutput">Name of the sound output to switch to. eg: external_speaker</param>
    public void SelectSoundOutput(string entityId, string soundOutput)
    {
        _haContext.CallService("webostv", "select_sound_output", null, new WebostvSelectSoundOutputParameters { EntityId = entityId, SoundOutput = soundOutput });
    }
}

public partial record WebostvButtonParameters
{
    ///<summary>Name(s) of the webostv entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. eg: LEFT</summary>
    [JsonPropertyName("button")]
    public string? Button { get; init; }
}

public partial record WebostvCommandParameters
{
    ///<summary>Name(s) of the webostv entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Endpoint of the command. eg: system.launcher/open</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }
}

public partial record WebostvSelectSoundOutputParameters
{
    ///<summary>Name(s) of the webostv entities to change sound output on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the sound output to switch to. eg: external_speaker</summary>
    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }
}

public partial class WebrtcServices
{
    private readonly IHaContext _haContext;
    public WebrtcServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a temporary or permanent link to a stream (enter `url` or `entity`)</summary>
    public void CreateLink(WebrtcCreateLinkParameters data)
    {
        _haContext.CallService("webrtc", "create_link", null, data);
    }

    ///<summary>Create a temporary or permanent link to a stream (enter `url` or `entity`)</summary>
    ///<param name="linkId">Create a random or permanent ID for your link eg: fd0a53ca-e9ab-4e7a-86a2-441642b16ae1</param>
    ///<param name="url">Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</param>
    ///<param name="entity">Camera entity_id eg: camera.generic_stream</param>
    ///<param name="openLimit">How many times a link can be opened (0 - unlimit)</param>
    ///<param name="timeToLive">How many seconds will the link live (0 - unlimit)</param>
    public void CreateLink(string linkId, string? url = null, string? entity = null, long? openLimit = null, long? timeToLive = null)
    {
        _haContext.CallService("webrtc", "create_link", null, new WebrtcCreateLinkParameters { LinkId = linkId, Url = url, Entity = entity, OpenLimit = openLimit, TimeToLive = timeToLive });
    }

    ///<summary>Cast stream to Chromecast device via DashCast application</summary>
    public void DashCast(WebrtcDashCastParameters data)
    {
        _haContext.CallService("webrtc", "dash_cast", null, data);
    }

    ///<summary>Cast stream to Chromecast device via DashCast application</summary>
    ///<param name="entityId">Media player entity_id eg: media_player.mibox4</param>
    ///<param name="url">Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</param>
    ///<param name="entity">Camera entity_id eg: camera.generic_stream</param>
    ///<param name="extra">Additional card params</param>
    ///<param name="force">Force restart DashCast application</param>
    ///<param name="hassUrl">Manual base URL to Hass server eg: http://192.168.1.123:8123</param>
    public void DashCast(string entityId, string? url = null, string? entity = null, object? extra = null, bool? force = null, string? hassUrl = null)
    {
        _haContext.CallService("webrtc", "dash_cast", null, new WebrtcDashCastParameters { EntityId = entityId, Url = url, Entity = entity, Extra = extra, Force = force, HassUrl = hassUrl });
    }
}

public partial record WebrtcCreateLinkParameters
{
    ///<summary>Create a random or permanent ID for your link eg: fd0a53ca-e9ab-4e7a-86a2-441642b16ae1</summary>
    [JsonPropertyName("link_id")]
    public string? LinkId { get; init; }

    ///<summary>Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Camera entity_id eg: camera.generic_stream</summary>
    [JsonPropertyName("entity")]
    public string? Entity { get; init; }

    ///<summary>How many times a link can be opened (0 - unlimit)</summary>
    [JsonPropertyName("open_limit")]
    public long? OpenLimit { get; init; }

    ///<summary>How many seconds will the link live (0 - unlimit)</summary>
    [JsonPropertyName("time_to_live")]
    public long? TimeToLive { get; init; }
}

public partial record WebrtcDashCastParameters
{
    ///<summary>Media player entity_id eg: media_player.mibox4</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Camera entity_id eg: camera.generic_stream</summary>
    [JsonPropertyName("entity")]
    public string? Entity { get; init; }

    ///<summary>Additional card params</summary>
    [JsonPropertyName("extra")]
    public object? Extra { get; init; }

    ///<summary>Force restart DashCast application</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }

    ///<summary>Manual base URL to Hass server eg: http://192.168.1.123:8123</summary>
    [JsonPropertyName("hass_url")]
    public string? HassUrl { get; init; }
}

public partial class WiserServices
{
    private readonly IHaContext _haContext;
    public WiserServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Assign the schedule to other rooms or devices in the same type</summary>
    public void AssignSchedule(WiserAssignScheduleParameters data)
    {
        _haContext.CallService("wiser", "assign_schedule", null, data);
    }

    ///<summary>Assign the schedule to other rooms or devices in the same type</summary>
    ///<param name="entityId">A wiser entity</param>
    ///<param name="scheduleId">A wiser schedule id</param>
    ///<param name="scheduleName">A wiser schedule name</param>
    ///<param name="toEntityId">Enter the entity_id for the room or device to assign the same schedule to. eg: climate.wiser_kitchen</param>
    public void AssignSchedule(string toEntityId, string? entityId = null, long? scheduleId = null, string? scheduleName = null)
    {
        _haContext.CallService("wiser", "assign_schedule", null, new WiserAssignScheduleParameters { EntityId = entityId, ScheduleId = scheduleId, ScheduleName = scheduleName, ToEntityId = toEntityId });
    }

    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    ///<param name="target">The target for this service call</param>
    public void BoostHeating(ServiceTarget target, WiserBoostHeatingParameters data)
    {
        _haContext.CallService("wiser", "boost_heating", target, data);
    }

    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="timePeriod">Set the time period for the boost in minutes eg: 60</param>
    ///<param name="temperatureDelta">Set the increase in temperature for the boost period eg: 3.0</param>
    ///<param name="temperature">Set the room target temperature for the boost period eg: 21.0</param>
    public void BoostHeating(ServiceTarget target, long timePeriod, double? temperatureDelta = null, double? temperature = null)
    {
        _haContext.CallService("wiser", "boost_heating", target, new WiserBoostHeatingParameters { TimePeriod = timePeriod, TemperatureDelta = temperatureDelta, Temperature = temperature });
    }

    ///<summary>Boost the hot water for time specified </summary>
    public void BoostHotwater(WiserBoostHotwaterParameters data)
    {
        _haContext.CallService("wiser", "boost_hotwater", null, data);
    }

    ///<summary>Boost the hot water for time specified </summary>
    ///<param name="timePeriod">Set the time period for the boost eg: 60</param>
    ///<param name="hub">Only needs to be set if you have multiple Wiser hubs</param>
    public void BoostHotwater(long timePeriod, object? hub = null)
    {
        _haContext.CallService("wiser", "boost_hotwater", null, new WiserBoostHotwaterParameters { TimePeriod = timePeriod, Hub = hub });
    }

    ///<summary>Copy the schedule from one to another in the same type</summary>
    public void CopySchedule(WiserCopyScheduleParameters data)
    {
        _haContext.CallService("wiser", "copy_schedule", null, data);
    }

    ///<summary>Copy the schedule from one to another in the same type</summary>
    ///<param name="entityId">A wiser entity</param>
    ///<param name="toEntityId">Enter the entity_id for the room to copy the schedule to. eg: climate.wiser_kitchen</param>
    public void CopySchedule(string entityId, string toEntityId)
    {
        _haContext.CallService("wiser", "copy_schedule", null, new WiserCopyScheduleParameters { EntityId = entityId, ToEntityId = toEntityId });
    }

    ///<summary>Read the schedule from a room or device and write to an output file in yaml </summary>
    public void GetSchedule(WiserGetScheduleParameters data)
    {
        _haContext.CallService("wiser", "get_schedule", null, data);
    }

    ///<summary>Read the schedule from a room or device and write to an output file in yaml </summary>
    ///<param name="entityId">A wiser entity</param>
    ///<param name="filename">The filename to write out the yaml. See README.MD if running within a docker container  eg: config/schedules/{{ entity_id.name }}.yaml</param>
    public void GetSchedule(string entityId, string? filename = null)
    {
        _haContext.CallService("wiser", "get_schedule", null, new WiserGetScheduleParameters { EntityId = entityId, Filename = filename });
    }

    ///<summary>Sets the device mode to auto or manual</summary>
    public void SetDeviceMode(WiserSetDeviceModeParameters data)
    {
        _haContext.CallService("wiser", "set_device_mode", null, data);
    }

    ///<summary>Sets the device mode to auto or manual</summary>
    ///<param name="entityId">A wiser mode entity</param>
    ///<param name="mode">Enter the mode which can be manual or auto. eg: auto</param>
    public void SetDeviceMode(string entityId, object mode)
    {
        _haContext.CallService("wiser", "set_device_mode", null, new WiserSetDeviceModeParameters { EntityId = entityId, Mode = mode });
    }

    ///<summary>Allows changing of opentherm parameters on the Wiser Hub</summary>
    public void SetOpenthermParameter(WiserSetOpenthermParameterParameters data)
    {
        _haContext.CallService("wiser", "set_opentherm_parameter", null, data);
    }

    ///<summary>Allows changing of opentherm parameters on the Wiser Hub</summary>
    ///<param name="endpoint">Endpoint if not at opentherm root.  Ie. preDefinedRemoteBoilerParameters</param>
    ///<param name="parameter">Parameter to change</param>
    ///<param name="parameterValue">Parameter value to set</param>
    ///<param name="hub">Only needs to be set if you have multiple Wiser hubs</param>
    public void SetOpenthermParameter(string parameter, string parameterValue, string? endpoint = null, object? hub = null)
    {
        _haContext.CallService("wiser", "set_opentherm_parameter", null, new WiserSetOpenthermParameterParameters { Endpoint = endpoint, Parameter = parameter, ParameterValue = parameterValue, Hub = hub });
    }

    ///<summary>Read in the yaml schedule file and set the schedule</summary>
    public void SetSchedule(WiserSetScheduleParameters data)
    {
        _haContext.CallService("wiser", "set_schedule", null, data);
    }

    ///<summary>Read in the yaml schedule file and set the schedule</summary>
    ///<param name="entityId">A wiser entity</param>
    ///<param name="filename">The filename to read the yaml schedule from. eg: schedules/schedule1.yaml</param>
    public void SetSchedule(string entityId, string filename)
    {
        _haContext.CallService("wiser", "set_schedule", null, new WiserSetScheduleParameters { EntityId = entityId, Filename = filename });
    }

    ///<summary>Set a schedule from a template supported string</summary>
    public void SetScheduleFromString(WiserSetScheduleFromStringParameters data)
    {
        _haContext.CallService("wiser", "set_schedule_from_string", null, data);
    }

    ///<summary>Set a schedule from a template supported string</summary>
    ///<param name="entityId">A wiser entity</param>
    ///<param name="schedule">The schedule data (supports templates)</param>
    public void SetScheduleFromString(string entityId, string schedule)
    {
        _haContext.CallService("wiser", "set_schedule_from_string", null, new WiserSetScheduleFromStringParameters { EntityId = entityId, Schedule = schedule });
    }
}

public partial record WiserAssignScheduleParameters
{
    ///<summary>A wiser entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>A wiser schedule id</summary>
    [JsonPropertyName("schedule_id")]
    public long? ScheduleId { get; init; }

    ///<summary>A wiser schedule name</summary>
    [JsonPropertyName("schedule_name")]
    public string? ScheduleName { get; init; }

    ///<summary>Enter the entity_id for the room or device to assign the same schedule to. eg: climate.wiser_kitchen</summary>
    [JsonPropertyName("to_entity_id")]
    public string? ToEntityId { get; init; }
}

public partial record WiserBoostHeatingParameters
{
    ///<summary>Set the time period for the boost in minutes eg: 60</summary>
    [JsonPropertyName("time_period")]
    public long? TimePeriod { get; init; }

    ///<summary>Set the increase in temperature for the boost period eg: 3.0</summary>
    [JsonPropertyName("temperature_delta")]
    public double? TemperatureDelta { get; init; }

    ///<summary>Set the room target temperature for the boost period eg: 21.0</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }
}

public partial record WiserBoostHotwaterParameters
{
    ///<summary>Set the time period for the boost eg: 60</summary>
    [JsonPropertyName("time_period")]
    public long? TimePeriod { get; init; }

    ///<summary>Only needs to be set if you have multiple Wiser hubs</summary>
    [JsonPropertyName("hub")]
    public object? Hub { get; init; }
}

public partial record WiserCopyScheduleParameters
{
    ///<summary>A wiser entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Enter the entity_id for the room to copy the schedule to. eg: climate.wiser_kitchen</summary>
    [JsonPropertyName("to_entity_id")]
    public string? ToEntityId { get; init; }
}

public partial record WiserGetScheduleParameters
{
    ///<summary>A wiser entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The filename to write out the yaml. See README.MD if running within a docker container  eg: config/schedules/{{ entity_id.name }}.yaml</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial record WiserSetDeviceModeParameters
{
    ///<summary>A wiser mode entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Enter the mode which can be manual or auto. eg: auto</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial record WiserSetOpenthermParameterParameters
{
    ///<summary>Endpoint if not at opentherm root.  Ie. preDefinedRemoteBoilerParameters</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>Parameter to change</summary>
    [JsonPropertyName("parameter")]
    public string? Parameter { get; init; }

    ///<summary>Parameter value to set</summary>
    [JsonPropertyName("parameter_value")]
    public string? ParameterValue { get; init; }

    ///<summary>Only needs to be set if you have multiple Wiser hubs</summary>
    [JsonPropertyName("hub")]
    public object? Hub { get; init; }
}

public partial record WiserSetScheduleParameters
{
    ///<summary>A wiser entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The filename to read the yaml schedule from. eg: schedules/schedule1.yaml</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial record WiserSetScheduleFromStringParameters
{
    ///<summary>A wiser entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The schedule data (supports templates)</summary>
    [JsonPropertyName("schedule")]
    public string? Schedule { get; init; }
}

public partial class WorkdayServices
{
    private readonly IHaContext _haContext;
    public WorkdayServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Check if date is workday.</summary>
    ///<param name="target">The target for this service call</param>
    public void CheckDate(ServiceTarget target, WorkdayCheckDateParameters data)
    {
        _haContext.CallService("workday", "check_date", target, data);
    }

    ///<summary>Check if date is workday.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="checkDate">Date to check if workday. eg: 2022-12-25</param>
    public void CheckDate(ServiceTarget target, object? checkDate = null)
    {
        _haContext.CallService("workday", "check_date", target, new WorkdayCheckDateParameters { CheckDate = checkDate });
    }
}

public partial record WorkdayCheckDateParameters
{
    ///<summary>Date to check if workday. eg: 2022-12-25</summary>
    [JsonPropertyName("check_date")]
    public object? CheckDate { get; init; }
}

public partial class ZhaServices
{
    private readonly IHaContext _haContext;
    public ZhaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUserCode(ServiceTarget target, ZhaClearLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public void ClearLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableLockUserCode(ServiceTarget target, ZhaDisableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public void DisableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableLockUserCode(ServiceTarget target, ZhaEnableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public void EnableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    public void IssueZigbeeClusterCommand(ZhaIssueZigbeeClusterCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, data);
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="commandType">Type of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="params">Parameters to pass to the command.</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeClusterCommand(string ieee, long endpointId, long clusterId, long command, object commandType, object? clusterType = null, object? args = null, object? @params = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, new ZhaIssueZigbeeClusterCommandParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Command = command, CommandType = commandType, Args = args, Params = @params, Manufacturer = manufacturer });
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    public void IssueZigbeeGroupCommand(ZhaIssueZigbeeGroupCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, data);
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    ///<param name="group">Hexadecimal address of the group. eg: 546</param>
    ///<param name="clusterId">ZCL cluster to send command to.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeGroupCommand(string @group, long clusterId, long command, object? clusterType = null, object? args = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, new ZhaIssueZigbeeGroupCommandParameters { Group = @group, ClusterId = clusterId, ClusterType = clusterType, Command = command, Args = args, Manufacturer = manufacturer });
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    public void Permit(ZhaPermitParameters data)
    {
        _haContext.CallService("zha", "permit", null, data);
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    ///<param name="duration">Time to permit joins.</param>
    ///<param name="ieee">IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="sourceIeee">IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</param>
    ///<param name="installCode">Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</param>
    ///<param name="qrCode">Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</param>
    public void Permit(long? duration = null, string? ieee = null, string? sourceIeee = null, string? installCode = null, string? qrCode = null)
    {
        _haContext.CallService("zha", "permit", null, new ZhaPermitParameters { Duration = duration, Ieee = ieee, SourceIeee = sourceIeee, InstallCode = installCode, QrCode = qrCode });
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    public void Remove(ZhaRemoveParameters data)
    {
        _haContext.CallService("zha", "remove", null, data);
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    ///<param name="ieee">IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void Remove(string ieee)
    {
        _haContext.CallService("zha", "remove", null, new ZhaRemoveParameters { Ieee = ieee });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUserCode(ServiceTarget target, ZhaSetLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public void SetLockUserCode(ServiceTarget target, string codeSlot, string userCode)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    public void SetZigbeeClusterAttribute(ZhaSetZigbeeClusterAttributeParameters data)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, data);
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="attribute">ID of the attribute to set. eg: 0</param>
    ///<param name="value">Value to write to the attribute. eg: 1</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void SetZigbeeClusterAttribute(string ieee, long endpointId, long clusterId, long attribute, string value, object? clusterType = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, new ZhaSetZigbeeClusterAttributeParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Attribute = attribute, Value = value, Manufacturer = manufacturer });
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    public void WarningDeviceSquawk(ZhaWarningDeviceSquawkParameters data)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, data);
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</param>
    ///<param name="strobe">The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</param>
    ///<param name="level">The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</param>
    public void WarningDeviceSquawk(string ieee, long? mode = null, long? strobe = null, long? level = null)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, new ZhaWarningDeviceSquawkParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level });
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    public void WarningDeviceWarn(ZhaWarningDeviceWarnParameters data)
    {
        _haContext.CallService("zha", "warning_device_warn", null, data);
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</param>
    ///<param name="strobe">The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</param>
    ///<param name="level">The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</param>
    ///<param name="duration">Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</param>
    ///<param name="dutyCycle">Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</param>
    ///<param name="intensity">Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</param>
    public void WarningDeviceWarn(string ieee, long? mode = null, long? strobe = null, long? level = null, long? duration = null, long? dutyCycle = null, long? intensity = null)
    {
        _haContext.CallService("zha", "warning_device_warn", null, new ZhaWarningDeviceWarnParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level, Duration = duration, DutyCycle = dutyCycle, Intensity = intensity });
    }
}

public partial record ZhaClearLockUserCodeParameters
{
    ///<summary>Code slot to clear code from. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaDisableLockUserCodeParameters
{
    ///<summary>Code slot to disable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaEnableLockUserCodeParameters
{
    ///<summary>Code slot to enable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaIssueZigbeeClusterCommandParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>Type of the command to execute.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Parameters to pass to the command.</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaIssueZigbeeGroupCommandParameters
{
    ///<summary>Hexadecimal address of the group. eg: 546</summary>
    [JsonPropertyName("group")]
    public string? Group { get; init; }

    ///<summary>ZCL cluster to send command to.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaPermitParameters
{
    ///<summary>Time to permit joins.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</summary>
    [JsonPropertyName("source_ieee")]
    public string? SourceIeee { get; init; }

    ///<summary>Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</summary>
    [JsonPropertyName("install_code")]
    public string? InstallCode { get; init; }

    ///<summary>Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</summary>
    [JsonPropertyName("qr_code")]
    public string? QrCode { get; init; }
}

public partial record ZhaRemoveParameters
{
    ///<summary>IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }
}

public partial record ZhaSetLockUserCodeParameters
{
    ///<summary>Code slot to set the code in. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Code to set. eg: 1234</summary>
    [JsonPropertyName("user_code")]
    public string? UserCode { get; init; }
}

public partial record ZhaSetZigbeeClusterAttributeParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the attribute to set. eg: 0</summary>
    [JsonPropertyName("attribute")]
    public long? Attribute { get; init; }

    ///<summary>Value to write to the attribute. eg: 1</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaWarningDeviceSquawkParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }
}

public partial record ZhaWarningDeviceWarnParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }

    ///<summary>Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</summary>
    [JsonPropertyName("duty_cycle")]
    public long? DutyCycle { get; init; }

    ///<summary>Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</summary>
    [JsonPropertyName("intensity")]
    public long? Intensity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }
}

public static class AlarmControlPanelEntityExtensionMethods
{
    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Trigger the alarm manually.</summary>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Trigger the alarm manually.</summary>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Trigger the alarm manually.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }

    ///<summary>Trigger the alarm manually.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static void GetEvents(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class CoverEntityExtensionMethods
{
    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this ICoverEntityCore target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this ICoverEntityCore target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this ICoverEntityCore target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this ICoverEntityCore target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this ICoverEntityCore target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this ICoverEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("toggle_cover_tilt");
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("toggle_cover_tilt");
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputButtonEntityExtensionMethods
{
    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IInputButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IEnumerable<IInputButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class InputDatetimeEntityExtensionMethods
{
    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IInputDatetimeEntityCore target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IInputDatetimeEntityCore to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IInputDatetimeEntityCore target, string? date = null, string? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IEnumerable&lt;IInputDatetimeEntityCore&gt; to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, string? date = null, string? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IInputNumberEntityCore target)
    {
        target.CallService("decrement");
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target)
    {
        target.CallService("decrement");
    }

    ///<summary>Increments the current value by 1 step.</summary>
    public static void Increment(this IInputNumberEntityCore target)
    {
        target.CallService("increment");
    }

    ///<summary>Increments the current value by 1 step.</summary>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target)
    {
        target.CallService("increment");
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputNumberEntityCore target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IInputNumberEntityCore target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputSelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IInputSelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IInputSelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IInputSelectEntityCore target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IInputSelectEntityCore target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IInputSelectEntityCore target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IInputSelectEntityCore target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IInputSelectEntityCore target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IInputSelectEntityCore target, string options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, string options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputTextEntityCore target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputTextEntityCore to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IInputTextEntityCore target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputTextEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void Toggle(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOff(this ILightEntityCore target, long? transition = null, object? advancedFields = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, long? transition = null, object? advancedFields = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOn(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_up");
    }
}

public static class MelcloudEntityExtensionMethods
{
    ///<summary>Sets horizontal vane position.</summary>
    public static void SetVaneHorizontal(this IClimateEntityCore target, MelcloudSetVaneHorizontalParameters data)
    {
        target.CallService("set_vane_horizontal", data);
    }

    ///<summary>Sets horizontal vane position.</summary>
    public static void SetVaneHorizontal(this IEnumerable<IClimateEntityCore> target, MelcloudSetVaneHorizontalParameters data)
    {
        target.CallService("set_vane_horizontal", data);
    }

    ///<summary>Sets horizontal vane position.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="position">Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute. eg: auto</param>
    public static void SetVaneHorizontal(this IClimateEntityCore target, string position)
    {
        target.CallService("set_vane_horizontal", new MelcloudSetVaneHorizontalParameters { Position = position });
    }

    ///<summary>Sets horizontal vane position.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="position">Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute. eg: auto</param>
    public static void SetVaneHorizontal(this IEnumerable<IClimateEntityCore> target, string position)
    {
        target.CallService("set_vane_horizontal", new MelcloudSetVaneHorizontalParameters { Position = position });
    }

    ///<summary>Sets vertical vane position.</summary>
    public static void SetVaneVertical(this IClimateEntityCore target, MelcloudSetVaneVerticalParameters data)
    {
        target.CallService("set_vane_vertical", data);
    }

    ///<summary>Sets vertical vane position.</summary>
    public static void SetVaneVertical(this IEnumerable<IClimateEntityCore> target, MelcloudSetVaneVerticalParameters data)
    {
        target.CallService("set_vane_vertical", data);
    }

    ///<summary>Sets vertical vane position.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="position">Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute. eg: auto</param>
    public static void SetVaneVertical(this IClimateEntityCore target, string position)
    {
        target.CallService("set_vane_vertical", new MelcloudSetVaneVerticalParameters { Position = position });
    }

    ///<summary>Sets vertical vane position.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="position">Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute. eg: auto</param>
    public static void SetVaneVertical(this IEnumerable<IClimateEntityCore> target, string position)
    {
        target.CallService("set_vane_vertical", new MelcloudSetVaneVerticalParameters { Position = position });
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class OctopusEnergyEntityExtensionMethods
{
    ///<summary>Boost a given heat pump zone for a given time period</summary>
    public static void BoostHeatPumpZone(this IClimateEntityCore target, OctopusEnergyBoostHeatPumpZoneParameters data)
    {
        target.CallService("boost_heat_pump_zone", data);
    }

    ///<summary>Boost a given heat pump zone for a given time period</summary>
    public static void BoostHeatPumpZone(this IEnumerable<IClimateEntityCore> target, OctopusEnergyBoostHeatPumpZoneParameters data)
    {
        target.CallService("boost_heat_pump_zone", data);
    }

    ///<summary>Boost a given heat pump zone for a given time period</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hours">The number of hours to boost for</param>
    ///<param name="minutes">The number of minutes to boost for</param>
    ///<param name="targetTemperature">The optional target temperature to boost to. If not supplied, then the current target temperature will be used</param>
    public static void BoostHeatPumpZone(this IClimateEntityCore target, long hours, long minutes, double? targetTemperature = null)
    {
        target.CallService("boost_heat_pump_zone", new OctopusEnergyBoostHeatPumpZoneParameters { Hours = hours, Minutes = minutes, TargetTemperature = targetTemperature });
    }

    ///<summary>Boost a given heat pump zone for a given time period</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hours">The number of hours to boost for</param>
    ///<param name="minutes">The number of minutes to boost for</param>
    ///<param name="targetTemperature">The optional target temperature to boost to. If not supplied, then the current target temperature will be used</param>
    public static void BoostHeatPumpZone(this IEnumerable<IClimateEntityCore> target, long hours, long minutes, double? targetTemperature = null)
    {
        target.CallService("boost_heat_pump_zone", new OctopusEnergyBoostHeatPumpZoneParameters { Hours = hours, Minutes = minutes, TargetTemperature = targetTemperature });
    }

    ///<summary>Joins a given Octoplus saving session event.</summary>
    public static void JoinOctoplusSavingSessionEvent(this EventEntity target, OctopusEnergyJoinOctoplusSavingSessionEventParameters data)
    {
        target.CallService("join_octoplus_saving_session_event", data);
    }

    ///<summary>Joins a given Octoplus saving session event.</summary>
    public static void JoinOctoplusSavingSessionEvent(this IEnumerable<EventEntity> target, OctopusEnergyJoinOctoplusSavingSessionEventParameters data)
    {
        target.CallService("join_octoplus_saving_session_event", data);
    }

    ///<summary>Joins a given Octoplus saving session event.</summary>
    ///<param name="target">The EventEntity to call this service for</param>
    ///<param name="eventCode">The code of the event that is to be joined.</param>
    public static void JoinOctoplusSavingSessionEvent(this EventEntity target, string? eventCode = null)
    {
        target.CallService("join_octoplus_saving_session_event", new OctopusEnergyJoinOctoplusSavingSessionEventParameters { EventCode = eventCode });
    }

    ///<summary>Joins a given Octoplus saving session event.</summary>
    ///<param name="target">The IEnumerable&lt;EventEntity&gt; to call this service for</param>
    ///<param name="eventCode">The code of the event that is to be joined.</param>
    public static void JoinOctoplusSavingSessionEvent(this IEnumerable<EventEntity> target, string? eventCode = null)
    {
        target.CallService("join_octoplus_saving_session_event", new OctopusEnergyJoinOctoplusSavingSessionEventParameters { EventCode = eventCode });
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    public static void RefreshPreviousConsumptionData(this ISensorEntityCore target, OctopusEnergyRefreshPreviousConsumptionDataParameters data)
    {
        target.CallService("refresh_previous_consumption_data", data);
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    public static void RefreshPreviousConsumptionData(this IEnumerable<ISensorEntityCore> target, OctopusEnergyRefreshPreviousConsumptionDataParameters data)
    {
        target.CallService("refresh_previous_consumption_data", data);
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="startDate">The date the data should be loaded from.</param>
    public static void RefreshPreviousConsumptionData(this ISensorEntityCore target, object startDate)
    {
        target.CallService("refresh_previous_consumption_data", new OctopusEnergyRefreshPreviousConsumptionDataParameters { StartDate = startDate });
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="startDate">The date the data should be loaded from.</param>
    public static void RefreshPreviousConsumptionData(this IEnumerable<ISensorEntityCore> target, object startDate)
    {
        target.CallService("refresh_previous_consumption_data", new OctopusEnergyRefreshPreviousConsumptionDataParameters { StartDate = startDate });
    }

    ///<summary>Registers external weightings against rates, for use with target rate sensors when calculating target periods.</summary>
    public static void RegisterRateWeightings(this ISensorEntityCore target, OctopusEnergyRegisterRateWeightingsParameters data)
    {
        target.CallService("register_rate_weightings", data);
    }

    ///<summary>Registers external weightings against rates, for use with target rate sensors when calculating target periods.</summary>
    public static void RegisterRateWeightings(this IEnumerable<ISensorEntityCore> target, OctopusEnergyRegisterRateWeightingsParameters data)
    {
        target.CallService("register_rate_weightings", data);
    }

    ///<summary>Registers external weightings against rates, for use with target rate sensors when calculating target periods.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="weightings">The collection of time periods and associated weightings to apply. eg: [   {     &quot;start&quot;: &quot;2025-01-01T00:00:00Z&quot;,     &quot;end&quot;: &quot;2025-01-01T00:30:00Z&quot;,     &quot;weighting&quot;: 0.1   } ]</param>
    public static void RegisterRateWeightings(this ISensorEntityCore target, object? weightings = null)
    {
        target.CallService("register_rate_weightings", new OctopusEnergyRegisterRateWeightingsParameters { Weightings = weightings });
    }

    ///<summary>Registers external weightings against rates, for use with target rate sensors when calculating target periods.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="weightings">The collection of time periods and associated weightings to apply. eg: [   {     &quot;start&quot;: &quot;2025-01-01T00:00:00Z&quot;,     &quot;end&quot;: &quot;2025-01-01T00:30:00Z&quot;,     &quot;weighting&quot;: 0.1   } ]</param>
    public static void RegisterRateWeightings(this IEnumerable<ISensorEntityCore> target, object? weightings = null)
    {
        target.CallService("register_rate_weightings", new OctopusEnergyRegisterRateWeightingsParameters { Weightings = weightings });
    }

    ///<summary>Sets the full flow temperature configuration for fixed and weather compensated flow temperatures, with the option to select which is active. Changing this configuration without a good understanding of heat loss and emitter output can cause cycling, defrosting, or incorrect heat delivery.</summary>
    public static void SetHeatPumpFlowTempConfig(this IClimateEntityCore target, OctopusEnergySetHeatPumpFlowTempConfigParameters data)
    {
        target.CallService("set_heat_pump_flow_temp_config", data);
    }

    ///<summary>Sets the full flow temperature configuration for fixed and weather compensated flow temperatures, with the option to select which is active. Changing this configuration without a good understanding of heat loss and emitter output can cause cycling, defrosting, or incorrect heat delivery.</summary>
    public static void SetHeatPumpFlowTempConfig(this IEnumerable<IClimateEntityCore> target, OctopusEnergySetHeatPumpFlowTempConfigParameters data)
    {
        target.CallService("set_heat_pump_flow_temp_config", data);
    }

    ///<summary>Sets the full flow temperature configuration for fixed and weather compensated flow temperatures, with the option to select which is active. Changing this configuration without a good understanding of heat loss and emitter output can cause cycling, defrosting, or incorrect heat delivery.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="weatherCompEnabled">Switches weather compensation on or off</param>
    ///<param name="weatherCompMinTemperature">Minimum allowable temperature for weather compensation</param>
    ///<param name="weatherCompMaxTemperature">Maximum allowable temperature for weather compensation</param>
    ///<param name="fixedFlowTemperature">Temperature for a fixed flow without weather compensation</param>
    public static void SetHeatPumpFlowTempConfig(this IClimateEntityCore target, bool weatherCompEnabled, double weatherCompMinTemperature, double weatherCompMaxTemperature, double fixedFlowTemperature)
    {
        target.CallService("set_heat_pump_flow_temp_config", new OctopusEnergySetHeatPumpFlowTempConfigParameters { WeatherCompEnabled = weatherCompEnabled, WeatherCompMinTemperature = weatherCompMinTemperature, WeatherCompMaxTemperature = weatherCompMaxTemperature, FixedFlowTemperature = fixedFlowTemperature });
    }

    ///<summary>Sets the full flow temperature configuration for fixed and weather compensated flow temperatures, with the option to select which is active. Changing this configuration without a good understanding of heat loss and emitter output can cause cycling, defrosting, or incorrect heat delivery.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="weatherCompEnabled">Switches weather compensation on or off</param>
    ///<param name="weatherCompMinTemperature">Minimum allowable temperature for weather compensation</param>
    ///<param name="weatherCompMaxTemperature">Maximum allowable temperature for weather compensation</param>
    ///<param name="fixedFlowTemperature">Temperature for a fixed flow without weather compensation</param>
    public static void SetHeatPumpFlowTempConfig(this IEnumerable<IClimateEntityCore> target, bool weatherCompEnabled, double weatherCompMinTemperature, double weatherCompMaxTemperature, double fixedFlowTemperature)
    {
        target.CallService("set_heat_pump_flow_temp_config", new OctopusEnergySetHeatPumpFlowTempConfigParameters { WeatherCompEnabled = weatherCompEnabled, WeatherCompMinTemperature = weatherCompMinTemperature, WeatherCompMaxTemperature = weatherCompMaxTemperature, FixedFlowTemperature = fixedFlowTemperature });
    }

    ///<summary>Spins the wheel of fortune for a given energy type</summary>
    public static void SpinWheelOfFortune(this ISensorEntityCore target)
    {
        target.CallService("spin_wheel_of_fortune");
    }

    ///<summary>Spins the wheel of fortune for a given energy type</summary>
    public static void SpinWheelOfFortune(this IEnumerable<ISensorEntityCore> target)
    {
        target.CallService("spin_wheel_of_fortune");
    }

    ///<summary>Updates a given target rate&apos;s config.</summary>
    public static void UpdateTargetConfig(this IBinarySensorEntityCore target, OctopusEnergyUpdateTargetConfigParameters data)
    {
        target.CallService("update_target_config", data);
    }

    ///<summary>Updates a given target rate&apos;s config.</summary>
    public static void UpdateTargetConfig(this IEnumerable<IBinarySensorEntityCore> target, OctopusEnergyUpdateTargetConfigParameters data)
    {
        target.CallService("update_target_config", data);
    }

    ///<summary>Updates a given target rate&apos;s config.</summary>
    ///<param name="target">The IBinarySensorEntityCore to call this service for</param>
    ///<param name="targetHours">The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</param>
    ///<param name="targetStartTime">The optional time the evaluation period should start. eg: 06:00</param>
    ///<param name="targetEndTime">The optional time the evaluation period should end. eg: 19:00</param>
    ///<param name="targetOffset">The optional offset to apply to the target rate when it starts</param>
    ///<param name="targetMinimumRate">The optional minimum rate the selected rates should not go below eg: 0.10</param>
    ///<param name="targetMaximumRate">The optional maximum rate the selected rates should not go above eg: 0.10</param>
    ///<param name="targetWeighting">The optional weighting that should be applied to the selected rates eg: 1,2,1</param>
    ///<param name="persistChanges">Determines if the changes should be persisted to the original configuration or should be temporary and reset upon integration reload.</param>
    public static void UpdateTargetConfig(this IBinarySensorEntityCore target, string? targetHours = null, string? targetStartTime = null, string? targetEndTime = null, string? targetOffset = null, string? targetMinimumRate = null, string? targetMaximumRate = null, string? targetWeighting = null, bool? persistChanges = null)
    {
        target.CallService("update_target_config", new OctopusEnergyUpdateTargetConfigParameters { TargetHours = targetHours, TargetStartTime = targetStartTime, TargetEndTime = targetEndTime, TargetOffset = targetOffset, TargetMinimumRate = targetMinimumRate, TargetMaximumRate = targetMaximumRate, TargetWeighting = targetWeighting, PersistChanges = persistChanges });
    }

    ///<summary>Updates a given target rate&apos;s config.</summary>
    ///<param name="target">The IEnumerable&lt;IBinarySensorEntityCore&gt; to call this service for</param>
    ///<param name="targetHours">The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</param>
    ///<param name="targetStartTime">The optional time the evaluation period should start. eg: 06:00</param>
    ///<param name="targetEndTime">The optional time the evaluation period should end. eg: 19:00</param>
    ///<param name="targetOffset">The optional offset to apply to the target rate when it starts</param>
    ///<param name="targetMinimumRate">The optional minimum rate the selected rates should not go below eg: 0.10</param>
    ///<param name="targetMaximumRate">The optional maximum rate the selected rates should not go above eg: 0.10</param>
    ///<param name="targetWeighting">The optional weighting that should be applied to the selected rates eg: 1,2,1</param>
    ///<param name="persistChanges">Determines if the changes should be persisted to the original configuration or should be temporary and reset upon integration reload.</param>
    public static void UpdateTargetConfig(this IEnumerable<IBinarySensorEntityCore> target, string? targetHours = null, string? targetStartTime = null, string? targetEndTime = null, string? targetOffset = null, string? targetMinimumRate = null, string? targetMaximumRate = null, string? targetWeighting = null, bool? persistChanges = null)
    {
        target.CallService("update_target_config", new OctopusEnergyUpdateTargetConfigParameters { TargetHours = targetHours, TargetStartTime = targetStartTime, TargetEndTime = targetEndTime, TargetOffset = targetOffset, TargetMinimumRate = targetMinimumRate, TargetMaximumRate = targetMaximumRate, TargetWeighting = targetWeighting, PersistChanges = persistChanges });
    }
}

public static class PiHoleEntityExtensionMethods
{
    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    public static void Disable(this ISwitchEntityCore target, PiHoleDisableParameters data)
    {
        target.CallService("disable", data);
    }

    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    public static void Disable(this IEnumerable<ISwitchEntityCore> target, PiHoleDisableParameters data)
    {
        target.CallService("disable", data);
    }

    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    ///<param name="target">The ISwitchEntityCore to call this service for</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for. eg: 00:00:15</param>
    public static void Disable(this ISwitchEntityCore target, string duration)
    {
        target.CallService("disable", new PiHoleDisableParameters { Duration = duration });
    }

    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    ///<param name="target">The IEnumerable&lt;ISwitchEntityCore&gt; to call this service for</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for. eg: 00:00:15</param>
    public static void Disable(this IEnumerable<ISwitchEntityCore> target, string duration)
    {
        target.CallService("disable", new PiHoleDisableParameters { Duration = duration });
    }
}

public static class PowercalcEntityExtensionMethods
{
    ///<summary>Start execution of a playbook.</summary>
    public static void ActivatePlaybook(this ISensorEntityCore target, PowercalcActivatePlaybookParameters data)
    {
        target.CallService("activate_playbook", data);
    }

    ///<summary>Start execution of a playbook.</summary>
    public static void ActivatePlaybook(this IEnumerable<ISensorEntityCore> target, PowercalcActivatePlaybookParameters data)
    {
        target.CallService("activate_playbook", data);
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="playbookId">Playbook identifier. eg: program1</param>
    public static void ActivatePlaybook(this ISensorEntityCore target, string playbookId)
    {
        target.CallService("activate_playbook", new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="playbookId">Playbook identifier. eg: program1</param>
    public static void ActivatePlaybook(this IEnumerable<ISensorEntityCore> target, string playbookId)
    {
        target.CallService("activate_playbook", new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    public static void CalibrateEnergy(this ISensorEntityCore target, PowercalcCalibrateEnergyParameters data)
    {
        target.CallService("calibrate_energy", data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    public static void CalibrateEnergy(this IEnumerable<ISensorEntityCore> target, PowercalcCalibrateEnergyParameters data)
    {
        target.CallService("calibrate_energy", data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateEnergy(this ISensorEntityCore target, string value)
    {
        target.CallService("calibrate_energy", new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateEnergy(this IEnumerable<ISensorEntityCore> target, string value)
    {
        target.CallService("calibrate_energy", new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void CalibrateUtilityMeter(this ISensorEntityCore target, PowercalcCalibrateUtilityMeterParameters data)
    {
        target.CallService("calibrate_utility_meter", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void CalibrateUtilityMeter(this IEnumerable<ISensorEntityCore> target, PowercalcCalibrateUtilityMeterParameters data)
    {
        target.CallService("calibrate_utility_meter", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateUtilityMeter(this ISensorEntityCore target, string value)
    {
        target.CallService("calibrate_utility_meter", new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateUtilityMeter(this IEnumerable<ISensorEntityCore> target, string value)
    {
        target.CallService("calibrate_utility_meter", new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Retrieve all entity id&apos;s of a group energy or power sensor</summary>
    public static void GetGroupEntities(this ISensorEntityCore target)
    {
        target.CallService("get_group_entities");
    }

    ///<summary>Retrieve all entity id&apos;s of a group energy or power sensor</summary>
    public static void GetGroupEntities(this IEnumerable<ISensorEntityCore> target)
    {
        target.CallService("get_group_entities");
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    public static void IncreaseDailyEnergy(this ISensorEntityCore target, PowercalcIncreaseDailyEnergyParameters data)
    {
        target.CallService("increase_daily_energy", data);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    public static void IncreaseDailyEnergy(this IEnumerable<ISensorEntityCore> target, PowercalcIncreaseDailyEnergyParameters data)
    {
        target.CallService("increase_daily_energy", data);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">Amount to add to the sensor. eg: 100</param>
    public static void IncreaseDailyEnergy(this ISensorEntityCore target, string value)
    {
        target.CallService("increase_daily_energy", new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">Amount to add to the sensor. eg: 100</param>
    public static void IncreaseDailyEnergy(this IEnumerable<ISensorEntityCore> target, string value)
    {
        target.CallService("increase_daily_energy", new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Reset an energy sensor to zero kWh.</summary>
    public static void ResetEnergy(this ISensorEntityCore target)
    {
        target.CallService("reset_energy");
    }

    ///<summary>Reset an energy sensor to zero kWh.</summary>
    public static void ResetEnergy(this IEnumerable<ISensorEntityCore> target)
    {
        target.CallService("reset_energy");
    }

    ///<summary>Stop currently active playbook.</summary>
    public static void StopPlaybook(this ISensorEntityCore target)
    {
        target.CallService("stop_playbook");
    }

    ///<summary>Stop currently active playbook.</summary>
    public static void StopPlaybook(this IEnumerable<ISensorEntityCore> target)
    {
        target.CallService("stop_playbook");
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    public static void SwitchSubProfile(this ISensorEntityCore target, PowercalcSwitchSubProfileParameters data)
    {
        target.CallService("switch_sub_profile", data);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    public static void SwitchSubProfile(this IEnumerable<ISensorEntityCore> target, PowercalcSwitchSubProfileParameters data)
    {
        target.CallService("switch_sub_profile", data);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="profile">Define one of the possible sub profiles eg: night_vision</param>
    public static void SwitchSubProfile(this ISensorEntityCore target, string profile)
    {
        target.CallService("switch_sub_profile", new PowercalcSwitchSubProfileParameters { Profile = profile });
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="profile">Define one of the possible sub profiles eg: night_vision</param>
    public static void SwitchSubProfile(this IEnumerable<ISensorEntityCore> target, string profile)
    {
        target.CallService("switch_sub_profile", new PowercalcSwitchSubProfileParameters { Profile = profile });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    public static void Toggle(this IRemoteEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Sends the toggle command.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Sends the turn off command.</summary>
    public static void TurnOff(this IRemoteEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the turn off command.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the turn on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the turn on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this ISceneEntityCore target)
    {
        target.CallService("delete");
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this IEnumerable<ISceneEntityCore> target)
    {
        target.CallService("delete");
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SirenEntityExtensionMethods
{
    ///<summary>Toggles the siren on/off.</summary>
    public static void Toggle(this SirenEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the siren on/off.</summary>
    public static void Toggle(this IEnumerable<SirenEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns the siren off.</summary>
    public static void TurnOff(this SirenEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns the siren off.</summary>
    public static void TurnOff(this IEnumerable<SirenEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns the siren on.</summary>
    public static void TurnOn(this SirenEntity target, SirenTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns the siren on.</summary>
    public static void TurnOn(this IEnumerable<SirenEntity> target, SirenTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The SirenEntity to call this service for</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public static void TurnOn(this SirenEntity target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        target.CallService("turn_on", new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The IEnumerable&lt;SirenEntity&gt; to call this service for</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public static void TurnOn(this IEnumerable<SirenEntity> target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        target.CallService("turn_on", new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public static class SmartthinqSensorsEntityExtensionMethods
{
    ///<summary>Send to ThinQ device the remote start command.</summary>
    public static void RemoteStart(this ISensorEntityCore target, SmartthinqSensorsRemoteStartParameters data)
    {
        target.CallService("remote_start", data);
    }

    ///<summary>Send to ThinQ device the remote start command.</summary>
    public static void RemoteStart(this IEnumerable<ISensorEntityCore> target, SmartthinqSensorsRemoteStartParameters data)
    {
        target.CallService("remote_start", data);
    }

    ///<summary>Send to ThinQ device the remote start command.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="course">Course (if not set will use current)</param>
    public static void RemoteStart(this ISensorEntityCore target, string? course = null)
    {
        target.CallService("remote_start", new SmartthinqSensorsRemoteStartParameters { Course = course });
    }

    ///<summary>Send to ThinQ device the remote start command.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="course">Course (if not set will use current)</param>
    public static void RemoteStart(this IEnumerable<ISensorEntityCore> target, string? course = null)
    {
        target.CallService("remote_start", new SmartthinqSensorsRemoteStartParameters { Course = course });
    }

    ///<summary>Set sleep time.</summary>
    public static void SetSleepTime(this IClimateEntityCore target, SmartthinqSensorsSetSleepTimeParameters data)
    {
        target.CallService("set_sleep_time", data);
    }

    ///<summary>Set sleep time.</summary>
    public static void SetSleepTime(this IEnumerable<IClimateEntityCore> target, SmartthinqSensorsSetSleepTimeParameters data)
    {
        target.CallService("set_sleep_time", data);
    }

    ///<summary>Set sleep time.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="sleepTime">Timeout for sleep mode in minutes</param>
    public static void SetSleepTime(this IClimateEntityCore target, long sleepTime)
    {
        target.CallService("set_sleep_time", new SmartthinqSensorsSetSleepTimeParameters { SleepTime = sleepTime });
    }

    ///<summary>Set sleep time.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="sleepTime">Timeout for sleep mode in minutes</param>
    public static void SetSleepTime(this IEnumerable<IClimateEntityCore> target, long sleepTime)
    {
        target.CallService("set_sleep_time", new SmartthinqSensorsSetSleepTimeParameters { SleepTime = sleepTime });
    }

    ///<summary>Set time device.</summary>
    public static void SetTime(this ISensorEntityCore target, SmartthinqSensorsSetTimeParameters data)
    {
        target.CallService("set_time", data);
    }

    ///<summary>Set time device.</summary>
    public static void SetTime(this IEnumerable<ISensorEntityCore> target, SmartthinqSensorsSetTimeParameters data)
    {
        target.CallService("set_time", data);
    }

    ///<summary>Set time device.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="timeWanted">Time (if not set will use Home-Assistant time)</param>
    public static void SetTime(this ISensorEntityCore target, DateTime? timeWanted = null)
    {
        target.CallService("set_time", new SmartthinqSensorsSetTimeParameters { TimeWanted = timeWanted });
    }

    ///<summary>Set time device.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="timeWanted">Time (if not set will use Home-Assistant time)</param>
    public static void SetTime(this IEnumerable<ISensorEntityCore> target, DateTime? timeWanted = null)
    {
        target.CallService("set_time", new SmartthinqSensorsSetTimeParameters { TimeWanted = timeWanted });
    }

    ///<summary>Send to ThinQ device the wakeup command.</summary>
    public static void WakeUp(this ISensorEntityCore target)
    {
        target.CallService("wake_up");
    }

    ///<summary>Send to ThinQ device the wakeup command.</summary>
    public static void WakeUp(this IEnumerable<ISensorEntityCore> target)
    {
        target.CallService("wake_up");
    }
}

public static class SonosEntityExtensionMethods
{
    ///<summary>Returns the contents of the queue.</summary>
    public static void GetQueue(this IMediaPlayerEntityCore target)
    {
        target.CallService("get_queue");
    }

    ///<summary>Returns the contents of the queue.</summary>
    public static void GetQueue(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("get_queue");
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class TimerEntityExtensionMethods
{
    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    public static void Cancel(this ITimerEntityCore target)
    {
        target.CallService("cancel");
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    public static void Cancel(this IEnumerable<ITimerEntityCore> target)
    {
        target.CallService("cancel");
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    public static void Change(this ITimerEntityCore target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    public static void Change(this IEnumerable<ITimerEntityCore> target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this ITimerEntityCore target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this IEnumerable<ITimerEntityCore> target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    public static void Finish(this ITimerEntityCore target)
    {
        target.CallService("finish");
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    public static void Finish(this IEnumerable<ITimerEntityCore> target)
    {
        target.CallService("finish");
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    public static void Pause(this ITimerEntityCore target)
    {
        target.CallService("pause");
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    public static void Pause(this IEnumerable<ITimerEntityCore> target)
    {
        target.CallService("pause");
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    public static void Start(this ITimerEntityCore target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    public static void Start(this IEnumerable<ITimerEntityCore> target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public static void Start(this ITimerEntityCore target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public static void Start(this IEnumerable<ITimerEntityCore> target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }
}

public static class TtsEntityExtensionMethods
{
    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this TtsEntity target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this IEnumerable<TtsEntity> target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The TtsEntity to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this TtsEntity target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The IEnumerable&lt;TtsEntity&gt; to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this IEnumerable<TtsEntity> target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target)
    {
        target.CallService("skip");
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("skip");
    }
}

public static class UtilityMeterEntityExtensionMethods
{
    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this ISensorEntityCore target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this IEnumerable<ISensorEntityCore> target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public static void Calibrate(this ISensorEntityCore target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public static void Calibrate(this IEnumerable<ISensorEntityCore> target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this ISelectEntityCore target)
    {
        target.CallService("reset");
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("reset");
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }
}

public static class WiserEntityExtensionMethods
{
    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    public static void BoostHeating(this IClimateEntityCore target, WiserBoostHeatingParameters data)
    {
        target.CallService("boost_heating", data);
    }

    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    public static void BoostHeating(this IEnumerable<IClimateEntityCore> target, WiserBoostHeatingParameters data)
    {
        target.CallService("boost_heating", data);
    }

    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="timePeriod">Set the time period for the boost in minutes eg: 60</param>
    ///<param name="temperatureDelta">Set the increase in temperature for the boost period eg: 3.0</param>
    ///<param name="temperature">Set the room target temperature for the boost period eg: 21.0</param>
    public static void BoostHeating(this IClimateEntityCore target, long timePeriod, double? temperatureDelta = null, double? temperature = null)
    {
        target.CallService("boost_heating", new WiserBoostHeatingParameters { TimePeriod = timePeriod, TemperatureDelta = temperatureDelta, Temperature = temperature });
    }

    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="timePeriod">Set the time period for the boost in minutes eg: 60</param>
    ///<param name="temperatureDelta">Set the increase in temperature for the boost period eg: 3.0</param>
    ///<param name="temperature">Set the room target temperature for the boost period eg: 21.0</param>
    public static void BoostHeating(this IEnumerable<IClimateEntityCore> target, long timePeriod, double? temperatureDelta = null, double? temperature = null)
    {
        target.CallService("boost_heating", new WiserBoostHeatingParameters { TimePeriod = timePeriod, TemperatureDelta = temperatureDelta, Temperature = temperature });
    }
}