//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.19.0.0
//   At: 2023-07-29T11:07:06.2415631+01:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update JoySoftware.NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<AlarmControlPanelEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<CoverEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<GroupEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputButtonEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputSelectEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<ProximityEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SirenEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TimerEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<InputDatetimeEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AdaptiveLightingServices>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AlarmoServices>();
        serviceCollection.AddTransient<AlexaMediaServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BackupServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GenericThermostatServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HistoryStatsServices>();
        serviceCollection.AddTransient<HomeConnectServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LocaltuyaServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MelcloudServices>();
        serviceCollection.AddTransient<MinMaxServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<OctopusEnergyServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<PiHoleServices>();
        serviceCollection.AddTransient<PingServices>();
        serviceCollection.AddTransient<PowercalcServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<RingServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<SchedulerServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SonosServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TelegramServices>();
        serviceCollection.AddTransient<TelegramBotServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UnifiServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<UtilityMeterServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<WakeOnLanServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WebostvServices>();
        serviceCollection.AddTransient<WebrtcServices>();
        serviceCollection.AddTransient<WiserServices>();
        serviceCollection.AddTransient<ZhaServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    AlarmControlPanelEntities AlarmControlPanel { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    CoverEntities Cover { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    GroupEntities Group { get; }

    InputBooleanEntities InputBoolean { get; }

    InputButtonEntities InputButton { get; }

    InputNumberEntities InputNumber { get; }

    InputSelectEntities InputSelect { get; }

    InputTextEntities InputText { get; }

    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    ProximityEntities Proximity { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SirenEntities Siren { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TimerEntities Timer { get; }

    UpdateEntities Update { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }

    InputDatetimeEntities InputDatetime { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelEntities AlarmControlPanel => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public CoverEntities Cover => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public GroupEntities Group => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputButtonEntities InputButton => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputSelectEntities InputSelect => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public ProximityEntities Proximity => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SirenEntities Siren => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TimerEntities Timer => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public InputDatetimeEntities InputDatetime => new(_haContext);
}

public partial class AlarmControlPanelEntities
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarmo</summary>
    public AlarmControlPanelEntity Alarmo => new(_haContext, "alarm_control_panel.alarmo");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Arm Failed</summary>
    public AutomationEntity AlarmArmFailed => new(_haContext, "automation.alarm_arm_failed");
    ///<summary>Alarm Arriving Home</summary>
    public AutomationEntity AlarmArrivingHome => new(_haContext, "automation.alarm_arriving_home");
    ///<summary>Alarm Leaving Home</summary>
    public AutomationEntity AlarmLeavingHome => new(_haContext, "automation.alarm_leaving_home");
    ///<summary>Alarm Triggered</summary>
    public AutomationEntity AlarmTriggered => new(_haContext, "automation.alarm_triggered");
    ///<summary>Arm Alarmo when away</summary>
    public AutomationEntity ArmAlarmoWhenAway => new(_haContext, "automation.arm_alarmo_when_away");
    ///<summary>Arrive Home</summary>
    public AutomationEntity ArriveHome => new(_haContext, "automation.arrive_home");
    ///<summary>Snake Temp</summary>
    public AutomationEntity Automation61 => new(_haContext, "automation.automation_61");
    ///<summary>Cheap Heating Off</summary>
    public AutomationEntity CheapHeatingOff => new(_haContext, "automation.cheap_heating_off");
    ///<summary>Cheap Heating On</summary>
    public AutomationEntity CheapHeatingOn => new(_haContext, "automation.cheap_heating_on");
    ///<summary>Cheap Hot Tub</summary>
    public AutomationEntity CheapHotTub => new(_haContext, "automation.cheap_hot_tub");
    ///<summary>Close lounge blind to position</summary>
    public AutomationEntity CloseLoungeBlindToPosition => new(_haContext, "automation.close_lounge_blind_to_position");
    ///<summary>Controller - IKEA E1524/E1810 5-Button Remote</summary>
    public AutomationEntity ControllerIkeaE1524E18105ButtonRemote => new(_haContext, "automation.controller_ikea_e1524_e1810_5_button_remote");
    ///<summary>Day Mode turn off adaptive lighting sleep entity</summary>
    public AutomationEntity DayModeTurnOffAdaptiveLightingSleepEntity => new(_haContext, "automation.day_mode_turn_off_adaptive_lighting_sleep_entity");
    ///<summary>Ding Blinks Office</summary>
    public AutomationEntity DingBlinksOffice => new(_haContext, "automation.ding_blinks_office");
    ///<summary>Door Chime</summary>
    public AutomationEntity DoorChime => new(_haContext, "automation.door_chime");
    ///<summary>Door Lock Checks</summary>
    public AutomationEntity DoorLockChecks => new(_haContext, "automation.door_lock_checks");
    ///<summary>Door Lock Checks</summary>
    public AutomationEntity DoorLockChecks2 => new(_haContext, "automation.door_lock_checks_2");
    ///<summary>Door Notify</summary>
    public AutomationEntity DoorNotify => new(_haContext, "automation.door_notify");
    ///<summary>Doorbell</summary>
    public AutomationEntity Doorbell => new(_haContext, "automation.doorbell");
    ///<summary>Dryer Done Response</summary>
    public AutomationEntity DryerDoneResponse => new(_haContext, "automation.dryer_done_response");
    ///<summary>Dryer Notification</summary>
    public AutomationEntity DryerNotification => new(_haContext, "automation.dryer_notification");
    ///<summary>Front Door Motion</summary>
    public AutomationEntity FrontDoorMotion => new(_haContext, "automation.front_door_motion");
    ///<summary>Granny Arrives</summary>
    public AutomationEntity GrannyArrives => new(_haContext, "automation.granny_arrives");
    ///<summary>Hass Started</summary>
    public AutomationEntity HassStarted => new(_haContext, "automation.hass_started");
    ///<summary>Hot tub bubble timer</summary>
    public AutomationEntity HotTubBubbleTimer => new(_haContext, "automation.hot_tub_bubble_timer");
    ///<summary>House Mode Request</summary>
    public AutomationEntity HouseModeRequest => new(_haContext, "automation.house_mode_request");
    ///<summary>House Mode Response</summary>
    public AutomationEntity HouseModeResponse => new(_haContext, "automation.house_mode_response");
    ///<summary>IKEA Open/Close Remote</summary>
    public AutomationEntity IkeaOpenCloseRemote => new(_haContext, "automation.ikea_open_close_remote");
    ///<summary>In Bed</summary>
    public AutomationEntity InBed => new(_haContext, "automation.in_bed");
    ///<summary>Jayden Alarm Trigger</summary>
    public AutomationEntity JaydenAlarmTrigger => new(_haContext, "automation.jayden_alarm_trigger");
    ///<summary>Jayden motion alert</summary>
    public AutomationEntity JaydenMotionAlert => new(_haContext, "automation.jayden_motion_alert");
    ///<summary>Jayden Keep in bed</summary>
    public AutomationEntity KeepJaydenInBed => new(_haContext, "automation.keep_jayden_in_bed");
    ///<summary>Laundry Done Request</summary>
    public AutomationEntity LaundryDoneRequest => new(_haContext, "automation.laundry_done_request");
    ///<summary>Laundry Done Response</summary>
    public AutomationEntity LaundryDoneResponse => new(_haContext, "automation.laundry_done_response");
    ///<summary>Leave Home</summary>
    public AutomationEntity LeaveHome => new(_haContext, "automation.leave_home");
    ///<summary>Night Mode Request</summary>
    public AutomationEntity NightModeRequest => new(_haContext, "automation.night_mode_request");
    ///<summary>Night Mode Response</summary>
    public AutomationEntity NightModeResponse => new(_haContext, "automation.night_mode_response");
    ///<summary>Night Mode turn on adaptive lighting sleep entity</summary>
    public AutomationEntity NightModeTurnOnAdaptiveLightingSleepEntity => new(_haContext, "automation.night_mode_turn_on_adaptive_lighting_sleep_entity");
    ///<summary>Jayden Notify out of bed</summary>
    public AutomationEntity NotifyOutOfBed => new(_haContext, "automation.notify_out_of_bed");
    ///<summary>Office Door Left Open Request</summary>
    public AutomationEntity OfficeDoorLeftOpenRequest => new(_haContext, "automation.office_door_left_open_request");
    ///<summary>Office Door Left Open Response</summary>
    public AutomationEntity OfficeDoorLeftOpenResponse => new(_haContext, "automation.office_door_left_open_response");
    ///<summary>Re Enable Pi Hole </summary>
    public AutomationEntity ReEnablePiHole => new(_haContext, "automation.re_enable_pi_hole");
    ///<summary>Remote Trial</summary>
    public AutomationEntity RemoteTrial => new(_haContext, "automation.remote_trial");
    ///<summary>reset radiator mode</summary>
    public AutomationEntity ResetRadiatorMode => new(_haContext, "automation.reset_radiator_mode");
    ///<summary>Rob</summary>
    public AutomationEntity Rob => new(_haContext, "automation.rob");
    ///<summary>Run Dishwasher </summary>
    public AutomationEntity RunDishwasher => new(_haContext, "automation.run_dishwasher");
    ///<summary>Run Speedtest</summary>
    public AutomationEntity RunSpeedtest => new(_haContext, "automation.run_speedtest");
    ///<summary>Set Ring Snapshot Interval on Startup</summary>
    public AutomationEntity SetRingSnapshotIntervalOnStartup => new(_haContext, "automation.set_ring_snapshot_interval_on_startup");
    ///<summary>Sleep Eugene Desktop Manual</summary>
    public AutomationEntity SleepEugeneDesktopManual => new(_haContext, "automation.sleep_eugene_desktop_manual");
    ///<summary>Snooze Ring Chime</summary>
    public AutomationEntity SnoozeRingChime => new(_haContext, "automation.snooze_ring_chime");
    ///<summary>Snow machine</summary>
    public AutomationEntity SnowMachine => new(_haContext, "automation.snow_machine");
    ///<summary>Turn Aaron TV off during bedtime</summary>
    public AutomationEntity TurnAaronTvOffDuringBedtime => new(_haContext, "automation.turn_aaron_tv_off_during_bedtime");
    ///<summary>Turn off Heating and Hotwater when traveling away from home</summary>
    public AutomationEntity TurnOffHeatingAndHotwaterWhenTravelingAwayFromHome => new(_haContext, "automation.turn_off_heating_and_hotwater_when_traveling_away_from_home");
    ///<summary>Turn off lounge tele when paused</summary>
    public AutomationEntity TurnOffLoungeTeleWhenPaused => new(_haContext, "automation.turn_off_lounge_tele_when_paused");
    ///<summary>Turn on Heating and Hotwater when traveling to home</summary>
    public AutomationEntity TurnOnHeatingAndHotwaterWhenTravelingToHome => new(_haContext, "automation.turn_on_heating_and_hotwater_when_traveling_to_home");
    ///<summary>Utilities Acknowledged</summary>
    public AutomationEntity UtilitiesAcknowledged => new(_haContext, "automation.utilities_acknowledged");
    ///<summary>Wake Eugene Desktop</summary>
    public AutomationEntity WakeEugeneDesktop => new(_haContext, "automation.wake_eugene_desktop");
    ///<summary>Wakeup</summary>
    public AutomationEntity Wakeup => new(_haContext, "automation.wakeup");
    ///<summary>Washing Done Response</summary>
    public AutomationEntity WashingDoneResponse => new(_haContext, "automation.washing_done_response");
    ///<summary>Washing Notification</summary>
    public AutomationEntity WashingNotification => new(_haContext, "automation.washing_notification");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron Motion</summary>
    public BinarySensorEntity AaronMotion => new(_haContext, "binary_sensor.aaron_motion");
    ///<summary>Aaron Motion Occupancy</summary>
    public BinarySensorEntity AaronMotionOccupancy => new(_haContext, "binary_sensor.aaron_motion_occupancy");
    ///<summary>Aubrecia Drive Motion</summary>
    public BinarySensorEntity AubreciaDriveMotion => new(_haContext, "binary_sensor.aubrecia_drive_motion");
    ///<summary>Aubrecia Front Door Ding</summary>
    public BinarySensorEntity AubreciaFrontDoorDing => new(_haContext, "binary_sensor.aubrecia_front_door_ding");
    ///<summary>Aubrecia Front Door Ding</summary>
    public BinarySensorEntity AubreciaFrontDoorDing2 => new(_haContext, "binary_sensor.aubrecia_front_door_ding_2");
    ///<summary>Aubrecia Front Door Motion</summary>
    public BinarySensorEntity AubreciaFrontDoorMotion => new(_haContext, "binary_sensor.aubrecia_front_door_motion");
    ///<summary>Aubrecia Front Door Motion</summary>
    public BinarySensorEntity AubreciaFrontDoorMotion2 => new(_haContext, "binary_sensor.aubrecia_front_door_motion_2");
    ///<summary>Back Door</summary>
    public BinarySensorEntity BackDoor => new(_haContext, "binary_sensor.back_door");
    ///<summary>Bathroom Motion</summary>
    public BinarySensorEntity BathroomMotion => new(_haContext, "binary_sensor.bathroom_motion");
    ///<summary>Bathroom Motion Occupancy</summary>
    public BinarySensorEntity BathroomMotionOccupancy => new(_haContext, "binary_sensor.bathroom_motion_occupancy");
    ///<summary>Dining</summary>
    public BinarySensorEntity Dining => new(_haContext, "binary_sensor.dining");
    ///<summary>Dining Door</summary>
    public BinarySensorEntity DiningDoor => new(_haContext, "binary_sensor.dining_door");
    ///<summary>Dining Motion</summary>
    public BinarySensorEntity DiningMotion => new(_haContext, "binary_sensor.dining_motion");
    ///<summary>Dining Occupancy</summary>
    public BinarySensorEntity DiningOccupancy => new(_haContext, "binary_sensor.dining_occupancy");
    ///<summary>Dishwasher Door</summary>
    public BinarySensorEntity DishwasherDoor => new(_haContext, "binary_sensor.dishwasher_door");
    ///<summary>Dishwasher Remote Control</summary>
    public BinarySensorEntity DishwasherRemoteControl => new(_haContext, "binary_sensor.dishwasher_remote_control");
    ///<summary>Dishwasher Remote Start</summary>
    public BinarySensorEntity DishwasherRemoteStart => new(_haContext, "binary_sensor.dishwasher_remote_start");
    ///<summary>Entrance Motion</summary>
    public BinarySensorEntity EntranceMotion => new(_haContext, "binary_sensor.entrance_motion");
    ///<summary>Entrance Motion Occupancy</summary>
    public BinarySensorEntity EntranceMotionOccupancy => new(_haContext, "binary_sensor.entrance_motion_occupancy");
    ///<summary>Eugene&apos;s iPhone Focus</summary>
    public BinarySensorEntity EugeneSIphoneFocus => new(_haContext, "binary_sensor.eugene_s_iphone_focus");
    ///<summary>EugeneNiemand</summary>
    public BinarySensorEntity Eugeneniemand => new(_haContext, "binary_sensor.eugeneniemand");
    ///<summary>Eugene&apos;s MacBook Active</summary>
    public BinarySensorEntity EugenesMacbookActive => new(_haContext, "binary_sensor.eugenes_macbook_active");
    ///<summary>Eugene&apos;s MacBook Audio Input In Use</summary>
    public BinarySensorEntity EugenesMacbookAudioInputInUse => new(_haContext, "binary_sensor.eugenes_macbook_audio_input_in_use");
    ///<summary>Eugene&apos;s MacBook Audio Output In Use</summary>
    public BinarySensorEntity EugenesMacbookAudioOutputInUse => new(_haContext, "binary_sensor.eugenes_macbook_audio_output_in_use");
    ///<summary>Eugene&apos;s MacBook Camera In Use</summary>
    public BinarySensorEntity EugenesMacbookCameraInUse => new(_haContext, "binary_sensor.eugenes_macbook_camera_in_use");
    ///<summary>Eugene&apos;s MacBook Focus</summary>
    public BinarySensorEntity EugenesMacbookFocus => new(_haContext, "binary_sensor.eugenes_macbook_focus");
    ///<summary>Front Door</summary>
    public BinarySensorEntity FrontDoor => new(_haContext, "binary_sensor.front_door");
    ///<summary>Garage Door</summary>
    public BinarySensorEntity GarageBackDoor => new(_haContext, "binary_sensor.garage_back_door");
    ///<summary>Garden Motion</summary>
    public BinarySensorEntity GardenMotion2 => new(_haContext, "binary_sensor.garden_motion_2");
    ///<summary>Hailey&apos;s iPhone Focus</summary>
    public BinarySensorEntity HaileySIphoneFocus => new(_haContext, "binary_sensor.hailey_s_iphone_focus");
    ///<summary>Hailey’s MacBook Air Active</summary>
    public BinarySensorEntity HaileysMacbookAirActive => new(_haContext, "binary_sensor.haileys_macbook_air_active");
    ///<summary>Hailey’s MacBook Air Audio Output In Use</summary>
    public BinarySensorEntity HaileysMacbookAirAudioOutputInUse => new(_haContext, "binary_sensor.haileys_macbook_air_audio_output_in_use");
    ///<summary>Hailey’s MacBook Air Camera In Use</summary>
    public BinarySensorEntity HaileysMacbookAirCameraInUse => new(_haContext, "binary_sensor.haileys_macbook_air_camera_in_use");
    ///<summary>Hailey’s MacBook Air FaceTime HD Camera (Built-in)</summary>
    public BinarySensorEntity HaileysMacbookAirFacetimeHdCameraBuiltIn => new(_haContext, "binary_sensor.haileys_macbook_air_facetime_hd_camera_built_in");
    ///<summary>Hailey’s MacBook Air Focus</summary>
    public BinarySensorEntity HaileysMacbookAirFocus => new(_haContext, "binary_sensor.haileys_macbook_air_focus");
    ///<summary>Hailey’s MacBook Air krisp microphone</summary>
    public BinarySensorEntity HaileysMacbookAirKrispMicrophone => new(_haContext, "binary_sensor.haileys_macbook_air_krisp_microphone");
    ///<summary>Hailey’s MacBook Air MacBook Air Microphone</summary>
    public BinarySensorEntity HaileysMacbookAirMacbookAirMicrophone => new(_haContext, "binary_sensor.haileys_macbook_air_macbook_air_microphone");
    ///<summary>Hailey’s MacBook Air Microphone In Use</summary>
    public BinarySensorEntity HaileysMacbookAirMicrophoneInUse => new(_haContext, "binary_sensor.haileys_macbook_air_microphone_in_use");
    ///<summary>Hailey’s MacBook Air PLT_Legend</summary>
    public BinarySensorEntity HaileysMacbookAirPltLegend => new(_haContext, "binary_sensor.haileys_macbook_air_plt_legend");
    ///<summary>Hailey’s MacBook Air USB PnP Audio Device</summary>
    public BinarySensorEntity HaileysMacbookAirUsbPnpAudioDevice => new(_haContext, "binary_sensor.haileys_macbook_air_usb_pnp_audio_device");
    ///<summary>Hallway</summary>
    public BinarySensorEntity Hallway => new(_haContext, "binary_sensor.hallway");
    ///<summary>Heater1</summary>
    public BinarySensorEntity Heater1 => new(_haContext, "binary_sensor.heater1");
    ///<summary>Heater2</summary>
    public BinarySensorEntity Heater2 => new(_haContext, "binary_sensor.heater2");
    ///<summary>Home Occupied</summary>
    public BinarySensorEntity HomeOccupied => new(_haContext, "binary_sensor.home_occupied");
    ///<summary>Jayden Motion</summary>
    public BinarySensorEntity JaydenMotion => new(_haContext, "binary_sensor.jayden_motion");
    ///<summary>Jayden Occupancy</summary>
    public BinarySensorEntity JaydenMotionOccupancy => new(_haContext, "binary_sensor.jayden_motion_occupancy");
    ///<summary>Jayden ’s iPad Focus</summary>
    public BinarySensorEntity JaydenSIpadFocus => new(_haContext, "binary_sensor.jayden_s_ipad_focus");
    ///<summary>Johan Front Door Ding</summary>
    public BinarySensorEntity JohanFrontDoorDing => new(_haContext, "binary_sensor.johan_front_door_ding");
    ///<summary>Johan Front Door Motion</summary>
    public BinarySensorEntity JohanFrontDoorMotion => new(_haContext, "binary_sensor.johan_front_door_motion");
    ///<summary>IKEA of Sweden TRADFRI open/close remote 3dcb2efe on_off</summary>
    public BinarySensorEntity KeTradfriOpenCloseRemote3dcb2efeOnOff => new(_haContext, "binary_sensor.ke_tradfri_open_close_remote_3dcb2efe_on_off");
    ///<summary>Kitchen</summary>
    public BinarySensorEntity Kitchen => new(_haContext, "binary_sensor.kitchen");
    ///<summary>Kitchen Motion</summary>
    public BinarySensorEntity KitchenMotion => new(_haContext, "binary_sensor.kitchen_motion");
    ///<summary>Kitchen Occupancy</summary>
    public BinarySensorEntity KitchenMotionOccupancy => new(_haContext, "binary_sensor.kitchen_motion_occupancy");
    ///<summary>Landing</summary>
    public BinarySensorEntity Landing => new(_haContext, "binary_sensor.landing");
    ///<summary>Landing Motion</summary>
    public BinarySensorEntity LandingMotion => new(_haContext, "binary_sensor.landing_motion");
    ///<summary>landing motion occupancy</summary>
    public BinarySensorEntity LandingMotionOccupancy => new(_haContext, "binary_sensor.landing_motion_occupancy");
    ///<summary>Landing Smoke</summary>
    public BinarySensorEntity LandingSmoke => new(_haContext, "binary_sensor.landing_smoke");
    ///<summary>Lounge</summary>
    public BinarySensorEntity Lounge => new(_haContext, "binary_sensor.lounge");
    ///<summary>Lounge Door</summary>
    public BinarySensorEntity LoungeDoor => new(_haContext, "binary_sensor.lounge_door");
    ///<summary>Lounge Microphone</summary>
    public BinarySensorEntity LoungeMicrophone => new(_haContext, "binary_sensor.lounge_microphone");
    ///<summary>Lounge Motion</summary>
    public BinarySensorEntity LoungeMotion => new(_haContext, "binary_sensor.lounge_motion");
    ///<summary>Lounge Motion Occupancy</summary>
    public BinarySensorEntity LoungeMotionOccupancy => new(_haContext, "binary_sensor.lounge_motion_occupancy");
    ///<summary>contact fd Opening</summary>
    public BinarySensorEntity LumiLumiSensorMagnetAq256141203OnOff => new(_haContext, "binary_sensor.lumi_lumi_sensor_magnet_aq2_56141203_on_off");
    ///<summary>contact right window Opening</summary>
    public BinarySensorEntity LumiLumiSensorMagnetAq283903a03OnOff => new(_haContext, "binary_sensor.lumi_lumi_sensor_magnet_aq2_83903a03_on_off");
    ///<summary>LUMI lumi.sensor_magnet.aq2 8c913a03 on_off</summary>
    public BinarySensorEntity LumiLumiSensorMagnetAq28c913a03OnOff => new(_haContext, "binary_sensor.lumi_lumi_sensor_magnet_aq2_8c913a03_on_off");
    ///<summary>Officer Contact  on_off</summary>
    public BinarySensorEntity LumiLumiSensorMagnetAq2OnOff => new(_haContext, "binary_sensor.lumi_lumi_sensor_magnet_aq2_on_off");
    ///<summary>Master Motion</summary>
    public BinarySensorEntity MasterMotion => new(_haContext, "binary_sensor.master_motion");
    ///<summary>Master Motion Occupancy</summary>
    public BinarySensorEntity MasterMotionOccupancy => new(_haContext, "binary_sensor.master_motion_occupancy");
    ///<summary>MrJDNobody</summary>
    public BinarySensorEntity Mrjdnobody => new(_haContext, "binary_sensor.mrjdnobody");
    ///<summary>My Wall Panel AC Plugged</summary>
    public BinarySensorEntity MyWallPanelAcPlugged => new(_haContext, "binary_sensor.my_wall_panel_ac_plugged");
    ///<summary>My Wall Panel Charging</summary>
    public BinarySensorEntity MyWallPanelCharging => new(_haContext, "binary_sensor.my_wall_panel_charging");
    ///<summary>My Wall Panel Motion Detected</summary>
    public BinarySensorEntity MyWallPanelMotionDetected => new(_haContext, "binary_sensor.my_wall_panel_motion_detected");
    ///<summary>My Wall Panel USB Plugged</summary>
    public BinarySensorEntity MyWallPanelUsbPlugged => new(_haContext, "binary_sensor.my_wall_panel_usb_plugged");
    ///<summary>Drive</summary>
    public BinarySensorEntity NiemandDriveMotion => new(_haContext, "binary_sensor.niemand_drive_motion");
    ///<summary>Niemand Drive Motion</summary>
    public BinarySensorEntity NiemandDriveMotion2 => new(_haContext, "binary_sensor.niemand_drive_motion_2");
    ///<summary>Niemand Front Door Ding</summary>
    public BinarySensorEntity NiemandFrontDoorDing => new(_haContext, "binary_sensor.niemand_front_door_ding");
    ///<summary>Niemand Front Door Ding</summary>
    public BinarySensorEntity NiemandFrontDoorDing2 => new(_haContext, "binary_sensor.niemand_front_door_ding_2");
    ///<summary>Front Door</summary>
    public BinarySensorEntity NiemandFrontDoorMotion => new(_haContext, "binary_sensor.niemand_front_door_motion");
    ///<summary>Niemand Front Door Motion</summary>
    public BinarySensorEntity NiemandFrontDoorMotion2 => new(_haContext, "binary_sensor.niemand_front_door_motion_2");
    ///<summary>Garage</summary>
    public BinarySensorEntity NiemandGarageMotion => new(_haContext, "binary_sensor.niemand_garage_motion");
    ///<summary>Niemand Garage Motion</summary>
    public BinarySensorEntity NiemandGarageMotion2 => new(_haContext, "binary_sensor.niemand_garage_motion_2");
    ///<summary>Garden</summary>
    public BinarySensorEntity NiemandGardenMotion => new(_haContext, "binary_sensor.niemand_garden_motion");
    ///<summary>Niemand Garden Motion</summary>
    public BinarySensorEntity NiemandGardenMotion2 => new(_haContext, "binary_sensor.niemand_garden_motion_2");
    ///<summary>Side</summary>
    public BinarySensorEntity NiemandSideMotion => new(_haContext, "binary_sensor.niemand_side_motion");
    ///<summary>Niemand Side Motion</summary>
    public BinarySensorEntity NiemandSideMotion2 => new(_haContext, "binary_sensor.niemand_side_motion_2");
    ///<summary>Octopus Energy Saving Session</summary>
    public BinarySensorEntity OctopusEnergySavingSession => new(_haContext, "binary_sensor.octopus_energy_saving_session");
    ///<summary>Octopus Energy Target three_hour_cont</summary>
    public BinarySensorEntity OctopusEnergyTargetThreeHourCont => new(_haContext, "binary_sensor.octopus_energy_target_three_hour_cont");
    ///<summary>Office Motion</summary>
    public BinarySensorEntity OfficeMotion => new(_haContext, "binary_sensor.office_motion");
    ///<summary>Office Motion Occupancy</summary>
    public BinarySensorEntity OfficeMotionOccupancy => new(_haContext, "binary_sensor.office_motion_occupancy");
    ///<summary>Panel Lock</summary>
    public BinarySensorEntity PanelLock => new(_haContext, "binary_sensor.panel_lock");
    ///<summary>Pi-Hole Status</summary>
    public BinarySensorEntity PiHole => new(_haContext, "binary_sensor.pi_hole");
    ///<summary>Pi-Hole Core Update Available</summary>
    public BinarySensorEntity PiHoleCoreUpdateAvailable => new(_haContext, "binary_sensor.pi_hole_core_update_available");
    ///<summary>Pi-Hole FTL Update Available</summary>
    public BinarySensorEntity PiHoleFtlUpdateAvailable => new(_haContext, "binary_sensor.pi_hole_ftl_update_available");
    ///<summary>Pi-Hole Web Update Available</summary>
    public BinarySensorEntity PiHoleWebUpdateAvailable => new(_haContext, "binary_sensor.pi_hole_web_update_available");
    ///<summary>Ping Google</summary>
    public BinarySensorEntity PingGoogle => new(_haContext, "binary_sensor.ping_google");
    ///<summary>Ping Konnected Add On</summary>
    public BinarySensorEntity PingKonnectedAddOn => new(_haContext, "binary_sensor.ping_konnected_add_on");
    ///<summary>Ping Konnected Main</summary>
    public BinarySensorEntity PingKonnectedMain => new(_haContext, "binary_sensor.ping_konnected_main");
    ///<summary>Playroom Motion</summary>
    public BinarySensorEntity PlayroomMotion => new(_haContext, "binary_sensor.playroom_motion");
    ///<summary>Playroom Occupancy</summary>
    public BinarySensorEntity PlayroomMotionOccupancy => new(_haContext, "binary_sensor.playroom_motion_occupancy");
    ///<summary>Power</summary>
    public BinarySensorEntity Power => new(_haContext, "binary_sensor.power");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>Study</summary>
    public BinarySensorEntity Study => new(_haContext, "binary_sensor.study");
    ///<summary>Toilet Motion</summary>
    public BinarySensorEntity ToiletMotion => new(_haContext, "binary_sensor.toilet_motion");
    ///<summary>Toilet Motion Occupancy</summary>
    public BinarySensorEntity ToiletMotionOccupancy => new(_haContext, "binary_sensor.toilet_motion_occupancy");
    ///<summary>Updater</summary>
    public BinarySensorEntity Updater => new(_haContext, "binary_sensor.updater");
    ///<summary>Utility Motion</summary>
    public BinarySensorEntity UtilityMotion => new(_haContext, "binary_sensor.utility_motion");
    ///<summary>Utility Motion Occupancy</summary>
    public BinarySensorEntity UtilityMotionOccupancy => new(_haContext, "binary_sensor.utility_motion_occupancy");
    ///<summary>Workday Sensor</summary>
    public BinarySensorEntity WorkdaySensor => new(_haContext, "binary_sensor.workday_sensor");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>EUGENE_DESKTOP_sleep</summary>
    public ButtonEntity EugeneDesktopSleep => new(_haContext, "button.eugene_desktop_sleep");
    ///<summary>Fish Lights Identify</summary>
    public ButtonEntity FishLightsIdentify => new(_haContext, "button.fish_lights_identify");
    ///<summary>landing blind Identify</summary>
    public ButtonEntity IkeaOfSwedenFyrturBlockOutRollerBlind29529dfeIdentify => new(_haContext, "button.ikea_of_sweden_fyrtur_block_out_roller_blind_29529dfe_identify");
    ///<summary>dining wall 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WOpal1000lm9919fcfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_w_opal_1000lm_9919fcfe_identify");
    ///<summary>dining wall 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WOpal1000lmB4b1f3feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_w_opal_1000lm_b4b1f3fe_identify");
    ///<summary>lounge front Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lm7aba12feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_7aba12fe_identify");
    ///<summary>Floor Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lm9f6c01feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_9f6c01fe_identify");
    ///<summary>playroom Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lmB87713feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_b87713fe_identify");
    ///<summary>lounge back Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lmC8a903feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_c8a903fe_identify");
    ///<summary>office 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm062b4bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_062b4bfe_identify");
    ///<summary>Master Nightlight Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm145c4bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_145c4bfe_identify");
    ///<summary>Aaron 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm1e5368feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_1e5368fe_identify");
    ///<summary>master 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm21daf6feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_21daf6fe_identify");
    ///<summary>office 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm235a5dfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_235a5dfe_identify");
    ///<summary>dining 4 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm26f462feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_26f462fe_identify");
    ///<summary>dining 5 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm31244bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_31244bfe_identify");
    ///<summary>Aaron 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm341922feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_341922fe_identify");
    ///<summary>dining 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm502e4cfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_502e4cfe_identify");
    ///<summary>Master 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm5c78f6feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_5c78f6fe_identify");
    ///<summary>master 4 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm5ec17bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_5ec17bfe_identify");
    ///<summary>Aaron 4 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm8bb43dfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_8bb43dfe_identify");
    ///<summary>master 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lm937af8feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_937af8fe_identify");
    ///<summary>dining 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lmBb0a4cfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_bb0a4cfe_identify");
    ///<summary>Aaron 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lmCdee3efeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_cdee3efe_identify");
    ///<summary>dining 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ws400lmF8ea62feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_f8ea62fe_identify");
    ///<summary>kitchen 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm00caeefeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_00caeefe_identify");
    ///<summary>Jayden 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm0fc075feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_0fc075fe_identify");
    ///<summary>Jayden 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm105c5dfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_105c5dfe_identify");
    ///<summary>kitchen 6 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm22331afeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_22331afe_identify");
    ///<summary>Jayden 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm2d9a33feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_2d9a33fe_identify");
    ///<summary>toilet Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm32d2bdfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_32d2bdfe_identify");
    ///<summary>entrance Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm436af0feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_436af0fe_identify");
    ///<summary>landing 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm50c275feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_50c275fe_identify");
    ///<summary>utility 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm680f1cfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_680f1cfe_identify");
    ///<summary>utility 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm7d61cbfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_7d61cbfe_identify");
    ///<summary>landing 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm85b375feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_85b375fe_identify");
    ///<summary>hallway Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lm8ba6b5feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_8ba6b5fe_identify");
    ///<summary>Jayden 4 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmB0683bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_b0683bfe_identify");
    ///<summary>kitchen 1 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmB86ff0feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_b86ff0fe_identify");
    ///<summary>utility 3 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmCf4febfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_cf4febfe_identify");
    ///<summary>kitchen 5 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmD4fdf0feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_d4fdf0fe_identify");
    ///<summary>kitchen 4 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmF58cf0feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_f58cf0fe_identify");
    ///<summary>kitchen 2 Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriBulbGu10Ww400lmFd78f0feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_fd78f0fe_identify");
    ///<summary>IKEA of Sweden TRADFRI open/close remote Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriOpenCloseRemote3dcb2efeIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_open_close_remote_3dcb2efe_identify");
    ///<summary>IKEA of Sweden TRADFRI remote control Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriRemoteControl580e51feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_remote_control_580e51fe_identify");
    ///<summary>IKEA of Sweden TRADFRI remote control Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriRemoteControlD73648feIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_remote_control_d73648fe_identify");
    ///<summary>IKEA of Sweden TRADFRI Signal Repeater Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfriSignalRepeaterIdentify => new(_haContext, "button.ikea_of_sweden_tradfri_signal_repeater_identify");
    ///<summary>Aaron Main Identify</summary>
    public ButtonEntity IkeaOfSwedenTradfribulbg125e27wsopal470lm9b7e6bfeIdentify => new(_haContext, "button.ikea_of_sweden_tradfribulbg125e27wsopal470lm_9b7e6bfe_identify");
    ///<summary>Dining Door Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq238f0ec02Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_38f0ec02_identify");
    ///<summary>contact fd Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq256141203Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_56141203_identify");
    ///<summary>contact right window Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq283903a03Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_83903a03_identify");
    ///<summary>Lounge Door Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq29e0b1203Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_9e0b1203_identify");
    ///<summary>Officer Contact  Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq2Ac831303Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_ac831303_identify");
    ///<summary>Garage Door Identify</summary>
    public ButtonEntity LumiLumiSensorMagnetAq2E6b02103Identify => new(_haContext, "button.lumi_lumi_sensor_magnet_aq2_e6b02103_identify");
    ///<summary>Dining Motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq234796603Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_34796603_identify");
    ///<summary>Aaron motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq23ca2f202Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_3ca2f202_identify");
    ///<summary>Toilet Motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq24123f403Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_4123f403_identify");
    ///<summary>kitchen motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq254c2f302Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_54c2f302_identify");
    ///<summary>master motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2591d1b03Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_591d1b03_identify");
    ///<summary>Jayden motion  Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq25cf75702Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_5cf75702_identify");
    ///<summary>Lounge Motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq27dce1303Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_7dce1303_identify");
    ///<summary>bathroom motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq297a7f202Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_97a7f202_identify");
    ///<summary>utility motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2B4796603Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_b4796603_identify");
    ///<summary>landing motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2C0a6f202Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_c0a6f202_identify");
    ///<summary>playroom motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2Ea1a1404Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_ea1a1404_identify");
    ///<summary>entrance motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2Ef2f1404Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_ef2f1404_identify");
    ///<summary>office motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2F33b1404Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_f33b1404_identify");
    ///<summary>Temp_Humi_1 identify</summary>
    public ButtonEntity TempHumi1Identify => new(_haContext, "button.temp_humi_1_identify");
    ///<summary>LUMI lumi.weather d25a0608 identify</summary>
    public ButtonEntity TempHumi2Identify => new(_haContext, "button.temp_humi_2_identify");
    ///<summary>Wiser Boost All Heating</summary>
    public ButtonEntity WiserBoostAllHeating => new(_haContext, "button.wiser_boost_all_heating");
    ///<summary>Wiser Boost Hot Water</summary>
    public ButtonEntity WiserBoostHotWater => new(_haContext, "button.wiser_boost_hot_water");
    ///<summary>Wiser Cancel All Heating Overrides</summary>
    public ButtonEntity WiserCancelAllHeatingOverrides => new(_haContext, "button.wiser_cancel_all_heating_overrides");
    ///<summary>Wiser Cancel Hot Water Overrides</summary>
    public ButtonEntity WiserCancelHotWaterOverrides => new(_haContext, "button.wiser_cancel_hot_water_overrides");
    ///<summary>Wiser Toggle Hot Water</summary>
    public ButtonEntity WiserToggleHotWater => new(_haContext, "button.wiser_toggle_hot_water");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Anniversaries</summary>
    public CalendarEntity Anniversaries => new(_haContext, "calendar.anniversaries");
    ///<summary>Announcements</summary>
    public CalendarEntity Announcements => new(_haContext, "calendar.announcements");
    ///<summary>Home</summary>
    public CalendarEntity Home => new(_haContext, "calendar.home");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aubrecia Drive</summary>
    public CameraEntity AubreciaDrive => new(_haContext, "camera.aubrecia_drive");
    ///<summary>Aubrecia Front Door</summary>
    public CameraEntity AubreciaFrontDoor => new(_haContext, "camera.aubrecia_front_door");
    ///<summary>Aubrecia Front Door</summary>
    public CameraEntity AubreciaFrontDoor2 => new(_haContext, "camera.aubrecia_front_door_2");
    ///<summary>Garden</summary>
    public CameraEntity Garden2 => new(_haContext, "camera.garden_2");
    ///<summary>Johan Front Door</summary>
    public CameraEntity JohanFrontDoor => new(_haContext, "camera.johan_front_door");
    ///<summary>Niemand Drive</summary>
    public CameraEntity NiemandDrive => new(_haContext, "camera.niemand_drive");
    ///<summary>Niemand Drive Snapshot</summary>
    public CameraEntity NiemandDriveSnapshot => new(_haContext, "camera.niemand_drive_snapshot");
    ///<summary>Niemand Front Door</summary>
    public CameraEntity NiemandFrontDoor => new(_haContext, "camera.niemand_front_door");
    ///<summary>Niemand Front Door Snapshot</summary>
    public CameraEntity NiemandFrontDoorSnapshot => new(_haContext, "camera.niemand_front_door_snapshot");
    ///<summary>Niemand Garage</summary>
    public CameraEntity NiemandGarage => new(_haContext, "camera.niemand_garage");
    ///<summary>Niemand Garage Snapshot</summary>
    public CameraEntity NiemandGarageSnapshot => new(_haContext, "camera.niemand_garage_snapshot");
    ///<summary>Niemand Garden</summary>
    public CameraEntity NiemandGarden => new(_haContext, "camera.niemand_garden");
    ///<summary>Niemand Garden Snapshot</summary>
    public CameraEntity NiemandGardenSnapshot => new(_haContext, "camera.niemand_garden_snapshot");
    ///<summary>Niemand Side</summary>
    public CameraEntity NiemandSide => new(_haContext, "camera.niemand_side");
    ///<summary>Niemand Side Snapshot</summary>
    public CameraEntity NiemandSideSnapshot => new(_haContext, "camera.niemand_side_snapshot");
    ///<summary>Ring Drive Video</summary>
    public CameraEntity RingDriveVideo => new(_haContext, "camera.ring_drive_video");
    ///<summary>Ring Front Door Video</summary>
    public CameraEntity RingFrontDoorVideo => new(_haContext, "camera.ring_front_door_video");
    ///<summary>Ring Garage Video</summary>
    public CameraEntity RingGarageVideo => new(_haContext, "camera.ring_garage_video");
    ///<summary>Ring Garden Video</summary>
    public CameraEntity RingGardenVideo => new(_haContext, "camera.ring_garden_video");
    ///<summary>Ring Side Video</summary>
    public CameraEntity RingSideVideo => new(_haContext, "camera.ring_side_video");
    ///<summary>Shed</summary>
    public CameraEntity Shed => new(_haContext, "camera.shed");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Playroom AC</summary>
    public ClimateEntity Bedroom1 => new(_haContext, "climate.bedroom_1");
    ///<summary>Aaron AC</summary>
    public ClimateEntity Bedroom2 => new(_haContext, "climate.bedroom_2");
    ///<summary>Master AC</summary>
    public ClimateEntity Bedroom3 => new(_haContext, "climate.bedroom_3");
    ///<summary>Jayden AC</summary>
    public ClimateEntity Bedroom4 => new(_haContext, "climate.bedroom_4");
    ///<summary>Lounge AC</summary>
    public ClimateEntity Lounge => new(_haContext, "climate.lounge");
    ///<summary>Office</summary>
    public ClimateEntity Office => new(_haContext, "climate.office");
    ///<summary>Snake Thermostat</summary>
    public ClimateEntity SnakeThermostat => new(_haContext, "climate.snake_thermostat");
    ///<summary>Wiser Aaron</summary>
    public ClimateEntity WiserAaron => new(_haContext, "climate.wiser_aaron");
    ///<summary>Wiser Dining</summary>
    public ClimateEntity WiserDining => new(_haContext, "climate.wiser_dining");
    ///<summary>Wiser Entrance</summary>
    public ClimateEntity WiserEntrance => new(_haContext, "climate.wiser_entrance");
    ///<summary>Wiser Guest Room</summary>
    public ClimateEntity WiserJayden => new(_haContext, "climate.wiser_jayden");
    ///<summary>Wiser Landing</summary>
    public ClimateEntity WiserLanding => new(_haContext, "climate.wiser_landing");
    ///<summary>Wiser Lounge </summary>
    public ClimateEntity WiserLounge => new(_haContext, "climate.wiser_lounge");
    ///<summary>Wiser Lounge Bay</summary>
    public ClimateEntity WiserLoungeBay => new(_haContext, "climate.wiser_lounge_bay");
    ///<summary>Wiser Master</summary>
    public ClimateEntity WiserMaster => new(_haContext, "climate.wiser_master");
    ///<summary>Wiser Office</summary>
    public ClimateEntity WiserOffice => new(_haContext, "climate.wiser_office");
    ///<summary>Wiser Playroom</summary>
    public ClimateEntity WiserPlayroom => new(_haContext, "climate.wiser_playroom");
    ///<summary>Wiser Utility</summary>
    public ClimateEntity WiserUtility => new(_haContext, "climate.wiser_utility");
}

public partial class CoverEntities
{
    private readonly IHaContext _haContext;
    public CoverEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>landing blind</summary>
    public CoverEntity LandingBlind => new(_haContext, "cover.landing_blind");
    ///<summary>Lounge Blind</summary>
    public CoverEntity LoungeBlind => new(_haContext, "cover.lounge_blind");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>247D4D7D6C90-mysimplelink 247D4D7D6C90-mysimplelink</summary>
    public DeviceTrackerEntity _247d4d7d6c90Mysimplelink => new(_haContext, "device_tracker.247d4d7d6c90_mysimplelink");
    ///<summary>Aaron Echo Aaron Echo</summary>
    public DeviceTrackerEntity AaronEcho => new(_haContext, "device_tracker.aaron_echo");
    ///<summary>android-b8c33f1cb7c0d776 Treadmill</summary>
    public DeviceTrackerEntity AndroidB8c33f1cb7c0d776 => new(_haContext, "device_tracker.android_b8c33f1cb7c0d776");
    ///<summary>ASAZ-5CG126368D</summary>
    public DeviceTrackerEntity Asaz5cg126368d => new(_haContext, "device_tracker.asaz_5cg126368d");
    ///<summary>ASGLH-WL-19140</summary>
    public DeviceTrackerEntity AsglhWl19140 => new(_haContext, "device_tracker.asglh_wl_19140");
    ///<summary>Aubrecia</summary>
    public DeviceTrackerEntity Aubrecia => new(_haContext, "device_tracker.aubrecia");
    ///<summary>AubreciasiPhone</summary>
    public DeviceTrackerEntity Aubreciasiphone => new(_haContext, "device_tracker.aubreciasiphone");
    ///<summary>aubri-VAIO</summary>
    public DeviceTrackerEntity AubriVaio => new(_haContext, "device_tracker.aubri_vaio");
    ///<summary>Bedroom 1 Bedroom 1 AC</summary>
    public DeviceTrackerEntity Bedroom1Ac => new(_haContext, "device_tracker.bedroom_1_ac");
    ///<summary>Bedroom 2 Bedroom 2 AC</summary>
    public DeviceTrackerEntity Bedroom2Ac => new(_haContext, "device_tracker.bedroom_2_ac");
    ///<summary>Bedroom 3 Bedroom 3 AC</summary>
    public DeviceTrackerEntity Bedroom3Ac => new(_haContext, "device_tracker.bedroom_3_ac");
    ///<summary>Bedroom 4 Bedroom 4 AC</summary>
    public DeviceTrackerEntity Bedroom4Ac => new(_haContext, "device_tracker.bedroom_4_ac");
    ///<summary>bosch-dishwasher-01204052703001 RX bosch-dishwasher-01204052703001</summary>
    public DeviceTrackerEntity BoschDishwasher01204052703001 => new(_haContext, "device_tracker.bosch_dishwasher_01204052703001");
    ///<summary>C02T8GTYGVC1 RX C02T8GTYGVC1</summary>
    public DeviceTrackerEntity C02t8gtygvc1 => new(_haContext, "device_tracker.c02t8gtygvc1");
    ///<summary>christmas_indoor-1558 christmas_indoor-1558</summary>
    public DeviceTrackerEntity ChristmasIndoor1558 => new(_haContext, "device_tracker.christmas_indoor_1558");
    ///<summary>ASAZ-5CG127498B</summary>
    public DeviceTrackerEntity DesktopIpurn8t => new(_haContext, "device_tracker.desktop_ipurn8t");
    ///<summary>Dining Dining</summary>
    public DeviceTrackerEntity Dining => new(_haContext, "device_tracker.dining");
    ///<summary>Dining Echo Dining Echo</summary>
    public DeviceTrackerEntity DiningEcho => new(_haContext, "device_tracker.dining_echo");
    ///<summary>dryer Samsung-Dryer</summary>
    public DeviceTrackerEntity Dryer => new(_haContext, "device_tracker.dryer");
    ///<summary>Entrance Entrance</summary>
    public DeviceTrackerEntity Entrance => new(_haContext, "device_tracker.entrance");
    ///<summary>ESP_5E9EB5 RX Tuya Socket 1</summary>
    public DeviceTrackerEntity Esp5e9eb5 => new(_haContext, "device_tracker.esp_5e9eb5");
    ///<summary>ESP_6B7081 Tuya Socket 2</summary>
    public DeviceTrackerEntity Esp6b7081 => new(_haContext, "device_tracker.esp_6b7081");
    ///<summary>ESP_6B7A3A Tuya Socket 3</summary>
    public DeviceTrackerEntity Esp6b7a3a => new(_haContext, "device_tracker.esp_6b7a3a");
    ///<summary>eufy RoboVac eufy RoboVac</summary>
    public DeviceTrackerEntity EufyRobovac => new(_haContext, "device_tracker.eufy_robovac");
    ///<summary>eufy RoboVac eufy RoboVac</summary>
    public DeviceTrackerEntity EufyRobovac2 => new(_haContext, "device_tracker.eufy_robovac_2");
    ///<summary>EUGENE-DESKTOP EUGENE-DESKTOP</summary>
    public DeviceTrackerEntity EugeneDesktop => new(_haContext, "device_tracker.eugene_desktop");
    ///<summary>eugene_iphone_ip</summary>
    public DeviceTrackerEntity EugeneIphoneIp => new(_haContext, "device_tracker.eugene_iphone_ip");
    ///<summary>Eugene&apos;s iPhone</summary>
    public DeviceTrackerEntity EugeneSIphone => new(_haContext, "device_tracker.eugene_s_iphone");
    ///<summary>Eugenes-iPhone</summary>
    public DeviceTrackerEntity EugenesIphone2 => new(_haContext, "device_tracker.eugenes_iphone_2");
    ///<summary>Eugene&apos;s MacBook</summary>
    public DeviceTrackerEntity EugenesMacbook2 => new(_haContext, "device_tracker.eugenes_macbook_2");
    ///<summary>EugenespleWatch</summary>
    public DeviceTrackerEntity Eugenesplewatch => new(_haContext, "device_tracker.eugenesplewatch");
    ///<summary>floor_light-2086</summary>
    public DeviceTrackerEntity FloorLight2086 => new(_haContext, "device_tracker.floor_light_2086");
    ///<summary>Foscam Foscam</summary>
    public DeviceTrackerEntity Foscam => new(_haContext, "device_tracker.foscam");
    ///<summary>Galaxy-S8 Galaxy-S8</summary>
    public DeviceTrackerEntity GalaxyS8 => new(_haContext, "device_tracker.galaxy_s8");
    ///<summary>Garage Echo Garage Echo</summary>
    public DeviceTrackerEntity GarageEcho => new(_haContext, "device_tracker.garage_echo");
    ///<summary>Garden Echo RX Garden Echo</summary>
    public DeviceTrackerEntity GardenEcho => new(_haContext, "device_tracker.garden_echo");
    ///<summary>Garden Floodlights Garden Floodlights</summary>
    public DeviceTrackerEntity GardenFloodlights => new(_haContext, "device_tracker.garden_floodlights");
    ///<summary>Glow Smart Meter 4417935019B0 Glow-IHD-5019B0</summary>
    public DeviceTrackerEntity GlowIhd5019b0 => new(_haContext, "device_tracker.glow_ihd_5019b0");
    ///<summary>hailey_iphone_ip</summary>
    public DeviceTrackerEntity HaileyIphoneIp => new(_haContext, "device_tracker.hailey_iphone_ip");
    ///<summary>Hailey&apos;s iPhone</summary>
    public DeviceTrackerEntity HaileySIphone => new(_haContext, "device_tracker.hailey_s_iphone");
    ///<summary>Haileys-Air Haileys-Air</summary>
    public DeviceTrackerEntity HaileysAir => new(_haContext, "device_tracker.haileys_air");
    ///<summary>Haileys-iPhone</summary>
    public DeviceTrackerEntity HaileysIphone => new(_haContext, "device_tracker.haileys_iphone");
    ///<summary>Haileys-iPhone Haileys-iPhone</summary>
    public DeviceTrackerEntity HaileysIphone2 => new(_haContext, "device_tracker.haileys_iphone_2");
    ///<summary>Hailey’s MacBook Air</summary>
    public DeviceTrackerEntity HaileysMacbookAir => new(_haContext, "device_tracker.haileys_macbook_air");
    ///<summary>host_two</summary>
    public DeviceTrackerEntity HostTwo => new(_haContext, "device_tracker.host_two");
    ///<summary>Hottubcontrol Hottubcontrol</summary>
    public DeviceTrackerEntity Hottubcontrol => new(_haContext, "device_tracker.hottubcontrol");
    ///<summary>HUAWEI_P_smart_2019-86203 HUAWEI_P_smart_2019-86203</summary>
    public DeviceTrackerEntity HuaweiPSmart201986203 => new(_haContext, "device_tracker.huawei_p_smart_2019_86203");
    ///<summary>iPad</summary>
    public DeviceTrackerEntity Ipad => new(_haContext, "device_tracker.ipad");
    ///<summary>Aarons-iPad</summary>
    public DeviceTrackerEntity Ipad2 => new(_haContext, "device_tracker.ipad_2");
    ///<summary>Eugenes-iPhone</summary>
    public DeviceTrackerEntity Iphone => new(_haContext, "device_tracker.iphone");
    ///<summary>iPhone RX HaileysiPhone2</summary>
    public DeviceTrackerEntity Iphone2 => new(_haContext, "device_tracker.iphone_2");
    ///<summary>iPhone</summary>
    public DeviceTrackerEntity Iphone3 => new(_haContext, "device_tracker.iphone_3");
    ///<summary>iPhone8P</summary>
    public DeviceTrackerEntity Iphone8p => new(_haContext, "device_tracker.iphone8p");
    ///<summary>Jayden Jayden</summary>
    public DeviceTrackerEntity Jayden => new(_haContext, "device_tracker.jayden");
    ///<summary>Jayden AppleTv Jayden AppleTv</summary>
    public DeviceTrackerEntity JaydenAppletv => new(_haContext, "device_tracker.jayden_appletv");
    ///<summary>jayden_bedside-4734</summary>
    public DeviceTrackerEntity JaydenBedside4734 => new(_haContext, "device_tracker.jayden_bedside_4734");
    ///<summary>Jayden Echo Jayden Echo</summary>
    public DeviceTrackerEntity JaydenEcho => new(_haContext, "device_tracker.jayden_echo");
    ///<summary>Jayden ’s iPad</summary>
    public DeviceTrackerEntity JaydenSIpad => new(_haContext, "device_tracker.jayden_s_ipad");
    ///<summary>Aarons-iPhone</summary>
    public DeviceTrackerEntity JaydenSIphone => new(_haContext, "device_tracker.jayden_s_iphone");
    ///<summary>Jayden-s-iPhone RX Jayden-s-iPhone</summary>
    public DeviceTrackerEntity JaydenSIphone2 => new(_haContext, "device_tracker.jayden_s_iphone_2");
    ///<summary>Jayden ’s iPhone</summary>
    public DeviceTrackerEntity JaydenSIphone3 => new(_haContext, "device_tracker.jayden_s_iphone_3");
    ///<summary>Jayden-s-iPhone RX Jayden-s-iPhone</summary>
    public DeviceTrackerEntity JaydenSIphone4 => new(_haContext, "device_tracker.jayden_s_iphone_4");
    ///<summary>Lounge Lounge</summary>
    public DeviceTrackerEntity Kitchen => new(_haContext, "device_tracker.kitchen");
    ///<summary>Kitchen Echo Kitchen Echo</summary>
    public DeviceTrackerEntity KitchenEcho => new(_haContext, "device_tracker.kitchen_echo");
    ///<summary>Konnected Alarm Panel Add On Konnected AddOn</summary>
    public DeviceTrackerEntity KonnectedAddon => new(_haContext, "device_tracker.konnected_addon");
    ///<summary>Konnected Alarm Panel Konnected Main</summary>
    public DeviceTrackerEntity KonnectedMain => new(_haContext, "device_tracker.konnected_main");
    ///<summary>Landing Landing</summary>
    public DeviceTrackerEntity Landing => new(_haContext, "device_tracker.landing");
    ///<summary>LAPTOP-D5UFT2CI</summary>
    public DeviceTrackerEntity LaptopD5uft2ci => new(_haContext, "device_tracker.laptop_d5uft2ci");
    ///<summary>LAPTOP-L5NSO67J</summary>
    public DeviceTrackerEntity LaptopL5nso67j => new(_haContext, "device_tracker.laptop_l5nso67j");
    ///<summary>LG Lounge LG Lounge</summary>
    public DeviceTrackerEntity LgLounge => new(_haContext, "device_tracker.lg_lounge");
    ///<summary>Aaron-ATV</summary>
    public DeviceTrackerEntity LivingRoom => new(_haContext, "device_tracker.living_room");
    ///<summary>Office Office</summary>
    public DeviceTrackerEntity Lounge => new(_haContext, "device_tracker.lounge");
    ///<summary>Lounge Lounge AC</summary>
    public DeviceTrackerEntity LoungeAc => new(_haContext, "device_tracker.lounge_ac");
    ///<summary>Blind Lounge Lounge Blind</summary>
    public DeviceTrackerEntity LoungeBlind => new(_haContext, "device_tracker.lounge_blind");
    ///<summary>Lounge Echo Lounge Echo</summary>
    public DeviceTrackerEntity LoungeEcho => new(_haContext, "device_tracker.lounge_echo");
    ///<summary>Master Echo Master Echo</summary>
    public DeviceTrackerEntity MasterEcho => new(_haContext, "device_tracker.master_echo");
    ///<summary>Master Tele Master Tele</summary>
    public DeviceTrackerEntity MasterTele => new(_haContext, "device_tracker.master_tele");
    ///<summary>ML-NX07KG671N ML-NX07KG671N</summary>
    public DeviceTrackerEntity MlNx07kg671n => new(_haContext, "device_tracker.ml_nx07kg671n");
    ///<summary>Office Office AC</summary>
    public DeviceTrackerEntity OfficeAc => new(_haContext, "device_tracker.office_ac");
    ///<summary>Office Echo Office Echo</summary>
    public DeviceTrackerEntity OfficeEcho => new(_haContext, "device_tracker.office_echo");
    ///<summary>Outside Drive Dishwasher</summary>
    public DeviceTrackerEntity OutsideDrive => new(_haContext, "device_tracker.outside_drive");
    ///<summary>Outside Garage Outside Garage</summary>
    public DeviceTrackerEntity OutsideGarage => new(_haContext, "device_tracker.outside_garage");
    ///<summary>Playroom Echo Playroom Echo</summary>
    public DeviceTrackerEntity PlayroomEcho => new(_haContext, "device_tracker.playroom_echo");
    ///<summary>Porch Porch</summary>
    public DeviceTrackerEntity Porch => new(_haContext, "device_tracker.porch");
    ///<summary>raspberrypi raspberrypi</summary>
    public DeviceTrackerEntity Raspberrypi => new(_haContext, "device_tracker.raspberrypi");
    ///<summary>raspberrypi</summary>
    public DeviceTrackerEntity Raspberrypi2 => new(_haContext, "device_tracker.raspberrypi_2");
    ///<summary>RaspberryPi CUPS RaspberryPi CUPS</summary>
    public DeviceTrackerEntity RaspberrypiCups => new(_haContext, "device_tracker.raspberrypi_cups");
    ///<summary>RingHpCam-49 RingHpCam-49</summary>
    public DeviceTrackerEntity Ringhpcam49 => new(_haContext, "device_tracker.ringhpcam_49");
    ///<summary>RingHpCam-4c RingHpCam-4c</summary>
    public DeviceTrackerEntity Ringhpcam4c => new(_haContext, "device_tracker.ringhpcam_4c");
    ///<summary>RingPro-d6</summary>
    public DeviceTrackerEntity RingproD6 => new(_haContext, "device_tracker.ringpro_d6");
    ///<summary>RingStickUpCam-94 RingStickUpCam-94</summary>
    public DeviceTrackerEntity Ringstickupcam94 => new(_haContext, "device_tracker.ringstickupcam_94");
    ///<summary>RingStickUpCam-9b RingStickUpCam-9b</summary>
    public DeviceTrackerEntity Ringstickupcam9b => new(_haContext, "device_tracker.ringstickupcam_9b");
    ///<summary>RMMINI-d9-2b-62</summary>
    public DeviceTrackerEntity RmminiD92b62 => new(_haContext, "device_tracker.rmmini_d9_2b_62");
    ///<summary>Sammi-s-A52</summary>
    public DeviceTrackerEntity SammiLeighSA52 => new(_haContext, "device_tracker.sammi_leigh_s_a52");
    ///<summary>shelly1-55E8B5 Office Skylight</summary>
    public DeviceTrackerEntity Shelly155e8b5 => new(_haContext, "device_tracker.shelly1_55e8b5");
    ///<summary>shelly1-BA69F6 RX Outside Drive</summary>
    public DeviceTrackerEntity Shelly1Ba69f6 => new(_haContext, "device_tracker.shelly1_ba69f6");
    ///<summary>shelly1-BA6C98 RX Utility Cupboard</summary>
    public DeviceTrackerEntity Shelly1Ba6c98 => new(_haContext, "device_tracker.shelly1_ba6c98");
    ///<summary>shelly1pm-E646FE RX Power Meter Multiplug</summary>
    public DeviceTrackerEntity Shelly1pmE646fe => new(_haContext, "device_tracker.shelly1pm_e646fe");
    ///<summary>smart-plug-1</summary>
    public DeviceTrackerEntity SmartPlug1 => new(_haContext, "device_tracker.smart_plug_1");
    ///<summary>smart-plug-2 Fish lights</summary>
    public DeviceTrackerEntity SmartPlug2 => new(_haContext, "device_tracker.smart_plug_2");
    ///<summary>smart-plug-4 Eugene Desk Plug</summary>
    public DeviceTrackerEntity SmartPlug4 => new(_haContext, "device_tracker.smart_plug_4");
    ///<summary>Lounge SonosZP</summary>
    public DeviceTrackerEntity Sonoszp => new(_haContext, "device_tracker.sonoszp");
    ///<summary>SonosZP SonosZP</summary>
    public DeviceTrackerEntity Sonoszp2 => new(_haContext, "device_tracker.sonoszp_2");
    ///<summary>Suspect Device Suspect Device</summary>
    public DeviceTrackerEntity SuspectDevice => new(_haContext, "device_tracker.suspect_device");
    ///<summary>Suspect Huawei Suspect Huawei</summary>
    public DeviceTrackerEntity SuspectHuawei => new(_haContext, "device_tracker.suspect_huawei");
    ///<summary>tasmota-4464</summary>
    public DeviceTrackerEntity Tasmota4464 => new(_haContext, "device_tracker.tasmota_4464");
    ///<summary>UK-020287222957 UK-020287222957</summary>
    public DeviceTrackerEntity Uk020287222957 => new(_haContext, "device_tracker.uk_020287222957");
    ///<summary>UK-PC0JSKUX</summary>
    public DeviceTrackerEntity UkPc0jskux => new(_haContext, "device_tracker.uk_pc0jskux");
    public DeviceTrackerEntity Unifi000278989b62Default => new(_haContext, "device_tracker.unifi_00_02_78_98_9b_62_default");
    public DeviceTrackerEntity Unifi000c43266000Default => new(_haContext, "device_tracker.unifi_00_0c_43_26_60_00_default");
    public DeviceTrackerEntity Unifi0241210698EfDefault => new(_haContext, "device_tracker.unifi_02_41_21_06_98_ef_default");
    public DeviceTrackerEntity Unifi02C033830101Default => new(_haContext, "device_tracker.unifi_02_c0_33_83_01_01_default");
    public DeviceTrackerEntity Unifi02Ff32A5BcD0Default => new(_haContext, "device_tracker.unifi_02_ff_32_a5_bc_d0_default");
    public DeviceTrackerEntity Unifi0694A0794d71Default => new(_haContext, "device_tracker.unifi_06_94_a0_79_4d_71_default");
    public DeviceTrackerEntity Unifi0a1eCf173cBfDefault => new(_haContext, "device_tracker.unifi_0a_1e_cf_17_3c_bf_default");
    public DeviceTrackerEntity Unifi0a3748B51545Default => new(_haContext, "device_tracker.unifi_0a_37_48_b5_15_45_default");
    public DeviceTrackerEntity Unifi0aEa8bDe2e46Default => new(_haContext, "device_tracker.unifi_0a_ea_8b_de_2e_46_default");
    public DeviceTrackerEntity Unifi0aEb6dCe5a87Default => new(_haContext, "device_tracker.unifi_0a_eb_6d_ce_5a_87_default");
    public DeviceTrackerEntity Unifi0e9f237a65A5Default => new(_haContext, "device_tracker.unifi_0e_9f_23_7a_65_a5_default");
    public DeviceTrackerEntity Unifi1292Ef14BdAdDefault => new(_haContext, "device_tracker.unifi_12_92_ef_14_bd_ad_default");
    public DeviceTrackerEntity Unifi12C716BfE0BeDefault => new(_haContext, "device_tracker.unifi_12_c7_16_bf_e0_be_default");
    public DeviceTrackerEntity Unifi220d10919909Default => new(_haContext, "device_tracker.unifi_22_0d_10_91_99_09_default");
    public DeviceTrackerEntity Unifi22666f3b995fDefault => new(_haContext, "device_tracker.unifi_22_66_6f_3b_99_5f_default");
    public DeviceTrackerEntity Unifi2684208a5b5dDefault => new(_haContext, "device_tracker.unifi_26_84_20_8a_5b_5d_default");
    public DeviceTrackerEntity Unifi26Fd74Eb3d99Default => new(_haContext, "device_tracker.unifi_26_fd_74_eb_3d_99_default");
    public DeviceTrackerEntity Unifi2a9c648d57CeDefault => new(_haContext, "device_tracker.unifi_2a_9c_64_8d_57_ce_default");
    public DeviceTrackerEntity Unifi2aD7E18c21A6Default => new(_haContext, "device_tracker.unifi_2a_d7_e1_8c_21_a6_default");
    public DeviceTrackerEntity Unifi2e04A5Fb0956Default => new(_haContext, "device_tracker.unifi_2e_04_a5_fb_09_56_default");
    ///<summary> SonosZP</summary>
    public DeviceTrackerEntity Unifi347e5cD68b20Default => new(_haContext, "device_tracker.unifi_34_7e_5c_d6_8b_20_default");
    public DeviceTrackerEntity Unifi3655476c0c6bDefault => new(_haContext, "device_tracker.unifi_36_55_47_6c_0c_6b_default");
    public DeviceTrackerEntity Unifi3a581a119095Default => new(_haContext, "device_tracker.unifi_3a_58_1a_11_90_95_default");
    public DeviceTrackerEntity Unifi3a8980817eCeDefault => new(_haContext, "device_tracker.unifi_3a_89_80_81_7e_ce_default");
    public DeviceTrackerEntity Unifi3e31A7677036Default => new(_haContext, "device_tracker.unifi_3e_31_a7_67_70_36_default");
    public DeviceTrackerEntity Unifi3e638c3dFe8cDefault => new(_haContext, "device_tracker.unifi_3e_63_8c_3d_fe_8c_default");
    ///<summary> RX</summary>
    public DeviceTrackerEntity Unifi3e64D405F312Default => new(_haContext, "device_tracker.unifi_3e_64_d4_05_f3_12_default");
    ///<summary>Hottubcontrol</summary>
    public DeviceTrackerEntity Unifi409151523cAaDefault => new(_haContext, "device_tracker.unifi_40_91_51_52_3c_aa_default");
    ///<summary> RX</summary>
    public DeviceTrackerEntity Unifi42377bBf55F0Default => new(_haContext, "device_tracker.unifi_42_37_7b_bf_55_f0_default");
    ///<summary> RX</summary>
    public DeviceTrackerEntity Unifi46F51e4396F4Default => new(_haContext, "device_tracker.unifi_46_f5_1e_43_96_f4_default");
    public DeviceTrackerEntity Unifi4a998cC8A91aDefault => new(_haContext, "device_tracker.unifi_4a_99_8c_c8_a9_1a_default");
    public DeviceTrackerEntity Unifi4e3a1a0dB9A1Default => new(_haContext, "device_tracker.unifi_4e_3a_1a_0d_b9_a1_default");
    ///<summary> Jayden iPad</summary>
    public DeviceTrackerEntity Unifi54Ae270e3732Default => new(_haContext, "device_tracker.unifi_54_ae_27_0e_37_32_default");
    public DeviceTrackerEntity Unifi56D11bD17d21Default => new(_haContext, "device_tracker.unifi_56_d1_1b_d1_7d_21_default");
    public DeviceTrackerEntity Unifi5a0c5eBc5aE3Default => new(_haContext, "device_tracker.unifi_5a_0c_5e_bc_5a_e3_default");
    public DeviceTrackerEntity Unifi620bE5527e5fDefault => new(_haContext, "device_tracker.unifi_62_0b_e5_52_7e_5f_default");
    public DeviceTrackerEntity Unifi625c7c18D2BfDefault => new(_haContext, "device_tracker.unifi_62_5c_7c_18_d2_bf_default");
    public DeviceTrackerEntity Unifi6612B8B5Ab98Default => new(_haContext, "device_tracker.unifi_66_12_b8_b5_ab_98_default");
    public DeviceTrackerEntity Unifi6a7dC2219651Default => new(_haContext, "device_tracker.unifi_6a_7d_c2_21_96_51_default");
    public DeviceTrackerEntity Unifi6aB690F24243Default => new(_haContext, "device_tracker.unifi_6a_b6_90_f2_42_43_default");
    public DeviceTrackerEntity Unifi6eB266E76eC7Default => new(_haContext, "device_tracker.unifi_6e_b2_66_e7_6e_c7_default");
    public DeviceTrackerEntity Unifi72964914Cd06Default => new(_haContext, "device_tracker.unifi_72_96_49_14_cd_06_default");
    public DeviceTrackerEntity Unifi76D22595A06aDefault => new(_haContext, "device_tracker.unifi_76_d2_25_95_a0_6a_default");
    public DeviceTrackerEntity Unifi76D5Dc5d90BcDefault => new(_haContext, "device_tracker.unifi_76_d5_dc_5d_90_bc_default");
    public DeviceTrackerEntity Unifi7a264c0e731bDefault => new(_haContext, "device_tracker.unifi_7a_26_4c_0e_73_1b_default");
    public DeviceTrackerEntity Unifi7aB7F6160d9cDefault => new(_haContext, "device_tracker.unifi_7a_b7_f6_16_0d_9c_default");
    public DeviceTrackerEntity Unifi8603C83f3f3aDefault => new(_haContext, "device_tracker.unifi_86_03_c8_3f_3f_3a_default");
    public DeviceTrackerEntity Unifi86A8Fd31BcEbDefault => new(_haContext, "device_tracker.unifi_86_a8_fd_31_bc_eb_default");
    public DeviceTrackerEntity Unifi8a513f0f9323Default => new(_haContext, "device_tracker.unifi_8a_51_3f_0f_93_23_default");
    public DeviceTrackerEntity Unifi8eBb0497014bDefault => new(_haContext, "device_tracker.unifi_8e_bb_04_97_01_4b_default");
    public DeviceTrackerEntity Unifi92208d3dA84dDefault => new(_haContext, "device_tracker.unifi_92_20_8d_3d_a8_4d_default");
    public DeviceTrackerEntity Unifi9245B86269E2Default => new(_haContext, "device_tracker.unifi_92_45_b8_62_69_e2_default");
    public DeviceTrackerEntity Unifi92952739Bb7eDefault => new(_haContext, "device_tracker.unifi_92_95_27_39_bb_7e_default");
    public DeviceTrackerEntity Unifi92A5C740B6F0Default => new(_haContext, "device_tracker.unifi_92_a5_c7_40_b6_f0_default");
    public DeviceTrackerEntity Unifi92C83bD694B4Default => new(_haContext, "device_tracker.unifi_92_c8_3b_d6_94_b4_default");
    ///<summary> RX</summary>
    public DeviceTrackerEntity Unifi965c1d849dB7Default => new(_haContext, "device_tracker.unifi_96_5c_1d_84_9d_b7_default");
    public DeviceTrackerEntity Unifi9aD89401CfC3Default => new(_haContext, "device_tracker.unifi_9a_d8_94_01_cf_c3_default");
    public DeviceTrackerEntity UnifiA09208B3C1E9Default => new(_haContext, "device_tracker.unifi_a0_92_08_b3_c1_e9_default");
    public DeviceTrackerEntity UnifiA2175c44E9F6Default => new(_haContext, "device_tracker.unifi_a2_17_5c_44_e9_f6_default");
    ///<summary> iPhone</summary>
    public DeviceTrackerEntity UnifiA4Cf99290a81Default => new(_haContext, "device_tracker.unifi_a4_cf_99_29_0a_81_default");
    public DeviceTrackerEntity UnifiA6897a9aFf8fDefault => new(_haContext, "device_tracker.unifi_a6_89_7a_9a_ff_8f_default");
    public DeviceTrackerEntity UnifiA8E3EeDdD898Default => new(_haContext, "device_tracker.unifi_a8_e3_ee_dd_d8_98_default");
    ///<summary> RX</summary>
    public DeviceTrackerEntity UnifiAa3cFe09F5F2Default => new(_haContext, "device_tracker.unifi_aa_3c_fe_09_f5_f2_default");
    public DeviceTrackerEntity UnifiAaC8Cc8d8b75Default => new(_haContext, "device_tracker.unifi_aa_c8_cc_8d_8b_75_default");
    public DeviceTrackerEntity UnifiAaD9F2725d29Default => new(_haContext, "device_tracker.unifi_aa_d9_f2_72_5d_29_default");
    public DeviceTrackerEntity UnifiAe3b74D900E1Default => new(_haContext, "device_tracker.unifi_ae_3b_74_d9_00_e1_default");
    public DeviceTrackerEntity UnifiAe42C346757bDefault => new(_haContext, "device_tracker.unifi_ae_42_c3_46_75_7b_default");
    public DeviceTrackerEntity UnifiAeDa71Ec8fA1Default => new(_haContext, "device_tracker.unifi_ae_da_71_ec_8f_a1_default");
    public DeviceTrackerEntity UnifiAeEe43EeC52aDefault => new(_haContext, "device_tracker.unifi_ae_ee_43_ee_c5_2a_default");
    public DeviceTrackerEntity UnifiB287894eD47eDefault => new(_haContext, "device_tracker.unifi_b2_87_89_4e_d4_7e_default");
    public DeviceTrackerEntity UnifiB2BeF520C34cDefault => new(_haContext, "device_tracker.unifi_b2_be_f5_20_c3_4c_default");
    public DeviceTrackerEntity UnifiB649C13e7a2bDefault => new(_haContext, "device_tracker.unifi_b6_49_c1_3e_7a_2b_default");
    public DeviceTrackerEntity UnifiBa1d1e7c94C8Default => new(_haContext, "device_tracker.unifi_ba_1d_1e_7c_94_c8_default");
    public DeviceTrackerEntity UnifiBa7aDe6312CbDefault => new(_haContext, "device_tracker.unifi_ba_7a_de_63_12_cb_default");
    public DeviceTrackerEntity UnifiBaBfC1CeB0BeDefault => new(_haContext, "device_tracker.unifi_ba_bf_c1_ce_b0_be_default");
    public DeviceTrackerEntity UnifiBe318f35742aDefault => new(_haContext, "device_tracker.unifi_be_31_8f_35_74_2a_default");
    public DeviceTrackerEntity UnifiBeA71b06283cDefault => new(_haContext, "device_tracker.unifi_be_a7_1b_06_28_3c_default");
    public DeviceTrackerEntity UnifiBeCbE162Ef9bDefault => new(_haContext, "device_tracker.unifi_be_cb_e1_62_ef_9b_default");
    public DeviceTrackerEntity UnifiC24cDdA852FeDefault => new(_haContext, "device_tracker.unifi_c2_4c_dd_a8_52_fe_default");
    public DeviceTrackerEntity UnifiC25413325fF5Default => new(_haContext, "device_tracker.unifi_c2_54_13_32_5f_f5_default");
    public DeviceTrackerEntity UnifiC6Ce2407EcD5Default => new(_haContext, "device_tracker.unifi_c6_ce_24_07_ec_d5_default");
    public DeviceTrackerEntity UnifiCe72A47f7fA6Default => new(_haContext, "device_tracker.unifi_ce_72_a4_7f_7f_a6_default");
    public DeviceTrackerEntity UnifiD2Aa50D823E8Default => new(_haContext, "device_tracker.unifi_d2_aa_50_d8_23_e8_default");
    public DeviceTrackerEntity UnifiD681Ff8cFc4eDefault => new(_haContext, "device_tracker.unifi_d6_81_ff_8c_fc_4e_default");
    public DeviceTrackerEntity UnifiDa4eD424B44aDefault => new(_haContext, "device_tracker.unifi_da_4e_d4_24_b4_4a_default");
    ///<summary> Jayden RaspberryPi</summary>
    public DeviceTrackerEntity UnifiDcA632Dc56AfDefault => new(_haContext, "device_tracker.unifi_dc_a6_32_dc_56_af_default");
    public DeviceTrackerEntity UnifiDeF13096B774Default => new(_haContext, "device_tracker.unifi_de_f1_30_96_b7_74_default");
    public DeviceTrackerEntity UnifiE223Bf9c8221Default => new(_haContext, "device_tracker.unifi_e2_23_bf_9c_82_21_default");
    public DeviceTrackerEntity UnifiE2Fe879e6e51Default => new(_haContext, "device_tracker.unifi_e2_fe_87_9e_6e_51_default");
    public DeviceTrackerEntity UnifiE6E48e8eBf62Default => new(_haContext, "device_tracker.unifi_e6_e4_8e_8e_bf_62_default");
    public DeviceTrackerEntity UnifiEa231a3b0eC6Default => new(_haContext, "device_tracker.unifi_ea_23_1a_3b_0e_c6_default");
    public DeviceTrackerEntity UnifiEa7f17B856D1Default => new(_haContext, "device_tracker.unifi_ea_7f_17_b8_56_d1_default");
    public DeviceTrackerEntity UnifiEe3aCe9a157aDefault => new(_haContext, "device_tracker.unifi_ee_3a_ce_9a_15_7a_default");
    public DeviceTrackerEntity UnifiEeF108C9526aDefault => new(_haContext, "device_tracker.unifi_ee_f1_08_c9_52_6a_default");
    public DeviceTrackerEntity UnifiF2E3F9536e2fDefault => new(_haContext, "device_tracker.unifi_f2_e3_f9_53_6e_2f_default");
    public DeviceTrackerEntity UnifiF651F29cC6CeDefault => new(_haContext, "device_tracker.unifi_f6_51_f2_9c_c6_ce_default");
    public DeviceTrackerEntity UnifiF693C88a10DeDefault => new(_haContext, "device_tracker.unifi_f6_93_c8_8a_10_de_default");
    public DeviceTrackerEntity UnifiF6Ad6c3e2aCfDefault => new(_haContext, "device_tracker.unifi_f6_ad_6c_3e_2a_cf_default");
    public DeviceTrackerEntity UnifiFa0005393fDfDefault => new(_haContext, "device_tracker.unifi_fa_00_05_39_3f_df_default");
    public DeviceTrackerEntity UnifiFa00D75740FcDefault => new(_haContext, "device_tracker.unifi_fa_00_d7_57_40_fc_default");
    public DeviceTrackerEntity UnifiFa7088Ee0802Default => new(_haContext, "device_tracker.unifi_fa_70_88_ee_08_02_default");
    public DeviceTrackerEntity UnifiFe5a3957E388Default => new(_haContext, "device_tracker.unifi_fe_5a_39_57_e3_88_default");
    ///<summary>Upstairs Upstairs</summary>
    public DeviceTrackerEntity Upstairs => new(_haContext, "device_tracker.upstairs");
    ///<summary>Wallpanel Fire HD8 Wallpanel Fire HD8</summary>
    public DeviceTrackerEntity WallpanelFireHd8 => new(_haContext, "device_tracker.wallpanel_fire_hd8");
    ///<summary>washer Samsung-Washer</summary>
    public DeviceTrackerEntity Washer => new(_haContext, "device_tracker.washer");
    ///<summary>Wiser HeatHub (WiserHeat031C5E) WiserHeat031C5E</summary>
    public DeviceTrackerEntity Wiserheat031c5e => new(_haContext, "device_tracker.wiserheat031c5e");
    ///<summary>wlan0 RX wlan0</summary>
    public DeviceTrackerEntity Wlan0 => new(_haContext, "device_tracker.wlan0");
    ///<summary>wlan0</summary>
    public DeviceTrackerEntity Wlan02 => new(_haContext, "device_tracker.wlan0_2");
    ///<summary>XBOX XBOX</summary>
    public DeviceTrackerEntity Xbox => new(_haContext, "device_tracker.xbox");
}

public partial class GroupEntities
{
    private readonly IHaContext _haContext;
    public GroupEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Christmas</summary>
    public GroupEntity Christmas => new(_haContext, "group.christmas");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Arm Failed</summary>
    public InputBooleanEntity AlarmArmFailed => new(_haContext, "input_boolean.alarm_arm_failed");
    ///<summary>Alarm Clock Enabled</summary>
    public InputBooleanEntity AlarmClockEnabled => new(_haContext, "input_boolean.alarm_clock_enabled");
    public InputBooleanEntity AlarmPanic => new(_haContext, "input_boolean.alarm_panic");
    public InputBooleanEntity BackDoorChecked => new(_haContext, "input_boolean.back_door_checked");
    ///<summary>dev_netdaemon_niemand_energy_energy_app</summary>
    public InputBooleanEntity DevNetdaemonNiemandEnergyEnergyApp => new(_haContext, "input_boolean.dev_netdaemon_niemand_energy_energy_app");
    ///<summary>dev_netdaemon_niemand_test_app_notifications_manager</summary>
    public InputBooleanEntity DevNetdaemonNiemandTestAppNotificationsManager => new(_haContext, "input_boolean.dev_netdaemon_niemand_test_app_notifications_manager");
    public InputBooleanEntity DiningDoorChecked => new(_haContext, "input_boolean.dining_door_checked");
    ///<summary>Dishwasher Reminder</summary>
    public InputBooleanEntity DishwasherReminder => new(_haContext, "input_boolean.dishwasher_reminder");
    public InputBooleanEntity DryerAck => new(_haContext, "input_boolean.dryer_ack");
    ///<summary>Dryer Reminder</summary>
    public InputBooleanEntity DryerReminder => new(_haContext, "input_boolean.dryer_reminder");
    public InputBooleanEntity FrontDoorChecked => new(_haContext, "input_boolean.front_door_checked");
    public InputBooleanEntity GarageBackDoorChecked => new(_haContext, "input_boolean.garage_back_door_checked");
    public InputBooleanEntity KidsInBed => new(_haContext, "input_boolean.kids_in_bed");
    public InputBooleanEntity LoungeDoorChecked => new(_haContext, "input_boolean.lounge_door_checked");
    public InputBooleanEntity LoungeMotionLightsDisabled => new(_haContext, "input_boolean.lounge_motion_lights_disabled");
    ///<summary>netdaemon_debug_state</summary>
    public InputBooleanEntity NetdaemonDebugState => new(_haContext, "input_boolean.netdaemon_debug_state");
    ///<summary>netdaemon_light_manager_v2_lights_manager</summary>
    public InputBooleanEntity NetdaemonLightManagerV2LightsManager => new(_haContext, "input_boolean.netdaemon_light_manager_v2_lights_manager");
    ///<summary>netdaemon_niemand_alarm_clock</summary>
    public InputBooleanEntity NetdaemonNiemandAlarmClock => new(_haContext, "input_boolean.netdaemon_niemand_alarm_clock");
    ///<summary>netdaemon_niemand_dining_dining_app</summary>
    public InputBooleanEntity NetdaemonNiemandDiningDiningApp => new(_haContext, "input_boolean.netdaemon_niemand_dining_dining_app");
    ///<summary>netdaemon_niemand_discipline_manager</summary>
    public InputBooleanEntity NetdaemonNiemandDisciplineManager => new(_haContext, "input_boolean.netdaemon_niemand_discipline_manager");
    ///<summary>netdaemon_niemand_energy_agile_rates_app</summary>
    public InputBooleanEntity NetdaemonNiemandEnergyAgileRatesApp => new(_haContext, "input_boolean.netdaemon_niemand_energy_agile_rates_app");
    ///<summary>netdaemon_niemand_energy_batteries_app</summary>
    public InputBooleanEntity NetdaemonNiemandEnergyBatteriesApp => new(_haContext, "input_boolean.netdaemon_niemand_energy_batteries_app");
    ///<summary>netdaemon_niemand_energy_energy_app</summary>
    public InputBooleanEntity NetdaemonNiemandEnergyEnergyApp => new(_haContext, "input_boolean.netdaemon_niemand_energy_energy_app");
    ///<summary>netdaemon_niemand_kitchen</summary>
    public InputBooleanEntity NetdaemonNiemandKitchen => new(_haContext, "input_boolean.netdaemon_niemand_kitchen");
    ///<summary>netdaemon_niemand_motion_alerts</summary>
    public InputBooleanEntity NetdaemonNiemandMotionAlerts => new(_haContext, "input_boolean.netdaemon_niemand_motion_alerts");
    ///<summary>netdaemon_niemand_office</summary>
    public InputBooleanEntity NetdaemonNiemandOffice => new(_haContext, "input_boolean.netdaemon_niemand_office");
    ///<summary>netdaemon_niemand_test_app_alarm</summary>
    public InputBooleanEntity NetdaemonNiemandTestAppAlarm => new(_haContext, "input_boolean.netdaemon_niemand_test_app_alarm");
    ///<summary>netdaemon_niemand_test_app_notifications_manager</summary>
    public InputBooleanEntity NetdaemonNiemandTestAppNotificationsManager => new(_haContext, "input_boolean.netdaemon_niemand_test_app_notifications_manager");
    ///<summary>netdaemon_niemand_test_app_test_app</summary>
    public InputBooleanEntity NetdaemonNiemandTestAppTestApp => new(_haContext, "input_boolean.netdaemon_niemand_test_app_test_app");
    ///<summary>netdaemon_niemand_vacation_app</summary>
    public InputBooleanEntity NetdaemonNiemandVacationApp => new(_haContext, "input_boolean.netdaemon_niemand_vacation_app");
    public InputBooleanEntity NotifyEugeneTelegram => new(_haContext, "input_boolean.notify_eugene_telegram");
    public InputBooleanEntity WasherAck => new(_haContext, "input_boolean.washer_ack");
    ///<summary>Washing Reminder</summary>
    public InputBooleanEntity WashingReminder => new(_haContext, "input_boolean.washing_reminder");
}

public partial class InputButtonEntities
{
    private readonly IHaContext _haContext;
    public InputButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>DiningSeating</summary>
    public InputButtonEntity Diningseating => new(_haContext, "input_button.diningseating");
    ///<summary>Evening Routine</summary>
    public InputButtonEntity EveningRoutine => new(_haContext, "input_button.evening_routine");
    ///<summary>Get Energy Rates</summary>
    public InputButtonEntity GetEnergyRates => new(_haContext, "input_button.get_energy_rates");
    ///<summary>JaydenMorningRoutine</summary>
    public InputButtonEntity Jaydenmorningroutine => new(_haContext, "input_button.jaydenmorningroutine");
    ///<summary>Run Speedtest</summary>
    public InputButtonEntity RunSpeedtest => new(_haContext, "input_button.run_speedtest");
    ///<summary>Test Routine</summary>
    public InputButtonEntity TestRoutine => new(_haContext, "input_button.test_routine");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public InputNumberEntity AaronLuxLimit => new(_haContext, "input_number.aaron_lux_limit");
    public InputNumberEntity BoysLuxLimit => new(_haContext, "input_number.boys_lux_limit");
    public InputNumberEntity DiningLuxLimit => new(_haContext, "input_number.dining_lux_limit");
    public InputNumberEntity EntranceLuxLimit => new(_haContext, "input_number.entrance_lux_limit");
    public InputNumberEntity HallwayLuxLimit => new(_haContext, "input_number.hallway_lux_limit");
    public InputNumberEntity JaydenLuxLimit => new(_haContext, "input_number.jayden_lux_limit");
    public InputNumberEntity KitchenLuxLimit => new(_haContext, "input_number.kitchen_lux_limit");
    public InputNumberEntity LandingLuxLimit => new(_haContext, "input_number.landing_lux_limit");
    public InputNumberEntity LoungeLuxLimit => new(_haContext, "input_number.lounge_lux_limit");
    public InputNumberEntity MasterLuxLimit => new(_haContext, "input_number.master_lux_limit");
    public InputNumberEntity OfficeLuxLimit => new(_haContext, "input_number.office_lux_limit");
    public InputNumberEntity PlayroomLuxLimit => new(_haContext, "input_number.playroom_lux_limit");
    public InputNumberEntity RingChimeSnoozeMinutes => new(_haContext, "input_number.ring_chime_snooze_minutes");
    public InputNumberEntity RingChimeVolume => new(_haContext, "input_number.ring_chime_volume");
    public InputNumberEntity TimerIntervalMinutes => new(_haContext, "input_number.timer_interval_minutes");
    public InputNumberEntity ToiletLuxLimit => new(_haContext, "input_number.toilet_lux_limit");
    public InputNumberEntity UtilityLuxLimit => new(_haContext, "input_number.utility_lux_limit");
}

public partial class InputSelectEntities
{
    private readonly IHaContext _haContext;
    public InputSelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>House Mode</summary>
    public InputSelectEntity HouseMode => new(_haContext, "input_select.house_mode");
    ///<summary>Timer Speaker</summary>
    public InputSelectEntity TimerSpeaker => new(_haContext, "input_select.timer_speaker");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public InputTextEntity AlexaActionableNotification => new(_haContext, "input_text.alexa_actionable_notification");
    public InputTextEntity ImText => new(_haContext, "input_text.im_text");
    public InputTextEntity TtsText => new(_haContext, "input_text.tts_text");
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron</summary>
    public LightEntity Aaron => new(_haContext, "light.aaron");
    ///<summary>Aaron 1</summary>
    public LightEntity Aaron1 => new(_haContext, "light.aaron_1");
    ///<summary>Aaron 2</summary>
    public LightEntity Aaron2 => new(_haContext, "light.aaron_2");
    ///<summary>Aaron 3</summary>
    public LightEntity Aaron3 => new(_haContext, "light.aaron_3");
    ///<summary>Aaron 4</summary>
    public LightEntity Aaron4 => new(_haContext, "light.aaron_4");
    ///<summary>Aaron Main</summary>
    public LightEntity AaronMain => new(_haContext, "light.aaron_main");
    ///<summary>Aubrecia Drive light</summary>
    public LightEntity AubreciaDriveLight => new(_haContext, "light.aubrecia_drive_light");
    ///<summary>Dining</summary>
    public LightEntity Dining => new(_haContext, "light.dining");
    ///<summary>dining 1</summary>
    public LightEntity Dining1 => new(_haContext, "light.dining_1");
    ///<summary>dining 2</summary>
    public LightEntity Dining2 => new(_haContext, "light.dining_2");
    ///<summary>dining 3</summary>
    public LightEntity Dining3 => new(_haContext, "light.dining_3");
    ///<summary>dining 4</summary>
    public LightEntity Dining4 => new(_haContext, "light.dining_4");
    ///<summary>dining 5</summary>
    public LightEntity Dining5 => new(_haContext, "light.dining_5");
    ///<summary>Dining Wall</summary>
    public LightEntity DiningWall => new(_haContext, "light.dining_wall");
    ///<summary>dining wall 1</summary>
    public LightEntity DiningWall1 => new(_haContext, "light.dining_wall_1");
    ///<summary>dining wall 2</summary>
    public LightEntity DiningWall2 => new(_haContext, "light.dining_wall_2");
    ///<summary>Downstairs</summary>
    public LightEntity Downstairs => new(_haContext, "light.downstairs");
    ///<summary>Entrance</summary>
    public LightEntity Entrance => new(_haContext, "light.entrance");
    ///<summary>Floor</summary>
    public LightEntity Floor => new(_haContext, "light.floor");
    ///<summary>Garden light</summary>
    public LightEntity GardenLight2 => new(_haContext, "light.garden_light_2");
    ///<summary>Hallway</summary>
    public LightEntity Hallway => new(_haContext, "light.hallway");
    ///<summary>Jayden</summary>
    public LightEntity Jayden => new(_haContext, "light.jayden");
    ///<summary>Jayden 1</summary>
    public LightEntity Jayden1 => new(_haContext, "light.jayden_1");
    ///<summary>Jayden 2</summary>
    public LightEntity Jayden2 => new(_haContext, "light.jayden_2");
    ///<summary>Jayden 3</summary>
    public LightEntity Jayden3 => new(_haContext, "light.jayden_3");
    ///<summary>Jayden 4</summary>
    public LightEntity Jayden4 => new(_haContext, "light.jayden_4");
    ///<summary>Jayden Alarm</summary>
    public LightEntity JaydenAlarm => new(_haContext, "light.jayden_alarm");
    ///<summary>Kitchen</summary>
    public LightEntity Kitchen => new(_haContext, "light.kitchen");
    ///<summary>kitchen 1</summary>
    public LightEntity Kitchen1 => new(_haContext, "light.kitchen_1");
    ///<summary>kitchen 2</summary>
    public LightEntity Kitchen2 => new(_haContext, "light.kitchen_2");
    ///<summary>kitchen 3</summary>
    public LightEntity Kitchen3 => new(_haContext, "light.kitchen_3");
    ///<summary>kitchen 4</summary>
    public LightEntity Kitchen4 => new(_haContext, "light.kitchen_4");
    ///<summary>kitchen 5</summary>
    public LightEntity Kitchen5 => new(_haContext, "light.kitchen_5");
    ///<summary>kitchen 6</summary>
    public LightEntity Kitchen6 => new(_haContext, "light.kitchen_6");
    ///<summary>Landing</summary>
    public LightEntity Landing => new(_haContext, "light.landing");
    ///<summary>landing 1</summary>
    public LightEntity Landing1 => new(_haContext, "light.landing_1");
    ///<summary>Landing Day</summary>
    public LightEntity LandingDay => new(_haContext, "light.landing_day");
    ///<summary>landing night</summary>
    public LightEntity LandingNight => new(_haContext, "light.landing_night");
    ///<summary>Lounge</summary>
    public LightEntity Lounge => new(_haContext, "light.lounge");
    ///<summary>Lounge Back</summary>
    public LightEntity LoungeBack => new(_haContext, "light.lounge_back");
    ///<summary>Lounge Front</summary>
    public LightEntity LoungeFront => new(_haContext, "light.lounge_front");
    ///<summary>Master</summary>
    public LightEntity Master => new(_haContext, "light.master");
    ///<summary>master 1</summary>
    public LightEntity Master1 => new(_haContext, "light.master_1");
    ///<summary>Master 2</summary>
    public LightEntity Master2 => new(_haContext, "light.master_2");
    ///<summary>master 3</summary>
    public LightEntity Master3 => new(_haContext, "light.master_3");
    ///<summary>master 4</summary>
    public LightEntity Master4 => new(_haContext, "light.master_4");
    ///<summary>Master Nightlight</summary>
    public LightEntity Master5 => new(_haContext, "light.master_5");
    ///<summary>Niemand Drive light</summary>
    public LightEntity NiemandDriveLight => new(_haContext, "light.niemand_drive_light");
    ///<summary>Niemand Drive Light</summary>
    public LightEntity NiemandDriveLight2 => new(_haContext, "light.niemand_drive_light_2");
    ///<summary>Niemand Garden light</summary>
    public LightEntity NiemandGardenLight => new(_haContext, "light.niemand_garden_light");
    ///<summary>Niemand Garden Light</summary>
    public LightEntity NiemandGardenLight2 => new(_haContext, "light.niemand_garden_light_2");
    ///<summary>Office</summary>
    public LightEntity Office => new(_haContext, "light.office");
    ///<summary>office 1</summary>
    public LightEntity Office1 => new(_haContext, "light.office_1");
    ///<summary>office 3</summary>
    public LightEntity Office3 => new(_haContext, "light.office_3");
    ///<summary>Office Skylight</summary>
    public LightEntity OfficeSkylight => new(_haContext, "light.office_skylight");
    ///<summary>Outside</summary>
    public LightEntity Outside => new(_haContext, "light.outside");
    ///<summary>Outside Back</summary>
    public LightEntity OutsideBack => new(_haContext, "light.outside_back");
    ///<summary>Outside Drive</summary>
    public LightEntity OutsideDrive => new(_haContext, "light.outside_drive");
    ///<summary>Outside Front</summary>
    public LightEntity OutsideFront => new(_haContext, "light.outside_front");
    ///<summary>Outside Garage</summary>
    public LightEntity OutsideGarage => new(_haContext, "light.outside_garage");
    ///<summary>Outside Garden Flood</summary>
    public LightEntity OutsideGardenFlood => new(_haContext, "light.outside_garden_flood");
    ///<summary>Playroom</summary>
    public LightEntity Playroom => new(_haContext, "light.playroom");
    ///<summary>Porch</summary>
    public LightEntity Porch => new(_haContext, "light.porch");
    ///<summary>Texas Instruments CC1352/CC2652, Z-Stack 3.30+ (build 20210708) No name group 0x0004</summary>
    public LightEntity TexasInstrumentsCc1352Cc2652ZStack330Build20210708NoNameGroup0x0004ZhaGroup0x0004 => new(_haContext, "light.texas_instruments_cc1352_cc2652_z_stack_3_30_build_20210708_no_name_group_0x0004_zha_group_0x0004");
    ///<summary>Toilet</summary>
    public LightEntity Toilet => new(_haContext, "light.toilet");
    ///<summary>Upstairs</summary>
    public LightEntity Upstairs => new(_haContext, "light.upstairs");
    ///<summary>Utility</summary>
    public LightEntity Utility => new(_haContext, "light.utility");
    ///<summary>utility 1</summary>
    public LightEntity Utility1 => new(_haContext, "light.utility_1");
    ///<summary>utility 2</summary>
    public LightEntity Utility2 => new(_haContext, "light.utility_2");
    ///<summary>utility 3</summary>
    public LightEntity Utility3 => new(_haContext, "light.utility_3");
    ///<summary>UtilityCupboard</summary>
    public LightEntity Utilitycupboard => new(_haContext, "light.utilitycupboard");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron</summary>
    public MediaPlayerEntity Aaron => new(_haContext, "media_player.aaron");
    ///<summary>Aaron ATV</summary>
    public MediaPlayerEntity AaronAtv => new(_haContext, "media_player.aaron_atv");
    ///<summary>Alarm Clock Devices</summary>
    public MediaPlayerEntity AlarmClockDevices => new(_haContext, "media_player.alarm_clock_devices");
    ///<summary>Dining</summary>
    public MediaPlayerEntity Dining => new(_haContext, "media_player.dining");
    ///<summary>Downstairs</summary>
    public MediaPlayerEntity Downstairs => new(_haContext, "media_player.downstairs");
    ///<summary>Garden</summary>
    public MediaPlayerEntity EugeneS2ndEchoDot => new(_haContext, "media_player.eugene_s_2nd_echo_dot");
    ///<summary>Garage</summary>
    public MediaPlayerEntity EugeneS5thEchoDot => new(_haContext, "media_player.eugene_s_5th_echo_dot");
    ///<summary>Wallpanel</summary>
    public MediaPlayerEntity EugeneSFire => new(_haContext, "media_player.eugene_s_fire");
    ///<summary>Lounge LG Alexa</summary>
    public MediaPlayerEntity EugeneSLgOledWebos2021Tv => new(_haContext, "media_player.eugene_s_lg_oled_webos_2021_tv");
    ///<summary>Lounge</summary>
    public MediaPlayerEntity EugeneSSonosArc => new(_haContext, "media_player.eugene_s_sonos_arc");
    ///<summary>Everywhere</summary>
    public MediaPlayerEntity Everywhere2 => new(_haContext, "media_player.everywhere_2");
    ///<summary>Jayden</summary>
    public MediaPlayerEntity Jayden => new(_haContext, "media_player.jayden");
    ///<summary>Kitchen</summary>
    public MediaPlayerEntity Kitchen => new(_haContext, "media_player.kitchen");
    ///<summary>Lounge Soundbar</summary>
    public MediaPlayerEntity Lounge => new(_haContext, "media_player.lounge");
    ///<summary>Lounge Echo</summary>
    public MediaPlayerEntity LoungeSonos => new(_haContext, "media_player.lounge_sonos");
    ///<summary>Lounge TV</summary>
    public MediaPlayerEntity LoungeTv => new(_haContext, "media_player.lounge_tv");
    ///<summary>Master</summary>
    public MediaPlayerEntity Master => new(_haContext, "media_player.master");
    ///<summary>Master TV</summary>
    public MediaPlayerEntity MasterTv2 => new(_haContext, "media_player.master_tv_2");
    ///<summary>Master TV Alexa</summary>
    public MediaPlayerEntity MasterTvAlexa => new(_haContext, "media_player.master_tv_alexa");
    ///<summary>Office</summary>
    public MediaPlayerEntity Office => new(_haContext, "media_player.office");
    ///<summary>Playroom</summary>
    public MediaPlayerEntity Playroom => new(_haContext, "media_player.playroom");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice => new(_haContext, "media_player.this_device");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice3 => new(_haContext, "media_player.this_device_3");
    ///<summary>Upstairs</summary>
    public MediaPlayerEntity Upstairs => new(_haContext, "media_player.upstairs");
    ///<summary>Xbox</summary>
    public MediaPlayerEntity Xbox => new(_haContext, "media_player.xbox");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron 1 On level</summary>
    public NumberEntity Aaron1OnLevel => new(_haContext, "number.aaron_1_on_level");
    ///<summary>Aaron 1 On/Off transition time</summary>
    public NumberEntity Aaron1OnOffTransitionTime => new(_haContext, "number.aaron_1_on_off_transition_time");
    ///<summary>Aaron 1 Start-up color temperature</summary>
    public NumberEntity Aaron1StartUpColorTemperature => new(_haContext, "number.aaron_1_start_up_color_temperature");
    ///<summary>Aaron 1 Start-up current level</summary>
    public NumberEntity Aaron1StartUpCurrentLevel => new(_haContext, "number.aaron_1_start_up_current_level");
    ///<summary>Aaron 2 On level</summary>
    public NumberEntity Aaron2OnLevel => new(_haContext, "number.aaron_2_on_level");
    ///<summary>Aaron 2 On/Off transition time</summary>
    public NumberEntity Aaron2OnOffTransitionTime => new(_haContext, "number.aaron_2_on_off_transition_time");
    ///<summary>Aaron 2 Start-up color temperature</summary>
    public NumberEntity Aaron2StartUpColorTemperature => new(_haContext, "number.aaron_2_start_up_color_temperature");
    ///<summary>Aaron 2 Start-up current level</summary>
    public NumberEntity Aaron2StartUpCurrentLevel => new(_haContext, "number.aaron_2_start_up_current_level");
    ///<summary>Aaron 3 On level</summary>
    public NumberEntity Aaron3OnLevel => new(_haContext, "number.aaron_3_on_level");
    ///<summary>Aaron 3 On/Off transition time</summary>
    public NumberEntity Aaron3OnOffTransitionTime => new(_haContext, "number.aaron_3_on_off_transition_time");
    ///<summary>Aaron 3 Start-up color temperature</summary>
    public NumberEntity Aaron3StartUpColorTemperature => new(_haContext, "number.aaron_3_start_up_color_temperature");
    ///<summary>Aaron 3 Start-up current level</summary>
    public NumberEntity Aaron3StartUpCurrentLevel => new(_haContext, "number.aaron_3_start_up_current_level");
    ///<summary>Aaron 4 On level</summary>
    public NumberEntity Aaron4OnLevel => new(_haContext, "number.aaron_4_on_level");
    ///<summary>Aaron 4 On/Off transition time</summary>
    public NumberEntity Aaron4OnOffTransitionTime => new(_haContext, "number.aaron_4_on_off_transition_time");
    ///<summary>Aaron 4 Start-up color temperature</summary>
    public NumberEntity Aaron4StartUpColorTemperature => new(_haContext, "number.aaron_4_start_up_color_temperature");
    ///<summary>Aaron 4 Start-up current level</summary>
    public NumberEntity Aaron4StartUpCurrentLevel => new(_haContext, "number.aaron_4_start_up_current_level");
    ///<summary>Aaron Main On level</summary>
    public NumberEntity AaronMainOnLevel => new(_haContext, "number.aaron_main_on_level");
    ///<summary>Aaron Main On/Off transition time</summary>
    public NumberEntity AaronMainOnOffTransitionTime => new(_haContext, "number.aaron_main_on_off_transition_time");
    ///<summary>Aaron Main Start-up color temperature</summary>
    public NumberEntity AaronMainStartUpColorTemperature => new(_haContext, "number.aaron_main_start_up_color_temperature");
    ///<summary>Aaron Main Start-up current level</summary>
    public NumberEntity AaronMainStartUpCurrentLevel => new(_haContext, "number.aaron_main_start_up_current_level");
    ///<summary>dining 1 On level</summary>
    public NumberEntity Dining1OnLevel => new(_haContext, "number.dining_1_on_level");
    ///<summary>dining 1 On/Off transition time</summary>
    public NumberEntity Dining1OnOffTransitionTime => new(_haContext, "number.dining_1_on_off_transition_time");
    ///<summary>dining 1 Start-up color temperature</summary>
    public NumberEntity Dining1StartUpColorTemperature => new(_haContext, "number.dining_1_start_up_color_temperature");
    ///<summary>dining 1 Start-up current level</summary>
    public NumberEntity Dining1StartUpCurrentLevel => new(_haContext, "number.dining_1_start_up_current_level");
    ///<summary>dining 2 On level</summary>
    public NumberEntity Dining2OnLevel => new(_haContext, "number.dining_2_on_level");
    ///<summary>dining 2 On/Off transition time</summary>
    public NumberEntity Dining2OnOffTransitionTime => new(_haContext, "number.dining_2_on_off_transition_time");
    ///<summary>dining 2 Start-up color temperature</summary>
    public NumberEntity Dining2StartUpColorTemperature => new(_haContext, "number.dining_2_start_up_color_temperature");
    ///<summary>dining 2 Start-up current level</summary>
    public NumberEntity Dining2StartUpCurrentLevel => new(_haContext, "number.dining_2_start_up_current_level");
    ///<summary>dining 3 On level</summary>
    public NumberEntity Dining3OnLevel => new(_haContext, "number.dining_3_on_level");
    ///<summary>dining 3 On/Off transition time</summary>
    public NumberEntity Dining3OnOffTransitionTime => new(_haContext, "number.dining_3_on_off_transition_time");
    ///<summary>dining 3 Start-up color temperature</summary>
    public NumberEntity Dining3StartUpColorTemperature => new(_haContext, "number.dining_3_start_up_color_temperature");
    ///<summary>dining 3 Start-up current level</summary>
    public NumberEntity Dining3StartUpCurrentLevel => new(_haContext, "number.dining_3_start_up_current_level");
    ///<summary>dining 4 On level</summary>
    public NumberEntity Dining4OnLevel => new(_haContext, "number.dining_4_on_level");
    ///<summary>dining 4 On/Off transition time</summary>
    public NumberEntity Dining4OnOffTransitionTime => new(_haContext, "number.dining_4_on_off_transition_time");
    ///<summary>dining 4 Start-up color temperature</summary>
    public NumberEntity Dining4StartUpColorTemperature => new(_haContext, "number.dining_4_start_up_color_temperature");
    ///<summary>dining 4 Start-up current level</summary>
    public NumberEntity Dining4StartUpCurrentLevel => new(_haContext, "number.dining_4_start_up_current_level");
    ///<summary>dining 5 On level</summary>
    public NumberEntity Dining5OnLevel => new(_haContext, "number.dining_5_on_level");
    ///<summary>dining 5 On/Off transition time</summary>
    public NumberEntity Dining5OnOffTransitionTime => new(_haContext, "number.dining_5_on_off_transition_time");
    ///<summary>dining 5 Start-up color temperature</summary>
    public NumberEntity Dining5StartUpColorTemperature => new(_haContext, "number.dining_5_start_up_color_temperature");
    ///<summary>dining 5 Start-up current level</summary>
    public NumberEntity Dining5StartUpCurrentLevel => new(_haContext, "number.dining_5_start_up_current_level");
    ///<summary>dining wall 1 On level</summary>
    public NumberEntity DiningWall1OnLevel => new(_haContext, "number.dining_wall_1_on_level");
    ///<summary>dining wall 1 On/Off transition time</summary>
    public NumberEntity DiningWall1OnOffTransitionTime => new(_haContext, "number.dining_wall_1_on_off_transition_time");
    ///<summary>dining wall 1 Start-up current level</summary>
    public NumberEntity DiningWall1StartUpCurrentLevel => new(_haContext, "number.dining_wall_1_start_up_current_level");
    ///<summary>dining wall 2 On level</summary>
    public NumberEntity DiningWall2OnLevel => new(_haContext, "number.dining_wall_2_on_level");
    ///<summary>dining wall 2 On/Off transition time</summary>
    public NumberEntity DiningWall2OnOffTransitionTime => new(_haContext, "number.dining_wall_2_on_off_transition_time");
    ///<summary>dining wall 2 Start-up current level</summary>
    public NumberEntity DiningWall2StartUpCurrentLevel => new(_haContext, "number.dining_wall_2_start_up_current_level");
    ///<summary>Downstairs Snooze Minutes</summary>
    public NumberEntity DownstairsSnoozeMinutes => new(_haContext, "number.downstairs_snooze_minutes");
    ///<summary>Downstairs Volume</summary>
    public NumberEntity DownstairsVolume => new(_haContext, "number.downstairs_volume");
    ///<summary>entrance On level</summary>
    public NumberEntity EntranceOnLevel => new(_haContext, "number.entrance_on_level");
    ///<summary>entrance On/Off transition time</summary>
    public NumberEntity EntranceOnOffTransitionTime => new(_haContext, "number.entrance_on_off_transition_time");
    ///<summary>entrance Start-up current level</summary>
    public NumberEntity EntranceStartUpCurrentLevel => new(_haContext, "number.entrance_start_up_current_level");
    ///<summary>Fish Lights On level</summary>
    public NumberEntity FishLightsOnLevel => new(_haContext, "number.fish_lights_on_level");
    ///<summary>Fish Lights On/Off transition time</summary>
    public NumberEntity FishLightsOnOffTransitionTime => new(_haContext, "number.fish_lights_on_off_transition_time");
    ///<summary>Fish Lights Start-up current level</summary>
    public NumberEntity FishLightsStartUpCurrentLevel => new(_haContext, "number.fish_lights_start_up_current_level");
    ///<summary>Floor On level</summary>
    public NumberEntity FloorOnLevel => new(_haContext, "number.floor_on_level");
    ///<summary>Floor On/Off transition time</summary>
    public NumberEntity FloorOnOffTransitionTime => new(_haContext, "number.floor_on_off_transition_time");
    ///<summary>Floor Start-up color temperature</summary>
    public NumberEntity FloorStartUpColorTemperature => new(_haContext, "number.floor_start_up_color_temperature");
    ///<summary>Floor Start-up current level</summary>
    public NumberEntity FloorStartUpCurrentLevel => new(_haContext, "number.floor_start_up_current_level");
    ///<summary>hallway On level</summary>
    public NumberEntity HallwayOnLevel => new(_haContext, "number.hallway_on_level");
    ///<summary>hallway On/Off transition time</summary>
    public NumberEntity HallwayOnOffTransitionTime => new(_haContext, "number.hallway_on_off_transition_time");
    ///<summary>hallway Start-up current level</summary>
    public NumberEntity HallwayStartUpCurrentLevel => new(_haContext, "number.hallway_start_up_current_level");
    ///<summary>Jayden 1 On level</summary>
    public NumberEntity Jayden1OnLevel => new(_haContext, "number.jayden_1_on_level");
    ///<summary>Jayden 1 On/Off transition time</summary>
    public NumberEntity Jayden1OnOffTransitionTime => new(_haContext, "number.jayden_1_on_off_transition_time");
    ///<summary>Jayden 1 Start-up current level</summary>
    public NumberEntity Jayden1StartUpCurrentLevel => new(_haContext, "number.jayden_1_start_up_current_level");
    ///<summary>Jayden 2 On level</summary>
    public NumberEntity Jayden2OnLevel => new(_haContext, "number.jayden_2_on_level");
    ///<summary>Jayden 2 On/Off transition time</summary>
    public NumberEntity Jayden2OnOffTransitionTime => new(_haContext, "number.jayden_2_on_off_transition_time");
    ///<summary>Jayden 2 Start-up current level</summary>
    public NumberEntity Jayden2StartUpCurrentLevel => new(_haContext, "number.jayden_2_start_up_current_level");
    ///<summary>Jayden 3 On level</summary>
    public NumberEntity Jayden3OnLevel => new(_haContext, "number.jayden_3_on_level");
    ///<summary>Jayden 3 On/Off transition time</summary>
    public NumberEntity Jayden3OnOffTransitionTime => new(_haContext, "number.jayden_3_on_off_transition_time");
    ///<summary>Jayden 3 Start-up current level</summary>
    public NumberEntity Jayden3StartUpCurrentLevel => new(_haContext, "number.jayden_3_start_up_current_level");
    ///<summary>Jayden 4 On level</summary>
    public NumberEntity Jayden4OnLevel => new(_haContext, "number.jayden_4_on_level");
    ///<summary>Jayden 4 On/Off transition time</summary>
    public NumberEntity Jayden4OnOffTransitionTime => new(_haContext, "number.jayden_4_on_off_transition_time");
    ///<summary>Jayden 4 Start-up current level</summary>
    public NumberEntity Jayden4StartUpCurrentLevel => new(_haContext, "number.jayden_4_start_up_current_level");
    ///<summary>kitchen 1 On level</summary>
    public NumberEntity Kitchen1OnLevel => new(_haContext, "number.kitchen_1_on_level");
    ///<summary>kitchen 1 On/Off transition time</summary>
    public NumberEntity Kitchen1OnOffTransitionTime => new(_haContext, "number.kitchen_1_on_off_transition_time");
    ///<summary>kitchen 1 Start-up current level</summary>
    public NumberEntity Kitchen1StartUpCurrentLevel => new(_haContext, "number.kitchen_1_start_up_current_level");
    ///<summary>kitchen 2 On level</summary>
    public NumberEntity Kitchen2OnLevel => new(_haContext, "number.kitchen_2_on_level");
    ///<summary>kitchen 2 On/Off transition time</summary>
    public NumberEntity Kitchen2OnOffTransitionTime => new(_haContext, "number.kitchen_2_on_off_transition_time");
    ///<summary>kitchen 2 Start-up current level</summary>
    public NumberEntity Kitchen2StartUpCurrentLevel => new(_haContext, "number.kitchen_2_start_up_current_level");
    ///<summary>kitchen 3 On level</summary>
    public NumberEntity Kitchen3OnLevel => new(_haContext, "number.kitchen_3_on_level");
    ///<summary>kitchen 3 On/Off transition time</summary>
    public NumberEntity Kitchen3OnOffTransitionTime => new(_haContext, "number.kitchen_3_on_off_transition_time");
    ///<summary>kitchen 3 Start-up current level</summary>
    public NumberEntity Kitchen3StartUpCurrentLevel => new(_haContext, "number.kitchen_3_start_up_current_level");
    ///<summary>kitchen 4 On level</summary>
    public NumberEntity Kitchen4OnLevel => new(_haContext, "number.kitchen_4_on_level");
    ///<summary>kitchen 4 On/Off transition time</summary>
    public NumberEntity Kitchen4OnOffTransitionTime => new(_haContext, "number.kitchen_4_on_off_transition_time");
    ///<summary>kitchen 4 Start-up current level</summary>
    public NumberEntity Kitchen4StartUpCurrentLevel => new(_haContext, "number.kitchen_4_start_up_current_level");
    ///<summary>kitchen 5 On level</summary>
    public NumberEntity Kitchen5OnLevel => new(_haContext, "number.kitchen_5_on_level");
    ///<summary>kitchen 5 On/Off transition time</summary>
    public NumberEntity Kitchen5OnOffTransitionTime => new(_haContext, "number.kitchen_5_on_off_transition_time");
    ///<summary>kitchen 5 Start-up current level</summary>
    public NumberEntity Kitchen5StartUpCurrentLevel => new(_haContext, "number.kitchen_5_start_up_current_level");
    ///<summary>kitchen 6 On level</summary>
    public NumberEntity Kitchen6OnLevel => new(_haContext, "number.kitchen_6_on_level");
    ///<summary>kitchen 6 On/Off transition time</summary>
    public NumberEntity Kitchen6OnOffTransitionTime => new(_haContext, "number.kitchen_6_on_off_transition_time");
    ///<summary>kitchen 6 Start-up current level</summary>
    public NumberEntity Kitchen6StartUpCurrentLevel => new(_haContext, "number.kitchen_6_start_up_current_level");
    ///<summary>landing 1 On level</summary>
    public NumberEntity Landing1OnLevel => new(_haContext, "number.landing_1_on_level");
    ///<summary>landing 1 On/Off transition time</summary>
    public NumberEntity Landing1OnOffTransitionTime => new(_haContext, "number.landing_1_on_off_transition_time");
    ///<summary>landing 1 Start-up current level</summary>
    public NumberEntity Landing1StartUpCurrentLevel => new(_haContext, "number.landing_1_start_up_current_level");
    ///<summary>landing 2 On level</summary>
    public NumberEntity Landing2OnLevel => new(_haContext, "number.landing_2_on_level");
    ///<summary>landing 2 On/Off transition time</summary>
    public NumberEntity Landing2OnOffTransitionTime => new(_haContext, "number.landing_2_on_off_transition_time");
    ///<summary>landing 2 Start-up current level</summary>
    public NumberEntity Landing2StartUpCurrentLevel => new(_haContext, "number.landing_2_start_up_current_level");
    ///<summary>Lounge Audio delay</summary>
    public NumberEntity LoungeAudioDelay => new(_haContext, "number.lounge_audio_delay");
    ///<summary>lounge back On level</summary>
    public NumberEntity LoungeBackOnLevel => new(_haContext, "number.lounge_back_on_level");
    ///<summary>lounge back On/Off transition time</summary>
    public NumberEntity LoungeBackOnOffTransitionTime => new(_haContext, "number.lounge_back_on_off_transition_time");
    ///<summary>lounge back Start-up color temperature</summary>
    public NumberEntity LoungeBackStartUpColorTemperature => new(_haContext, "number.lounge_back_start_up_color_temperature");
    ///<summary>lounge back Start-up current level</summary>
    public NumberEntity LoungeBackStartUpCurrentLevel => new(_haContext, "number.lounge_back_start_up_current_level");
    ///<summary>Lounge Balance</summary>
    public NumberEntity LoungeBalance => new(_haContext, "number.lounge_balance");
    ///<summary>Lounge Bass</summary>
    public NumberEntity LoungeBass => new(_haContext, "number.lounge_bass");
    ///<summary>lounge front On level</summary>
    public NumberEntity LoungeFrontOnLevel => new(_haContext, "number.lounge_front_on_level");
    ///<summary>lounge front On/Off transition time</summary>
    public NumberEntity LoungeFrontOnOffTransitionTime => new(_haContext, "number.lounge_front_on_off_transition_time");
    ///<summary>lounge front Start-up color temperature</summary>
    public NumberEntity LoungeFrontStartUpColorTemperature => new(_haContext, "number.lounge_front_start_up_color_temperature");
    ///<summary>lounge front Start-up current level</summary>
    public NumberEntity LoungeFrontStartUpCurrentLevel => new(_haContext, "number.lounge_front_start_up_current_level");
    ///<summary>Lounge Music surround level</summary>
    public NumberEntity LoungeMusicSurroundLevel => new(_haContext, "number.lounge_music_surround_level");
    ///<summary>Lounge Surround level</summary>
    public NumberEntity LoungeSurroundLevel => new(_haContext, "number.lounge_surround_level");
    ///<summary>Lounge Treble</summary>
    public NumberEntity LoungeTreble => new(_haContext, "number.lounge_treble");
    ///<summary>master 1 On level</summary>
    public NumberEntity Master1OnLevel => new(_haContext, "number.master_1_on_level");
    ///<summary>master 1 On/Off transition time</summary>
    public NumberEntity Master1OnOffTransitionTime => new(_haContext, "number.master_1_on_off_transition_time");
    ///<summary>master 1 Start-up color temperature</summary>
    public NumberEntity Master1StartUpColorTemperature => new(_haContext, "number.master_1_start_up_color_temperature");
    ///<summary>master 1 Start-up current level</summary>
    public NumberEntity Master1StartUpCurrentLevel => new(_haContext, "number.master_1_start_up_current_level");
    ///<summary>Master 2 On level</summary>
    public NumberEntity Master2OnLevel => new(_haContext, "number.master_2_on_level");
    ///<summary>Master 2 On/Off transition time</summary>
    public NumberEntity Master2OnOffTransitionTime => new(_haContext, "number.master_2_on_off_transition_time");
    ///<summary>Master 2 Start-up color temperature</summary>
    public NumberEntity Master2StartUpColorTemperature => new(_haContext, "number.master_2_start_up_color_temperature");
    ///<summary>Master 2 Start-up current level</summary>
    public NumberEntity Master2StartUpCurrentLevel => new(_haContext, "number.master_2_start_up_current_level");
    ///<summary>master 3 On level</summary>
    public NumberEntity Master3OnLevel => new(_haContext, "number.master_3_on_level");
    ///<summary>master 3 On/Off transition time</summary>
    public NumberEntity Master3OnOffTransitionTime => new(_haContext, "number.master_3_on_off_transition_time");
    ///<summary>master 3 Start-up color temperature</summary>
    public NumberEntity Master3StartUpColorTemperature => new(_haContext, "number.master_3_start_up_color_temperature");
    ///<summary>master 3 Start-up current level</summary>
    public NumberEntity Master3StartUpCurrentLevel => new(_haContext, "number.master_3_start_up_current_level");
    ///<summary>master 4 On level</summary>
    public NumberEntity Master4OnLevel => new(_haContext, "number.master_4_on_level");
    ///<summary>master 4 On/Off transition time</summary>
    public NumberEntity Master4OnOffTransitionTime => new(_haContext, "number.master_4_on_off_transition_time");
    ///<summary>master 4 Start-up color temperature</summary>
    public NumberEntity Master4StartUpColorTemperature => new(_haContext, "number.master_4_start_up_color_temperature");
    ///<summary>master 4 Start-up current level</summary>
    public NumberEntity Master4StartUpCurrentLevel => new(_haContext, "number.master_4_start_up_current_level");
    ///<summary>Master Nightlight On level</summary>
    public NumberEntity MasterNightlightOnLevel => new(_haContext, "number.master_nightlight_on_level");
    ///<summary>Master Nightlight On/Off transition time</summary>
    public NumberEntity MasterNightlightOnOffTransitionTime => new(_haContext, "number.master_nightlight_on_off_transition_time");
    ///<summary>Master Nightlight Start-up color temperature</summary>
    public NumberEntity MasterNightlightStartUpColorTemperature => new(_haContext, "number.master_nightlight_start_up_color_temperature");
    ///<summary>Master Nightlight Start-up current level</summary>
    public NumberEntity MasterNightlightStartUpCurrentLevel => new(_haContext, "number.master_nightlight_start_up_current_level");
    ///<summary>Niemand Drive Snapshot Interval</summary>
    public NumberEntity NiemandDriveSnapshotInterval => new(_haContext, "number.niemand_drive_snapshot_interval");
    ///<summary>Niemand Front Door Snapshot Interval</summary>
    public NumberEntity NiemandFrontDoorSnapshotInterval => new(_haContext, "number.niemand_front_door_snapshot_interval");
    ///<summary>Niemand Garage Snapshot Interval</summary>
    public NumberEntity NiemandGarageSnapshotInterval => new(_haContext, "number.niemand_garage_snapshot_interval");
    ///<summary>Niemand Garden Snapshot Interval</summary>
    public NumberEntity NiemandGardenSnapshotInterval => new(_haContext, "number.niemand_garden_snapshot_interval");
    ///<summary>Niemand Side Snapshot Interval</summary>
    public NumberEntity NiemandSideSnapshotInterval => new(_haContext, "number.niemand_side_snapshot_interval");
    ///<summary>office 1 On level</summary>
    public NumberEntity Office1OnLevel => new(_haContext, "number.office_1_on_level");
    ///<summary>office 1 On/Off transition time</summary>
    public NumberEntity Office1OnOffTransitionTime => new(_haContext, "number.office_1_on_off_transition_time");
    ///<summary>office 1 Start-up color temperature</summary>
    public NumberEntity Office1StartUpColorTemperature => new(_haContext, "number.office_1_start_up_color_temperature");
    ///<summary>office 1 Start-up current level</summary>
    public NumberEntity Office1StartUpCurrentLevel => new(_haContext, "number.office_1_start_up_current_level");
    ///<summary>office 3 On level</summary>
    public NumberEntity Office3OnLevel => new(_haContext, "number.office_3_on_level");
    ///<summary>office 3 On/Off transition time</summary>
    public NumberEntity Office3OnOffTransitionTime => new(_haContext, "number.office_3_on_off_transition_time");
    ///<summary>office 3 Start-up color temperature</summary>
    public NumberEntity Office3StartUpColorTemperature => new(_haContext, "number.office_3_start_up_color_temperature");
    ///<summary>office 3 Start-up current level</summary>
    public NumberEntity Office3StartUpCurrentLevel => new(_haContext, "number.office_3_start_up_current_level");
    ///<summary>playroom On level</summary>
    public NumberEntity PlayroomOnLevel => new(_haContext, "number.playroom_on_level");
    ///<summary>playroom On/Off transition time</summary>
    public NumberEntity PlayroomOnOffTransitionTime => new(_haContext, "number.playroom_on_off_transition_time");
    ///<summary>playroom Start-up color temperature</summary>
    public NumberEntity PlayroomStartUpColorTemperature => new(_haContext, "number.playroom_start_up_color_temperature");
    ///<summary>playroom Start-up current level</summary>
    public NumberEntity PlayroomStartUpCurrentLevel => new(_haContext, "number.playroom_start_up_current_level");
    ///<summary>Ring Chime Snooze Minutes</summary>
    public NumberEntity RingChimeSnoozeMinutes => new(_haContext, "number.ring_chime_snooze_minutes");
    ///<summary>Ring Chime Volume</summary>
    public NumberEntity RingChimeVolume => new(_haContext, "number.ring_chime_volume");
    ///<summary>Hot Tub Target Temperature</summary>
    public NumberEntity TargetTemperature => new(_haContext, "number.target_temperature");
    ///<summary>toilet On level</summary>
    public NumberEntity ToiletOnLevel => new(_haContext, "number.toilet_on_level");
    ///<summary>toilet On/Off transition time</summary>
    public NumberEntity ToiletOnOffTransitionTime => new(_haContext, "number.toilet_on_off_transition_time");
    ///<summary>toilet Start-up current level</summary>
    public NumberEntity ToiletStartUpCurrentLevel => new(_haContext, "number.toilet_start_up_current_level");
    ///<summary>utility 1 On level</summary>
    public NumberEntity Utility1OnLevel => new(_haContext, "number.utility_1_on_level");
    ///<summary>utility 1 On/Off transition time</summary>
    public NumberEntity Utility1OnOffTransitionTime => new(_haContext, "number.utility_1_on_off_transition_time");
    ///<summary>utility 1 Start-up current level</summary>
    public NumberEntity Utility1StartUpCurrentLevel => new(_haContext, "number.utility_1_start_up_current_level");
    ///<summary>utility 2 On level</summary>
    public NumberEntity Utility2OnLevel => new(_haContext, "number.utility_2_on_level");
    ///<summary>utility 2 On/Off transition time</summary>
    public NumberEntity Utility2OnOffTransitionTime => new(_haContext, "number.utility_2_on_off_transition_time");
    ///<summary>utility 2 Start-up current level</summary>
    public NumberEntity Utility2StartUpCurrentLevel => new(_haContext, "number.utility_2_start_up_current_level");
    ///<summary>utility 3 On level</summary>
    public NumberEntity Utility3OnLevel => new(_haContext, "number.utility_3_on_level");
    ///<summary>utility 3 On/Off transition time</summary>
    public NumberEntity Utility3OnOffTransitionTime => new(_haContext, "number.utility_3_on_off_transition_time");
    ///<summary>utility 3 Start-up current level</summary>
    public NumberEntity Utility3StartUpCurrentLevel => new(_haContext, "number.utility_3_start_up_current_level");
    ///<summary>Wiser Away Mode Target Temperature</summary>
    public NumberEntity WiserAwayModeTargetTemperature => new(_haContext, "number.wiser_away_mode_target_temperature");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aubrecia</summary>
    public PersonEntity Aubrecia => new(_haContext, "person.aubrecia");
    ///<summary>Eugene</summary>
    public PersonEntity Eugene => new(_haContext, "person.eugene");
    ///<summary>Hailey</summary>
    public PersonEntity Hailey => new(_haContext, "person.hailey");
    ///<summary>Jayden</summary>
    public PersonEntity Jayden => new(_haContext, "person.jayden");
    ///<summary>NetDaemon</summary>
    public PersonEntity Netdaemon => new(_haContext, "person.netdaemon");
}

public partial class ProximityEntities
{
    private readonly IHaContext _haContext;
    public ProximityEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>home</summary>
    public ProximityEntity Home => new(_haContext, "proximity.home");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aaron ATV</summary>
    public RemoteEntity AaronAtv => new(_haContext, "remote.aaron_atv");
    ///<summary>Xbox Remote</summary>
    public RemoteEntity XboxRemote => new(_haContext, "remote.xbox_remote");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cool house</summary>
    public SceneEntity CoolHouse => new(_haContext, "scene.cool_house");
    ///<summary>Night mode scene</summary>
    public SceneEntity NewScene => new(_haContext, "scene.new_scene");
    ///<summary>Day mode scene</summary>
    public SceneEntity NewScene2 => new(_haContext, "scene.new_scene_2");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>activate_alexa_actionable_notification</summary>
    public ScriptEntity ActivateAlexaActionableNotification => new(_haContext, "script.activate_alexa_actionable_notification");
    ///<summary>arrive_home</summary>
    public ScriptEntity ArriveHome => new(_haContext, "script.arrive_home");
    ///<summary>im_text</summary>
    public ScriptEntity ImText => new(_haContext, "script.im_text");
    ///<summary>Play YouTube on LG</summary>
    public ScriptEntity PlayYoutubeOnLg => new(_haContext, "script.play_youtube_on_lg");
    ///<summary>Set Ring Mqtt Snapshot Interval</summary>
    public ScriptEntity RingMqttInterval => new(_haContext, "script.ring_mqtt_interval");
    ///<summary>Play YouTube on LG</summary>
    public ScriptEntity SkyLive => new(_haContext, "script.sky_live");
    ///<summary>tts</summary>
    public ScriptEntity Tts => new(_haContext, "script.tts");
    ///<summary>tts_text</summary>
    public ScriptEntity TtsText => new(_haContext, "script.tts_text");
    ///<summary>turn_on_lg_tele</summary>
    public ScriptEntity TurnOnLgTele => new(_haContext, "script.turn_on_lg_tele");
    ///<summary>turn_on_lg_tele_lounge</summary>
    public ScriptEntity TurnOnLgTeleLounge => new(_haContext, "script.turn_on_lg_tele_lounge");
    ///<summary>turn_on_lg_tele_master</summary>
    public ScriptEntity TurnOnLgTeleMaster => new(_haContext, "script.turn_on_lg_tele_master");
    ///<summary>weather</summary>
    public ScriptEntity Weather => new(_haContext, "script.weather");
    ///<summary>Yule Log</summary>
    public ScriptEntity Yule => new(_haContext, "script.yule");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Fish Lights Start-up behavior</summary>
    public SelectEntity FishLightsStartUpBehavior => new(_haContext, "select.fish_lights_start_up_behavior");
    ///<summary>dining wall 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WOpal1000lm9919fcfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_w_opal_1000lm_9919fcfe_on_off_startuponoff");
    ///<summary>dining wall 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WOpal1000lmB4b1f3feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_w_opal_1000lm_b4b1f3fe_on_off_startuponoff");
    ///<summary>lounge front Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lm7aba12feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_7aba12fe_on_off_startuponoff");
    ///<summary>Floor Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lm9f6c01feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_9f6c01fe_on_off_startuponoff");
    ///<summary>playroom Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lmB87713feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_b87713fe_on_off_startuponoff");
    ///<summary>lounge back Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbE27WsOpal1000lmC8a903feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_e27_ws_opal_1000lm_c8a903fe_on_off_startuponoff");
    ///<summary>office 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm062b4bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_062b4bfe_on_off_startuponoff");
    ///<summary>Master Nightlight Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm145c4bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_145c4bfe_on_off_startuponoff");
    ///<summary>Aaron 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm1e5368feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_1e5368fe_on_off_startuponoff");
    ///<summary>master 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm21daf6feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_21daf6fe_on_off_startuponoff");
    ///<summary>office 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm235a5dfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_235a5dfe_on_off_startuponoff");
    ///<summary>dining 4 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm26f462feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_26f462fe_on_off_startuponoff");
    ///<summary>dining 5 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm31244bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_31244bfe_on_off_startuponoff");
    ///<summary>Aaron 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm341922feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_341922fe_on_off_startuponoff");
    ///<summary>dining 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm502e4cfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_502e4cfe_on_off_startuponoff");
    ///<summary>Master 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm5c78f6feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_5c78f6fe_on_off_startuponoff");
    ///<summary>master 4 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm5ec17bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_5ec17bfe_on_off_startuponoff");
    ///<summary>Aaron 4 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm8bb43dfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_8bb43dfe_on_off_startuponoff");
    ///<summary>master 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lm937af8feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_937af8fe_on_off_startuponoff");
    ///<summary>dining 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lmBb0a4cfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_bb0a4cfe_on_off_startuponoff");
    ///<summary>Aaron 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lmCdee3efeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_cdee3efe_on_off_startuponoff");
    ///<summary>dining 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ws400lmF8ea62feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ws_400lm_f8ea62fe_on_off_startuponoff");
    ///<summary>kitchen 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm00caeefeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_00caeefe_on_off_startuponoff");
    ///<summary>Jayden 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm0fc075feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_0fc075fe_on_off_startuponoff");
    ///<summary>Jayden 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm105c5dfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_105c5dfe_on_off_startuponoff");
    ///<summary>kitchen 6 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm22331afeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_22331afe_on_off_startuponoff");
    ///<summary>Jayden 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm2d9a33feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_2d9a33fe_on_off_startuponoff");
    ///<summary>toilet Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm32d2bdfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_32d2bdfe_on_off_startuponoff");
    ///<summary>entrance Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm436af0feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_436af0fe_on_off_startuponoff");
    ///<summary>landing 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm50c275feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_50c275fe_on_off_startuponoff");
    ///<summary>utility 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm680f1cfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_680f1cfe_on_off_startuponoff");
    ///<summary>utility 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm7d61cbfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_7d61cbfe_on_off_startuponoff");
    ///<summary>landing 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm85b375feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_85b375fe_on_off_startuponoff");
    ///<summary>hallway Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lm8ba6b5feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_8ba6b5fe_on_off_startuponoff");
    ///<summary>Jayden 4 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmB0683bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_b0683bfe_on_off_startuponoff");
    ///<summary>kitchen 1 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmB86ff0feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_b86ff0fe_on_off_startuponoff");
    ///<summary>utility 3 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmCf4febfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_cf4febfe_on_off_startuponoff");
    ///<summary>kitchen 5 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmD4fdf0feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_d4fdf0fe_on_off_startuponoff");
    ///<summary>kitchen 4 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmF58cf0feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_f58cf0fe_on_off_startuponoff");
    ///<summary>kitchen 2 Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfriBulbGu10Ww400lmFd78f0feOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfri_bulb_gu10_ww_400lm_fd78f0fe_on_off_startuponoff");
    ///<summary>Aaron Main Start-up behavior</summary>
    public SelectEntity IkeaOfSwedenTradfribulbg125e27wsopal470lm9b7e6bfeOnOffStartuponoff => new(_haContext, "select.ikea_of_sweden_tradfribulbg125e27wsopal470lm_9b7e6bfe_on_off_startuponoff");
    ///<summary>Niemand Drive Event Select</summary>
    public SelectEntity NiemandDriveEventSelect => new(_haContext, "select.niemand_drive_event_select");
    ///<summary>Niemand Front Door Event Select</summary>
    public SelectEntity NiemandFrontDoorEventSelect => new(_haContext, "select.niemand_front_door_event_select");
    ///<summary>Niemand Garage Event Select</summary>
    public SelectEntity NiemandGarageEventSelect => new(_haContext, "select.niemand_garage_event_select");
    ///<summary>Niemand Garden Event Select</summary>
    public SelectEntity NiemandGardenEventSelect => new(_haContext, "select.niemand_garden_event_select");
    ///<summary>Niemand Side Event Select</summary>
    public SelectEntity NiemandSideEventSelect => new(_haContext, "select.niemand_side_event_select");
    ///<summary>Wiser Hot Water Mode</summary>
    public SelectEntity WiserHotWaterMode => new(_haContext, "select.wiser_hot_water_mode");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>247D4D7D6C90-mysimplelink Uptime</summary>
    public SensorEntity _247d4d7d6c90MysimplelinkUptime => new(_haContext, "sensor.247d4d7d6c90_mysimplelink_uptime");
    ///<summary>Aaron Echo Uptime</summary>
    public SensorEntity AaronEchoUptime => new(_haContext, "sensor.aaron_echo_uptime");
    ///<summary>Playroom next Alarm</summary>
    public SensorEntity AaronNextAlarm => new(_haContext, "sensor.aaron_next_alarm");
    ///<summary>Playroom next Reminder</summary>
    public SensorEntity AaronNextReminder => new(_haContext, "sensor.aaron_next_reminder");
    ///<summary>Playroom next Timer</summary>
    public SensorEntity AaronNextTimer => new(_haContext, "sensor.aaron_next_timer");
    ///<summary>AccuWeather Home Air quality 0d</summary>
    public SensorEntity AccuweatherHomeAirQuality0d => new(_haContext, "sensor.accuweather_home_air_quality_0d");
    ///<summary>AccuWeather Home Air quality 1d</summary>
    public SensorEntity AccuweatherHomeAirQuality1d => new(_haContext, "sensor.accuweather_home_air_quality_1d");
    ///<summary>AccuWeather Home Air quality 2d</summary>
    public SensorEntity AccuweatherHomeAirQuality2d => new(_haContext, "sensor.accuweather_home_air_quality_2d");
    ///<summary>AccuWeather Home Air quality 3d</summary>
    public SensorEntity AccuweatherHomeAirQuality3d => new(_haContext, "sensor.accuweather_home_air_quality_3d");
    ///<summary>AccuWeather Home Air quality 4d</summary>
    public SensorEntity AccuweatherHomeAirQuality4d => new(_haContext, "sensor.accuweather_home_air_quality_4d");
    ///<summary>AccuWeather Home Condition day 0d</summary>
    public SensorEntity AccuweatherHomeConditionDay0d => new(_haContext, "sensor.accuweather_home_condition_day_0d");
    ///<summary>AccuWeather Home Condition day 1d</summary>
    public SensorEntity AccuweatherHomeConditionDay1d => new(_haContext, "sensor.accuweather_home_condition_day_1d");
    ///<summary>AccuWeather Home Condition day 2d</summary>
    public SensorEntity AccuweatherHomeConditionDay2d => new(_haContext, "sensor.accuweather_home_condition_day_2d");
    ///<summary>AccuWeather Home Condition day 3d</summary>
    public SensorEntity AccuweatherHomeConditionDay3d => new(_haContext, "sensor.accuweather_home_condition_day_3d");
    ///<summary>AccuWeather Home Condition day 4d</summary>
    public SensorEntity AccuweatherHomeConditionDay4d => new(_haContext, "sensor.accuweather_home_condition_day_4d");
    ///<summary>AccuWeather Home Condition night 0d</summary>
    public SensorEntity AccuweatherHomeConditionNight0d => new(_haContext, "sensor.accuweather_home_condition_night_0d");
    ///<summary>AccuWeather Home Condition night 1d</summary>
    public SensorEntity AccuweatherHomeConditionNight1d => new(_haContext, "sensor.accuweather_home_condition_night_1d");
    ///<summary>AccuWeather Home Condition night 2d</summary>
    public SensorEntity AccuweatherHomeConditionNight2d => new(_haContext, "sensor.accuweather_home_condition_night_2d");
    ///<summary>AccuWeather Home Condition night 3d</summary>
    public SensorEntity AccuweatherHomeConditionNight3d => new(_haContext, "sensor.accuweather_home_condition_night_3d");
    ///<summary>AccuWeather Home Condition night 4d</summary>
    public SensorEntity AccuweatherHomeConditionNight4d => new(_haContext, "sensor.accuweather_home_condition_night_4d");
    ///<summary>AccuWeather Home Pressure tendency</summary>
    public SensorEntity AccuweatherHomePressureTendency => new(_haContext, "sensor.accuweather_home_pressure_tendency");
    ///<summary>Alexa Actionable Notification Prompt</summary>
    public SensorEntity AlexaActionableNotificationPrompt => new(_haContext, "sensor.alexa_actionable_notification_prompt");
    public SensorEntity AllRatesNew => new(_haContext, "sensor.all_rates_new");
    ///<summary>android-b8c33f1cb7c0d776 Uptime</summary>
    public SensorEntity AndroidB8c33f1cb7c0d776Uptime => new(_haContext, "sensor.android_b8c33f1cb7c0d776_uptime");
    ///<summary>ASGLH-WL-19140 Uptime</summary>
    public SensorEntity AsglhWl19140Uptime => new(_haContext, "sensor.asglh_wl_19140_uptime");
    ///<summary>Aubrecia Activity</summary>
    public SensorEntity AubreciaActivity => new(_haContext, "sensor.aubrecia_activity");
    ///<summary>Aubrecia Battery State</summary>
    public SensorEntity AubreciaBatteryState => new(_haContext, "sensor.aubrecia_battery_state");
    ///<summary>Aubrecia BSSID</summary>
    public SensorEntity AubreciaBssid => new(_haContext, "sensor.aubrecia_bssid");
    ///<summary>Aubrecia Connection Type</summary>
    public SensorEntity AubreciaConnectionType => new(_haContext, "sensor.aubrecia_connection_type");
    ///<summary>Aubrecia Drive Last Activity</summary>
    public SensorEntity AubreciaDriveLastActivity => new(_haContext, "sensor.aubrecia_drive_last_activity");
    ///<summary>Aubrecia Drive Last Motion</summary>
    public SensorEntity AubreciaDriveLastMotion => new(_haContext, "sensor.aubrecia_drive_last_motion");
    ///<summary>Aubrecia Drive Volume</summary>
    public SensorEntity AubreciaDriveVolume => new(_haContext, "sensor.aubrecia_drive_volume");
    ///<summary>Aubrecia Front Door Last Activity</summary>
    public SensorEntity AubreciaFrontDoorLastActivity => new(_haContext, "sensor.aubrecia_front_door_last_activity");
    ///<summary>Aubrecia Front Door Last Activity</summary>
    public SensorEntity AubreciaFrontDoorLastActivity2 => new(_haContext, "sensor.aubrecia_front_door_last_activity_2");
    ///<summary>Aubrecia Front Door Last Ding</summary>
    public SensorEntity AubreciaFrontDoorLastDing => new(_haContext, "sensor.aubrecia_front_door_last_ding");
    ///<summary>Aubrecia Front Door Last Ding</summary>
    public SensorEntity AubreciaFrontDoorLastDing2 => new(_haContext, "sensor.aubrecia_front_door_last_ding_2");
    ///<summary>Aubrecia Front Door Last Motion</summary>
    public SensorEntity AubreciaFrontDoorLastMotion => new(_haContext, "sensor.aubrecia_front_door_last_motion");
    ///<summary>Aubrecia Front Door Last Motion</summary>
    public SensorEntity AubreciaFrontDoorLastMotion2 => new(_haContext, "sensor.aubrecia_front_door_last_motion_2");
    ///<summary>Aubrecia Front Door Volume</summary>
    public SensorEntity AubreciaFrontDoorVolume => new(_haContext, "sensor.aubrecia_front_door_volume");
    ///<summary>Aubrecia Front Door Volume</summary>
    public SensorEntity AubreciaFrontDoorVolume2 => new(_haContext, "sensor.aubrecia_front_door_volume_2");
    ///<summary>Aubrecia Geocoded Location</summary>
    public SensorEntity AubreciaGeocodedLocation => new(_haContext, "sensor.aubrecia_geocoded_location");
    ///<summary>Aubrecia Last Update Trigger</summary>
    public SensorEntity AubreciaLastUpdateTrigger => new(_haContext, "sensor.aubrecia_last_update_trigger");
    ///<summary>Aubrecia SIM 1</summary>
    public SensorEntity AubreciaSim1 => new(_haContext, "sensor.aubrecia_sim_1");
    ///<summary>Aubrecia SIM 2</summary>
    public SensorEntity AubreciaSim2 => new(_haContext, "sensor.aubrecia_sim_2");
    ///<summary>Aubrecia SSID</summary>
    public SensorEntity AubreciaSsid => new(_haContext, "sensor.aubrecia_ssid");
    ///<summary>AubreciasiPhone Uptime</summary>
    public SensorEntity AubreciasiphoneUptime => new(_haContext, "sensor.aubreciasiphone_uptime");
    ///<summary>Bedroom 1 Uptime</summary>
    public SensorEntity Bedroom1AcUptime => new(_haContext, "sensor.bedroom_1_ac_uptime");
    ///<summary>Bedroom 2 Uptime</summary>
    public SensorEntity Bedroom2AcUptime => new(_haContext, "sensor.bedroom_2_ac_uptime");
    ///<summary>Bedroom 3 Uptime</summary>
    public SensorEntity Bedroom3AcUptime => new(_haContext, "sensor.bedroom_3_ac_uptime");
    ///<summary>Bedroom 4 Uptime</summary>
    public SensorEntity Bedroom4AcUptime => new(_haContext, "sensor.bedroom_4_ac_uptime");
    ///<summary>bosch-dishwasher-01204052703001 RX Uptime</summary>
    public SensorEntity BoschDishwasher01204052703001Uptime => new(_haContext, "sensor.bosch_dishwasher_01204052703001_uptime");
    ///<summary>C02T8GTYGVC1 RX Uptime</summary>
    public SensorEntity C02t8gtygvc1Uptime => new(_haContext, "sensor.c02t8gtygvc1_uptime");
    ///<summary>christmas_indoor-1558 Uptime</summary>
    public SensorEntity ChristmasIndoor1558Uptime => new(_haContext, "sensor.christmas_indoor_1558_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity DesktopIpurn8tUptime => new(_haContext, "sensor.desktop_ipurn8t_uptime");
    ///<summary>Dining Echo Uptime</summary>
    public SensorEntity DiningEchoUptime => new(_haContext, "sensor.dining_echo_uptime");
    ///<summary>Dining Uptime</summary>
    public SensorEntity DiningUptime => new(_haContext, "sensor.dining_uptime");
    ///<summary>Dishwasher Operation State</summary>
    public SensorEntity DishwasherOperationState => new(_haContext, "sensor.dishwasher_operation_state");
    ///<summary>Dishwasher Remaining Program Time</summary>
    public SensorEntity DishwasherRemainingProgramTime => new(_haContext, "sensor.dishwasher_remaining_program_time");
    ///<summary>Downstairs Info</summary>
    public SensorEntity DownstairsInfo => new(_haContext, "sensor.downstairs_info");
    ///<summary>Downstairs Volume</summary>
    public SensorEntity DownstairsVolume => new(_haContext, "sensor.downstairs_volume");
    ///<summary>dryer Uptime</summary>
    public SensorEntity DryerUptime => new(_haContext, "sensor.dryer_uptime");
    ///<summary>Electric Consumption (Year)</summary>
    public SensorEntity ElectricConsumptionYear => new(_haContext, "sensor.electric_consumption_year");
    ///<summary>Entrance Uptime</summary>
    public SensorEntity EntranceUptime => new(_haContext, "sensor.entrance_uptime");
    ///<summary>ESP_5E9EB5 RX Uptime</summary>
    public SensorEntity Esp5e9eb5Uptime => new(_haContext, "sensor.esp_5e9eb5_uptime");
    ///<summary>ESP_6B7081 Uptime</summary>
    public SensorEntity Esp6b7081Uptime => new(_haContext, "sensor.esp_6b7081_uptime");
    ///<summary>ESP_6B7A3A Uptime</summary>
    public SensorEntity Esp6b7a3aUptime => new(_haContext, "sensor.esp_6b7a3a_uptime");
    ///<summary>eufy RoboVac Uptime</summary>
    public SensorEntity EufyRobovacUptime => new(_haContext, "sensor.eufy_robovac_uptime");
    ///<summary>eufy RoboVac Uptime</summary>
    public SensorEntity EufyRobovacUptime2 => new(_haContext, "sensor.eufy_robovac_uptime_2");
    ///<summary>EUGENE_DESKTOP_lastactive</summary>
    public SensorEntity EugeneDesktopLastactive => new(_haContext, "sensor.eugene_desktop_lastactive");
    ///<summary>EUGENE_DESKTOP_lastsystemstatechange</summary>
    public SensorEntity EugeneDesktopLastsystemstatechange => new(_haContext, "sensor.eugene_desktop_lastsystemstatechange");
    ///<summary>EUGENE_DESKTOP_microphoneprocess</summary>
    public SensorEntity EugeneDesktopMicrophoneprocess => new(_haContext, "sensor.eugene_desktop_microphoneprocess");
    ///<summary>EUGENE-DESKTOP Uptime</summary>
    public SensorEntity EugeneDesktopUptime => new(_haContext, "sensor.eugene_desktop_uptime");
    ///<summary>Garden next Alarm</summary>
    public SensorEntity EugeneS2ndEchoDotNextAlarm => new(_haContext, "sensor.eugene_s_2nd_echo_dot_next_alarm");
    ///<summary>Garden next Reminder</summary>
    public SensorEntity EugeneS2ndEchoDotNextReminder => new(_haContext, "sensor.eugene_s_2nd_echo_dot_next_reminder");
    ///<summary>Garden next Timer</summary>
    public SensorEntity EugeneS2ndEchoDotNextTimer => new(_haContext, "sensor.eugene_s_2nd_echo_dot_next_timer");
    ///<summary>Eugene&apos;s iPhone Activity</summary>
    public SensorEntity EugeneSIphoneActivity => new(_haContext, "sensor.eugene_s_iphone_activity");
    ///<summary>Eugene&apos;s iPhone Battery State</summary>
    public SensorEntity EugeneSIphoneBatteryState => new(_haContext, "sensor.eugene_s_iphone_battery_state");
    ///<summary>Eugene&apos;s iPhone BSSID</summary>
    public SensorEntity EugeneSIphoneBssid => new(_haContext, "sensor.eugene_s_iphone_bssid");
    ///<summary>Eugene&apos;s iPhone Connection Type</summary>
    public SensorEntity EugeneSIphoneConnectionType => new(_haContext, "sensor.eugene_s_iphone_connection_type");
    ///<summary>Eugene&apos;s iPhone Geocoded Location</summary>
    public SensorEntity EugeneSIphoneGeocodedLocation => new(_haContext, "sensor.eugene_s_iphone_geocoded_location");
    ///<summary>Eugene&apos;s iPhone Last Update Trigger</summary>
    public SensorEntity EugeneSIphoneLastUpdateTrigger => new(_haContext, "sensor.eugene_s_iphone_last_update_trigger");
    ///<summary>Eugene&apos;s iPhone SIM 1</summary>
    public SensorEntity EugeneSIphoneSim1 => new(_haContext, "sensor.eugene_s_iphone_sim_1");
    ///<summary>Eugene&apos;s iPhone SIM 2</summary>
    public SensorEntity EugeneSIphoneSim2 => new(_haContext, "sensor.eugene_s_iphone_sim_2");
    ///<summary>Eugene&apos;s iPhone SSID</summary>
    public SensorEntity EugeneSIphoneSsid => new(_haContext, "sensor.eugene_s_iphone_ssid");
    ///<summary>Lounge LG Alexa next Alarm</summary>
    public SensorEntity EugeneSLgOledWebos2021TvNextAlarm => new(_haContext, "sensor.eugene_s_lg_oled_webos_2021_tv_next_alarm");
    ///<summary>Lounge LG Alexa next Reminder</summary>
    public SensorEntity EugeneSLgOledWebos2021TvNextReminder => new(_haContext, "sensor.eugene_s_lg_oled_webos_2021_tv_next_reminder");
    ///<summary>Lounge LG Alexa next Timer</summary>
    public SensorEntity EugeneSLgOledWebos2021TvNextTimer => new(_haContext, "sensor.eugene_s_lg_oled_webos_2021_tv_next_timer");
    ///<summary>Master LG Alexa next Alarm</summary>
    public SensorEntity EugeneSLgWebos2020TvNextAlarm => new(_haContext, "sensor.eugene_s_lg_webos_2020_tv_next_alarm");
    ///<summary>Master LG Alexa next Reminder</summary>
    public SensorEntity EugeneSLgWebos2020TvNextReminder => new(_haContext, "sensor.eugene_s_lg_webos_2020_tv_next_reminder");
    ///<summary>Master LG Alexa next Timer</summary>
    public SensorEntity EugeneSLgWebos2020TvNextTimer => new(_haContext, "sensor.eugene_s_lg_webos_2020_tv_next_timer");
    ///<summary>Lounge next Alarm</summary>
    public SensorEntity EugeneSSonosArcNextAlarm => new(_haContext, "sensor.eugene_s_sonos_arc_next_alarm");
    ///<summary>Lounge next Reminder</summary>
    public SensorEntity EugeneSSonosArcNextReminder => new(_haContext, "sensor.eugene_s_sonos_arc_next_reminder");
    ///<summary>Lounge next Timer</summary>
    public SensorEntity EugeneSSonosArcNextTimer => new(_haContext, "sensor.eugene_s_sonos_arc_next_timer");
    ///<summary>Eugenes-iPhone Uptime</summary>
    public SensorEntity EugenesIphoneUptime => new(_haContext, "sensor.eugenes_iphone_uptime");
    ///<summary>Eugene&apos;s MacBook Active Audio Input</summary>
    public SensorEntity EugenesMacbookActiveAudioInput => new(_haContext, "sensor.eugenes_macbook_active_audio_input");
    ///<summary>Eugene&apos;s MacBook Active Audio Output</summary>
    public SensorEntity EugenesMacbookActiveAudioOutput => new(_haContext, "sensor.eugenes_macbook_active_audio_output");
    ///<summary>Eugene&apos;s MacBook Active Camera</summary>
    public SensorEntity EugenesMacbookActiveCamera => new(_haContext, "sensor.eugenes_macbook_active_camera");
    ///<summary>Eugene&apos;s MacBook BSSID</summary>
    public SensorEntity EugenesMacbookBssid => new(_haContext, "sensor.eugenes_macbook_bssid");
    ///<summary>Eugene&apos;s MacBook Connection Type</summary>
    public SensorEntity EugenesMacbookConnectionType => new(_haContext, "sensor.eugenes_macbook_connection_type");
    ///<summary>Eugene&apos;s MacBook Displays</summary>
    public SensorEntity EugenesMacbookDisplays => new(_haContext, "sensor.eugenes_macbook_displays");
    ///<summary>Eugene&apos;s MacBook Frontmost App</summary>
    public SensorEntity EugenesMacbookFrontmostApp => new(_haContext, "sensor.eugenes_macbook_frontmost_app");
    ///<summary>Eugene&apos;s MacBook Geocoded Location</summary>
    public SensorEntity EugenesMacbookGeocodedLocation => new(_haContext, "sensor.eugenes_macbook_geocoded_location");
    ///<summary>Eugene&apos;s MacBook Internal Battery State</summary>
    public SensorEntity EugenesMacbookInternalBatteryState => new(_haContext, "sensor.eugenes_macbook_internal_battery_state");
    ///<summary>Eugene&apos;s MacBook Last Update Trigger</summary>
    public SensorEntity EugenesMacbookLastUpdateTrigger => new(_haContext, "sensor.eugenes_macbook_last_update_trigger");
    ///<summary>Eugene&apos;s MacBook Primary Display ID</summary>
    public SensorEntity EugenesMacbookPrimaryDisplayId => new(_haContext, "sensor.eugenes_macbook_primary_display_id");
    ///<summary>Eugene&apos;s MacBook Primary Display Name</summary>
    public SensorEntity EugenesMacbookPrimaryDisplayName => new(_haContext, "sensor.eugenes_macbook_primary_display_name");
    ///<summary>Eugene&apos;s MacBook SSID</summary>
    public SensorEntity EugenesMacbookSsid => new(_haContext, "sensor.eugenes_macbook_ssid");
    ///<summary>EugenespleWatch Uptime</summary>
    public SensorEntity EugenesplewatchUptime => new(_haContext, "sensor.eugenesplewatch_uptime");
    ///<summary>fail2ban sshd</summary>
    public SensorEntity Fail2banSshd => new(_haContext, "sensor.fail2ban_sshd");
    ///<summary>Fish Lights Switch Device Energy</summary>
    public SensorEntity FishLightsSwitchDeviceEnergy => new(_haContext, "sensor.fish_lights_switch_device_energy");
    ///<summary>floor_light-2086 Uptime</summary>
    public SensorEntity FloorLight2086Uptime => new(_haContext, "sensor.floor_light_2086_uptime");
    ///<summary>Foscam Uptime</summary>
    public SensorEntity FoscamUptime => new(_haContext, "sensor.foscam_uptime");
    ///<summary>Galaxy-S8 Uptime</summary>
    public SensorEntity GalaxyS8Uptime => new(_haContext, "sensor.galaxy_s8_uptime");
    ///<summary>Garage Echo Uptime</summary>
    public SensorEntity GarageEchoUptime => new(_haContext, "sensor.garage_echo_uptime");
    ///<summary>Garage next Alarm</summary>
    public SensorEntity GarageNextAlarm => new(_haContext, "sensor.garage_next_alarm");
    ///<summary>Garage next Reminder</summary>
    public SensorEntity GarageNextReminder => new(_haContext, "sensor.garage_next_reminder");
    ///<summary>Garage next Timer</summary>
    public SensorEntity GarageNextTimer => new(_haContext, "sensor.garage_next_timer");
    ///<summary>Garden Echo RX Uptime</summary>
    public SensorEntity GardenEchoUptime => new(_haContext, "sensor.garden_echo_uptime");
    ///<summary>Garden Floodlights Uptime</summary>
    public SensorEntity GardenFloodlightsUptime => new(_haContext, "sensor.garden_floodlights_uptime");
    ///<summary>Garden Last Activity</summary>
    public SensorEntity GardenLastActivity2 => new(_haContext, "sensor.garden_last_activity_2");
    ///<summary>Garden Last Motion</summary>
    public SensorEntity GardenLastMotion2 => new(_haContext, "sensor.garden_last_motion_2");
    ///<summary>Garden Volume</summary>
    public SensorEntity GardenVolume2 => new(_haContext, "sensor.garden_volume_2");
    ///<summary>Gas Consumption (Year)</summary>
    public SensorEntity GasConsumptionYear => new(_haContext, "sensor.gas_consumption_year");
    ///<summary>Glow Smart Meter 4417935019B0 Uptime</summary>
    public SensorEntity GlowIhd5019b0Uptime => new(_haContext, "sensor.glow_ihd_5019b0_uptime");
    ///<summary>Hailey&apos;s iPhone Activity</summary>
    public SensorEntity HaileySIphoneActivity => new(_haContext, "sensor.hailey_s_iphone_activity");
    ///<summary>Hailey&apos;s iPhone Battery State</summary>
    public SensorEntity HaileySIphoneBatteryState => new(_haContext, "sensor.hailey_s_iphone_battery_state");
    ///<summary>Hailey&apos;s iPhone BSSID</summary>
    public SensorEntity HaileySIphoneBssid => new(_haContext, "sensor.hailey_s_iphone_bssid");
    ///<summary>Hailey&apos;s iPhone Connection Type</summary>
    public SensorEntity HaileySIphoneConnectionType => new(_haContext, "sensor.hailey_s_iphone_connection_type");
    ///<summary>Hailey&apos;s iPhone Geocoded Location</summary>
    public SensorEntity HaileySIphoneGeocodedLocation => new(_haContext, "sensor.hailey_s_iphone_geocoded_location");
    ///<summary>Hailey&apos;s iPhone Last Update Trigger</summary>
    public SensorEntity HaileySIphoneLastUpdateTrigger => new(_haContext, "sensor.hailey_s_iphone_last_update_trigger");
    ///<summary>Hailey&apos;s iPhone SIM 1</summary>
    public SensorEntity HaileySIphoneSim1 => new(_haContext, "sensor.hailey_s_iphone_sim_1");
    ///<summary>Hailey&apos;s iPhone SIM 2</summary>
    public SensorEntity HaileySIphoneSim2 => new(_haContext, "sensor.hailey_s_iphone_sim_2");
    ///<summary>Hailey&apos;s iPhone SSID</summary>
    public SensorEntity HaileySIphoneSsid => new(_haContext, "sensor.hailey_s_iphone_ssid");
    ///<summary>Haileys-Air Uptime</summary>
    public SensorEntity HaileysAirUptime => new(_haContext, "sensor.haileys_air_uptime");
    ///<summary>Haileys-iPhone Uptime</summary>
    public SensorEntity HaileysIphoneUptime => new(_haContext, "sensor.haileys_iphone_uptime");
    ///<summary>Haileys-iPhone Uptime</summary>
    public SensorEntity HaileysIphoneUptime2 => new(_haContext, "sensor.haileys_iphone_uptime_2");
    ///<summary>Hailey’s MacBook Air Active Audio Output</summary>
    public SensorEntity HaileysMacbookAirActiveAudioOutput => new(_haContext, "sensor.haileys_macbook_air_active_audio_output");
    ///<summary>Hailey’s MacBook Air Active Camera</summary>
    public SensorEntity HaileysMacbookAirActiveCamera => new(_haContext, "sensor.haileys_macbook_air_active_camera");
    ///<summary>Hailey’s MacBook Air Active Microphone</summary>
    public SensorEntity HaileysMacbookAirActiveMicrophone => new(_haContext, "sensor.haileys_macbook_air_active_microphone");
    ///<summary>Hailey’s MacBook Air BSSID</summary>
    public SensorEntity HaileysMacbookAirBssid => new(_haContext, "sensor.haileys_macbook_air_bssid");
    ///<summary>Hailey’s MacBook Air Connection Type</summary>
    public SensorEntity HaileysMacbookAirConnectionType => new(_haContext, "sensor.haileys_macbook_air_connection_type");
    ///<summary>Hailey’s MacBook Air Displays</summary>
    public SensorEntity HaileysMacbookAirDisplays => new(_haContext, "sensor.haileys_macbook_air_displays");
    ///<summary>Hailey’s MacBook Air Frontmost App</summary>
    public SensorEntity HaileysMacbookAirFrontmostApp => new(_haContext, "sensor.haileys_macbook_air_frontmost_app");
    ///<summary>Hailey’s MacBook Air Geocoded Location</summary>
    public SensorEntity HaileysMacbookAirGeocodedLocation => new(_haContext, "sensor.haileys_macbook_air_geocoded_location");
    ///<summary>Hailey’s MacBook Air Internal Battery State</summary>
    public SensorEntity HaileysMacbookAirInternalBatteryState => new(_haContext, "sensor.haileys_macbook_air_internal_battery_state");
    ///<summary>Hailey’s MacBook Air Last Update Trigger</summary>
    public SensorEntity HaileysMacbookAirLastUpdateTrigger => new(_haContext, "sensor.haileys_macbook_air_last_update_trigger");
    ///<summary>Hailey’s MacBook Air Primary Display ID</summary>
    public SensorEntity HaileysMacbookAirPrimaryDisplayId => new(_haContext, "sensor.haileys_macbook_air_primary_display_id");
    ///<summary>Hailey’s MacBook Air Primary Display Name</summary>
    public SensorEntity HaileysMacbookAirPrimaryDisplayName => new(_haContext, "sensor.haileys_macbook_air_primary_display_name");
    ///<summary>Hailey’s MacBook Air SSID</summary>
    public SensorEntity HaileysMacbookAirSsid => new(_haContext, "sensor.haileys_macbook_air_ssid");
    ///<summary>HP Color LaserJet 4500 hpijs pcl3, 3.18.12</summary>
    public SensorEntity HpColorLaserjet4500HpijsPcl331812 => new(_haContext, "sensor.hp_color_laserjet_4500_hpijs_pcl3_3_18_12");
    ///<summary>HUAWEI_P_smart_2019-86203 Uptime</summary>
    public SensorEntity HuaweiPSmart201986203Uptime => new(_haContext, "sensor.huawei_p_smart_2019_86203_uptime");
    ///<summary>iPad Uptime</summary>
    public SensorEntity IpadUptime => new(_haContext, "sensor.ipad_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity IpadUptime2 => new(_haContext, "sensor.ipad_uptime_2");
    ///<summary>Uptime</summary>
    public SensorEntity IphoneUptime => new(_haContext, "sensor.iphone_uptime");
    ///<summary>iPhone RX Uptime</summary>
    public SensorEntity IphoneUptime2 => new(_haContext, "sensor.iphone_uptime_2");
    ///<summary>Uptime</summary>
    public SensorEntity IphoneUptime3 => new(_haContext, "sensor.iphone_uptime_3");
    ///<summary>iPhone8P Battery State</summary>
    public SensorEntity Iphone8pBatteryState => new(_haContext, "sensor.iphone8p_battery_state");
    ///<summary>iPhone8P BSSID</summary>
    public SensorEntity Iphone8pBssid => new(_haContext, "sensor.iphone8p_bssid");
    ///<summary>iPhone8P Connection Type</summary>
    public SensorEntity Iphone8pConnectionType => new(_haContext, "sensor.iphone8p_connection_type");
    ///<summary>iPhone8P Geocoded Location</summary>
    public SensorEntity Iphone8pGeocodedLocation => new(_haContext, "sensor.iphone8p_geocoded_location");
    ///<summary>iPhone8P Last Update Trigger</summary>
    public SensorEntity Iphone8pLastUpdateTrigger => new(_haContext, "sensor.iphone8p_last_update_trigger");
    ///<summary>iPhone8P SIM 1</summary>
    public SensorEntity Iphone8pSim1 => new(_haContext, "sensor.iphone8p_sim_1");
    ///<summary>iPhone8P SSID</summary>
    public SensorEntity Iphone8pSsid => new(_haContext, "sensor.iphone8p_ssid");
    ///<summary>Jayden AppleTv Uptime</summary>
    public SensorEntity JaydenAppletvUptime => new(_haContext, "sensor.jayden_appletv_uptime");
    ///<summary>jayden_bedside-4734 Uptime</summary>
    public SensorEntity JaydenBedside4734Uptime => new(_haContext, "sensor.jayden_bedside_4734_uptime");
    ///<summary>Jayden Echo Uptime</summary>
    public SensorEntity JaydenEchoUptime => new(_haContext, "sensor.jayden_echo_uptime");
    ///<summary>Aaron next Alarm</summary>
    public SensorEntity JaydenNextAlarm => new(_haContext, "sensor.jayden_next_alarm");
    ///<summary>Jayden next Alarm</summary>
    public SensorEntity JaydenNextAlarm2 => new(_haContext, "sensor.jayden_next_alarm_2");
    ///<summary>Aaron next Reminder</summary>
    public SensorEntity JaydenNextReminder => new(_haContext, "sensor.jayden_next_reminder");
    ///<summary>Jayden next Reminder</summary>
    public SensorEntity JaydenNextReminder2 => new(_haContext, "sensor.jayden_next_reminder_2");
    ///<summary>Aaron next Timer</summary>
    public SensorEntity JaydenNextTimer => new(_haContext, "sensor.jayden_next_timer");
    ///<summary>Jayden next Timer</summary>
    public SensorEntity JaydenNextTimer2 => new(_haContext, "sensor.jayden_next_timer_2");
    ///<summary>Jayden ’s iPad Activity</summary>
    public SensorEntity JaydenSIpadActivity => new(_haContext, "sensor.jayden_s_ipad_activity");
    ///<summary>Jayden ’s iPad Battery State</summary>
    public SensorEntity JaydenSIpadBatteryState => new(_haContext, "sensor.jayden_s_ipad_battery_state");
    ///<summary>Jayden ’s iPad BSSID</summary>
    public SensorEntity JaydenSIpadBssid => new(_haContext, "sensor.jayden_s_ipad_bssid");
    ///<summary>Jayden ’s iPad Connection Type</summary>
    public SensorEntity JaydenSIpadConnectionType => new(_haContext, "sensor.jayden_s_ipad_connection_type");
    ///<summary>Jayden ’s iPad Geocoded Location</summary>
    public SensorEntity JaydenSIpadGeocodedLocation => new(_haContext, "sensor.jayden_s_ipad_geocoded_location");
    ///<summary>Jayden ’s iPad Last Update Trigger</summary>
    public SensorEntity JaydenSIpadLastUpdateTrigger => new(_haContext, "sensor.jayden_s_ipad_last_update_trigger");
    ///<summary>Jayden ’s iPad SSID</summary>
    public SensorEntity JaydenSIpadSsid => new(_haContext, "sensor.jayden_s_ipad_ssid");
    ///<summary>Jayden ’s iPhone Activity</summary>
    public SensorEntity JaydenSIphoneActivity => new(_haContext, "sensor.jayden_s_iphone_activity");
    ///<summary>Jayden ’s iPhone Battery State</summary>
    public SensorEntity JaydenSIphoneBatteryState => new(_haContext, "sensor.jayden_s_iphone_battery_state");
    ///<summary>Jayden ’s iPhone BSSID</summary>
    public SensorEntity JaydenSIphoneBssid => new(_haContext, "sensor.jayden_s_iphone_bssid");
    ///<summary>Jayden ’s iPhone Connection Type</summary>
    public SensorEntity JaydenSIphoneConnectionType => new(_haContext, "sensor.jayden_s_iphone_connection_type");
    ///<summary>Jayden ’s iPhone Geocoded Location</summary>
    public SensorEntity JaydenSIphoneGeocodedLocation => new(_haContext, "sensor.jayden_s_iphone_geocoded_location");
    ///<summary>Jayden ’s iPhone Last Update Trigger</summary>
    public SensorEntity JaydenSIphoneLastUpdateTrigger => new(_haContext, "sensor.jayden_s_iphone_last_update_trigger");
    ///<summary>Jayden ’s iPhone SIM 1</summary>
    public SensorEntity JaydenSIphoneSim1 => new(_haContext, "sensor.jayden_s_iphone_sim_1");
    ///<summary>Jayden ’s iPhone SSID</summary>
    public SensorEntity JaydenSIphoneSsid => new(_haContext, "sensor.jayden_s_iphone_ssid");
    ///<summary>Uptime</summary>
    public SensorEntity JaydenSIphoneUptime => new(_haContext, "sensor.jayden_s_iphone_uptime");
    ///<summary>Jayden-s-iPhone RX Uptime</summary>
    public SensorEntity JaydenSIphoneUptime2 => new(_haContext, "sensor.jayden_s_iphone_uptime_2");
    ///<summary>Jayden-s-iPhone RX Uptime</summary>
    public SensorEntity JaydenSIphoneUptime3 => new(_haContext, "sensor.jayden_s_iphone_uptime_3");
    ///<summary>Jayden Uptime</summary>
    public SensorEntity JaydenUptime => new(_haContext, "sensor.jayden_uptime");
    ///<summary>Johan Front Door Last Activity</summary>
    public SensorEntity JohanFrontDoorLastActivity => new(_haContext, "sensor.johan_front_door_last_activity");
    ///<summary>Johan Front Door Last Ding</summary>
    public SensorEntity JohanFrontDoorLastDing => new(_haContext, "sensor.johan_front_door_last_ding");
    ///<summary>Johan Front Door Last Motion</summary>
    public SensorEntity JohanFrontDoorLastMotion => new(_haContext, "sensor.johan_front_door_last_motion");
    ///<summary>Johan Front Door Volume</summary>
    public SensorEntity JohanFrontDoorVolume => new(_haContext, "sensor.johan_front_door_volume");
    ///<summary>Kitchen Echo Uptime</summary>
    public SensorEntity KitchenEchoUptime => new(_haContext, "sensor.kitchen_echo_uptime");
    ///<summary>Kitchen next Alarm</summary>
    public SensorEntity KitchenNextAlarm => new(_haContext, "sensor.kitchen_next_alarm");
    ///<summary>Kitchen next Reminder</summary>
    public SensorEntity KitchenNextReminder => new(_haContext, "sensor.kitchen_next_reminder");
    ///<summary>Kitchen next Timer</summary>
    public SensorEntity KitchenNextTimer => new(_haContext, "sensor.kitchen_next_timer");
    ///<summary>Konnected Alarm Panel Add On Uptime</summary>
    public SensorEntity KonnectedAddonUptime => new(_haContext, "sensor.konnected_addon_uptime");
    ///<summary>Konnected Alarm Panel Uptime</summary>
    public SensorEntity KonnectedMainUptime => new(_haContext, "sensor.konnected_main_uptime");
    ///<summary>Landing Uptime</summary>
    public SensorEntity LandingUptime => new(_haContext, "sensor.landing_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity LaptopD5uft2ciUptime => new(_haContext, "sensor.laptop_d5uft2ci_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity LaptopL5nso67jUptime => new(_haContext, "sensor.laptop_l5nso67j_uptime");
    ///<summary>LG Lounge Uptime</summary>
    public SensorEntity LgLoungeUptime => new(_haContext, "sensor.lg_lounge_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity LivingRoomUptime => new(_haContext, "sensor.living_room_uptime");
    ///<summary>Lounge Uptime</summary>
    public SensorEntity LoungeAcUptime => new(_haContext, "sensor.lounge_ac_uptime");
    ///<summary>Lounge Audio input format</summary>
    public SensorEntity LoungeAudioInputFormat => new(_haContext, "sensor.lounge_audio_input_format");
    ///<summary>Blind Lounge Uptime</summary>
    public SensorEntity LoungeBlindUptime => new(_haContext, "sensor.lounge_blind_uptime");
    ///<summary>Lounge Echo Uptime</summary>
    public SensorEntity LoungeEchoUptime => new(_haContext, "sensor.lounge_echo_uptime");
    ///<summary>Dining next Alarm</summary>
    public SensorEntity LoungeGroupNextAlarm => new(_haContext, "sensor.lounge_group_next_alarm");
    ///<summary>Dining next Reminder</summary>
    public SensorEntity LoungeGroupNextReminder => new(_haContext, "sensor.lounge_group_next_reminder");
    ///<summary>Dining next Timer</summary>
    public SensorEntity LoungeGroupNextTimer => new(_haContext, "sensor.lounge_group_next_timer");
    ///<summary>Lounge Sonos next Reminder</summary>
    public SensorEntity LoungeSonosNextReminder => new(_haContext, "sensor.lounge_sonos_next_reminder");
    ///<summary>Master Echo Uptime</summary>
    public SensorEntity MasterEchoUptime => new(_haContext, "sensor.master_echo_uptime");
    ///<summary>Master next Alarm</summary>
    public SensorEntity MasterNextAlarm => new(_haContext, "sensor.master_next_alarm");
    ///<summary>Master next Reminder</summary>
    public SensorEntity MasterNextReminder => new(_haContext, "sensor.master_next_reminder");
    ///<summary>Master next Timer</summary>
    public SensorEntity MasterNextTimer => new(_haContext, "sensor.master_next_timer");
    ///<summary>Master Tele Uptime</summary>
    public SensorEntity MasterTeleUptime => new(_haContext, "sensor.master_tele_uptime");
    ///<summary>myip</summary>
    public SensorEntity Myip => new(_haContext, "sensor.myip");
    ///<summary>neerslag_buienalarm_regen_data</summary>
    public SensorEntity NeerslagBuienalarmRegenData => new(_haContext, "sensor.neerslag_buienalarm_regen_data");
    ///<summary>neerslag_buienradar_regen_data</summary>
    public SensorEntity NeerslagBuienradarRegenData => new(_haContext, "sensor.neerslag_buienradar_regen_data");
    ///<summary>netdaemon_status</summary>
    public SensorEntity NetdaemonStatus => new(_haContext, "sensor.netdaemon_status");
    ///<summary>Niemand Drive Info</summary>
    public SensorEntity NiemandDriveInfo => new(_haContext, "sensor.niemand_drive_info");
    ///<summary>Niemand Drive Last Activity</summary>
    public SensorEntity NiemandDriveLastActivity => new(_haContext, "sensor.niemand_drive_last_activity");
    ///<summary>Niemand Drive Last Motion</summary>
    public SensorEntity NiemandDriveLastMotion => new(_haContext, "sensor.niemand_drive_last_motion");
    ///<summary>Niemand Drive Volume</summary>
    public SensorEntity NiemandDriveVolume => new(_haContext, "sensor.niemand_drive_volume");
    ///<summary>Niemand Front Door Info</summary>
    public SensorEntity NiemandFrontDoorInfo => new(_haContext, "sensor.niemand_front_door_info");
    ///<summary>Niemand Front Door Last Activity</summary>
    public SensorEntity NiemandFrontDoorLastActivity => new(_haContext, "sensor.niemand_front_door_last_activity");
    ///<summary>Niemand Front Door Last Ding</summary>
    public SensorEntity NiemandFrontDoorLastDing => new(_haContext, "sensor.niemand_front_door_last_ding");
    ///<summary>Niemand Front Door Last Motion</summary>
    public SensorEntity NiemandFrontDoorLastMotion => new(_haContext, "sensor.niemand_front_door_last_motion");
    ///<summary>Niemand Front Door Volume</summary>
    public SensorEntity NiemandFrontDoorVolume => new(_haContext, "sensor.niemand_front_door_volume");
    ///<summary>Niemand Garage Info</summary>
    public SensorEntity NiemandGarageInfo => new(_haContext, "sensor.niemand_garage_info");
    ///<summary>Niemand Garage Last Activity</summary>
    public SensorEntity NiemandGarageLastActivity => new(_haContext, "sensor.niemand_garage_last_activity");
    ///<summary>Niemand Garage Last Motion</summary>
    public SensorEntity NiemandGarageLastMotion => new(_haContext, "sensor.niemand_garage_last_motion");
    ///<summary>Niemand Garage Volume</summary>
    public SensorEntity NiemandGarageVolume => new(_haContext, "sensor.niemand_garage_volume");
    ///<summary>Niemand Garden Info</summary>
    public SensorEntity NiemandGardenInfo => new(_haContext, "sensor.niemand_garden_info");
    ///<summary>Niemand Garden Last Activity</summary>
    public SensorEntity NiemandGardenLastActivity => new(_haContext, "sensor.niemand_garden_last_activity");
    ///<summary>Niemand Garden Last Motion</summary>
    public SensorEntity NiemandGardenLastMotion => new(_haContext, "sensor.niemand_garden_last_motion");
    ///<summary>Niemand Garden Volume</summary>
    public SensorEntity NiemandGardenVolume => new(_haContext, "sensor.niemand_garden_volume");
    ///<summary>Niemand Side Info</summary>
    public SensorEntity NiemandSideInfo => new(_haContext, "sensor.niemand_side_info");
    ///<summary>Niemand Side Last Activity</summary>
    public SensorEntity NiemandSideLastActivity => new(_haContext, "sensor.niemand_side_last_activity");
    ///<summary>Niemand Side Last Motion</summary>
    public SensorEntity NiemandSideLastMotion => new(_haContext, "sensor.niemand_side_last_motion");
    ///<summary>Niemand Side Volume</summary>
    public SensorEntity NiemandSideVolume => new(_haContext, "sensor.niemand_side_volume");
    ///<summary>Octopus Energy Saving Session Points</summary>
    public SensorEntity OctopusEnergySavingSessionPoints => new(_haContext, "sensor.octopus_energy_saving_session_points");
    ///<summary>Office Uptime</summary>
    public SensorEntity OfficeAcUptime => new(_haContext, "sensor.office_ac_uptime");
    ///<summary>Office Echo Uptime</summary>
    public SensorEntity OfficeEchoUptime => new(_haContext, "sensor.office_echo_uptime");
    ///<summary>Office next Alarm</summary>
    public SensorEntity OfficeNextAlarm => new(_haContext, "sensor.office_next_alarm");
    ///<summary>Office next Reminder</summary>
    public SensorEntity OfficeNextReminder => new(_haContext, "sensor.office_next_reminder");
    ///<summary>Office next Timer</summary>
    public SensorEntity OfficeNextTimer => new(_haContext, "sensor.office_next_timer");
    ///<summary>OpenWeatherMap Condition</summary>
    public SensorEntity OpenweathermapCondition => new(_haContext, "sensor.openweathermap_condition");
    ///<summary>OpenWeatherMap Forecast Condition</summary>
    public SensorEntity OpenweathermapForecastCondition => new(_haContext, "sensor.openweathermap_forecast_condition");
    ///<summary>OpenWeatherMap Forecast Time</summary>
    public SensorEntity OpenweathermapForecastTime => new(_haContext, "sensor.openweathermap_forecast_time");
    ///<summary>OpenWeatherMap Precipitation kind</summary>
    public SensorEntity OpenweathermapPrecipitationKind => new(_haContext, "sensor.openweathermap_precipitation_kind");
    ///<summary>OpenWeatherMap Weather</summary>
    public SensorEntity OpenweathermapWeather => new(_haContext, "sensor.openweathermap_weather");
    ///<summary>OpenWeatherMap Weather Code</summary>
    public SensorEntity OpenweathermapWeatherCode => new(_haContext, "sensor.openweathermap_weather_code");
    ///<summary>Outside Drive Uptime</summary>
    public SensorEntity OutsideDriveUptime => new(_haContext, "sensor.outside_drive_uptime");
    ///<summary>Outside Garage Uptime</summary>
    public SensorEntity OutsideGarageUptime => new(_haContext, "sensor.outside_garage_uptime");
    ///<summary>Playroom Echo Uptime</summary>
    public SensorEntity PlayroomEchoUptime => new(_haContext, "sensor.playroom_echo_uptime");
    ///<summary>Porch Uptime</summary>
    public SensorEntity PorchUptime => new(_haContext, "sensor.porch_uptime");
    ///<summary>RaspberryPi CUPS Uptime</summary>
    public SensorEntity RaspberrypiCupsUptime => new(_haContext, "sensor.raspberrypi_cups_uptime");
    ///<summary>raspberrypi Uptime</summary>
    public SensorEntity RaspberrypiUptime => new(_haContext, "sensor.raspberrypi_uptime");
    ///<summary>raspberrypi Uptime</summary>
    public SensorEntity RaspberrypiUptime2 => new(_haContext, "sensor.raspberrypi_uptime_2");
    ///<summary>RingHpCam-49 Uptime</summary>
    public SensorEntity Ringhpcam49Uptime => new(_haContext, "sensor.ringhpcam_49_uptime");
    ///<summary>RingHpCam-4c Uptime</summary>
    public SensorEntity Ringhpcam4cUptime => new(_haContext, "sensor.ringhpcam_4c_uptime");
    ///<summary>RingPro-d6 Uptime</summary>
    public SensorEntity RingproD6Uptime => new(_haContext, "sensor.ringpro_d6_uptime");
    ///<summary>RingStickUpCam-94 Uptime</summary>
    public SensorEntity Ringstickupcam94Uptime => new(_haContext, "sensor.ringstickupcam_94_uptime");
    ///<summary>RingStickUpCam-9b Uptime</summary>
    public SensorEntity Ringstickupcam9bUptime => new(_haContext, "sensor.ringstickupcam_9b_uptime");
    ///<summary>RMMINI-d9-2b-62 Uptime</summary>
    public SensorEntity RmminiD92b62Uptime => new(_haContext, "sensor.rmmini_d9_2b_62_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity SammiLeighSA52Uptime => new(_haContext, "sensor.sammi_leigh_s_a52_uptime");
    ///<summary>shelly1-55E8B5 Uptime</summary>
    public SensorEntity Shelly155e8b5Uptime => new(_haContext, "sensor.shelly1_55e8b5_uptime");
    ///<summary>shelly1-BA69F6 RX Uptime</summary>
    public SensorEntity Shelly1Ba69f6Uptime => new(_haContext, "sensor.shelly1_ba69f6_uptime");
    ///<summary>shelly1-BA6C98 RX Uptime</summary>
    public SensorEntity Shelly1Ba6c98Uptime => new(_haContext, "sensor.shelly1_ba6c98_uptime");
    ///<summary>shelly1pm-E646FE RX Uptime</summary>
    public SensorEntity Shelly1pmE646feUptime => new(_haContext, "sensor.shelly1pm_e646fe_uptime");
    ///<summary>Smart Meter IHD HAN LQI</summary>
    public SensorEntity SmartMeterIhdHanLqi => new(_haContext, "sensor.smart_meter_ihd_han_lqi");
    ///<summary>Smart Meter IHD Hardware</summary>
    public SensorEntity SmartMeterIhdHardware => new(_haContext, "sensor.smart_meter_ihd_hardware");
    ///<summary>Smart Meter IHD Software Version</summary>
    public SensorEntity SmartMeterIhdSoftwareVersion => new(_haContext, "sensor.smart_meter_ihd_software_version");
    ///<summary>Uptime</summary>
    public SensorEntity SmartPlug1Uptime => new(_haContext, "sensor.smart_plug_1_uptime");
    ///<summary>smart-plug-2 Uptime</summary>
    public SensorEntity SmartPlug2Uptime => new(_haContext, "sensor.smart_plug_2_uptime");
    ///<summary>smart-plug-4 Uptime</summary>
    public SensorEntity SmartPlug4Uptime => new(_haContext, "sensor.smart_plug_4_uptime");
    ///<summary>Lounge Uptime</summary>
    public SensorEntity SonoszpUptime => new(_haContext, "sensor.sonoszp_uptime");
    ///<summary>SonosZP Uptime</summary>
    public SensorEntity SonoszpUptime2 => new(_haContext, "sensor.sonoszp_uptime_2");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Suspect Device Uptime</summary>
    public SensorEntity SuspectDeviceUptime => new(_haContext, "sensor.suspect_device_uptime");
    ///<summary>Suspect Huawei Uptime</summary>
    public SensorEntity SuspectHuaweiUptime => new(_haContext, "sensor.suspect_huawei_uptime");
    ///<summary>tasmota-4464 Uptime</summary>
    public SensorEntity Tasmota4464Uptime => new(_haContext, "sensor.tasmota_4464_uptime");
    ///<summary>Last Motion</summary>
    public SensorEntity TemplateLastMotion => new(_haContext, "sensor.template_last_motion");
    ///<summary>Last Motion Downstairs</summary>
    public SensorEntity TemplateLastMotionDownstairs => new(_haContext, "sensor.template_last_motion_downstairs");
    ///<summary>Last Motion Upstairs</summary>
    public SensorEntity TemplateLastMotionUpstairs => new(_haContext, "sensor.template_last_motion_upstairs");
    ///<summary>This Device next Alarm</summary>
    public SensorEntity ThisDeviceNextAlarm => new(_haContext, "sensor.this_device_next_alarm");
    ///<summary>This Device next Alarm</summary>
    public SensorEntity ThisDeviceNextAlarm2 => new(_haContext, "sensor.this_device_next_alarm_2");
    ///<summary>This Device next Reminder</summary>
    public SensorEntity ThisDeviceNextReminder => new(_haContext, "sensor.this_device_next_reminder");
    ///<summary>This Device next Reminder</summary>
    public SensorEntity ThisDeviceNextReminder2 => new(_haContext, "sensor.this_device_next_reminder_2");
    ///<summary>This Device next Timer</summary>
    public SensorEntity ThisDeviceNextTimer => new(_haContext, "sensor.this_device_next_timer");
    ///<summary>This Device next Timer</summary>
    public SensorEntity ThisDeviceNextTimer2 => new(_haContext, "sensor.this_device_next_timer_2");
    ///<summary>Drying Time</summary>
    public SensorEntity TumbleDryerDryerCompletionTime => new(_haContext, "sensor.tumble_dryer_dryer_completion_time");
    ///<summary>Dryer Cycle</summary>
    public SensorEntity TumbleDryerDryerJobState => new(_haContext, "sensor.tumble_dryer_dryer_job_state");
    ///<summary>Dryer State</summary>
    public SensorEntity TumbleDryerDryerMachineState => new(_haContext, "sensor.tumble_dryer_dryer_machine_state");
    ///<summary>Uptime</summary>
    public SensorEntity UkPc0jskuxUptime => new(_haContext, "sensor.uk_pc0jskux_uptime");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime => new(_haContext, "sensor.uptime");
    ///<summary> RX Uptime</summary>
    public SensorEntity Uptime10 => new(_haContext, "sensor.uptime_10");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime11 => new(_haContext, "sensor.uptime_11");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime12 => new(_haContext, "sensor.uptime_12");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime13 => new(_haContext, "sensor.uptime_13");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime14 => new(_haContext, "sensor.uptime_14");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime15 => new(_haContext, "sensor.uptime_15");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime16 => new(_haContext, "sensor.uptime_16");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime17 => new(_haContext, "sensor.uptime_17");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime18 => new(_haContext, "sensor.uptime_18");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime19 => new(_haContext, "sensor.uptime_19");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime2 => new(_haContext, "sensor.uptime_2");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime20 => new(_haContext, "sensor.uptime_20");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime21 => new(_haContext, "sensor.uptime_21");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime22 => new(_haContext, "sensor.uptime_22");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime23 => new(_haContext, "sensor.uptime_23");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime24 => new(_haContext, "sensor.uptime_24");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime25 => new(_haContext, "sensor.uptime_25");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime26 => new(_haContext, "sensor.uptime_26");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime27 => new(_haContext, "sensor.uptime_27");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime28 => new(_haContext, "sensor.uptime_28");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime29 => new(_haContext, "sensor.uptime_29");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime3 => new(_haContext, "sensor.uptime_3");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime30 => new(_haContext, "sensor.uptime_30");
    ///<summary>Hottubcontrol Uptime</summary>
    public SensorEntity Uptime31 => new(_haContext, "sensor.uptime_31");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime32 => new(_haContext, "sensor.uptime_32");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime33 => new(_haContext, "sensor.uptime_33");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime34 => new(_haContext, "sensor.uptime_34");
    ///<summary> RX Uptime</summary>
    public SensorEntity Uptime35 => new(_haContext, "sensor.uptime_35");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime36 => new(_haContext, "sensor.uptime_36");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime37 => new(_haContext, "sensor.uptime_37");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime38 => new(_haContext, "sensor.uptime_38");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime39 => new(_haContext, "sensor.uptime_39");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime4 => new(_haContext, "sensor.uptime_4");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime40 => new(_haContext, "sensor.uptime_40");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime41 => new(_haContext, "sensor.uptime_41");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime42 => new(_haContext, "sensor.uptime_42");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime43 => new(_haContext, "sensor.uptime_43");
    ///<summary> RX Uptime</summary>
    public SensorEntity Uptime44 => new(_haContext, "sensor.uptime_44");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime45 => new(_haContext, "sensor.uptime_45");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime46 => new(_haContext, "sensor.uptime_46");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime47 => new(_haContext, "sensor.uptime_47");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime48 => new(_haContext, "sensor.uptime_48");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime49 => new(_haContext, "sensor.uptime_49");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime5 => new(_haContext, "sensor.uptime_5");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime50 => new(_haContext, "sensor.uptime_50");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime51 => new(_haContext, "sensor.uptime_51");
    ///<summary> RX Uptime</summary>
    public SensorEntity Uptime52 => new(_haContext, "sensor.uptime_52");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime53 => new(_haContext, "sensor.uptime_53");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime54 => new(_haContext, "sensor.uptime_54");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime55 => new(_haContext, "sensor.uptime_55");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime56 => new(_haContext, "sensor.uptime_56");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime57 => new(_haContext, "sensor.uptime_57");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime58 => new(_haContext, "sensor.uptime_58");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime59 => new(_haContext, "sensor.uptime_59");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime6 => new(_haContext, "sensor.uptime_6");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime60 => new(_haContext, "sensor.uptime_60");
    ///<summary> RX Uptime</summary>
    public SensorEntity Uptime61 => new(_haContext, "sensor.uptime_61");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime62 => new(_haContext, "sensor.uptime_62");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime63 => new(_haContext, "sensor.uptime_63");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime64 => new(_haContext, "sensor.uptime_64");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime65 => new(_haContext, "sensor.uptime_65");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime66 => new(_haContext, "sensor.uptime_66");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime67 => new(_haContext, "sensor.uptime_67");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime7 => new(_haContext, "sensor.uptime_7");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime8 => new(_haContext, "sensor.uptime_8");
    ///<summary> Uptime</summary>
    public SensorEntity Uptime9 => new(_haContext, "sensor.uptime_9");
    ///<summary>Vacation Next State</summary>
    public SensorEntity VacationNextState => new(_haContext, "sensor.vacation_next_state");
    ///<summary>Wallpanel Fire HD8 Uptime</summary>
    public SensorEntity WallpanelFireHd8Uptime => new(_haContext, "sensor.wallpanel_fire_hd8_uptime");
    ///<summary>Wallpanel next Alarm</summary>
    public SensorEntity WallpanelNextAlarm => new(_haContext, "sensor.wallpanel_next_alarm");
    ///<summary>Wallpanel next Reminder</summary>
    public SensorEntity WallpanelNextReminder => new(_haContext, "sensor.wallpanel_next_reminder");
    ///<summary>Wallpanel next Timer</summary>
    public SensorEntity WallpanelNextTimer => new(_haContext, "sensor.wallpanel_next_timer");
    ///<summary>washer Uptime</summary>
    public SensorEntity WasherUptime => new(_haContext, "sensor.washer_uptime");
    ///<summary>Washing Time</summary>
    public SensorEntity WashingMachineWasherCompletionTime => new(_haContext, "sensor.washing_machine_washer_completion_time");
    ///<summary>Washing Cycle</summary>
    public SensorEntity WashingMachineWasherJobState => new(_haContext, "sensor.washing_machine_washer_job_state");
    ///<summary>Washing State</summary>
    public SensorEntity WashingMachineWasherMachineState => new(_haContext, "sensor.washing_machine_washer_machine_state");
    ///<summary>Wiser Cloud</summary>
    public SensorEntity WiserCloud => new(_haContext, "sensor.wiser_cloud");
    ///<summary>Wiser HeatHub Signal</summary>
    public SensorEntity WiserHeathubSignal => new(_haContext, "sensor.wiser_heathub_signal");
    ///<summary>Wiser Heating</summary>
    public SensorEntity WiserHeating => new(_haContext, "sensor.wiser_heating");
    ///<summary>Wiser Heating Operation Mode</summary>
    public SensorEntity WiserHeatingOperationMode => new(_haContext, "sensor.wiser_heating_operation_mode");
    ///<summary>Wiser Hot Water</summary>
    public SensorEntity WiserHotWater => new(_haContext, "sensor.wiser_hot_water");
    ///<summary>Wiser Hot Water Operation Mode</summary>
    public SensorEntity WiserHotWaterOperationMode => new(_haContext, "sensor.wiser_hot_water_operation_mode");
    ///<summary>Wiser iTRV Boys Signal</summary>
    public SensorEntity WiserItrvAaronSignal => new(_haContext, "sensor.wiser_itrv_aaron_signal");
    ///<summary>Wiser iTRV Dining Signal</summary>
    public SensorEntity WiserItrvDiningSignal => new(_haContext, "sensor.wiser_itrv_dining_signal");
    ///<summary>Wiser iTRV Entrance Signal</summary>
    public SensorEntity WiserItrvEntranceSignal => new(_haContext, "sensor.wiser_itrv_entrance_signal");
    ///<summary>Wiser iTRV Guest Room Signal</summary>
    public SensorEntity WiserItrvJaydenSignal => new(_haContext, "sensor.wiser_itrv_jayden_signal");
    ///<summary>Wiser iTRV Landing Signal</summary>
    public SensorEntity WiserItrvLandingSignal => new(_haContext, "sensor.wiser_itrv_landing_signal");
    ///<summary>Wiser iTRV Lounge Bay Signal</summary>
    public SensorEntity WiserItrvLoungeBaySignal => new(_haContext, "sensor.wiser_itrv_lounge_bay_signal");
    ///<summary>Wiser iTRV Lounge  Signal</summary>
    public SensorEntity WiserItrvLoungeSignal => new(_haContext, "sensor.wiser_itrv_lounge_signal");
    ///<summary>Wiser iTRV Master Signal</summary>
    public SensorEntity WiserItrvMasterSignal => new(_haContext, "sensor.wiser_itrv_master_signal");
    ///<summary>Wiser iTRV Office Signal</summary>
    public SensorEntity WiserItrvOfficeSignal => new(_haContext, "sensor.wiser_itrv_office_signal");
    ///<summary>Wiser iTRV Playroom Signal</summary>
    public SensorEntity WiserItrvPlayroomSignal => new(_haContext, "sensor.wiser_itrv_playroom_signal");
    ///<summary>Wiser iTRV Utility Signal</summary>
    public SensorEntity WiserItrvUtilitySignal => new(_haContext, "sensor.wiser_itrv_utility_signal");
    ///<summary>Wiser LTS Target Temperature Boys</summary>
    public SensorEntity WiserLtsTargetTemperatureBoys => new(_haContext, "sensor.wiser_lts_target_temperature_boys");
    ///<summary>Wiser LTS Target Temperature Guest Room</summary>
    public SensorEntity WiserLtsTargetTemperatureGuestRoom => new(_haContext, "sensor.wiser_lts_target_temperature_guest_room");
    ///<summary>Wiser RoomStat Utility Signal</summary>
    public SensorEntity WiserRoomstatUtilitySignal => new(_haContext, "sensor.wiser_roomstat_utility_signal");
    ///<summary>Wiser HeatHub (WiserHeat031C5E) Uptime</summary>
    public SensorEntity Wiserheat031c5eUptime => new(_haContext, "sensor.wiserheat031c5e_uptime");
    ///<summary>wlan0 RX Uptime</summary>
    public SensorEntity Wlan0Uptime => new(_haContext, "sensor.wlan0_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity Wlan0Uptime2 => new(_haContext, "sensor.wlan0_uptime_2");
    ///<summary>247D4D7D6C90-mysimplelink RX</summary>
    public NumericSensorEntity _247d4d7d6c90MysimplelinkRx => new(_haContext, "sensor.247d4d7d6c90_mysimplelink_rx");
    ///<summary>247D4D7D6C90-mysimplelink TX</summary>
    public NumericSensorEntity _247d4d7d6c90MysimplelinkTx => new(_haContext, "sensor.247d4d7d6c90_mysimplelink_tx");
    ///<summary>Aaron 1 energy</summary>
    public NumericSensorEntity Aaron1Energy => new(_haContext, "sensor.aaron_1_energy");
    ///<summary>Aaron 1 power</summary>
    public NumericSensorEntity Aaron1Power => new(_haContext, "sensor.aaron_1_power");
    ///<summary>Aaron 2 energy</summary>
    public NumericSensorEntity Aaron2Energy => new(_haContext, "sensor.aaron_2_energy");
    ///<summary>Aaron 2 power</summary>
    public NumericSensorEntity Aaron2Power => new(_haContext, "sensor.aaron_2_power");
    ///<summary>Aaron 3 energy</summary>
    public NumericSensorEntity Aaron3Energy => new(_haContext, "sensor.aaron_3_energy");
    ///<summary>Aaron 3 power</summary>
    public NumericSensorEntity Aaron3Power => new(_haContext, "sensor.aaron_3_power");
    ///<summary>Aaron 4 energy</summary>
    public NumericSensorEntity Aaron4Energy => new(_haContext, "sensor.aaron_4_energy");
    ///<summary>Aaron 4 power</summary>
    public NumericSensorEntity Aaron4Power => new(_haContext, "sensor.aaron_4_power");
    ///<summary>Aaron Echo RX</summary>
    public NumericSensorEntity AaronEchoRx => new(_haContext, "sensor.aaron_echo_rx");
    ///<summary>Aaron Echo TX</summary>
    public NumericSensorEntity AaronEchoTx => new(_haContext, "sensor.aaron_echo_tx");
    ///<summary>Aaron Lux</summary>
    public NumericSensorEntity AaronLux => new(_haContext, "sensor.aaron_lux");
    ///<summary>Aaron Motion Battery</summary>
    public NumericSensorEntity AaronMotionBattery => new(_haContext, "sensor.aaron_motion_battery");
    ///<summary>AccuWeather Home Cloud ceiling</summary>
    public NumericSensorEntity AccuweatherHomeCloudCeiling => new(_haContext, "sensor.accuweather_home_cloud_ceiling");
    ///<summary>AccuWeather Home Hours of sun 0d</summary>
    public NumericSensorEntity AccuweatherHomeHoursOfSun0d => new(_haContext, "sensor.accuweather_home_hours_of_sun_0d");
    ///<summary>AccuWeather Home Hours of sun 1d</summary>
    public NumericSensorEntity AccuweatherHomeHoursOfSun1d => new(_haContext, "sensor.accuweather_home_hours_of_sun_1d");
    ///<summary>AccuWeather Home Hours of sun 2d</summary>
    public NumericSensorEntity AccuweatherHomeHoursOfSun2d => new(_haContext, "sensor.accuweather_home_hours_of_sun_2d");
    ///<summary>AccuWeather Home Hours of sun 3d</summary>
    public NumericSensorEntity AccuweatherHomeHoursOfSun3d => new(_haContext, "sensor.accuweather_home_hours_of_sun_3d");
    ///<summary>AccuWeather Home Hours of sun 4d</summary>
    public NumericSensorEntity AccuweatherHomeHoursOfSun4d => new(_haContext, "sensor.accuweather_home_hours_of_sun_4d");
    ///<summary>AccuWeather Home Precipitation</summary>
    public NumericSensorEntity AccuweatherHomePrecipitation => new(_haContext, "sensor.accuweather_home_precipitation");
    ///<summary>AccuWeather Home RealFeel temperature</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperature => new(_haContext, "sensor.accuweather_home_realfeel_temperature");
    ///<summary>AccuWeather Home RealFeel temperature max 0d</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMax0d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_max_0d");
    ///<summary>AccuWeather Home RealFeel temperature max 1d</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMax1d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_max_1d");
    ///<summary>AccuWeather Home RealFeel temperature max 2d</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMax2d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_max_2d");
    ///<summary>AccuWeather Home RealFeel temperature max 3d</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMax3d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_max_3d");
    ///<summary>AccuWeather Home RealFeel temperature max 4d</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMax4d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_max_4d");
    ///<summary>AccuWeather Home RealFeel temperature min 0d</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMin0d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_min_0d");
    ///<summary>AccuWeather Home RealFeel temperature min 1d</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMin1d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_min_1d");
    ///<summary>AccuWeather Home RealFeel temperature min 2d</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMin2d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_min_2d");
    ///<summary>AccuWeather Home RealFeel temperature min 3d</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMin3d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_min_3d");
    ///<summary>AccuWeather Home RealFeel temperature min 4d</summary>
    public NumericSensorEntity AccuweatherHomeRealfeelTemperatureMin4d => new(_haContext, "sensor.accuweather_home_realfeel_temperature_min_4d");
    ///<summary>AccuWeather Home Thunderstorm probability day 0d</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityDay0d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_day_0d");
    ///<summary>AccuWeather Home Thunderstorm probability day 1d</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityDay1d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_day_1d");
    ///<summary>AccuWeather Home Thunderstorm probability day 2d</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityDay2d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_day_2d");
    ///<summary>AccuWeather Home Thunderstorm probability day 3d</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityDay3d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_day_3d");
    ///<summary>AccuWeather Home Thunderstorm probability day 4d</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityDay4d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_day_4d");
    ///<summary>AccuWeather Home Thunderstorm probability night 0d</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityNight0d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_night_0d");
    ///<summary>AccuWeather Home Thunderstorm probability night 1d</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityNight1d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_night_1d");
    ///<summary>AccuWeather Home Thunderstorm probability night 2d</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityNight2d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_night_2d");
    ///<summary>AccuWeather Home Thunderstorm probability night 3d</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityNight3d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_night_3d");
    ///<summary>AccuWeather Home Thunderstorm probability night 4d</summary>
    public NumericSensorEntity AccuweatherHomeThunderstormProbabilityNight4d => new(_haContext, "sensor.accuweather_home_thunderstorm_probability_night_4d");
    ///<summary>AccuWeather Home UV index</summary>
    public NumericSensorEntity AccuweatherHomeUvIndex => new(_haContext, "sensor.accuweather_home_uv_index");
    ///<summary>AccuWeather Home UV index 0d</summary>
    public NumericSensorEntity AccuweatherHomeUvIndex0d => new(_haContext, "sensor.accuweather_home_uv_index_0d");
    ///<summary>AccuWeather Home UV index 1d</summary>
    public NumericSensorEntity AccuweatherHomeUvIndex1d => new(_haContext, "sensor.accuweather_home_uv_index_1d");
    ///<summary>AccuWeather Home UV index 2d</summary>
    public NumericSensorEntity AccuweatherHomeUvIndex2d => new(_haContext, "sensor.accuweather_home_uv_index_2d");
    ///<summary>AccuWeather Home UV index 3d</summary>
    public NumericSensorEntity AccuweatherHomeUvIndex3d => new(_haContext, "sensor.accuweather_home_uv_index_3d");
    ///<summary>AccuWeather Home UV index 4d</summary>
    public NumericSensorEntity AccuweatherHomeUvIndex4d => new(_haContext, "sensor.accuweather_home_uv_index_4d");
    ///<summary>AccuWeather Home Wind</summary>
    public NumericSensorEntity AccuweatherHomeWind => new(_haContext, "sensor.accuweather_home_wind");
    ///<summary>AccuWeather Home Wind day 0d</summary>
    public NumericSensorEntity AccuweatherHomeWindDay0d => new(_haContext, "sensor.accuweather_home_wind_day_0d");
    ///<summary>AccuWeather Home Wind day 1d</summary>
    public NumericSensorEntity AccuweatherHomeWindDay1d => new(_haContext, "sensor.accuweather_home_wind_day_1d");
    ///<summary>AccuWeather Home Wind day 2d</summary>
    public NumericSensorEntity AccuweatherHomeWindDay2d => new(_haContext, "sensor.accuweather_home_wind_day_2d");
    ///<summary>AccuWeather Home Wind day 3d</summary>
    public NumericSensorEntity AccuweatherHomeWindDay3d => new(_haContext, "sensor.accuweather_home_wind_day_3d");
    ///<summary>AccuWeather Home Wind day 4d</summary>
    public NumericSensorEntity AccuweatherHomeWindDay4d => new(_haContext, "sensor.accuweather_home_wind_day_4d");
    ///<summary>AccuWeather Home Wind night 0d</summary>
    public NumericSensorEntity AccuweatherHomeWindNight0d => new(_haContext, "sensor.accuweather_home_wind_night_0d");
    ///<summary>AccuWeather Home Wind night 1d</summary>
    public NumericSensorEntity AccuweatherHomeWindNight1d => new(_haContext, "sensor.accuweather_home_wind_night_1d");
    ///<summary>AccuWeather Home Wind night 2d</summary>
    public NumericSensorEntity AccuweatherHomeWindNight2d => new(_haContext, "sensor.accuweather_home_wind_night_2d");
    ///<summary>AccuWeather Home Wind night 3d</summary>
    public NumericSensorEntity AccuweatherHomeWindNight3d => new(_haContext, "sensor.accuweather_home_wind_night_3d");
    ///<summary>AccuWeather Home Wind night 4d</summary>
    public NumericSensorEntity AccuweatherHomeWindNight4d => new(_haContext, "sensor.accuweather_home_wind_night_4d");
    ///<summary>All standby energy</summary>
    public NumericSensorEntity AllStandbyEnergy => new(_haContext, "sensor.all_standby_energy");
    ///<summary>All standby power</summary>
    public NumericSensorEntity AllStandbyPower => new(_haContext, "sensor.all_standby_power");
    ///<summary>android-b8c33f1cb7c0d776 RX</summary>
    public NumericSensorEntity AndroidB8c33f1cb7c0d776Rx => new(_haContext, "sensor.android_b8c33f1cb7c0d776_rx");
    ///<summary>android-b8c33f1cb7c0d776 TX</summary>
    public NumericSensorEntity AndroidB8c33f1cb7c0d776Tx => new(_haContext, "sensor.android_b8c33f1cb7c0d776_tx");
    ///<summary>Aaron Birthday</summary>
    public NumericSensorEntity AnniversaryAaronBirthday => new(_haContext, "sensor.anniversary_aaron_birthday");
    ///<summary>Christmas</summary>
    public NumericSensorEntity AnniversaryChristmas => new(_haContext, "sensor.anniversary_christmas");
    ///<summary>Eugene Birthday</summary>
    public NumericSensorEntity AnniversaryEugeneBirthday => new(_haContext, "sensor.anniversary_eugene_birthday");
    ///<summary>Gabriel Birthday</summary>
    public NumericSensorEntity AnniversaryGabrielBirthday => new(_haContext, "sensor.anniversary_gabriel_birthday");
    ///<summary>Grandad Johan Birthday</summary>
    public NumericSensorEntity AnniversaryGrandadJohanBirthday => new(_haContext, "sensor.anniversary_grandad_johan_birthday");
    ///<summary>Granny Aubrecia Birthday</summary>
    public NumericSensorEntity AnniversaryGrannyAubreciaBirthday => new(_haContext, "sensor.anniversary_granny_aubrecia_birthday");
    ///<summary>Granny Louise Birthday</summary>
    public NumericSensorEntity AnniversaryGrannyLouiseBirthday => new(_haContext, "sensor.anniversary_granny_louise_birthday");
    ///<summary>Granny Zelda Birthday</summary>
    public NumericSensorEntity AnniversaryGrannyZeldaBirthday => new(_haContext, "sensor.anniversary_granny_zelda_birthday");
    ///<summary>Hailey Birthday</summary>
    public NumericSensorEntity AnniversaryHaileyBirthday => new(_haContext, "sensor.anniversary_hailey_birthday");
    ///<summary>Hilton La Romana</summary>
    public NumericSensorEntity AnniversaryHiltonLaRomana => new(_haContext, "sensor.anniversary_hilton_la_romana");
    ///<summary>Jayden Birthday</summary>
    public NumericSensorEntity AnniversaryJaydenBirthday => new(_haContext, "sensor.anniversary_jayden_birthday");
    ///<summary>New Years</summary>
    public NumericSensorEntity AnniversaryNewYears => new(_haContext, "sensor.anniversary_new_years");
    ///<summary>RX</summary>
    public NumericSensorEntity Asaz5cg126368dRx => new(_haContext, "sensor.asaz_5cg126368d_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity Asaz5cg126368dTx => new(_haContext, "sensor.asaz_5cg126368d_tx");
    ///<summary>ASGLH-WL-19140 RX</summary>
    public NumericSensorEntity AsglhWl19140Rx => new(_haContext, "sensor.asglh_wl_19140_rx");
    ///<summary>ASGLH-WL-19140 TX</summary>
    public NumericSensorEntity AsglhWl19140Tx => new(_haContext, "sensor.asglh_wl_19140_tx");
    ///<summary>Aubrecia Average Active Pace</summary>
    public NumericSensorEntity AubreciaAverageActivePace => new(_haContext, "sensor.aubrecia_average_active_pace");
    ///<summary>Aubrecia Battery Level</summary>
    public NumericSensorEntity AubreciaBatteryLevel => new(_haContext, "sensor.aubrecia_battery_level");
    ///<summary>Aubrecia Distance</summary>
    public NumericSensorEntity AubreciaDistance => new(_haContext, "sensor.aubrecia_distance");
    ///<summary>Aubrecia Drive Battery</summary>
    public NumericSensorEntity AubreciaDriveBattery => new(_haContext, "sensor.aubrecia_drive_battery");
    ///<summary>Aubrecia Floors Ascended</summary>
    public NumericSensorEntity AubreciaFloorsAscended => new(_haContext, "sensor.aubrecia_floors_ascended");
    ///<summary>Aubrecia Floors Descended</summary>
    public NumericSensorEntity AubreciaFloorsDescended => new(_haContext, "sensor.aubrecia_floors_descended");
    ///<summary>Aubrecia Front Door Battery</summary>
    public NumericSensorEntity AubreciaFrontDoorBattery => new(_haContext, "sensor.aubrecia_front_door_battery");
    ///<summary>Aubrecia Front Door Battery</summary>
    public NumericSensorEntity AubreciaFrontDoorBattery2 => new(_haContext, "sensor.aubrecia_front_door_battery_2");
    ///<summary>Aubrecia Steps</summary>
    public NumericSensorEntity AubreciaSteps => new(_haContext, "sensor.aubrecia_steps");
    ///<summary>Aubrecia Storage</summary>
    public NumericSensorEntity AubreciaStorage => new(_haContext, "sensor.aubrecia_storage");
    ///<summary>AubreciasiPhone RX</summary>
    public NumericSensorEntity AubreciasiphoneRx => new(_haContext, "sensor.aubreciasiphone_rx");
    ///<summary>AubreciasiPhone TX</summary>
    public NumericSensorEntity AubreciasiphoneTx => new(_haContext, "sensor.aubreciasiphone_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity AubriVaioRx => new(_haContext, "sensor.aubri_vaio_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity AubriVaioTx => new(_haContext, "sensor.aubri_vaio_tx");
    ///<summary>Average Lux Downstairs</summary>
    public NumericSensorEntity AverageLuxDownstairs => new(_haContext, "sensor.average_lux_downstairs");
    ///<summary>Average Lux Upstairs</summary>
    public NumericSensorEntity AverageLuxUpstairs => new(_haContext, "sensor.average_lux_upstairs");
    ///<summary>Average Ping Konnected AddOn Count</summary>
    public NumericSensorEntity AveragePingKonnectedAddonCount => new(_haContext, "sensor.average_ping_konnected_addon_count");
    ///<summary>Average Ping Konnected AddOn Ratio</summary>
    public NumericSensorEntity AveragePingKonnectedAddonRatio => new(_haContext, "sensor.average_ping_konnected_addon_ratio");
    ///<summary>Average Ping Konnected Google Count</summary>
    public NumericSensorEntity AveragePingKonnectedGoogleCount => new(_haContext, "sensor.average_ping_konnected_google_count");
    ///<summary>Average Ping Konnected Google Ratio</summary>
    public NumericSensorEntity AveragePingKonnectedGoogleRatio => new(_haContext, "sensor.average_ping_konnected_google_ratio");
    ///<summary>Average Ping Konnected Main Count</summary>
    public NumericSensorEntity AveragePingKonnectedMainCount => new(_haContext, "sensor.average_ping_konnected_main_count");
    ///<summary>Average Ping Konnected Main Ratio</summary>
    public NumericSensorEntity AveragePingKonnectedMainRatio => new(_haContext, "sensor.average_ping_konnected_main_ratio");
    ///<summary>Average Temp</summary>
    public NumericSensorEntity AverageTemp => new(_haContext, "sensor.average_temp");
    ///<summary>Average Temp Downstairs</summary>
    public NumericSensorEntity AverageTempDownstairs => new(_haContext, "sensor.average_temp_downstairs");
    ///<summary>Average Temp Upstairs</summary>
    public NumericSensorEntity AverageTempUpstairs => new(_haContext, "sensor.average_temp_upstairs");
    ///<summary>Bathroom Lux</summary>
    public NumericSensorEntity BathroomLux => new(_haContext, "sensor.bathroom_lux");
    ///<summary>Bathroom Motion Battery</summary>
    public NumericSensorEntity BathroomMotionBattery => new(_haContext, "sensor.bathroom_motion_battery");
    ///<summary>Bedroom 1 RX</summary>
    public NumericSensorEntity Bedroom1AcRx => new(_haContext, "sensor.bedroom_1_ac_rx");
    ///<summary>Bedroom 1 TX</summary>
    public NumericSensorEntity Bedroom1AcTx => new(_haContext, "sensor.bedroom_1_ac_tx");
    ///<summary>Bedroom 1 Daily Energy Consumed</summary>
    public NumericSensorEntity Bedroom1DailyEnergyConsumed => new(_haContext, "sensor.bedroom_1_daily_energy_consumed");
    ///<summary>Bedroom 1 Energy</summary>
    public NumericSensorEntity Bedroom1Energy => new(_haContext, "sensor.bedroom_1_energy");
    ///<summary>Bedroom 1 Room Temperature</summary>
    public NumericSensorEntity Bedroom1RoomTemperature => new(_haContext, "sensor.bedroom_1_room_temperature");
    ///<summary>Bedroom 2 RX</summary>
    public NumericSensorEntity Bedroom2AcRx => new(_haContext, "sensor.bedroom_2_ac_rx");
    ///<summary>Bedroom 2 TX</summary>
    public NumericSensorEntity Bedroom2AcTx => new(_haContext, "sensor.bedroom_2_ac_tx");
    ///<summary>Bedroom 2 Daily Energy Consumed</summary>
    public NumericSensorEntity Bedroom2DailyEnergyConsumed => new(_haContext, "sensor.bedroom_2_daily_energy_consumed");
    ///<summary>Bedroom 2 Energy</summary>
    public NumericSensorEntity Bedroom2Energy => new(_haContext, "sensor.bedroom_2_energy");
    ///<summary>Bedroom 2 Room Temperature</summary>
    public NumericSensorEntity Bedroom2RoomTemperature => new(_haContext, "sensor.bedroom_2_room_temperature");
    ///<summary>Bedroom 3 RX</summary>
    public NumericSensorEntity Bedroom3AcRx => new(_haContext, "sensor.bedroom_3_ac_rx");
    ///<summary>Bedroom 3 TX</summary>
    public NumericSensorEntity Bedroom3AcTx => new(_haContext, "sensor.bedroom_3_ac_tx");
    ///<summary>Bedroom 3 Daily Energy Consumed</summary>
    public NumericSensorEntity Bedroom3DailyEnergyConsumed => new(_haContext, "sensor.bedroom_3_daily_energy_consumed");
    ///<summary>Bedroom 3 Energy</summary>
    public NumericSensorEntity Bedroom3Energy => new(_haContext, "sensor.bedroom_3_energy");
    ///<summary>Bedroom 3 Room Temperature</summary>
    public NumericSensorEntity Bedroom3RoomTemperature => new(_haContext, "sensor.bedroom_3_room_temperature");
    ///<summary>Bedroom 4 RX</summary>
    public NumericSensorEntity Bedroom4AcRx => new(_haContext, "sensor.bedroom_4_ac_rx");
    ///<summary>Bedroom 4 TX</summary>
    public NumericSensorEntity Bedroom4AcTx => new(_haContext, "sensor.bedroom_4_ac_tx");
    ///<summary>Bedroom 4 Daily Energy Consumed</summary>
    public NumericSensorEntity Bedroom4DailyEnergyConsumed => new(_haContext, "sensor.bedroom_4_daily_energy_consumed");
    ///<summary>Bedroom 4 Energy</summary>
    public NumericSensorEntity Bedroom4Energy => new(_haContext, "sensor.bedroom_4_energy");
    ///<summary>Bedroom 4 Room Temperature</summary>
    public NumericSensorEntity Bedroom4RoomTemperature => new(_haContext, "sensor.bedroom_4_room_temperature");
    ///<summary>bosch-dishwasher-01204052703001 RX RX</summary>
    public NumericSensorEntity BoschDishwasher01204052703001Rx => new(_haContext, "sensor.bosch_dishwasher_01204052703001_rx");
    ///<summary>bosch-dishwasher-01204052703001 RX TX</summary>
    public NumericSensorEntity BoschDishwasher01204052703001Tx => new(_haContext, "sensor.bosch_dishwasher_01204052703001_tx");
    ///<summary>C02T8GTYGVC1 RX RX</summary>
    public NumericSensorEntity C02t8gtygvc1Rx => new(_haContext, "sensor.c02t8gtygvc1_rx");
    ///<summary>C02T8GTYGVC1 RX TX</summary>
    public NumericSensorEntity C02t8gtygvc1Tx => new(_haContext, "sensor.c02t8gtygvc1_tx");
    ///<summary>christmas_indoor-1558 RX</summary>
    public NumericSensorEntity ChristmasIndoor1558Rx => new(_haContext, "sensor.christmas_indoor_1558_rx");
    ///<summary>christmas_indoor-1558 TX</summary>
    public NumericSensorEntity ChristmasIndoor1558Tx => new(_haContext, "sensor.christmas_indoor_1558_tx");
    ///<summary>Coffee Machine</summary>
    public NumericSensorEntity CoffeeMachine => new(_haContext, "sensor.coffee_machine");
    ///<summary>RX</summary>
    public NumericSensorEntity DesktopIpurn8tRx => new(_haContext, "sensor.desktop_ipurn8t_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity DesktopIpurn8tTx => new(_haContext, "sensor.desktop_ipurn8t_tx");
    ///<summary>dining 1 energy</summary>
    public NumericSensorEntity Dining1Energy => new(_haContext, "sensor.dining_1_energy");
    ///<summary>dining 1 power</summary>
    public NumericSensorEntity Dining1Power => new(_haContext, "sensor.dining_1_power");
    ///<summary>dining 2 energy</summary>
    public NumericSensorEntity Dining2Energy => new(_haContext, "sensor.dining_2_energy");
    ///<summary>dining 2 power</summary>
    public NumericSensorEntity Dining2Power => new(_haContext, "sensor.dining_2_power");
    ///<summary>dining 3 energy</summary>
    public NumericSensorEntity Dining3Energy => new(_haContext, "sensor.dining_3_energy");
    ///<summary>dining 3 power</summary>
    public NumericSensorEntity Dining3Power => new(_haContext, "sensor.dining_3_power");
    ///<summary>dining 4 energy</summary>
    public NumericSensorEntity Dining4Energy => new(_haContext, "sensor.dining_4_energy");
    ///<summary>dining 4 power</summary>
    public NumericSensorEntity Dining4Power => new(_haContext, "sensor.dining_4_power");
    ///<summary>dining 5 energy</summary>
    public NumericSensorEntity Dining5Energy => new(_haContext, "sensor.dining_5_energy");
    ///<summary>dining 5 power</summary>
    public NumericSensorEntity Dining5Power => new(_haContext, "sensor.dining_5_power");
    ///<summary>Dining Echo RX</summary>
    public NumericSensorEntity DiningEchoRx => new(_haContext, "sensor.dining_echo_rx");
    ///<summary>Dining Echo TX</summary>
    public NumericSensorEntity DiningEchoTx => new(_haContext, "sensor.dining_echo_tx");
    ///<summary>Dining Lux</summary>
    public NumericSensorEntity DiningLux => new(_haContext, "sensor.dining_lux");
    ///<summary>Dining Motion Battery</summary>
    public NumericSensorEntity DiningMotionBattery => new(_haContext, "sensor.dining_motion_battery");
    ///<summary>Dining RX</summary>
    public NumericSensorEntity DiningRx => new(_haContext, "sensor.dining_rx");
    ///<summary>Dining TX</summary>
    public NumericSensorEntity DiningTx => new(_haContext, "sensor.dining_tx");
    ///<summary>dining wall 1 energy</summary>
    public NumericSensorEntity DiningWall1Energy => new(_haContext, "sensor.dining_wall_1_energy");
    ///<summary>dining wall 1 power</summary>
    public NumericSensorEntity DiningWall1Power => new(_haContext, "sensor.dining_wall_1_power");
    ///<summary>dining wall 2 energy</summary>
    public NumericSensorEntity DiningWall2Energy => new(_haContext, "sensor.dining_wall_2_energy");
    ///<summary>dining wall 2 power</summary>
    public NumericSensorEntity DiningWall2Power => new(_haContext, "sensor.dining_wall_2_power");
    ///<summary>Dishwasher Duration</summary>
    public NumericSensorEntity DishwasherDuration => new(_haContext, "sensor.dishwasher_duration");
    ///<summary>Dishwasher Power</summary>
    public NumericSensorEntity DishwasherPower => new(_haContext, "sensor.dishwasher_power");
    ///<summary>Dishwasher Power Total</summary>
    public NumericSensorEntity DishwasherPowerTotal => new(_haContext, "sensor.dishwasher_power_total");
    ///<summary>Dishwasher Power Utility Meter</summary>
    public NumericSensorEntity DishwasherPowerUtilityMeter => new(_haContext, "sensor.dishwasher_power_utility_meter");
    ///<summary>Dishwasher Program Progress</summary>
    public NumericSensorEntity DishwasherProgramProgress => new(_haContext, "sensor.dishwasher_program_progress");
    ///<summary>Downstairs Wireless</summary>
    public NumericSensorEntity DownstairsWireless => new(_haContext, "sensor.downstairs_wireless");
    ///<summary>drive_meter</summary>
    public NumericSensorEntity DriveMeter => new(_haContext, "sensor.drive_meter");
    ///<summary>Drive Temp</summary>
    public NumericSensorEntity DriveTemp => new(_haContext, "sensor.drive_temp");
    ///<summary>Dryer Energy</summary>
    public NumericSensorEntity DryerEnergy => new(_haContext, "sensor.dryer_energy");
    ///<summary>Dryer Power</summary>
    public NumericSensorEntity DryerPower => new(_haContext, "sensor.dryer_power");
    ///<summary>dryer RX</summary>
    public NumericSensorEntity DryerRx => new(_haContext, "sensor.dryer_rx");
    ///<summary>dryer TX</summary>
    public NumericSensorEntity DryerTx => new(_haContext, "sensor.dryer_tx");
    ///<summary>DCC Sourced smart electricity meter Usage (today)</summary>
    public NumericSensorEntity ElectricConsumptionToday => new(_haContext, "sensor.electric_consumption_today");
    ///<summary>DCC Sourced smart electricity meter Cost (today)</summary>
    public NumericSensorEntity ElectricCostToday => new(_haContext, "sensor.electric_cost_today");
    ///<summary>DCC Sourced smart electricity meter Rate</summary>
    public NumericSensorEntity ElectricTariffRate => new(_haContext, "sensor.electric_tariff_rate");
    ///<summary>DCC Sourced smart electricity meter Standing charge</summary>
    public NumericSensorEntity ElectricTariffStanding => new(_haContext, "sensor.electric_tariff_standing");
    ///<summary>Entrance energy</summary>
    public NumericSensorEntity EntranceEnergy => new(_haContext, "sensor.entrance_energy");
    ///<summary>Entrance Lux</summary>
    public NumericSensorEntity EntranceLux => new(_haContext, "sensor.entrance_lux");
    ///<summary>Entrance Motion Battery</summary>
    public NumericSensorEntity EntranceMotionBattery => new(_haContext, "sensor.entrance_motion_battery");
    ///<summary>Entrance power</summary>
    public NumericSensorEntity EntrancePower => new(_haContext, "sensor.entrance_power");
    ///<summary>Entrance RX</summary>
    public NumericSensorEntity EntranceRx => new(_haContext, "sensor.entrance_rx");
    ///<summary>Entrance TX</summary>
    public NumericSensorEntity EntranceTx => new(_haContext, "sensor.entrance_tx");
    ///<summary>ESP_5E9EB5 RX RX</summary>
    public NumericSensorEntity Esp5e9eb5Rx => new(_haContext, "sensor.esp_5e9eb5_rx");
    ///<summary>ESP_5E9EB5 RX TX</summary>
    public NumericSensorEntity Esp5e9eb5Tx => new(_haContext, "sensor.esp_5e9eb5_tx");
    ///<summary>ESP_6B7081 RX</summary>
    public NumericSensorEntity Esp6b7081Rx => new(_haContext, "sensor.esp_6b7081_rx");
    ///<summary>ESP_6B7081 TX</summary>
    public NumericSensorEntity Esp6b7081Tx => new(_haContext, "sensor.esp_6b7081_tx");
    ///<summary>ESP_6B7A3A RX</summary>
    public NumericSensorEntity Esp6b7a3aRx => new(_haContext, "sensor.esp_6b7a3a_rx");
    ///<summary>ESP_6B7A3A TX</summary>
    public NumericSensorEntity Esp6b7a3aTx => new(_haContext, "sensor.esp_6b7a3a_tx");
    ///<summary>eufy RoboVac RX</summary>
    public NumericSensorEntity EufyRobovacRx => new(_haContext, "sensor.eufy_robovac_rx");
    ///<summary>eufy RoboVac RX</summary>
    public NumericSensorEntity EufyRobovacRx2 => new(_haContext, "sensor.eufy_robovac_rx_2");
    ///<summary>eufy RoboVac TX</summary>
    public NumericSensorEntity EufyRobovacTx => new(_haContext, "sensor.eufy_robovac_tx");
    ///<summary>eufy RoboVac TX</summary>
    public NumericSensorEntity EufyRobovacTx2 => new(_haContext, "sensor.eufy_robovac_tx_2");
    ///<summary>EUGENE-DESKTOP RX</summary>
    public NumericSensorEntity EugeneDesktopRx => new(_haContext, "sensor.eugene_desktop_rx");
    ///<summary>EUGENE-DESKTOP TX</summary>
    public NumericSensorEntity EugeneDesktopTx => new(_haContext, "sensor.eugene_desktop_tx");
    ///<summary>Eugene&apos;s iPhone Average Active Pace</summary>
    public NumericSensorEntity EugeneSIphoneAverageActivePace => new(_haContext, "sensor.eugene_s_iphone_average_active_pace");
    ///<summary>Eugene&apos;s iPhone Battery Level</summary>
    public NumericSensorEntity EugeneSIphoneBatteryLevel => new(_haContext, "sensor.eugene_s_iphone_battery_level");
    ///<summary>Eugene&apos;s iPhone Distance</summary>
    public NumericSensorEntity EugeneSIphoneDistance => new(_haContext, "sensor.eugene_s_iphone_distance");
    ///<summary>Eugene&apos;s iPhone Floors Ascended</summary>
    public NumericSensorEntity EugeneSIphoneFloorsAscended => new(_haContext, "sensor.eugene_s_iphone_floors_ascended");
    ///<summary>Eugene&apos;s iPhone Floors Descended</summary>
    public NumericSensorEntity EugeneSIphoneFloorsDescended => new(_haContext, "sensor.eugene_s_iphone_floors_descended");
    ///<summary>Eugene&apos;s iPhone Steps</summary>
    public NumericSensorEntity EugeneSIphoneSteps => new(_haContext, "sensor.eugene_s_iphone_steps");
    ///<summary>Eugene&apos;s iPhone Storage</summary>
    public NumericSensorEntity EugeneSIphoneStorage => new(_haContext, "sensor.eugene_s_iphone_storage");
    ///<summary>Eugenes-iPhone RX</summary>
    public NumericSensorEntity EugenesIphoneRx => new(_haContext, "sensor.eugenes_iphone_rx");
    ///<summary>Eugenes-iPhone TX</summary>
    public NumericSensorEntity EugenesIphoneTx => new(_haContext, "sensor.eugenes_iphone_tx");
    ///<summary>Eugene&apos;s MacBook Internal Battery Level</summary>
    public NumericSensorEntity EugenesMacbookInternalBatteryLevel => new(_haContext, "sensor.eugenes_macbook_internal_battery_level");
    ///<summary>Eugene&apos;s MacBook Storage</summary>
    public NumericSensorEntity EugenesMacbookStorage => new(_haContext, "sensor.eugenes_macbook_storage");
    ///<summary>EugenespleWatch RX</summary>
    public NumericSensorEntity EugenesplewatchRx => new(_haContext, "sensor.eugenesplewatch_rx");
    ///<summary>EugenespleWatch TX</summary>
    public NumericSensorEntity EugenesplewatchTx => new(_haContext, "sensor.eugenesplewatch_tx");
    ///<summary>Fish Lights Switch Device Power</summary>
    public NumericSensorEntity FishLightsSwitchDevicePower => new(_haContext, "sensor.fish_lights_switch_device_power");
    ///<summary>Floor energy</summary>
    public NumericSensorEntity FloorEnergy => new(_haContext, "sensor.floor_energy");
    ///<summary>floor_light-2086 RX</summary>
    public NumericSensorEntity FloorLight2086Rx => new(_haContext, "sensor.floor_light_2086_rx");
    ///<summary>floor_light-2086 TX</summary>
    public NumericSensorEntity FloorLight2086Tx => new(_haContext, "sensor.floor_light_2086_tx");
    ///<summary>Floor power</summary>
    public NumericSensorEntity FloorPower => new(_haContext, "sensor.floor_power");
    ///<summary>Foscam RX</summary>
    public NumericSensorEntity FoscamRx => new(_haContext, "sensor.foscam_rx");
    ///<summary>Foscam TX</summary>
    public NumericSensorEntity FoscamTx => new(_haContext, "sensor.foscam_tx");
    ///<summary>Galaxy-S8 RX</summary>
    public NumericSensorEntity GalaxyS8Rx => new(_haContext, "sensor.galaxy_s8_rx");
    ///<summary>Galaxy-S8 TX</summary>
    public NumericSensorEntity GalaxyS8Tx => new(_haContext, "sensor.galaxy_s8_tx");
    ///<summary>Garage Echo RX</summary>
    public NumericSensorEntity GarageEchoRx => new(_haContext, "sensor.garage_echo_rx");
    ///<summary>Garage Echo TX</summary>
    public NumericSensorEntity GarageEchoTx => new(_haContext, "sensor.garage_echo_tx");
    ///<summary>Garden Battery</summary>
    public NumericSensorEntity GardenBattery2 => new(_haContext, "sensor.garden_battery_2");
    ///<summary>Garden Echo RX RX</summary>
    public NumericSensorEntity GardenEchoRx => new(_haContext, "sensor.garden_echo_rx");
    ///<summary>Garden Echo RX TX</summary>
    public NumericSensorEntity GardenEchoTx => new(_haContext, "sensor.garden_echo_tx");
    ///<summary>Garden Floodlights RX</summary>
    public NumericSensorEntity GardenFloodlightsRx => new(_haContext, "sensor.garden_floodlights_rx");
    ///<summary>Garden Floodlights TX</summary>
    public NumericSensorEntity GardenFloodlightsTx => new(_haContext, "sensor.garden_floodlights_tx");
    ///<summary>DCC Sourced smart gas meter Usage (today)</summary>
    public NumericSensorEntity GasConsumptionToday => new(_haContext, "sensor.gas_consumption_today");
    ///<summary>DCC Sourced smart gas meter Cost (today)</summary>
    public NumericSensorEntity GasCostToday => new(_haContext, "sensor.gas_cost_today");
    ///<summary>DCC Sourced smart gas meter Rate</summary>
    public NumericSensorEntity GasTariffRate => new(_haContext, "sensor.gas_tariff_rate");
    ///<summary>DCC Sourced smart gas meter Standing charge</summary>
    public NumericSensorEntity GasTariffStanding => new(_haContext, "sensor.gas_tariff_standing");
    ///<summary>Glow Smart Meter 4417935019B0 RX</summary>
    public NumericSensorEntity GlowIhd5019b0Rx => new(_haContext, "sensor.glow_ihd_5019b0_rx");
    ///<summary>Glow Smart Meter 4417935019B0 TX</summary>
    public NumericSensorEntity GlowIhd5019b0Tx => new(_haContext, "sensor.glow_ihd_5019b0_tx");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>Hailey&apos;s iPhone Average Active Pace</summary>
    public NumericSensorEntity HaileySIphoneAverageActivePace => new(_haContext, "sensor.hailey_s_iphone_average_active_pace");
    ///<summary>Hailey&apos;s iPhone Battery Level</summary>
    public NumericSensorEntity HaileySIphoneBatteryLevel => new(_haContext, "sensor.hailey_s_iphone_battery_level");
    ///<summary>Hailey&apos;s iPhone Distance</summary>
    public NumericSensorEntity HaileySIphoneDistance => new(_haContext, "sensor.hailey_s_iphone_distance");
    ///<summary>Hailey&apos;s iPhone Floors Ascended</summary>
    public NumericSensorEntity HaileySIphoneFloorsAscended => new(_haContext, "sensor.hailey_s_iphone_floors_ascended");
    ///<summary>Hailey&apos;s iPhone Floors Descended</summary>
    public NumericSensorEntity HaileySIphoneFloorsDescended => new(_haContext, "sensor.hailey_s_iphone_floors_descended");
    ///<summary>Hailey&apos;s iPhone Steps</summary>
    public NumericSensorEntity HaileySIphoneSteps => new(_haContext, "sensor.hailey_s_iphone_steps");
    ///<summary>Hailey&apos;s iPhone Storage</summary>
    public NumericSensorEntity HaileySIphoneStorage => new(_haContext, "sensor.hailey_s_iphone_storage");
    ///<summary>Haileys-Air RX</summary>
    public NumericSensorEntity HaileysAirRx => new(_haContext, "sensor.haileys_air_rx");
    ///<summary>Haileys-Air TX</summary>
    public NumericSensorEntity HaileysAirTx => new(_haContext, "sensor.haileys_air_tx");
    ///<summary>Haileys-iPhone RX</summary>
    public NumericSensorEntity HaileysIphoneRx => new(_haContext, "sensor.haileys_iphone_rx");
    ///<summary>Haileys-iPhone RX</summary>
    public NumericSensorEntity HaileysIphoneRx2 => new(_haContext, "sensor.haileys_iphone_rx_2");
    ///<summary>Haileys-iPhone TX</summary>
    public NumericSensorEntity HaileysIphoneTx => new(_haContext, "sensor.haileys_iphone_tx");
    ///<summary>Haileys-iPhone TX</summary>
    public NumericSensorEntity HaileysIphoneTx2 => new(_haContext, "sensor.haileys_iphone_tx_2");
    ///<summary>Hailey’s MacBook Air Internal Battery Level</summary>
    public NumericSensorEntity HaileysMacbookAirInternalBatteryLevel => new(_haContext, "sensor.haileys_macbook_air_internal_battery_level");
    ///<summary>Hailey’s MacBook Air Storage</summary>
    public NumericSensorEntity HaileysMacbookAirStorage => new(_haContext, "sensor.haileys_macbook_air_storage");
    ///<summary>Hallway energy</summary>
    public NumericSensorEntity HallwayEnergy => new(_haContext, "sensor.hallway_energy");
    ///<summary>Hallway power</summary>
    public NumericSensorEntity HallwayPower => new(_haContext, "sensor.hallway_power");
    ///<summary>Hot Tub Bubbles energy</summary>
    public NumericSensorEntity HotTubBubblesEnergy => new(_haContext, "sensor.hot_tub_bubbles_energy");
    ///<summary>Hot Tub Bubbles energy daily</summary>
    public NumericSensorEntity HotTubBubblesEnergyDaily => new(_haContext, "sensor.hot_tub_bubbles_energy_daily");
    ///<summary>Hot Tub Bubbles energy monthly</summary>
    public NumericSensorEntity HotTubBubblesEnergyMonthly => new(_haContext, "sensor.hot_tub_bubbles_energy_monthly");
    ///<summary>Hot Tub Bubbles energy weekly</summary>
    public NumericSensorEntity HotTubBubblesEnergyWeekly => new(_haContext, "sensor.hot_tub_bubbles_energy_weekly");
    ///<summary>Hot Tub Bubbles power</summary>
    public NumericSensorEntity HotTubBubblesPower => new(_haContext, "sensor.hot_tub_bubbles_power");
    ///<summary>Hot Tub energy</summary>
    public NumericSensorEntity HotTubEnergy => new(_haContext, "sensor.hot_tub_energy");
    ///<summary>Hot Tub energy daily</summary>
    public NumericSensorEntity HotTubEnergyDaily => new(_haContext, "sensor.hot_tub_energy_daily");
    ///<summary>Hot Tub energy monthly</summary>
    public NumericSensorEntity HotTubEnergyMonthly => new(_haContext, "sensor.hot_tub_energy_monthly");
    ///<summary>Hot Tub energy weekly</summary>
    public NumericSensorEntity HotTubEnergyWeekly => new(_haContext, "sensor.hot_tub_energy_weekly");
    ///<summary>Hot Tub Heater energy</summary>
    public NumericSensorEntity HotTubHeaterEnergy => new(_haContext, "sensor.hot_tub_heater_energy");
    ///<summary>Hot Tub Heater energy daily</summary>
    public NumericSensorEntity HotTubHeaterEnergyDaily => new(_haContext, "sensor.hot_tub_heater_energy_daily");
    ///<summary>Hot Tub Heater energy monthly</summary>
    public NumericSensorEntity HotTubHeaterEnergyMonthly => new(_haContext, "sensor.hot_tub_heater_energy_monthly");
    ///<summary>Hot Tub Heater energy weekly</summary>
    public NumericSensorEntity HotTubHeaterEnergyWeekly => new(_haContext, "sensor.hot_tub_heater_energy_weekly");
    ///<summary>Hot Tub Heater power</summary>
    public NumericSensorEntity HotTubHeaterPower => new(_haContext, "sensor.hot_tub_heater_power");
    ///<summary>Hot Tub power</summary>
    public NumericSensorEntity HotTubPower => new(_haContext, "sensor.hot_tub_power");
    ///<summary>Hot Tub Pump energy</summary>
    public NumericSensorEntity HotTubPumpEnergy => new(_haContext, "sensor.hot_tub_pump_energy");
    ///<summary>Hot Tub Pump energy daily</summary>
    public NumericSensorEntity HotTubPumpEnergyDaily => new(_haContext, "sensor.hot_tub_pump_energy_daily");
    ///<summary>Hot Tub Pump energy monthly</summary>
    public NumericSensorEntity HotTubPumpEnergyMonthly => new(_haContext, "sensor.hot_tub_pump_energy_monthly");
    ///<summary>Hot Tub Pump energy weekly</summary>
    public NumericSensorEntity HotTubPumpEnergyWeekly => new(_haContext, "sensor.hot_tub_pump_energy_weekly");
    ///<summary>Hot Tub Pump power</summary>
    public NumericSensorEntity HotTubPumpPower => new(_haContext, "sensor.hot_tub_pump_power");
    ///<summary>Hottubcontrol RX</summary>
    public NumericSensorEntity HottubcontrolRx => new(_haContext, "sensor.hottubcontrol_rx");
    ///<summary>Hottubcontrol TX</summary>
    public NumericSensorEntity HottubcontrolTx => new(_haContext, "sensor.hottubcontrol_tx");
    ///<summary>HUAWEI_P_smart_2019-86203 RX</summary>
    public NumericSensorEntity HuaweiPSmart201986203Rx => new(_haContext, "sensor.huawei_p_smart_2019_86203_rx");
    ///<summary>HUAWEI_P_smart_2019-86203 TX</summary>
    public NumericSensorEntity HuaweiPSmart201986203Tx => new(_haContext, "sensor.huawei_p_smart_2019_86203_tx");
    ///<summary>IKEA of Sweden TRADFRI remote control Battery</summary>
    public NumericSensorEntity IkeaOfSwedenTradfriRemoteControl580e51fePower => new(_haContext, "sensor.ikea_of_sweden_tradfri_remote_control_580e51fe_power");
    ///<summary>IKEA of Sweden TRADFRI remote control Battery</summary>
    public NumericSensorEntity IkeaOfSwedenTradfriRemoteControlD73648fePower => new(_haContext, "sensor.ikea_of_sweden_tradfri_remote_control_d73648fe_power");
    ///<summary>iPad RX</summary>
    public NumericSensorEntity IpadRx => new(_haContext, "sensor.ipad_rx");
    ///<summary>RX</summary>
    public NumericSensorEntity IpadRx2 => new(_haContext, "sensor.ipad_rx_2");
    ///<summary>iPad TX</summary>
    public NumericSensorEntity IpadTx => new(_haContext, "sensor.ipad_tx");
    ///<summary>TX</summary>
    public NumericSensorEntity IpadTx2 => new(_haContext, "sensor.ipad_tx_2");
    ///<summary>RX</summary>
    public NumericSensorEntity IphoneRx => new(_haContext, "sensor.iphone_rx");
    ///<summary>iPhone RX RX</summary>
    public NumericSensorEntity IphoneRx2 => new(_haContext, "sensor.iphone_rx_2");
    ///<summary>RX</summary>
    public NumericSensorEntity IphoneRx3 => new(_haContext, "sensor.iphone_rx_3");
    ///<summary>TX</summary>
    public NumericSensorEntity IphoneTx => new(_haContext, "sensor.iphone_tx");
    ///<summary>iPhone RX TX</summary>
    public NumericSensorEntity IphoneTx2 => new(_haContext, "sensor.iphone_tx_2");
    ///<summary>TX</summary>
    public NumericSensorEntity IphoneTx3 => new(_haContext, "sensor.iphone_tx_3");
    ///<summary>iPhone8P Battery Level</summary>
    public NumericSensorEntity Iphone8pBatteryLevel => new(_haContext, "sensor.iphone8p_battery_level");
    ///<summary>iPhone8P Storage</summary>
    public NumericSensorEntity Iphone8pStorage => new(_haContext, "sensor.iphone8p_storage");
    ///<summary>Jayden 1 energy</summary>
    public NumericSensorEntity Jayden1Energy => new(_haContext, "sensor.jayden_1_energy");
    ///<summary>Jayden 1 power</summary>
    public NumericSensorEntity Jayden1Power => new(_haContext, "sensor.jayden_1_power");
    ///<summary>Jayden 2 energy</summary>
    public NumericSensorEntity Jayden2Energy => new(_haContext, "sensor.jayden_2_energy");
    ///<summary>Jayden 2 power</summary>
    public NumericSensorEntity Jayden2Power => new(_haContext, "sensor.jayden_2_power");
    ///<summary>Jayden 3 energy</summary>
    public NumericSensorEntity Jayden3Energy => new(_haContext, "sensor.jayden_3_energy");
    ///<summary>Jayden 3 power</summary>
    public NumericSensorEntity Jayden3Power => new(_haContext, "sensor.jayden_3_power");
    ///<summary>Jayden 4 energy</summary>
    public NumericSensorEntity Jayden4Energy => new(_haContext, "sensor.jayden_4_energy");
    ///<summary>Jayden 4 power</summary>
    public NumericSensorEntity Jayden4Power => new(_haContext, "sensor.jayden_4_power");
    ///<summary>Jayden AppleTv RX</summary>
    public NumericSensorEntity JaydenAppletvRx => new(_haContext, "sensor.jayden_appletv_rx");
    ///<summary>Jayden AppleTv TX</summary>
    public NumericSensorEntity JaydenAppletvTx => new(_haContext, "sensor.jayden_appletv_tx");
    ///<summary>jayden_bedside-4734 RX</summary>
    public NumericSensorEntity JaydenBedside4734Rx => new(_haContext, "sensor.jayden_bedside_4734_rx");
    ///<summary>jayden_bedside-4734 TX</summary>
    public NumericSensorEntity JaydenBedside4734Tx => new(_haContext, "sensor.jayden_bedside_4734_tx");
    ///<summary>Jayden Echo RX</summary>
    public NumericSensorEntity JaydenEchoRx => new(_haContext, "sensor.jayden_echo_rx");
    ///<summary>Jayden Echo TX</summary>
    public NumericSensorEntity JaydenEchoTx => new(_haContext, "sensor.jayden_echo_tx");
    ///<summary>Jayden Lux</summary>
    public NumericSensorEntity JaydenLux => new(_haContext, "sensor.jayden_lux");
    ///<summary>Jayden Motion Battery</summary>
    public NumericSensorEntity JaydenMotionBattery => new(_haContext, "sensor.jayden_motion_battery");
    ///<summary>Jayden RX</summary>
    public NumericSensorEntity JaydenRx => new(_haContext, "sensor.jayden_rx");
    ///<summary>Jayden ’s iPad Battery Level</summary>
    public NumericSensorEntity JaydenSIpadBatteryLevel => new(_haContext, "sensor.jayden_s_ipad_battery_level");
    ///<summary>Jayden ’s iPad Storage</summary>
    public NumericSensorEntity JaydenSIpadStorage => new(_haContext, "sensor.jayden_s_ipad_storage");
    ///<summary>Jayden ’s iPhone Average Active Pace</summary>
    public NumericSensorEntity JaydenSIphoneAverageActivePace => new(_haContext, "sensor.jayden_s_iphone_average_active_pace");
    ///<summary>Jayden ’s iPhone Battery Level</summary>
    public NumericSensorEntity JaydenSIphoneBatteryLevel => new(_haContext, "sensor.jayden_s_iphone_battery_level");
    ///<summary>Jayden ’s iPhone Distance</summary>
    public NumericSensorEntity JaydenSIphoneDistance => new(_haContext, "sensor.jayden_s_iphone_distance");
    ///<summary>Jayden ’s iPhone Floors Ascended</summary>
    public NumericSensorEntity JaydenSIphoneFloorsAscended => new(_haContext, "sensor.jayden_s_iphone_floors_ascended");
    ///<summary>Jayden ’s iPhone Floors Descended</summary>
    public NumericSensorEntity JaydenSIphoneFloorsDescended => new(_haContext, "sensor.jayden_s_iphone_floors_descended");
    ///<summary>RX</summary>
    public NumericSensorEntity JaydenSIphoneRx => new(_haContext, "sensor.jayden_s_iphone_rx");
    ///<summary>Jayden-s-iPhone RX RX</summary>
    public NumericSensorEntity JaydenSIphoneRx2 => new(_haContext, "sensor.jayden_s_iphone_rx_2");
    ///<summary>Jayden-s-iPhone RX RX</summary>
    public NumericSensorEntity JaydenSIphoneRx3 => new(_haContext, "sensor.jayden_s_iphone_rx_3");
    ///<summary>Jayden ’s iPhone Steps</summary>
    public NumericSensorEntity JaydenSIphoneSteps => new(_haContext, "sensor.jayden_s_iphone_steps");
    ///<summary>Jayden ’s iPhone Storage</summary>
    public NumericSensorEntity JaydenSIphoneStorage => new(_haContext, "sensor.jayden_s_iphone_storage");
    ///<summary>TX</summary>
    public NumericSensorEntity JaydenSIphoneTx => new(_haContext, "sensor.jayden_s_iphone_tx");
    ///<summary>Jayden-s-iPhone RX TX</summary>
    public NumericSensorEntity JaydenSIphoneTx2 => new(_haContext, "sensor.jayden_s_iphone_tx_2");
    ///<summary>Jayden-s-iPhone RX TX</summary>
    public NumericSensorEntity JaydenSIphoneTx3 => new(_haContext, "sensor.jayden_s_iphone_tx_3");
    ///<summary>Jayden TX</summary>
    public NumericSensorEntity JaydenTx => new(_haContext, "sensor.jayden_tx");
    ///<summary>Johan Front Door Battery</summary>
    public NumericSensorEntity JohanFrontDoorBattery => new(_haContext, "sensor.johan_front_door_battery");
    ///<summary>IKEA of Sweden TRADFRI open/close remote Battery</summary>
    public NumericSensorEntity KeTradfriOpenCloseRemote3dcb2efePower => new(_haContext, "sensor.ke_tradfri_open_close_remote_3dcb2efe_power");
    ///<summary>kitchen 1 energy</summary>
    public NumericSensorEntity Kitchen1Energy => new(_haContext, "sensor.kitchen_1_energy");
    ///<summary>kitchen 1 power</summary>
    public NumericSensorEntity Kitchen1Power => new(_haContext, "sensor.kitchen_1_power");
    ///<summary>kitchen 2 energy</summary>
    public NumericSensorEntity Kitchen2Energy => new(_haContext, "sensor.kitchen_2_energy");
    ///<summary>kitchen 2 power</summary>
    public NumericSensorEntity Kitchen2Power => new(_haContext, "sensor.kitchen_2_power");
    ///<summary>kitchen 3 energy</summary>
    public NumericSensorEntity Kitchen3Energy => new(_haContext, "sensor.kitchen_3_energy");
    ///<summary>kitchen 3 power</summary>
    public NumericSensorEntity Kitchen3Power => new(_haContext, "sensor.kitchen_3_power");
    ///<summary>kitchen 4 energy</summary>
    public NumericSensorEntity Kitchen4Energy => new(_haContext, "sensor.kitchen_4_energy");
    ///<summary>kitchen 4 power</summary>
    public NumericSensorEntity Kitchen4Power => new(_haContext, "sensor.kitchen_4_power");
    ///<summary>kitchen 5 energy</summary>
    public NumericSensorEntity Kitchen5Energy => new(_haContext, "sensor.kitchen_5_energy");
    ///<summary>kitchen 5 power</summary>
    public NumericSensorEntity Kitchen5Power => new(_haContext, "sensor.kitchen_5_power");
    ///<summary>kitchen 6 energy</summary>
    public NumericSensorEntity Kitchen6Energy => new(_haContext, "sensor.kitchen_6_energy");
    ///<summary>kitchen 6 power</summary>
    public NumericSensorEntity Kitchen6Power => new(_haContext, "sensor.kitchen_6_power");
    ///<summary>Kitchen Echo RX</summary>
    public NumericSensorEntity KitchenEchoRx => new(_haContext, "sensor.kitchen_echo_rx");
    ///<summary>Kitchen Echo TX</summary>
    public NumericSensorEntity KitchenEchoTx => new(_haContext, "sensor.kitchen_echo_tx");
    ///<summary>Kitchen Lights energy</summary>
    public NumericSensorEntity KitchenLightsEnergy => new(_haContext, "sensor.kitchen_lights_energy");
    ///<summary>Kitchen Lights power</summary>
    public NumericSensorEntity KitchenLightsPower => new(_haContext, "sensor.kitchen_lights_power");
    ///<summary>Kitchen Lux</summary>
    public NumericSensorEntity KitchenLux => new(_haContext, "sensor.kitchen_lux");
    ///<summary>Kitchen Motion Battery</summary>
    public NumericSensorEntity KitchenMotionBattery => new(_haContext, "sensor.kitchen_motion_battery");
    ///<summary>Konnected Alarm Panel Add On RX</summary>
    public NumericSensorEntity KonnectedAddonRx => new(_haContext, "sensor.konnected_addon_rx");
    ///<summary>Konnected Alarm Panel Add On TX</summary>
    public NumericSensorEntity KonnectedAddonTx => new(_haContext, "sensor.konnected_addon_tx");
    ///<summary>Konnected Alarm Panel RX</summary>
    public NumericSensorEntity KonnectedMainRx => new(_haContext, "sensor.konnected_main_rx");
    ///<summary>Konnected Alarm Panel TX</summary>
    public NumericSensorEntity KonnectedMainTx => new(_haContext, "sensor.konnected_main_tx");
    ///<summary>landing 1 energy</summary>
    public NumericSensorEntity Landing1Energy => new(_haContext, "sensor.landing_1_energy");
    ///<summary>landing 1 power</summary>
    public NumericSensorEntity Landing1Power => new(_haContext, "sensor.landing_1_power");
    ///<summary>landing blind power</summary>
    public NumericSensorEntity LandingBlindPower => new(_haContext, "sensor.landing_blind_power");
    ///<summary>landing motion illuminance</summary>
    public NumericSensorEntity LandingLux => new(_haContext, "sensor.landing_lux");
    ///<summary>landing motion power</summary>
    public NumericSensorEntity LandingMotionBattery => new(_haContext, "sensor.landing_motion_battery");
    ///<summary>landing night energy</summary>
    public NumericSensorEntity LandingNightEnergy => new(_haContext, "sensor.landing_night_energy");
    ///<summary>landing night power</summary>
    public NumericSensorEntity LandingNightPower => new(_haContext, "sensor.landing_night_power");
    ///<summary>Landing RX</summary>
    public NumericSensorEntity LandingRx => new(_haContext, "sensor.landing_rx");
    ///<summary>Landing TX</summary>
    public NumericSensorEntity LandingTx => new(_haContext, "sensor.landing_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity LaptopD5uft2ciRx => new(_haContext, "sensor.laptop_d5uft2ci_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity LaptopD5uft2ciTx => new(_haContext, "sensor.laptop_d5uft2ci_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity LaptopL5nso67jRx => new(_haContext, "sensor.laptop_l5nso67j_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity LaptopL5nso67jTx => new(_haContext, "sensor.laptop_l5nso67j_tx");
    ///<summary>LG Lounge RX</summary>
    public NumericSensorEntity LgLoungeRx => new(_haContext, "sensor.lg_lounge_rx");
    ///<summary>LG Lounge TX</summary>
    public NumericSensorEntity LgLoungeTx => new(_haContext, "sensor.lg_lounge_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity LivingRoomRx => new(_haContext, "sensor.living_room_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity LivingRoomTx => new(_haContext, "sensor.living_room_tx");
    ///<summary>Lounge RX</summary>
    public NumericSensorEntity LoungeAcRx => new(_haContext, "sensor.lounge_ac_rx");
    ///<summary>Lounge TX</summary>
    public NumericSensorEntity LoungeAcTx => new(_haContext, "sensor.lounge_ac_tx");
    ///<summary>lounge back level, light_color, on_off energy</summary>
    public NumericSensorEntity LoungeBackLevelLightColorOnOffEnergy => new(_haContext, "sensor.lounge_back_level_light_color_on_off_energy");
    ///<summary>lounge back level, light_color, on_off power</summary>
    public NumericSensorEntity LoungeBackLevelLightColorOnOffPower => new(_haContext, "sensor.lounge_back_level_light_color_on_off_power");
    ///<summary>Blind Lounge RX</summary>
    public NumericSensorEntity LoungeBlindRx => new(_haContext, "sensor.lounge_blind_rx");
    ///<summary>Blind Lounge TX</summary>
    public NumericSensorEntity LoungeBlindTx => new(_haContext, "sensor.lounge_blind_tx");
    ///<summary>Lounge Daily Energy Consumed</summary>
    public NumericSensorEntity LoungeDailyEnergyConsumed => new(_haContext, "sensor.lounge_daily_energy_consumed");
    ///<summary>Lounge Echo RX</summary>
    public NumericSensorEntity LoungeEchoRx => new(_haContext, "sensor.lounge_echo_rx");
    ///<summary>Lounge Echo TX</summary>
    public NumericSensorEntity LoungeEchoTx => new(_haContext, "sensor.lounge_echo_tx");
    ///<summary>Lounge Energy</summary>
    public NumericSensorEntity LoungeEnergy => new(_haContext, "sensor.lounge_energy");
    ///<summary>lounge front level, light_color, on_off energy</summary>
    public NumericSensorEntity LoungeFrontLevelLightColorOnOffEnergy => new(_haContext, "sensor.lounge_front_level_light_color_on_off_energy");
    ///<summary>lounge front level, light_color, on_off power</summary>
    public NumericSensorEntity LoungeFrontLevelLightColorOnOffPower => new(_haContext, "sensor.lounge_front_level_light_color_on_off_power");
    ///<summary>Lounge Lux</summary>
    public NumericSensorEntity LoungeLux => new(_haContext, "sensor.lounge_lux");
    ///<summary>Lounge Motion Battery</summary>
    public NumericSensorEntity LoungeMotionBattery => new(_haContext, "sensor.lounge_motion_battery");
    ///<summary>Lounge Room Temperature</summary>
    public NumericSensorEntity LoungeRoomTemperature => new(_haContext, "sensor.lounge_room_temperature");
    ///<summary>Lounge Soundbar energy</summary>
    public NumericSensorEntity LoungeSoundbarEnergy => new(_haContext, "sensor.lounge_soundbar_energy");
    ///<summary>Lounge Soundbar power</summary>
    public NumericSensorEntity LoungeSoundbarPower => new(_haContext, "sensor.lounge_soundbar_power");
    ///<summary>lounge_tv_socket_current</summary>
    public NumericSensorEntity LoungeTvSocketCurrent => new(_haContext, "sensor.lounge_tv_socket_current");
    ///<summary>lounge_tv_socket_current_consumption</summary>
    public NumericSensorEntity LoungeTvSocketCurrentConsumption => new(_haContext, "sensor.lounge_tv_socket_current_consumption");
    ///<summary>Lounge TV Socket Energy</summary>
    public NumericSensorEntity LoungeTvSocketEnergy => new(_haContext, "sensor.lounge_tv_socket_energy");
    ///<summary>lounge_tv_socket_voltage</summary>
    public NumericSensorEntity LoungeTvSocketVoltage => new(_haContext, "sensor.lounge_tv_socket_voltage");
    ///<summary>Dining Door Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq238f0ec02DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_38f0ec02_device_temperature");
    ///<summary>Dining Door Battery</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq238f0ec02Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_38f0ec02_power");
    ///<summary>contact fd Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq256141203DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_56141203_device_temperature");
    ///<summary>contact fd Battery</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq256141203Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_56141203_power");
    ///<summary>contact right window Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq283903a03DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_83903a03_device_temperature");
    ///<summary>contact right window Battery</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq283903a03Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_83903a03_power");
    ///<summary>LUMI lumi.sensor_magnet.aq2 8c913a03 power</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq28c913a03Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_8c913a03_power");
    ///<summary>Lounge Door Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq29e0b1203DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_9e0b1203_device_temperature");
    ///<summary>Lounge Door Battery</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq29e0b1203Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_9e0b1203_power");
    ///<summary>Officer Contact  Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq2Ac831303DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_ac831303_device_temperature");
    ///<summary>Garage Door Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq2E6b02103DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_e6b02103_device_temperature");
    ///<summary>Garage Door Battery</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq2E6b02103Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_e6b02103_power");
    ///<summary>Officer Contact  power</summary>
    public NumericSensorEntity LumiLumiSensorMagnetAq2Power => new(_haContext, "sensor.lumi_lumi_sensor_magnet_aq2_power");
    ///<summary>Dining Motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq234796603DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_34796603_device_temperature");
    ///<summary>Aaron motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq23ca2f202DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_3ca2f202_device_temperature");
    ///<summary>Toilet Motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq24123f403DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_4123f403_device_temperature");
    ///<summary>kitchen motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq254c2f302DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_54c2f302_device_temperature");
    ///<summary>master motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2591d1b03DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_591d1b03_device_temperature");
    ///<summary>Jayden motion  Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq25cf75702DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_5cf75702_device_temperature");
    ///<summary>Lounge Motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq27dce1303DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_7dce1303_device_temperature");
    ///<summary>bathroom motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq297a7f202DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_97a7f202_device_temperature");
    ///<summary>utility motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2B4796603DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_b4796603_device_temperature");
    ///<summary>landing motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2C0a6f202DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_c0a6f202_device_temperature");
    ///<summary>playroom motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2Ea1a1404DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_ea1a1404_device_temperature");
    ///<summary>entrance motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2Ef2f1404DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_ef2f1404_device_temperature");
    ///<summary>office motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2F33b1404DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_f33b1404_device_temperature");
    ///<summary>master 1 energy</summary>
    public NumericSensorEntity Master1Energy => new(_haContext, "sensor.master_1_energy");
    ///<summary>master 1 power</summary>
    public NumericSensorEntity Master1Power => new(_haContext, "sensor.master_1_power");
    ///<summary>Master 2 energy</summary>
    public NumericSensorEntity Master2Energy => new(_haContext, "sensor.master_2_energy");
    ///<summary>Master 2 power</summary>
    public NumericSensorEntity Master2Power => new(_haContext, "sensor.master_2_power");
    ///<summary>master 3 energy</summary>
    public NumericSensorEntity Master3Energy => new(_haContext, "sensor.master_3_energy");
    ///<summary>master 3 power</summary>
    public NumericSensorEntity Master3Power => new(_haContext, "sensor.master_3_power");
    ///<summary>master 4 energy</summary>
    public NumericSensorEntity Master4Energy => new(_haContext, "sensor.master_4_energy");
    ///<summary>master 4 power</summary>
    public NumericSensorEntity Master4Power => new(_haContext, "sensor.master_4_power");
    ///<summary>Master Echo RX</summary>
    public NumericSensorEntity MasterEchoRx => new(_haContext, "sensor.master_echo_rx");
    ///<summary>Master Echo TX</summary>
    public NumericSensorEntity MasterEchoTx => new(_haContext, "sensor.master_echo_tx");
    ///<summary>Master Lux</summary>
    public NumericSensorEntity MasterLux => new(_haContext, "sensor.master_lux");
    ///<summary>Master Motion Battery</summary>
    public NumericSensorEntity MasterMotionBattery => new(_haContext, "sensor.master_motion_battery");
    ///<summary>Master Nightlight energy</summary>
    public NumericSensorEntity MasterNightlightEnergy => new(_haContext, "sensor.master_nightlight_energy");
    ///<summary>Master Nightlight power</summary>
    public NumericSensorEntity MasterNightlightPower => new(_haContext, "sensor.master_nightlight_power");
    ///<summary>Master Tele RX</summary>
    public NumericSensorEntity MasterTeleRx => new(_haContext, "sensor.master_tele_rx");
    ///<summary>Master Tele TX</summary>
    public NumericSensorEntity MasterTeleTx => new(_haContext, "sensor.master_tele_tx");
    ///<summary>ML-NX07KG671N RX</summary>
    public NumericSensorEntity MlNx07kg671nRx => new(_haContext, "sensor.ml_nx07kg671n_rx");
    ///<summary>ML-NX07KG671N TX</summary>
    public NumericSensorEntity MlNx07kg671nTx => new(_haContext, "sensor.ml_nx07kg671n_tx");
    ///<summary>My Wall Panel Battery Level</summary>
    public NumericSensorEntity MyWallPanelBatteryLevel => new(_haContext, "sensor.my_wall_panel_battery_level");
    ///<summary>My Wall Panel Light</summary>
    public NumericSensorEntity MyWallPanelLight => new(_haContext, "sensor.my_wall_panel_light");
    ///<summary>Niemand Drive Battery</summary>
    public NumericSensorEntity NiemandDriveBattery => new(_haContext, "sensor.niemand_drive_battery");
    ///<summary>Niemand Drive Wireless</summary>
    public NumericSensorEntity NiemandDriveWireless => new(_haContext, "sensor.niemand_drive_wireless");
    ///<summary>Niemand Front Door Battery</summary>
    public NumericSensorEntity NiemandFrontDoorBattery => new(_haContext, "sensor.niemand_front_door_battery");
    ///<summary>Niemand Front Door Wireless</summary>
    public NumericSensorEntity NiemandFrontDoorWireless => new(_haContext, "sensor.niemand_front_door_wireless");
    ///<summary>Niemand Garage Battery</summary>
    public NumericSensorEntity NiemandGarageBattery => new(_haContext, "sensor.niemand_garage_battery");
    ///<summary>Niemand Garage Battery</summary>
    public NumericSensorEntity NiemandGarageBattery2 => new(_haContext, "sensor.niemand_garage_battery_2");
    ///<summary>Niemand Garage Wireless</summary>
    public NumericSensorEntity NiemandGarageWireless => new(_haContext, "sensor.niemand_garage_wireless");
    ///<summary>Niemand Garden Battery</summary>
    public NumericSensorEntity NiemandGardenBattery => new(_haContext, "sensor.niemand_garden_battery");
    ///<summary>Niemand Garden Wireless</summary>
    public NumericSensorEntity NiemandGardenWireless => new(_haContext, "sensor.niemand_garden_wireless");
    ///<summary>Niemand Side Battery</summary>
    public NumericSensorEntity NiemandSideBattery => new(_haContext, "sensor.niemand_side_battery");
    ///<summary>Niemand Side Battery</summary>
    public NumericSensorEntity NiemandSideBattery2 => new(_haContext, "sensor.niemand_side_battery_2");
    ///<summary>Niemand Side Wireless</summary>
    public NumericSensorEntity NiemandSideWireless => new(_haContext, "sensor.niemand_side_wireless");
    ///<summary>Electricity 18L2161921 1015682729636 Current Rate</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636CurrentRate => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_current_rate");
    ///<summary>Electricity 18L2161921 1015682729636 Current Standing Charge</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636CurrentStandingCharge => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_current_standing_charge");
    ///<summary>Electricity 18L2161921 1015682729636 Next Rate</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636NextRate => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_next_rate");
    ///<summary>Electricity 18L2161921 1015682729636 Previous Accumulative Consumption</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636PreviousAccumulativeConsumption => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_previous_accumulative_consumption");
    ///<summary>Electricity 18L2161921 1015682729636 Previous Accumulative Cost</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636PreviousAccumulativeCost => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_previous_accumulative_cost");
    ///<summary>Electricity 18L2161921 1015682729636 Previous Rate</summary>
    public NumericSensorEntity OctopusEnergyElectricity18l21619211015682729636PreviousRate => new(_haContext, "sensor.octopus_energy_electricity_18l2161921_1015682729636_previous_rate");
    ///<summary>Gas E6S16735201861 7401432210 Current Rate</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210CurrentRate => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_current_rate");
    ///<summary>Gas E6S16735201861 7401432210 Current Standing Charge</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210CurrentStandingCharge => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_current_standing_charge");
    ///<summary>Gas E6S16735201861 7401432210 Previous Accumulative Consumption</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210PreviousAccumulativeConsumption => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_previous_accumulative_consumption");
    ///<summary>Gas E6S16735201861 7401432210 Previous Accumulative Consumption (kWh)</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210PreviousAccumulativeConsumptionKwh => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_previous_accumulative_consumption_kwh");
    ///<summary>Gas E6S16735201861 7401432210 Previous Accumulative Cost</summary>
    public NumericSensorEntity OctopusEnergyGasE6s167352018617401432210PreviousAccumulativeCost => new(_haContext, "sensor.octopus_energy_gas_e6s16735201861_7401432210_previous_accumulative_cost");
    ///<summary>office 1 energy</summary>
    public NumericSensorEntity Office1Energy => new(_haContext, "sensor.office_1_energy");
    ///<summary>office 1 power</summary>
    public NumericSensorEntity Office1Power => new(_haContext, "sensor.office_1_power");
    ///<summary>office 3 energy</summary>
    public NumericSensorEntity Office3Energy => new(_haContext, "sensor.office_3_energy");
    ///<summary>office 3 power</summary>
    public NumericSensorEntity Office3Power => new(_haContext, "sensor.office_3_power");
    ///<summary>Office RX</summary>
    public NumericSensorEntity OfficeAcRx => new(_haContext, "sensor.office_ac_rx");
    ///<summary>Office TX</summary>
    public NumericSensorEntity OfficeAcTx => new(_haContext, "sensor.office_ac_tx");
    ///<summary>Office Daily Energy Consumed</summary>
    public NumericSensorEntity OfficeDailyEnergyConsumed => new(_haContext, "sensor.office_daily_energy_consumed");
    ///<summary>Office Echo RX</summary>
    public NumericSensorEntity OfficeEchoRx => new(_haContext, "sensor.office_echo_rx");
    ///<summary>Office Echo TX</summary>
    public NumericSensorEntity OfficeEchoTx => new(_haContext, "sensor.office_echo_tx");
    ///<summary>Office Energy</summary>
    public NumericSensorEntity OfficeEnergy => new(_haContext, "sensor.office_energy");
    ///<summary>Office Motion Lux</summary>
    public NumericSensorEntity OfficeLux => new(_haContext, "sensor.office_lux");
    ///<summary>Office Motion Battery</summary>
    public NumericSensorEntity OfficeMotionBattery => new(_haContext, "sensor.office_motion_battery");
    ///<summary>Office Room Temperature</summary>
    public NumericSensorEntity OfficeRoomTemperature => new(_haContext, "sensor.office_room_temperature");
    ///<summary>Office Skylight energy</summary>
    public NumericSensorEntity OfficeSkylightEnergy => new(_haContext, "sensor.office_skylight_energy");
    ///<summary>Office Skylight power</summary>
    public NumericSensorEntity OfficeSkylightPower => new(_haContext, "sensor.office_skylight_power");
    ///<summary>OpenWeatherMap Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapCloudCoverage => new(_haContext, "sensor.openweathermap_cloud_coverage");
    ///<summary>OpenWeatherMap Dew Point</summary>
    public NumericSensorEntity OpenweathermapDewPoint => new(_haContext, "sensor.openweathermap_dew_point");
    ///<summary>OpenWeatherMap Feels like temperature</summary>
    public NumericSensorEntity OpenweathermapFeelsLikeTemperature => new(_haContext, "sensor.openweathermap_feels_like_temperature");
    ///<summary>OpenWeatherMap Forecast Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapForecastCloudCoverage => new(_haContext, "sensor.openweathermap_forecast_cloud_coverage");
    ///<summary>OpenWeatherMap Forecast Precipitation</summary>
    public NumericSensorEntity OpenweathermapForecastPrecipitation => new(_haContext, "sensor.openweathermap_forecast_precipitation");
    ///<summary>OpenWeatherMap Forecast Precipitation probability</summary>
    public NumericSensorEntity OpenweathermapForecastPrecipitationProbability => new(_haContext, "sensor.openweathermap_forecast_precipitation_probability");
    ///<summary>OpenWeatherMap Forecast Pressure</summary>
    public NumericSensorEntity OpenweathermapForecastPressure => new(_haContext, "sensor.openweathermap_forecast_pressure");
    ///<summary>OpenWeatherMap Forecast Temperature</summary>
    public NumericSensorEntity OpenweathermapForecastTemperature => new(_haContext, "sensor.openweathermap_forecast_temperature");
    ///<summary>OpenWeatherMap Forecast Temperature Low</summary>
    public NumericSensorEntity OpenweathermapForecastTemperatureLow => new(_haContext, "sensor.openweathermap_forecast_temperature_low");
    ///<summary>OpenWeatherMap Forecast Wind bearing</summary>
    public NumericSensorEntity OpenweathermapForecastWindBearing => new(_haContext, "sensor.openweathermap_forecast_wind_bearing");
    ///<summary>OpenWeatherMap Forecast Wind speed</summary>
    public NumericSensorEntity OpenweathermapForecastWindSpeed => new(_haContext, "sensor.openweathermap_forecast_wind_speed");
    ///<summary>OpenWeatherMap Humidity</summary>
    public NumericSensorEntity OpenweathermapHumidity => new(_haContext, "sensor.openweathermap_humidity");
    ///<summary>OpenWeatherMap Pressure</summary>
    public NumericSensorEntity OpenweathermapPressure => new(_haContext, "sensor.openweathermap_pressure");
    ///<summary>OpenWeatherMap Rain</summary>
    public NumericSensorEntity OpenweathermapRain => new(_haContext, "sensor.openweathermap_rain");
    ///<summary>OpenWeatherMap Snow</summary>
    public NumericSensorEntity OpenweathermapSnow => new(_haContext, "sensor.openweathermap_snow");
    ///<summary>OpenWeatherMap Temperature</summary>
    public NumericSensorEntity OpenweathermapTemperature => new(_haContext, "sensor.openweathermap_temperature");
    ///<summary>OpenWeatherMap UV Index</summary>
    public NumericSensorEntity OpenweathermapUvIndex => new(_haContext, "sensor.openweathermap_uv_index");
    ///<summary>OpenWeatherMap Visibility</summary>
    public NumericSensorEntity OpenweathermapVisibility => new(_haContext, "sensor.openweathermap_visibility");
    ///<summary>OpenWeatherMap Wind bearing</summary>
    public NumericSensorEntity OpenweathermapWindBearing => new(_haContext, "sensor.openweathermap_wind_bearing");
    ///<summary>OpenWeatherMap Wind speed</summary>
    public NumericSensorEntity OpenweathermapWindSpeed => new(_haContext, "sensor.openweathermap_wind_speed");
    ///<summary>Outside Drive energy</summary>
    public NumericSensorEntity OutsideDriveEnergy => new(_haContext, "sensor.outside_drive_energy");
    ///<summary>Outside Drive power</summary>
    public NumericSensorEntity OutsideDrivePower => new(_haContext, "sensor.outside_drive_power");
    ///<summary>Outside Drive RX</summary>
    public NumericSensorEntity OutsideDriveRx => new(_haContext, "sensor.outside_drive_rx");
    ///<summary>Outside Drive TX</summary>
    public NumericSensorEntity OutsideDriveTx => new(_haContext, "sensor.outside_drive_tx");
    ///<summary>Outside Garage energy</summary>
    public NumericSensorEntity OutsideGarageEnergy => new(_haContext, "sensor.outside_garage_energy");
    ///<summary>Outside Garage power</summary>
    public NumericSensorEntity OutsideGaragePower => new(_haContext, "sensor.outside_garage_power");
    ///<summary>Outside Garage RX</summary>
    public NumericSensorEntity OutsideGarageRx => new(_haContext, "sensor.outside_garage_rx");
    ///<summary>Outside Garage TX</summary>
    public NumericSensorEntity OutsideGarageTx => new(_haContext, "sensor.outside_garage_tx");
    ///<summary>Pi-Hole Ads blocked today</summary>
    public NumericSensorEntity PiHoleAdsBlockedToday => new(_haContext, "sensor.pi_hole_ads_blocked_today");
    ///<summary>Pi-Hole Ads percentage blocked today</summary>
    public NumericSensorEntity PiHoleAdsPercentageBlockedToday => new(_haContext, "sensor.pi_hole_ads_percentage_blocked_today");
    ///<summary>Pi-Hole DNS queries cached</summary>
    public NumericSensorEntity PiHoleDnsQueriesCached => new(_haContext, "sensor.pi_hole_dns_queries_cached");
    ///<summary>Pi-Hole DNS queries forwarded</summary>
    public NumericSensorEntity PiHoleDnsQueriesForwarded => new(_haContext, "sensor.pi_hole_dns_queries_forwarded");
    ///<summary>Pi-Hole DNS queries today</summary>
    public NumericSensorEntity PiHoleDnsQueriesToday => new(_haContext, "sensor.pi_hole_dns_queries_today");
    ///<summary>Pi-Hole DNS unique clients</summary>
    public NumericSensorEntity PiHoleDnsUniqueClients => new(_haContext, "sensor.pi_hole_dns_unique_clients");
    ///<summary>Pi-Hole DNS unique domains</summary>
    public NumericSensorEntity PiHoleDnsUniqueDomains => new(_haContext, "sensor.pi_hole_dns_unique_domains");
    ///<summary>Pi-Hole Domains blocked</summary>
    public NumericSensorEntity PiHoleDomainsBlocked => new(_haContext, "sensor.pi_hole_domains_blocked");
    ///<summary>Pi-Hole Seen clients</summary>
    public NumericSensorEntity PiHoleSeenClients => new(_haContext, "sensor.pi_hole_seen_clients");
    ///<summary>Playroom Echo RX</summary>
    public NumericSensorEntity PlayroomEchoRx => new(_haContext, "sensor.playroom_echo_rx");
    ///<summary>Playroom Echo TX</summary>
    public NumericSensorEntity PlayroomEchoTx => new(_haContext, "sensor.playroom_echo_tx");
    ///<summary>Playroom energy</summary>
    public NumericSensorEntity PlayroomEnergy => new(_haContext, "sensor.playroom_energy");
    ///<summary>Playroom Lux</summary>
    public NumericSensorEntity PlayroomLux => new(_haContext, "sensor.playroom_lux");
    ///<summary>Playroom Motion Battery</summary>
    public NumericSensorEntity PlayroomMotionBattery => new(_haContext, "sensor.playroom_motion_battery");
    ///<summary>Playroom power</summary>
    public NumericSensorEntity PlayroomPower => new(_haContext, "sensor.playroom_power");
    ///<summary>Plug 1 Current</summary>
    public NumericSensorEntity Plug1Current => new(_haContext, "sensor.plug_1_current");
    ///<summary>Plug 1 Energy</summary>
    public NumericSensorEntity Plug1Energy => new(_haContext, "sensor.plug_1_energy");
    ///<summary>Plug 1 Voltage</summary>
    public NumericSensorEntity Plug1Voltage => new(_haContext, "sensor.plug_1_voltage");
    ///<summary>Plug 2 Current</summary>
    public NumericSensorEntity Plug2Current => new(_haContext, "sensor.plug_2_current");
    ///<summary>Plug 2 Energy</summary>
    public NumericSensorEntity Plug2Energy => new(_haContext, "sensor.plug_2_energy");
    ///<summary>Plug 2 Voltage</summary>
    public NumericSensorEntity Plug2Voltage => new(_haContext, "sensor.plug_2_voltage");
    ///<summary>Plug 4 Current</summary>
    public NumericSensorEntity Plug4Current => new(_haContext, "sensor.plug_4_current");
    ///<summary>Plug 4 Energy</summary>
    public NumericSensorEntity Plug4Energy => new(_haContext, "sensor.plug_4_energy");
    ///<summary>Plug 4 Energy Consumption</summary>
    public NumericSensorEntity Plug4EnergyConsumption => new(_haContext, "sensor.plug_4_energy_consumption");
    ///<summary>Plug 4 Voltage</summary>
    public NumericSensorEntity Plug4Voltage => new(_haContext, "sensor.plug_4_voltage");
    ///<summary>Porch RX</summary>
    public NumericSensorEntity PorchRx => new(_haContext, "sensor.porch_rx");
    ///<summary>Porch TX</summary>
    public NumericSensorEntity PorchTx => new(_haContext, "sensor.porch_tx");
    ///<summary>Power Meter Multiplug</summary>
    public NumericSensorEntity PowerMeterMultiplug => new(_haContext, "sensor.power_meter_multiplug");
    ///<summary>Power Meter Multiplug Total</summary>
    public NumericSensorEntity PowerMeterMultiplugTotal => new(_haContext, "sensor.power_meter_multiplug_total");
    ///<summary>Power Meter Multiplug Utility Meter</summary>
    public NumericSensorEntity PowerMeterMultiplugUtilityMeter => new(_haContext, "sensor.power_meter_multiplug_utility_meter");
    ///<summary>RaspberryPi CUPS RX</summary>
    public NumericSensorEntity RaspberrypiCupsRx => new(_haContext, "sensor.raspberrypi_cups_rx");
    ///<summary>RaspberryPi CUPS TX</summary>
    public NumericSensorEntity RaspberrypiCupsTx => new(_haContext, "sensor.raspberrypi_cups_tx");
    ///<summary>raspberrypi RX</summary>
    public NumericSensorEntity RaspberrypiRx => new(_haContext, "sensor.raspberrypi_rx");
    ///<summary>raspberrypi RX</summary>
    public NumericSensorEntity RaspberrypiRx2 => new(_haContext, "sensor.raspberrypi_rx_2");
    ///<summary>raspberrypi TX</summary>
    public NumericSensorEntity RaspberrypiTx => new(_haContext, "sensor.raspberrypi_tx");
    ///<summary>raspberrypi TX</summary>
    public NumericSensorEntity RaspberrypiTx2 => new(_haContext, "sensor.raspberrypi_tx_2");
    ///<summary>RingHpCam-49 RX</summary>
    public NumericSensorEntity Ringhpcam49Rx => new(_haContext, "sensor.ringhpcam_49_rx");
    ///<summary>RingHpCam-49 TX</summary>
    public NumericSensorEntity Ringhpcam49Tx => new(_haContext, "sensor.ringhpcam_49_tx");
    ///<summary>RingHpCam-4c RX</summary>
    public NumericSensorEntity Ringhpcam4cRx => new(_haContext, "sensor.ringhpcam_4c_rx");
    ///<summary>RingHpCam-4c TX</summary>
    public NumericSensorEntity Ringhpcam4cTx => new(_haContext, "sensor.ringhpcam_4c_tx");
    ///<summary>RingPro-d6 RX</summary>
    public NumericSensorEntity RingproD6Rx => new(_haContext, "sensor.ringpro_d6_rx");
    ///<summary>RingPro-d6 TX</summary>
    public NumericSensorEntity RingproD6Tx => new(_haContext, "sensor.ringpro_d6_tx");
    ///<summary>RingStickUpCam-94 RX</summary>
    public NumericSensorEntity Ringstickupcam94Rx => new(_haContext, "sensor.ringstickupcam_94_rx");
    ///<summary>RingStickUpCam-94 TX</summary>
    public NumericSensorEntity Ringstickupcam94Tx => new(_haContext, "sensor.ringstickupcam_94_tx");
    ///<summary>RingStickUpCam-9b RX</summary>
    public NumericSensorEntity Ringstickupcam9bRx => new(_haContext, "sensor.ringstickupcam_9b_rx");
    ///<summary>RingStickUpCam-9b TX</summary>
    public NumericSensorEntity Ringstickupcam9bTx => new(_haContext, "sensor.ringstickupcam_9b_tx");
    ///<summary>RMMINI-d9-2b-62 RX</summary>
    public NumericSensorEntity RmminiD92b62Rx => new(_haContext, "sensor.rmmini_d9_2b_62_rx");
    ///<summary>RMMINI-d9-2b-62 TX</summary>
    public NumericSensorEntity RmminiD92b62Tx => new(_haContext, "sensor.rmmini_d9_2b_62_tx");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx => new(_haContext, "sensor.rx");
    ///<summary> RX RX</summary>
    public NumericSensorEntity Rx10 => new(_haContext, "sensor.rx_10");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx100 => new(_haContext, "sensor.rx_100");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx101 => new(_haContext, "sensor.rx_101");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx102 => new(_haContext, "sensor.rx_102");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx11 => new(_haContext, "sensor.rx_11");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx12 => new(_haContext, "sensor.rx_12");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx13 => new(_haContext, "sensor.rx_13");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx14 => new(_haContext, "sensor.rx_14");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx15 => new(_haContext, "sensor.rx_15");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx16 => new(_haContext, "sensor.rx_16");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx17 => new(_haContext, "sensor.rx_17");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx18 => new(_haContext, "sensor.rx_18");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx19 => new(_haContext, "sensor.rx_19");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx2 => new(_haContext, "sensor.rx_2");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx20 => new(_haContext, "sensor.rx_20");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx21 => new(_haContext, "sensor.rx_21");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx22 => new(_haContext, "sensor.rx_22");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx23 => new(_haContext, "sensor.rx_23");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx24 => new(_haContext, "sensor.rx_24");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx25 => new(_haContext, "sensor.rx_25");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx26 => new(_haContext, "sensor.rx_26");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx27 => new(_haContext, "sensor.rx_27");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx28 => new(_haContext, "sensor.rx_28");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx29 => new(_haContext, "sensor.rx_29");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx3 => new(_haContext, "sensor.rx_3");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx30 => new(_haContext, "sensor.rx_30");
    ///<summary>Hottubcontrol RX</summary>
    public NumericSensorEntity Rx31 => new(_haContext, "sensor.rx_31");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx32 => new(_haContext, "sensor.rx_32");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx33 => new(_haContext, "sensor.rx_33");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx34 => new(_haContext, "sensor.rx_34");
    ///<summary> RX RX</summary>
    public NumericSensorEntity Rx35 => new(_haContext, "sensor.rx_35");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx36 => new(_haContext, "sensor.rx_36");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx37 => new(_haContext, "sensor.rx_37");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx38 => new(_haContext, "sensor.rx_38");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx39 => new(_haContext, "sensor.rx_39");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx4 => new(_haContext, "sensor.rx_4");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx40 => new(_haContext, "sensor.rx_40");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx41 => new(_haContext, "sensor.rx_41");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx42 => new(_haContext, "sensor.rx_42");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx43 => new(_haContext, "sensor.rx_43");
    ///<summary> RX RX</summary>
    public NumericSensorEntity Rx44 => new(_haContext, "sensor.rx_44");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx45 => new(_haContext, "sensor.rx_45");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx46 => new(_haContext, "sensor.rx_46");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx47 => new(_haContext, "sensor.rx_47");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx48 => new(_haContext, "sensor.rx_48");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx49 => new(_haContext, "sensor.rx_49");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx5 => new(_haContext, "sensor.rx_5");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx50 => new(_haContext, "sensor.rx_50");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx51 => new(_haContext, "sensor.rx_51");
    ///<summary> RX RX</summary>
    public NumericSensorEntity Rx52 => new(_haContext, "sensor.rx_52");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx53 => new(_haContext, "sensor.rx_53");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx54 => new(_haContext, "sensor.rx_54");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx55 => new(_haContext, "sensor.rx_55");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx56 => new(_haContext, "sensor.rx_56");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx57 => new(_haContext, "sensor.rx_57");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx58 => new(_haContext, "sensor.rx_58");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx59 => new(_haContext, "sensor.rx_59");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx6 => new(_haContext, "sensor.rx_6");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx60 => new(_haContext, "sensor.rx_60");
    ///<summary> RX RX</summary>
    public NumericSensorEntity Rx61 => new(_haContext, "sensor.rx_61");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx62 => new(_haContext, "sensor.rx_62");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx63 => new(_haContext, "sensor.rx_63");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx64 => new(_haContext, "sensor.rx_64");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx65 => new(_haContext, "sensor.rx_65");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx66 => new(_haContext, "sensor.rx_66");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx67 => new(_haContext, "sensor.rx_67");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx68 => new(_haContext, "sensor.rx_68");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx69 => new(_haContext, "sensor.rx_69");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx7 => new(_haContext, "sensor.rx_7");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx70 => new(_haContext, "sensor.rx_70");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx71 => new(_haContext, "sensor.rx_71");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx72 => new(_haContext, "sensor.rx_72");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx73 => new(_haContext, "sensor.rx_73");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx74 => new(_haContext, "sensor.rx_74");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx75 => new(_haContext, "sensor.rx_75");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx76 => new(_haContext, "sensor.rx_76");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx77 => new(_haContext, "sensor.rx_77");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx78 => new(_haContext, "sensor.rx_78");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx79 => new(_haContext, "sensor.rx_79");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx8 => new(_haContext, "sensor.rx_8");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx80 => new(_haContext, "sensor.rx_80");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx81 => new(_haContext, "sensor.rx_81");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx82 => new(_haContext, "sensor.rx_82");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx83 => new(_haContext, "sensor.rx_83");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx84 => new(_haContext, "sensor.rx_84");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx85 => new(_haContext, "sensor.rx_85");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx86 => new(_haContext, "sensor.rx_86");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx87 => new(_haContext, "sensor.rx_87");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx88 => new(_haContext, "sensor.rx_88");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx89 => new(_haContext, "sensor.rx_89");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx9 => new(_haContext, "sensor.rx_9");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx90 => new(_haContext, "sensor.rx_90");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx91 => new(_haContext, "sensor.rx_91");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx92 => new(_haContext, "sensor.rx_92");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx93 => new(_haContext, "sensor.rx_93");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx94 => new(_haContext, "sensor.rx_94");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx95 => new(_haContext, "sensor.rx_95");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx96 => new(_haContext, "sensor.rx_96");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx97 => new(_haContext, "sensor.rx_97");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx98 => new(_haContext, "sensor.rx_98");
    ///<summary> RX</summary>
    public NumericSensorEntity Rx99 => new(_haContext, "sensor.rx_99");
    ///<summary>RX</summary>
    public NumericSensorEntity SammiLeighSA52Rx => new(_haContext, "sensor.sammi_leigh_s_a52_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity SammiLeighSA52Tx => new(_haContext, "sensor.sammi_leigh_s_a52_tx");
    ///<summary>shelly1-55E8B5 RX</summary>
    public NumericSensorEntity Shelly155e8b5Rx => new(_haContext, "sensor.shelly1_55e8b5_rx");
    ///<summary>shelly1-55E8B5 TX</summary>
    public NumericSensorEntity Shelly155e8b5Tx => new(_haContext, "sensor.shelly1_55e8b5_tx");
    ///<summary>shelly1-BA69F6 RX RX</summary>
    public NumericSensorEntity Shelly1Ba69f6Rx => new(_haContext, "sensor.shelly1_ba69f6_rx");
    ///<summary>shelly1-BA69F6 RX TX</summary>
    public NumericSensorEntity Shelly1Ba69f6Tx => new(_haContext, "sensor.shelly1_ba69f6_tx");
    ///<summary>shelly1-BA6C98 RX RX</summary>
    public NumericSensorEntity Shelly1Ba6c98Rx => new(_haContext, "sensor.shelly1_ba6c98_rx");
    ///<summary>shelly1-BA6C98 RX TX</summary>
    public NumericSensorEntity Shelly1Ba6c98Tx => new(_haContext, "sensor.shelly1_ba6c98_tx");
    ///<summary>shelly1pm-E646FE RX RX</summary>
    public NumericSensorEntity Shelly1pmE646feRx => new(_haContext, "sensor.shelly1pm_e646fe_rx");
    ///<summary>shelly1pm-E646FE RX TX</summary>
    public NumericSensorEntity Shelly1pmE646feTx => new(_haContext, "sensor.shelly1pm_e646fe_tx");
    ///<summary>Smart Meter Electricity: Cost (Today)</summary>
    public NumericSensorEntity SmartMeterElectricityCostToday => new(_haContext, "sensor.smart_meter_electricity_cost_today");
    ///<summary>Smart Meter Electricity: Export</summary>
    public NumericSensorEntity SmartMeterElectricityExport => new(_haContext, "sensor.smart_meter_electricity_export");
    ///<summary>Smart Meter Electricity: Import</summary>
    public NumericSensorEntity SmartMeterElectricityImport => new(_haContext, "sensor.smart_meter_electricity_import");
    ///<summary>Smart Meter Electricity: Import Standing Charge</summary>
    public NumericSensorEntity SmartMeterElectricityImportStandingCharge => new(_haContext, "sensor.smart_meter_electricity_import_standing_charge");
    ///<summary>Smart Meter Electricity: Import (This month)</summary>
    public NumericSensorEntity SmartMeterElectricityImportThisMonth => new(_haContext, "sensor.smart_meter_electricity_import_this_month");
    ///<summary>Smart Meter Electricity: Import (This week)</summary>
    public NumericSensorEntity SmartMeterElectricityImportThisWeek => new(_haContext, "sensor.smart_meter_electricity_import_this_week");
    ///<summary>Smart Meter Electricity: Import (Today)</summary>
    public NumericSensorEntity SmartMeterElectricityImportToday => new(_haContext, "sensor.smart_meter_electricity_import_today");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity SmartMeterElectricityImportTodayCost => new(_haContext, "sensor.smart_meter_electricity_import_today_cost");
    ///<summary>Smart Meter Electricity: Import Unit Rate</summary>
    public NumericSensorEntity SmartMeterElectricityImportUnitRate => new(_haContext, "sensor.smart_meter_electricity_import_unit_rate");
    ///<summary>Smart Meter Electricity: Power</summary>
    public NumericSensorEntity SmartMeterElectricityPower => new(_haContext, "sensor.smart_meter_electricity_power");
    ///<summary>Smart Meter Gas: Cost (Today)</summary>
    public NumericSensorEntity SmartMeterGasCostToday => new(_haContext, "sensor.smart_meter_gas_cost_today");
    ///<summary>Smart Meter Gas: Import</summary>
    public NumericSensorEntity SmartMeterGasImport => new(_haContext, "sensor.smart_meter_gas_import");
    ///<summary>Smart Meter Gas: Import Standing Charge</summary>
    public NumericSensorEntity SmartMeterGasImportStandingCharge => new(_haContext, "sensor.smart_meter_gas_import_standing_charge");
    ///<summary>Smart Meter Gas: Import (This month)</summary>
    public NumericSensorEntity SmartMeterGasImportThisMonth => new(_haContext, "sensor.smart_meter_gas_import_this_month");
    ///<summary>Smart Meter Gas: Import (This week)</summary>
    public NumericSensorEntity SmartMeterGasImportThisWeek => new(_haContext, "sensor.smart_meter_gas_import_this_week");
    ///<summary>Smart Meter Gas: Import (Today)</summary>
    public NumericSensorEntity SmartMeterGasImportToday => new(_haContext, "sensor.smart_meter_gas_import_today");
    ///<summary>Smart Meter Gas: Import Unit Rate</summary>
    public NumericSensorEntity SmartMeterGasImportUnitRate => new(_haContext, "sensor.smart_meter_gas_import_unit_rate");
    ///<summary>Smart Meter Gas: Import Vol</summary>
    public NumericSensorEntity SmartMeterGasImportVol => new(_haContext, "sensor.smart_meter_gas_import_vol");
    ///<summary>Smart Meter Gas: Import Vol (This month)</summary>
    public NumericSensorEntity SmartMeterGasImportVolThisMonth => new(_haContext, "sensor.smart_meter_gas_import_vol_this_month");
    ///<summary>Smart Meter Gas: Import Vol (This week)</summary>
    public NumericSensorEntity SmartMeterGasImportVolThisWeek => new(_haContext, "sensor.smart_meter_gas_import_vol_this_week");
    ///<summary>Smart Meter Gas: Import Vol (Today)</summary>
    public NumericSensorEntity SmartMeterGasImportVolToday => new(_haContext, "sensor.smart_meter_gas_import_vol_today");
    ///<summary>Smart Meter IHD HAN RSSI</summary>
    public NumericSensorEntity SmartMeterIhdHanRssi => new(_haContext, "sensor.smart_meter_ihd_han_rssi");
    ///<summary>RX</summary>
    public NumericSensorEntity SmartPlug1Rx => new(_haContext, "sensor.smart_plug_1_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity SmartPlug1Tx => new(_haContext, "sensor.smart_plug_1_tx");
    ///<summary>smart-plug-2 RX</summary>
    public NumericSensorEntity SmartPlug2Rx => new(_haContext, "sensor.smart_plug_2_rx");
    ///<summary>smart-plug-2 TX</summary>
    public NumericSensorEntity SmartPlug2Tx => new(_haContext, "sensor.smart_plug_2_tx");
    ///<summary>smart-plug-4 RX</summary>
    public NumericSensorEntity SmartPlug4Rx => new(_haContext, "sensor.smart_plug_4_rx");
    ///<summary>smart-plug-4 TX</summary>
    public NumericSensorEntity SmartPlug4Tx => new(_haContext, "sensor.smart_plug_4_tx");
    ///<summary>Lounge RX</summary>
    public NumericSensorEntity SonoszpRx => new(_haContext, "sensor.sonoszp_rx");
    ///<summary>SonosZP RX</summary>
    public NumericSensorEntity SonoszpRx2 => new(_haContext, "sensor.sonoszp_rx_2");
    ///<summary>Lounge TX</summary>
    public NumericSensorEntity SonoszpTx => new(_haContext, "sensor.sonoszp_tx");
    ///<summary>SonosZP TX</summary>
    public NumericSensorEntity SonoszpTx2 => new(_haContext, "sensor.sonoszp_tx_2");
    ///<summary>SpeedTest Download</summary>
    public NumericSensorEntity SpeedtestDownload => new(_haContext, "sensor.speedtest_download");
    ///<summary>SpeedTest Ping</summary>
    public NumericSensorEntity SpeedtestPing => new(_haContext, "sensor.speedtest_ping");
    ///<summary>SpeedTest Upload</summary>
    public NumericSensorEntity SpeedtestUpload => new(_haContext, "sensor.speedtest_upload");
    ///<summary>Sprinkler Left Energy</summary>
    public NumericSensorEntity SprinklerLeftEnergy => new(_haContext, "sensor.sprinkler_left_energy");
    ///<summary>Sprinkler Left Power</summary>
    public NumericSensorEntity SprinklerLeftPower => new(_haContext, "sensor.sprinkler_left_power");
    ///<summary>Sprinkler Right Energy</summary>
    public NumericSensorEntity SprinklerRightEnergy => new(_haContext, "sensor.sprinkler_right_energy");
    ///<summary>Sprinkler Right Power</summary>
    public NumericSensorEntity SprinklerRightPower => new(_haContext, "sensor.sprinkler_right_power");
    ///<summary>Suspect Device RX</summary>
    public NumericSensorEntity SuspectDeviceRx => new(_haContext, "sensor.suspect_device_rx");
    ///<summary>Suspect Device TX</summary>
    public NumericSensorEntity SuspectDeviceTx => new(_haContext, "sensor.suspect_device_tx");
    ///<summary>Suspect Huawei RX</summary>
    public NumericSensorEntity SuspectHuaweiRx => new(_haContext, "sensor.suspect_huawei_rx");
    ///<summary>Suspect Huawei TX</summary>
    public NumericSensorEntity SuspectHuaweiTx => new(_haContext, "sensor.suspect_huawei_tx");
    ///<summary>tasmota-4464 RX</summary>
    public NumericSensorEntity Tasmota4464Rx => new(_haContext, "sensor.tasmota_4464_rx");
    ///<summary>tasmota-4464 TX</summary>
    public NumericSensorEntity Tasmota4464Tx => new(_haContext, "sensor.tasmota_4464_tx");
    ///<summary>Temp_Humi_1 humidity</summary>
    public NumericSensorEntity TempHumi1Humidity => new(_haContext, "sensor.temp_humi_1_humidity");
    ///<summary>Temp_Humi_1 power</summary>
    public NumericSensorEntity TempHumi1Power => new(_haContext, "sensor.temp_humi_1_power");
    ///<summary>Temp_Humi_1 pressure</summary>
    public NumericSensorEntity TempHumi1Pressure => new(_haContext, "sensor.temp_humi_1_pressure");
    ///<summary>Temp_Humi_1 temperature</summary>
    public NumericSensorEntity TempHumi1Temperature => new(_haContext, "sensor.temp_humi_1_temperature");
    ///<summary>LUMI lumi.weather d25a0608 humidity</summary>
    public NumericSensorEntity TempHumi2Humidity => new(_haContext, "sensor.temp_humi_2_humidity");
    ///<summary>LUMI lumi.weather d25a0608 power</summary>
    public NumericSensorEntity TempHumi2Power => new(_haContext, "sensor.temp_humi_2_power");
    ///<summary>LUMI lumi.weather d25a0608 pressure</summary>
    public NumericSensorEntity TempHumi2Pressure => new(_haContext, "sensor.temp_humi_2_pressure");
    ///<summary>LUMI lumi.weather d25a0608 temperature</summary>
    public NumericSensorEntity TempHumi2Temperature => new(_haContext, "sensor.temp_humi_2_temperature");
    ///<summary>Toilet energy</summary>
    public NumericSensorEntity ToiletEnergy => new(_haContext, "sensor.toilet_energy");
    ///<summary>Toilet Lux</summary>
    public NumericSensorEntity ToiletLux => new(_haContext, "sensor.toilet_lux");
    ///<summary>Toilet Motion Battery</summary>
    public NumericSensorEntity ToiletMotionBattery => new(_haContext, "sensor.toilet_motion_battery");
    ///<summary>Toilet power</summary>
    public NumericSensorEntity ToiletPower => new(_haContext, "sensor.toilet_power");
    ///<summary>Tumble dryer deltaEnergy</summary>
    public NumericSensorEntity TumbleDryerDeltaenergy => new(_haContext, "sensor.tumble_dryer_deltaenergy");
    ///<summary>Tumble dryer deltaEnergy</summary>
    public NumericSensorEntity TumbleDryerDeltaenergy2 => new(_haContext, "sensor.tumble_dryer_deltaenergy_2");
    ///<summary>Tumble dryer Energy Meter</summary>
    public NumericSensorEntity TumbleDryerEnergy => new(_haContext, "sensor.tumble_dryer_energy");
    ///<summary>Tumble dryer energy</summary>
    public NumericSensorEntity TumbleDryerEnergy2 => new(_haContext, "sensor.tumble_dryer_energy_2");
    ///<summary>Tumble dryer energySaved</summary>
    public NumericSensorEntity TumbleDryerEnergysaved => new(_haContext, "sensor.tumble_dryer_energysaved");
    ///<summary>Tumble dryer energySaved</summary>
    public NumericSensorEntity TumbleDryerEnergysaved2 => new(_haContext, "sensor.tumble_dryer_energysaved_2");
    ///<summary>Tumble dryer Power Meter</summary>
    public NumericSensorEntity TumbleDryerPower => new(_haContext, "sensor.tumble_dryer_power");
    ///<summary>Tumble dryer power</summary>
    public NumericSensorEntity TumbleDryerPower2 => new(_haContext, "sensor.tumble_dryer_power_2");
    ///<summary>Tumble dryer powerEnergy</summary>
    public NumericSensorEntity TumbleDryerPowerenergy => new(_haContext, "sensor.tumble_dryer_powerenergy");
    ///<summary>Tumble dryer powerEnergy</summary>
    public NumericSensorEntity TumbleDryerPowerenergy2 => new(_haContext, "sensor.tumble_dryer_powerenergy_2");
    ///<summary>tuya_socket_2_current</summary>
    public NumericSensorEntity TuyaSocket2Current => new(_haContext, "sensor.tuya_socket_2_current");
    ///<summary>tuya_socket_2_current_consumption</summary>
    public NumericSensorEntity TuyaSocket2CurrentConsumption => new(_haContext, "sensor.tuya_socket_2_current_consumption");
    ///<summary>tuya_socket_2_voltage</summary>
    public NumericSensorEntity TuyaSocket2Voltage => new(_haContext, "sensor.tuya_socket_2_voltage");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx => new(_haContext, "sensor.tx");
    ///<summary> RX TX</summary>
    public NumericSensorEntity Tx10 => new(_haContext, "sensor.tx_10");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx100 => new(_haContext, "sensor.tx_100");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx101 => new(_haContext, "sensor.tx_101");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx102 => new(_haContext, "sensor.tx_102");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx11 => new(_haContext, "sensor.tx_11");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx12 => new(_haContext, "sensor.tx_12");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx13 => new(_haContext, "sensor.tx_13");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx14 => new(_haContext, "sensor.tx_14");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx15 => new(_haContext, "sensor.tx_15");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx16 => new(_haContext, "sensor.tx_16");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx17 => new(_haContext, "sensor.tx_17");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx18 => new(_haContext, "sensor.tx_18");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx19 => new(_haContext, "sensor.tx_19");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx2 => new(_haContext, "sensor.tx_2");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx20 => new(_haContext, "sensor.tx_20");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx21 => new(_haContext, "sensor.tx_21");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx22 => new(_haContext, "sensor.tx_22");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx23 => new(_haContext, "sensor.tx_23");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx24 => new(_haContext, "sensor.tx_24");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx25 => new(_haContext, "sensor.tx_25");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx26 => new(_haContext, "sensor.tx_26");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx27 => new(_haContext, "sensor.tx_27");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx28 => new(_haContext, "sensor.tx_28");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx29 => new(_haContext, "sensor.tx_29");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx3 => new(_haContext, "sensor.tx_3");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx30 => new(_haContext, "sensor.tx_30");
    ///<summary>Hottubcontrol TX</summary>
    public NumericSensorEntity Tx31 => new(_haContext, "sensor.tx_31");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx32 => new(_haContext, "sensor.tx_32");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx33 => new(_haContext, "sensor.tx_33");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx34 => new(_haContext, "sensor.tx_34");
    ///<summary> RX TX</summary>
    public NumericSensorEntity Tx35 => new(_haContext, "sensor.tx_35");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx36 => new(_haContext, "sensor.tx_36");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx37 => new(_haContext, "sensor.tx_37");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx38 => new(_haContext, "sensor.tx_38");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx39 => new(_haContext, "sensor.tx_39");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx4 => new(_haContext, "sensor.tx_4");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx40 => new(_haContext, "sensor.tx_40");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx41 => new(_haContext, "sensor.tx_41");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx42 => new(_haContext, "sensor.tx_42");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx43 => new(_haContext, "sensor.tx_43");
    ///<summary> RX TX</summary>
    public NumericSensorEntity Tx44 => new(_haContext, "sensor.tx_44");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx45 => new(_haContext, "sensor.tx_45");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx46 => new(_haContext, "sensor.tx_46");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx47 => new(_haContext, "sensor.tx_47");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx48 => new(_haContext, "sensor.tx_48");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx49 => new(_haContext, "sensor.tx_49");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx5 => new(_haContext, "sensor.tx_5");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx50 => new(_haContext, "sensor.tx_50");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx51 => new(_haContext, "sensor.tx_51");
    ///<summary> RX TX</summary>
    public NumericSensorEntity Tx52 => new(_haContext, "sensor.tx_52");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx53 => new(_haContext, "sensor.tx_53");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx54 => new(_haContext, "sensor.tx_54");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx55 => new(_haContext, "sensor.tx_55");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx56 => new(_haContext, "sensor.tx_56");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx57 => new(_haContext, "sensor.tx_57");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx58 => new(_haContext, "sensor.tx_58");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx59 => new(_haContext, "sensor.tx_59");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx6 => new(_haContext, "sensor.tx_6");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx60 => new(_haContext, "sensor.tx_60");
    ///<summary> RX TX</summary>
    public NumericSensorEntity Tx61 => new(_haContext, "sensor.tx_61");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx62 => new(_haContext, "sensor.tx_62");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx63 => new(_haContext, "sensor.tx_63");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx64 => new(_haContext, "sensor.tx_64");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx65 => new(_haContext, "sensor.tx_65");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx66 => new(_haContext, "sensor.tx_66");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx67 => new(_haContext, "sensor.tx_67");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx68 => new(_haContext, "sensor.tx_68");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx69 => new(_haContext, "sensor.tx_69");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx7 => new(_haContext, "sensor.tx_7");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx70 => new(_haContext, "sensor.tx_70");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx71 => new(_haContext, "sensor.tx_71");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx72 => new(_haContext, "sensor.tx_72");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx73 => new(_haContext, "sensor.tx_73");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx74 => new(_haContext, "sensor.tx_74");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx75 => new(_haContext, "sensor.tx_75");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx76 => new(_haContext, "sensor.tx_76");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx77 => new(_haContext, "sensor.tx_77");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx78 => new(_haContext, "sensor.tx_78");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx79 => new(_haContext, "sensor.tx_79");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx8 => new(_haContext, "sensor.tx_8");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx80 => new(_haContext, "sensor.tx_80");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx81 => new(_haContext, "sensor.tx_81");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx82 => new(_haContext, "sensor.tx_82");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx83 => new(_haContext, "sensor.tx_83");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx84 => new(_haContext, "sensor.tx_84");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx85 => new(_haContext, "sensor.tx_85");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx86 => new(_haContext, "sensor.tx_86");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx87 => new(_haContext, "sensor.tx_87");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx88 => new(_haContext, "sensor.tx_88");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx89 => new(_haContext, "sensor.tx_89");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx9 => new(_haContext, "sensor.tx_9");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx90 => new(_haContext, "sensor.tx_90");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx91 => new(_haContext, "sensor.tx_91");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx92 => new(_haContext, "sensor.tx_92");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx93 => new(_haContext, "sensor.tx_93");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx94 => new(_haContext, "sensor.tx_94");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx95 => new(_haContext, "sensor.tx_95");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx96 => new(_haContext, "sensor.tx_96");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx97 => new(_haContext, "sensor.tx_97");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx98 => new(_haContext, "sensor.tx_98");
    ///<summary> TX</summary>
    public NumericSensorEntity Tx99 => new(_haContext, "sensor.tx_99");
    ///<summary>UK-020287222957 RX</summary>
    public NumericSensorEntity Uk020287222957Rx => new(_haContext, "sensor.uk_020287222957_rx");
    ///<summary>UK-020287222957 TX</summary>
    public NumericSensorEntity Uk020287222957Tx => new(_haContext, "sensor.uk_020287222957_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity UkPc0jskuxRx => new(_haContext, "sensor.uk_pc0jskux_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity UkPc0jskuxTx => new(_haContext, "sensor.uk_pc0jskux_tx");
    ///<summary>utility 1 energy</summary>
    public NumericSensorEntity Utility1Energy => new(_haContext, "sensor.utility_1_energy");
    ///<summary>utility 1 power</summary>
    public NumericSensorEntity Utility1Power => new(_haContext, "sensor.utility_1_power");
    ///<summary>utility 2 energy</summary>
    public NumericSensorEntity Utility2Energy => new(_haContext, "sensor.utility_2_energy");
    ///<summary>utility 2 power</summary>
    public NumericSensorEntity Utility2Power => new(_haContext, "sensor.utility_2_power");
    ///<summary>utility 3 energy</summary>
    public NumericSensorEntity Utility3Energy => new(_haContext, "sensor.utility_3_energy");
    ///<summary>utility 3 power</summary>
    public NumericSensorEntity Utility3Power => new(_haContext, "sensor.utility_3_power");
    ///<summary>Utility Lux</summary>
    public NumericSensorEntity UtilityLux => new(_haContext, "sensor.utility_lux");
    ///<summary>Utility Motion Battery</summary>
    public NumericSensorEntity UtilityMotionBattery => new(_haContext, "sensor.utility_motion_battery");
    ///<summary>Wallpanel Fire HD8 RX</summary>
    public NumericSensorEntity WallpanelFireHd8Rx => new(_haContext, "sensor.wallpanel_fire_hd8_rx");
    ///<summary>Wallpanel Fire HD8 TX</summary>
    public NumericSensorEntity WallpanelFireHd8Tx => new(_haContext, "sensor.wallpanel_fire_hd8_tx");
    ///<summary>washer RX</summary>
    public NumericSensorEntity WasherRx => new(_haContext, "sensor.washer_rx");
    ///<summary>washer TX</summary>
    public NumericSensorEntity WasherTx => new(_haContext, "sensor.washer_tx");
    ///<summary>Washing machine deltaEnergy</summary>
    public NumericSensorEntity WashingMachineDeltaenergy => new(_haContext, "sensor.washing_machine_deltaenergy");
    ///<summary>Washing machine deltaEnergy</summary>
    public NumericSensorEntity WashingMachineDeltaenergy2 => new(_haContext, "sensor.washing_machine_deltaenergy_2");
    ///<summary>Washing machine Energy Meter</summary>
    public NumericSensorEntity WashingMachineEnergy => new(_haContext, "sensor.washing_machine_energy");
    ///<summary>Washing machine energy</summary>
    public NumericSensorEntity WashingMachineEnergy2 => new(_haContext, "sensor.washing_machine_energy_2");
    ///<summary>Washing machine energySaved</summary>
    public NumericSensorEntity WashingMachineEnergysaved => new(_haContext, "sensor.washing_machine_energysaved");
    ///<summary>Washing machine energySaved</summary>
    public NumericSensorEntity WashingMachineEnergysaved2 => new(_haContext, "sensor.washing_machine_energysaved_2");
    ///<summary>Washing machine Power Meter</summary>
    public NumericSensorEntity WashingMachinePower => new(_haContext, "sensor.washing_machine_power");
    ///<summary>Washing machine power</summary>
    public NumericSensorEntity WashingMachinePower2 => new(_haContext, "sensor.washing_machine_power_2");
    ///<summary>Washing machine powerEnergy</summary>
    public NumericSensorEntity WashingMachinePowerenergy => new(_haContext, "sensor.washing_machine_powerenergy");
    ///<summary>Washing machine powerEnergy</summary>
    public NumericSensorEntity WashingMachinePowerenergy2 => new(_haContext, "sensor.washing_machine_powerenergy_2");
    ///<summary>Water Temperature</summary>
    public NumericSensorEntity WaterTemperature => new(_haContext, "sensor.water_temperature");
    ///<summary>Wiser iTRV Boys Battery</summary>
    public NumericSensorEntity WiserItrvAaronBattery => new(_haContext, "sensor.wiser_itrv_aaron_battery");
    ///<summary>Wiser iTRV Dining Battery</summary>
    public NumericSensorEntity WiserItrvDiningBattery => new(_haContext, "sensor.wiser_itrv_dining_battery");
    ///<summary>Wiser iTRV Entrance Battery</summary>
    public NumericSensorEntity WiserItrvEntranceBattery => new(_haContext, "sensor.wiser_itrv_entrance_battery");
    ///<summary>Wiser iTRV Guest Room Battery</summary>
    public NumericSensorEntity WiserItrvJaydenBattery => new(_haContext, "sensor.wiser_itrv_jayden_battery");
    ///<summary>Wiser iTRV Landing Battery</summary>
    public NumericSensorEntity WiserItrvLandingBattery => new(_haContext, "sensor.wiser_itrv_landing_battery");
    ///<summary>Wiser iTRV Lounge  Battery</summary>
    public NumericSensorEntity WiserItrvLoungeBattery => new(_haContext, "sensor.wiser_itrv_lounge_battery");
    ///<summary>Wiser iTRV Lounge Bay Battery</summary>
    public NumericSensorEntity WiserItrvLoungeBayBattery => new(_haContext, "sensor.wiser_itrv_lounge_bay_battery");
    ///<summary>Wiser iTRV Master Battery</summary>
    public NumericSensorEntity WiserItrvMasterBattery => new(_haContext, "sensor.wiser_itrv_master_battery");
    ///<summary>Wiser iTRV Office Battery</summary>
    public NumericSensorEntity WiserItrvOfficeBattery => new(_haContext, "sensor.wiser_itrv_office_battery");
    ///<summary>Wiser iTRV Playroom Battery</summary>
    public NumericSensorEntity WiserItrvPlayroomBattery => new(_haContext, "sensor.wiser_itrv_playroom_battery");
    ///<summary>Wiser iTRV Utility Battery</summary>
    public NumericSensorEntity WiserItrvUtilityBattery => new(_haContext, "sensor.wiser_itrv_utility_battery");
    ///<summary>Wiser LTS Heating Demand Boys</summary>
    public NumericSensorEntity WiserLtsHeatingDemandBoys => new(_haContext, "sensor.wiser_lts_heating_demand_boys");
    ///<summary>Wiser LTS Heating Demand Channel 1</summary>
    public NumericSensorEntity WiserLtsHeatingDemandChannel1 => new(_haContext, "sensor.wiser_lts_heating_demand_channel_1");
    ///<summary>Wiser LTS Heating Demand Dining</summary>
    public NumericSensorEntity WiserLtsHeatingDemandDining => new(_haContext, "sensor.wiser_lts_heating_demand_dining");
    ///<summary>Wiser LTS Heating Demand Entrance</summary>
    public NumericSensorEntity WiserLtsHeatingDemandEntrance => new(_haContext, "sensor.wiser_lts_heating_demand_entrance");
    ///<summary>Wiser LTS Heating Demand Guest Room</summary>
    public NumericSensorEntity WiserLtsHeatingDemandGuestRoom => new(_haContext, "sensor.wiser_lts_heating_demand_guest_room");
    ///<summary>Wiser LTS Heating Demand Landing</summary>
    public NumericSensorEntity WiserLtsHeatingDemandLanding => new(_haContext, "sensor.wiser_lts_heating_demand_landing");
    ///<summary>Wiser LTS Heating Demand Lounge </summary>
    public NumericSensorEntity WiserLtsHeatingDemandLounge => new(_haContext, "sensor.wiser_lts_heating_demand_lounge");
    ///<summary>Wiser LTS Heating Demand Lounge Bay</summary>
    public NumericSensorEntity WiserLtsHeatingDemandLoungeBay => new(_haContext, "sensor.wiser_lts_heating_demand_lounge_bay");
    ///<summary>Wiser LTS Heating Demand Master</summary>
    public NumericSensorEntity WiserLtsHeatingDemandMaster => new(_haContext, "sensor.wiser_lts_heating_demand_master");
    ///<summary>Wiser LTS Heating Demand Office</summary>
    public NumericSensorEntity WiserLtsHeatingDemandOffice => new(_haContext, "sensor.wiser_lts_heating_demand_office");
    ///<summary>Wiser LTS Heating Demand Playroom</summary>
    public NumericSensorEntity WiserLtsHeatingDemandPlayroom => new(_haContext, "sensor.wiser_lts_heating_demand_playroom");
    ///<summary>Wiser LTS Heating Demand Utility</summary>
    public NumericSensorEntity WiserLtsHeatingDemandUtility => new(_haContext, "sensor.wiser_lts_heating_demand_utility");
    ///<summary>Wiser LTS Hot Water Demand</summary>
    public NumericSensorEntity WiserLtsHotWaterDemand => new(_haContext, "sensor.wiser_lts_hot_water_demand");
    ///<summary>Wiser LTS Humidity Utility</summary>
    public NumericSensorEntity WiserLtsHumidityUtility => new(_haContext, "sensor.wiser_lts_humidity_utility");
    ///<summary>Wiser LTS Target Temperature Dining</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureDining => new(_haContext, "sensor.wiser_lts_target_temperature_dining");
    ///<summary>Wiser LTS Target Temperature Entrance</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureEntrance => new(_haContext, "sensor.wiser_lts_target_temperature_entrance");
    ///<summary>Wiser LTS Target Temperature Landing</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureLanding => new(_haContext, "sensor.wiser_lts_target_temperature_landing");
    ///<summary>Wiser LTS Target Temperature Lounge </summary>
    public NumericSensorEntity WiserLtsTargetTemperatureLounge => new(_haContext, "sensor.wiser_lts_target_temperature_lounge");
    ///<summary>Wiser LTS Target Temperature Lounge Bay</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureLoungeBay => new(_haContext, "sensor.wiser_lts_target_temperature_lounge_bay");
    ///<summary>Wiser LTS Target Temperature Master</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureMaster => new(_haContext, "sensor.wiser_lts_target_temperature_master");
    ///<summary>Wiser LTS Target Temperature Office</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureOffice => new(_haContext, "sensor.wiser_lts_target_temperature_office");
    ///<summary>Wiser LTS Target Temperature Playroom</summary>
    public NumericSensorEntity WiserLtsTargetTemperaturePlayroom => new(_haContext, "sensor.wiser_lts_target_temperature_playroom");
    ///<summary>Wiser LTS Target Temperature Utility</summary>
    public NumericSensorEntity WiserLtsTargetTemperatureUtility => new(_haContext, "sensor.wiser_lts_target_temperature_utility");
    ///<summary>Wiser LTS Temperature Boys</summary>
    public NumericSensorEntity WiserLtsTemperatureBoys => new(_haContext, "sensor.wiser_lts_temperature_boys");
    ///<summary>Wiser LTS Temperature Dining</summary>
    public NumericSensorEntity WiserLtsTemperatureDining => new(_haContext, "sensor.wiser_lts_temperature_dining");
    ///<summary>Wiser LTS Temperature Entrance</summary>
    public NumericSensorEntity WiserLtsTemperatureEntrance => new(_haContext, "sensor.wiser_lts_temperature_entrance");
    ///<summary>Wiser LTS Temperature Guest Room</summary>
    public NumericSensorEntity WiserLtsTemperatureGuestRoom => new(_haContext, "sensor.wiser_lts_temperature_guest_room");
    ///<summary>Wiser LTS Temperature Landing</summary>
    public NumericSensorEntity WiserLtsTemperatureLanding => new(_haContext, "sensor.wiser_lts_temperature_landing");
    ///<summary>Wiser LTS Temperature Lounge </summary>
    public NumericSensorEntity WiserLtsTemperatureLounge => new(_haContext, "sensor.wiser_lts_temperature_lounge");
    ///<summary>Wiser LTS Temperature Lounge Bay</summary>
    public NumericSensorEntity WiserLtsTemperatureLoungeBay => new(_haContext, "sensor.wiser_lts_temperature_lounge_bay");
    ///<summary>Wiser LTS Temperature Master</summary>
    public NumericSensorEntity WiserLtsTemperatureMaster => new(_haContext, "sensor.wiser_lts_temperature_master");
    ///<summary>Wiser LTS Temperature Office</summary>
    public NumericSensorEntity WiserLtsTemperatureOffice => new(_haContext, "sensor.wiser_lts_temperature_office");
    ///<summary>Wiser LTS Temperature Playroom</summary>
    public NumericSensorEntity WiserLtsTemperaturePlayroom => new(_haContext, "sensor.wiser_lts_temperature_playroom");
    ///<summary>Wiser LTS Temperature Utility</summary>
    public NumericSensorEntity WiserLtsTemperatureUtility => new(_haContext, "sensor.wiser_lts_temperature_utility");
    ///<summary>Wiser RoomStat Utility Battery</summary>
    public NumericSensorEntity WiserRoomstatUtilityBattery => new(_haContext, "sensor.wiser_roomstat_utility_battery");
    ///<summary>Wiser HeatHub (WiserHeat031C5E) RX</summary>
    public NumericSensorEntity Wiserheat031c5eRx => new(_haContext, "sensor.wiserheat031c5e_rx");
    ///<summary>Wiser HeatHub (WiserHeat031C5E) TX</summary>
    public NumericSensorEntity Wiserheat031c5eTx => new(_haContext, "sensor.wiserheat031c5e_tx");
    ///<summary>wlan0 RX RX</summary>
    public NumericSensorEntity Wlan0Rx => new(_haContext, "sensor.wlan0_rx");
    ///<summary>RX</summary>
    public NumericSensorEntity Wlan0Rx2 => new(_haContext, "sensor.wlan0_rx_2");
    ///<summary>wlan0 RX TX</summary>
    public NumericSensorEntity Wlan0Tx => new(_haContext, "sensor.wlan0_tx");
    ///<summary>TX</summary>
    public NumericSensorEntity Wlan0Tx2 => new(_haContext, "sensor.wlan0_tx_2");
    ///<summary>XBOX RX</summary>
    public NumericSensorEntity XboxRx => new(_haContext, "sensor.xbox_rx");
    ///<summary>XBOX TX</summary>
    public NumericSensorEntity XboxTx => new(_haContext, "sensor.xbox_tx");
}

public partial class SirenEntities
{
    private readonly IHaContext _haContext;
    public SirenEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Downstairs Siren</summary>
    public SirenEntity DownstairsSiren => new(_haContext, "siren.downstairs_siren");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public SwitchEntity AaronAtv => new(_haContext, "switch.aaron_atv");
    ///<summary>Playroom do not disturb switch</summary>
    public SwitchEntity AaronDoNotDisturbSwitch => new(_haContext, "switch.aaron_do_not_disturb_switch");
    ///<summary>Playroom repeat switch</summary>
    public SwitchEntity AaronRepeatSwitch => new(_haContext, "switch.aaron_repeat_switch");
    ///<summary>Playroom shuffle switch</summary>
    public SwitchEntity AaronShuffleSwitch => new(_haContext, "switch.aaron_shuffle_switch");
    ///<summary>Adaptive Lighting: Aaron</summary>
    public SwitchEntity AdaptiveLightingAaron => new(_haContext, "switch.adaptive_lighting_aaron");
    ///<summary>Adaptive Lighting Adapt Brightness: Aaron</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessAaron => new(_haContext, "switch.adaptive_lighting_adapt_brightness_aaron");
    ///<summary>Adaptive Lighting Adapt Brightness: Dining</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessDining => new(_haContext, "switch.adaptive_lighting_adapt_brightness_dining");
    ///<summary>Adaptive Lighting Adapt Brightness: Entrance</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessEntrance => new(_haContext, "switch.adaptive_lighting_adapt_brightness_entrance");
    ///<summary>Adaptive Lighting Adapt Brightness: Floor </summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessFloor => new(_haContext, "switch.adaptive_lighting_adapt_brightness_floor");
    ///<summary>Adaptive Lighting Adapt Brightness: Hallway</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessHallway => new(_haContext, "switch.adaptive_lighting_adapt_brightness_hallway");
    ///<summary>Adaptive Lighting Adapt Brightness: Jayden</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessJayden => new(_haContext, "switch.adaptive_lighting_adapt_brightness_jayden");
    ///<summary>Adaptive Lighting Adapt Brightness: Kitchen</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessKitchen => new(_haContext, "switch.adaptive_lighting_adapt_brightness_kitchen");
    ///<summary>Adaptive Lighting Adapt Brightness: Landing</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessLanding => new(_haContext, "switch.adaptive_lighting_adapt_brightness_landing");
    ///<summary>Adaptive Lighting Adapt Brightness: Lounge</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessLounge => new(_haContext, "switch.adaptive_lighting_adapt_brightness_lounge");
    ///<summary>Adaptive Lighting Adapt Brightness: Master</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessMaster => new(_haContext, "switch.adaptive_lighting_adapt_brightness_master");
    ///<summary>Adaptive Lighting Adapt Brightness: Study</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessStudy => new(_haContext, "switch.adaptive_lighting_adapt_brightness_study");
    ///<summary>Adaptive Lighting Adapt Brightness: Toilet</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessToilet => new(_haContext, "switch.adaptive_lighting_adapt_brightness_toilet");
    ///<summary>Adaptive Lighting Adapt Brightness: Utility</summary>
    public SwitchEntity AdaptiveLightingAdaptBrightnessUtility => new(_haContext, "switch.adaptive_lighting_adapt_brightness_utility");
    ///<summary>Adaptive Lighting Adapt Color: Aaron</summary>
    public SwitchEntity AdaptiveLightingAdaptColorAaron => new(_haContext, "switch.adaptive_lighting_adapt_color_aaron");
    ///<summary>Adaptive Lighting Adapt Color: Dining</summary>
    public SwitchEntity AdaptiveLightingAdaptColorDining => new(_haContext, "switch.adaptive_lighting_adapt_color_dining");
    ///<summary>Adaptive Lighting Adapt Color: Entrance</summary>
    public SwitchEntity AdaptiveLightingAdaptColorEntrance => new(_haContext, "switch.adaptive_lighting_adapt_color_entrance");
    ///<summary>Adaptive Lighting Adapt Color: Floor </summary>
    public SwitchEntity AdaptiveLightingAdaptColorFloor => new(_haContext, "switch.adaptive_lighting_adapt_color_floor");
    ///<summary>Adaptive Lighting Adapt Color: Hallway</summary>
    public SwitchEntity AdaptiveLightingAdaptColorHallway => new(_haContext, "switch.adaptive_lighting_adapt_color_hallway");
    ///<summary>Adaptive Lighting Adapt Color: Jayden</summary>
    public SwitchEntity AdaptiveLightingAdaptColorJayden => new(_haContext, "switch.adaptive_lighting_adapt_color_jayden");
    ///<summary>Adaptive Lighting Adapt Color: Kitchen</summary>
    public SwitchEntity AdaptiveLightingAdaptColorKitchen => new(_haContext, "switch.adaptive_lighting_adapt_color_kitchen");
    ///<summary>Adaptive Lighting Adapt Color: Landing</summary>
    public SwitchEntity AdaptiveLightingAdaptColorLanding => new(_haContext, "switch.adaptive_lighting_adapt_color_landing");
    ///<summary>Adaptive Lighting Adapt Color: Lounge</summary>
    public SwitchEntity AdaptiveLightingAdaptColorLounge => new(_haContext, "switch.adaptive_lighting_adapt_color_lounge");
    ///<summary>Adaptive Lighting Adapt Color: Master</summary>
    public SwitchEntity AdaptiveLightingAdaptColorMaster => new(_haContext, "switch.adaptive_lighting_adapt_color_master");
    ///<summary>Adaptive Lighting Adapt Color: Study</summary>
    public SwitchEntity AdaptiveLightingAdaptColorStudy => new(_haContext, "switch.adaptive_lighting_adapt_color_study");
    ///<summary>Adaptive Lighting Adapt Color: Toilet</summary>
    public SwitchEntity AdaptiveLightingAdaptColorToilet => new(_haContext, "switch.adaptive_lighting_adapt_color_toilet");
    ///<summary>Adaptive Lighting Adapt Color: Utility</summary>
    public SwitchEntity AdaptiveLightingAdaptColorUtility => new(_haContext, "switch.adaptive_lighting_adapt_color_utility");
    ///<summary>Adaptive Lighting: Dining</summary>
    public SwitchEntity AdaptiveLightingDining => new(_haContext, "switch.adaptive_lighting_dining");
    ///<summary>Adaptive Lighting: Entrance</summary>
    public SwitchEntity AdaptiveLightingEntrance => new(_haContext, "switch.adaptive_lighting_entrance");
    ///<summary>Adaptive Lighting: Floor </summary>
    public SwitchEntity AdaptiveLightingFloor => new(_haContext, "switch.adaptive_lighting_floor");
    ///<summary>Adaptive Lighting: Hallway</summary>
    public SwitchEntity AdaptiveLightingHallway => new(_haContext, "switch.adaptive_lighting_hallway");
    ///<summary>Adaptive Lighting: Jayden</summary>
    public SwitchEntity AdaptiveLightingJayden => new(_haContext, "switch.adaptive_lighting_jayden");
    ///<summary>Adaptive Lighting: Kitchen</summary>
    public SwitchEntity AdaptiveLightingKitchen => new(_haContext, "switch.adaptive_lighting_kitchen");
    ///<summary>Adaptive Lighting: Landing</summary>
    public SwitchEntity AdaptiveLightingLanding => new(_haContext, "switch.adaptive_lighting_landing");
    ///<summary>Adaptive Lighting: Lounge</summary>
    public SwitchEntity AdaptiveLightingLounge => new(_haContext, "switch.adaptive_lighting_lounge");
    ///<summary>Adaptive Lighting: Master</summary>
    public SwitchEntity AdaptiveLightingMaster => new(_haContext, "switch.adaptive_lighting_master");
    ///<summary>Adaptive Lighting Sleep Mode: Aaron</summary>
    public SwitchEntity AdaptiveLightingSleepModeAaron => new(_haContext, "switch.adaptive_lighting_sleep_mode_aaron");
    ///<summary>Adaptive Lighting Sleep Mode: Dining</summary>
    public SwitchEntity AdaptiveLightingSleepModeDining => new(_haContext, "switch.adaptive_lighting_sleep_mode_dining");
    ///<summary>Adaptive Lighting Sleep Mode: Entrance</summary>
    public SwitchEntity AdaptiveLightingSleepModeEntrance => new(_haContext, "switch.adaptive_lighting_sleep_mode_entrance");
    ///<summary>Adaptive Lighting Sleep Mode: Floor </summary>
    public SwitchEntity AdaptiveLightingSleepModeFloor => new(_haContext, "switch.adaptive_lighting_sleep_mode_floor");
    ///<summary>Adaptive Lighting Sleep Mode: Hallway</summary>
    public SwitchEntity AdaptiveLightingSleepModeHallway => new(_haContext, "switch.adaptive_lighting_sleep_mode_hallway");
    ///<summary>Adaptive Lighting Sleep Mode: Jayden</summary>
    public SwitchEntity AdaptiveLightingSleepModeJayden => new(_haContext, "switch.adaptive_lighting_sleep_mode_jayden");
    ///<summary>Adaptive Lighting Sleep Mode: Kitchen</summary>
    public SwitchEntity AdaptiveLightingSleepModeKitchen => new(_haContext, "switch.adaptive_lighting_sleep_mode_kitchen");
    ///<summary>Adaptive Lighting Sleep Mode: Landing</summary>
    public SwitchEntity AdaptiveLightingSleepModeLanding => new(_haContext, "switch.adaptive_lighting_sleep_mode_landing");
    ///<summary>Adaptive Lighting Sleep Mode: Lounge</summary>
    public SwitchEntity AdaptiveLightingSleepModeLounge => new(_haContext, "switch.adaptive_lighting_sleep_mode_lounge");
    ///<summary>Adaptive Lighting Sleep Mode: Master</summary>
    public SwitchEntity AdaptiveLightingSleepModeMaster => new(_haContext, "switch.adaptive_lighting_sleep_mode_master");
    ///<summary>Adaptive Lighting Sleep Mode: Study</summary>
    public SwitchEntity AdaptiveLightingSleepModeStudy => new(_haContext, "switch.adaptive_lighting_sleep_mode_study");
    ///<summary>Adaptive Lighting Sleep Mode: Toilet</summary>
    public SwitchEntity AdaptiveLightingSleepModeToilet => new(_haContext, "switch.adaptive_lighting_sleep_mode_toilet");
    ///<summary>Adaptive Lighting Sleep Mode: Utility</summary>
    public SwitchEntity AdaptiveLightingSleepModeUtility => new(_haContext, "switch.adaptive_lighting_sleep_mode_utility");
    ///<summary>Adaptive Lighting: Study</summary>
    public SwitchEntity AdaptiveLightingStudy => new(_haContext, "switch.adaptive_lighting_study");
    ///<summary>Adaptive Lighting: Toilet</summary>
    public SwitchEntity AdaptiveLightingToilet => new(_haContext, "switch.adaptive_lighting_toilet");
    ///<summary>Adaptive Lighting: Utility</summary>
    public SwitchEntity AdaptiveLightingUtility => new(_haContext, "switch.adaptive_lighting_utility");
    ///<summary>Alarm Beep Infinate</summary>
    public SwitchEntity AlarmBeepInfinate => new(_haContext, "switch.alarm_beep_infinate");
    ///<summary>Alarm Single Beep</summary>
    public SwitchEntity AlarmBeepOne => new(_haContext, "switch.alarm_beep_one");
    ///<summary>Alarm Triple Beep</summary>
    public SwitchEntity AlarmBeepThree => new(_haContext, "switch.alarm_beep_three");
    ///<summary>Alarm Double Beep</summary>
    public SwitchEntity AlarmBeepTwo => new(_haContext, "switch.alarm_beep_two");
    ///<summary>Alarm Siren Beep Two</summary>
    public SwitchEntity AlarmSirenBeepTwo2 => new(_haContext, "switch.alarm_siren_beep_two_2");
    ///<summary>Aubrecia Drive siren</summary>
    public SwitchEntity AubreciaDriveSiren => new(_haContext, "switch.aubrecia_drive_siren");
    ///<summary>Bubbles</summary>
    public SwitchEntity Bubbles => new(_haContext, "switch.bubbles");
    ///<summary>Christmas Indoor Sonoff</summary>
    public SwitchEntity ChristmasIndoorSonoff => new(_haContext, "switch.christmas_indoor_sonoff");
    ///<summary>Discipline Manager</summary>
    public SwitchEntity DisciplineManagerEnabled => new(_haContext, "switch.discipline_manager_enabled");
    ///<summary>Dishwasher</summary>
    public SwitchEntity Dishwasher => new(_haContext, "switch.dishwasher");
    ///<summary>Dishwasher Power</summary>
    public SwitchEntity DishwasherPower => new(_haContext, "switch.dishwasher_power");
    ///<summary>Dishwasher Program Auto1</summary>
    public SwitchEntity DishwasherProgramAuto1 => new(_haContext, "switch.dishwasher_program_auto1");
    ///<summary>Dishwasher Program Auto2</summary>
    public SwitchEntity DishwasherProgramAuto2 => new(_haContext, "switch.dishwasher_program_auto2");
    ///<summary>Dishwasher Program Auto3</summary>
    public SwitchEntity DishwasherProgramAuto3 => new(_haContext, "switch.dishwasher_program_auto3");
    ///<summary>Dishwasher Program AutoHalfLoad</summary>
    public SwitchEntity DishwasherProgramAutohalfload => new(_haContext, "switch.dishwasher_program_autohalfload");
    ///<summary>Dishwasher Program Eco50</summary>
    public SwitchEntity DishwasherProgramEco50 => new(_haContext, "switch.dishwasher_program_eco50");
    ///<summary>Dishwasher Program ExpressSparkle65</summary>
    public SwitchEntity DishwasherProgramExpresssparkle65 => new(_haContext, "switch.dishwasher_program_expresssparkle65");
    ///<summary>Dishwasher Program Glas40</summary>
    public SwitchEntity DishwasherProgramGlas40 => new(_haContext, "switch.dishwasher_program_glas40");
    ///<summary>Dishwasher Program GlassCare</summary>
    public SwitchEntity DishwasherProgramGlasscare => new(_haContext, "switch.dishwasher_program_glasscare");
    ///<summary>Dishwasher Program Intensiv45</summary>
    public SwitchEntity DishwasherProgramIntensiv45 => new(_haContext, "switch.dishwasher_program_intensiv45");
    ///<summary>Dishwasher Program Intensiv70</summary>
    public SwitchEntity DishwasherProgramIntensiv70 => new(_haContext, "switch.dishwasher_program_intensiv70");
    ///<summary>Dishwasher Program IntensivPower</summary>
    public SwitchEntity DishwasherProgramIntensivpower => new(_haContext, "switch.dishwasher_program_intensivpower");
    ///<summary>Dishwasher Program Kurz60</summary>
    public SwitchEntity DishwasherProgramKurz60 => new(_haContext, "switch.dishwasher_program_kurz60");
    ///<summary>Dishwasher Program MachineCare</summary>
    public SwitchEntity DishwasherProgramMachinecare => new(_haContext, "switch.dishwasher_program_machinecare");
    ///<summary>Dishwasher Program MagicDaily</summary>
    public SwitchEntity DishwasherProgramMagicdaily => new(_haContext, "switch.dishwasher_program_magicdaily");
    ///<summary>Dishwasher Program MaximumCleaning</summary>
    public SwitchEntity DishwasherProgramMaximumcleaning => new(_haContext, "switch.dishwasher_program_maximumcleaning");
    ///<summary>Dishwasher Program NightWash</summary>
    public SwitchEntity DishwasherProgramNightwash => new(_haContext, "switch.dishwasher_program_nightwash");
    ///<summary>Dishwasher Program Normal45</summary>
    public SwitchEntity DishwasherProgramNormal45 => new(_haContext, "switch.dishwasher_program_normal45");
    ///<summary>Dishwasher Program Normal65</summary>
    public SwitchEntity DishwasherProgramNormal65 => new(_haContext, "switch.dishwasher_program_normal65");
    ///<summary>Dishwasher Program PreRinse</summary>
    public SwitchEntity DishwasherProgramPrerinse => new(_haContext, "switch.dishwasher_program_prerinse");
    ///<summary>Dishwasher Program Quick45</summary>
    public SwitchEntity DishwasherProgramQuick45 => new(_haContext, "switch.dishwasher_program_quick45");
    ///<summary>Dishwasher Program Quick65</summary>
    public SwitchEntity DishwasherProgramQuick65 => new(_haContext, "switch.dishwasher_program_quick65");
    ///<summary>Dishwasher Program SteamFresh</summary>
    public SwitchEntity DishwasherProgramSteamfresh => new(_haContext, "switch.dishwasher_program_steamfresh");
    ///<summary>Dishwasher Program Super60</summary>
    public SwitchEntity DishwasherProgramSuper60 => new(_haContext, "switch.dishwasher_program_super60");
    ///<summary>Downstairs do not disturb switch</summary>
    public SwitchEntity DownstairsDoNotDisturbSwitch => new(_haContext, "switch.downstairs_do_not_disturb_switch");
    ///<summary>Downstairs Play Ding Sound</summary>
    public SwitchEntity DownstairsPlayDingSound => new(_haContext, "switch.downstairs_play_ding_sound");
    ///<summary>Downstairs Play Motion Sound</summary>
    public SwitchEntity DownstairsPlayMotionSound => new(_haContext, "switch.downstairs_play_motion_sound");
    ///<summary>Downstairs repeat switch</summary>
    public SwitchEntity DownstairsRepeatSwitch => new(_haContext, "switch.downstairs_repeat_switch");
    ///<summary>Downstairs shuffle switch</summary>
    public SwitchEntity DownstairsShuffleSwitch => new(_haContext, "switch.downstairs_shuffle_switch");
    ///<summary>Downstairs Snooze</summary>
    public SwitchEntity DownstairsSnooze => new(_haContext, "switch.downstairs_snooze");
    ///<summary>Entrance</summary>
    public SwitchEntity Entrance => new(_haContext, "switch.entrance");
    ///<summary>Eugene Desktop WOL</summary>
    public SwitchEntity EugeneDesktopWol => new(_haContext, "switch.eugene_desktop_wol");
    ///<summary>Garden do not disturb switch</summary>
    public SwitchEntity EugeneS2ndEchoDotDoNotDisturbSwitch => new(_haContext, "switch.eugene_s_2nd_echo_dot_do_not_disturb_switch");
    ///<summary>Garden repeat switch</summary>
    public SwitchEntity EugeneS2ndEchoDotRepeatSwitch => new(_haContext, "switch.eugene_s_2nd_echo_dot_repeat_switch");
    ///<summary>Garden shuffle switch</summary>
    public SwitchEntity EugeneS2ndEchoDotShuffleSwitch => new(_haContext, "switch.eugene_s_2nd_echo_dot_shuffle_switch");
    ///<summary>Lounge LG Alexa do not disturb switch</summary>
    public SwitchEntity EugeneSLgOledWebos2021TvDoNotDisturbSwitch => new(_haContext, "switch.eugene_s_lg_oled_webos_2021_tv_do_not_disturb_switch");
    ///<summary>Lounge LG Alexa repeat switch</summary>
    public SwitchEntity EugeneSLgOledWebos2021TvRepeatSwitch => new(_haContext, "switch.eugene_s_lg_oled_webos_2021_tv_repeat_switch");
    ///<summary>Lounge LG Alexa shuffle switch</summary>
    public SwitchEntity EugeneSLgOledWebos2021TvShuffleSwitch => new(_haContext, "switch.eugene_s_lg_oled_webos_2021_tv_shuffle_switch");
    ///<summary>Master LG Alexa do not disturb switch</summary>
    public SwitchEntity EugeneSLgWebos2020TvDoNotDisturbSwitch => new(_haContext, "switch.eugene_s_lg_webos_2020_tv_do_not_disturb_switch");
    ///<summary>Master LG Alexa repeat switch</summary>
    public SwitchEntity EugeneSLgWebos2020TvRepeatSwitch => new(_haContext, "switch.eugene_s_lg_webos_2020_tv_repeat_switch");
    ///<summary>Master LG Alexa shuffle switch</summary>
    public SwitchEntity EugeneSLgWebos2020TvShuffleSwitch => new(_haContext, "switch.eugene_s_lg_webos_2020_tv_shuffle_switch");
    ///<summary>Lounge do not disturb switch</summary>
    public SwitchEntity EugeneSSonosArcDoNotDisturbSwitch => new(_haContext, "switch.eugene_s_sonos_arc_do_not_disturb_switch");
    ///<summary>Lounge repeat switch</summary>
    public SwitchEntity EugeneSSonosArcRepeatSwitch => new(_haContext, "switch.eugene_s_sonos_arc_repeat_switch");
    ///<summary>Lounge shuffle switch</summary>
    public SwitchEntity EugeneSSonosArcShuffleSwitch => new(_haContext, "switch.eugene_s_sonos_arc_shuffle_switch");
    ///<summary>Everywhere do not disturb switch</summary>
    public SwitchEntity EverywhereDoNotDisturbSwitch => new(_haContext, "switch.everywhere_do_not_disturb_switch");
    ///<summary>Everywhere repeat switch</summary>
    public SwitchEntity EverywhereRepeatSwitch => new(_haContext, "switch.everywhere_repeat_switch");
    ///<summary>Everywhere shuffle switch</summary>
    public SwitchEntity EverywhereShuffleSwitch => new(_haContext, "switch.everywhere_shuffle_switch");
    ///<summary>Fish Lights Switch</summary>
    public SwitchEntity FishLightsSwitch => new(_haContext, "switch.fish_lights_switch");
    ///<summary>Floor Sonoff</summary>
    public SwitchEntity FloorSonoff => new(_haContext, "switch.floor_sonoff");
    ///<summary>Garage do not disturb switch</summary>
    public SwitchEntity GarageDoNotDisturbSwitch => new(_haContext, "switch.garage_do_not_disturb_switch");
    ///<summary>Garage repeat switch</summary>
    public SwitchEntity GarageRepeatSwitch => new(_haContext, "switch.garage_repeat_switch");
    ///<summary>Garage shuffle switch</summary>
    public SwitchEntity GarageShuffleSwitch => new(_haContext, "switch.garage_shuffle_switch");
    ///<summary>Garden siren</summary>
    public SwitchEntity GardenSiren2 => new(_haContext, "switch.garden_siren_2");
    ///<summary>Hot Tub Heater</summary>
    public SwitchEntity Heaters => new(_haContext, "switch.heaters");
    ///<summary>Jayden</summary>
    public SwitchEntity Jayden => new(_haContext, "switch.jayden");
    ///<summary>Jayden AppleTv</summary>
    public SwitchEntity JaydenAppletv => new(_haContext, "switch.jayden_appletv");
    ///<summary>Jayden Bedside</summary>
    public SwitchEntity JaydenBedside => new(_haContext, "switch.jayden_bedside");
    ///<summary>Aaron do not disturb switch</summary>
    public SwitchEntity JaydenDoNotDisturbSwitch => new(_haContext, "switch.jayden_do_not_disturb_switch");
    ///<summary>Jayden do not disturb switch</summary>
    public SwitchEntity JaydenDoNotDisturbSwitch2 => new(_haContext, "switch.jayden_do_not_disturb_switch_2");
    public SwitchEntity JaydenIpad => new(_haContext, "switch.jayden_ipad");
    public SwitchEntity JaydenRaspberrypi => new(_haContext, "switch.jayden_raspberrypi");
    ///<summary>Aaron repeat switch</summary>
    public SwitchEntity JaydenRepeatSwitch => new(_haContext, "switch.jayden_repeat_switch");
    ///<summary>Jayden repeat switch</summary>
    public SwitchEntity JaydenRepeatSwitch2 => new(_haContext, "switch.jayden_repeat_switch_2");
    public SwitchEntity JaydenSIphone => new(_haContext, "switch.jayden_s_iphone");
    ///<summary>Jayden-s-iPhone RX</summary>
    public SwitchEntity JaydenSIphone2 => new(_haContext, "switch.jayden_s_iphone_2");
    ///<summary>Aaron shuffle switch</summary>
    public SwitchEntity JaydenShuffleSwitch => new(_haContext, "switch.jayden_shuffle_switch");
    ///<summary>Jayden shuffle switch</summary>
    public SwitchEntity JaydenShuffleSwitch2 => new(_haContext, "switch.jayden_shuffle_switch_2");
    ///<summary>Kitchen do not disturb switch</summary>
    public SwitchEntity KitchenDoNotDisturbSwitch => new(_haContext, "switch.kitchen_do_not_disturb_switch");
    ///<summary>Kitchen repeat switch</summary>
    public SwitchEntity KitchenRepeatSwitch => new(_haContext, "switch.kitchen_repeat_switch");
    ///<summary>Kitchen shuffle switch</summary>
    public SwitchEntity KitchenShuffleSwitch => new(_haContext, "switch.kitchen_shuffle_switch");
    ///<summary>Landing Night</summary>
    public SwitchEntity LandingNight => new(_haContext, "switch.landing_night");
    ///<summary>LG Lounge</summary>
    public SwitchEntity LgLounge => new(_haContext, "switch.lg_lounge");
    ///<summary>Light Manager Aaron</summary>
    public SwitchEntity LightManagerAaron => new(_haContext, "switch.light_manager_aaron");
    ///<summary>Light Manager Dining</summary>
    public SwitchEntity LightManagerDining => new(_haContext, "switch.light_manager_dining");
    ///<summary>Light Manager Drive</summary>
    public SwitchEntity LightManagerDrive => new(_haContext, "switch.light_manager_drive");
    ///<summary>Light Manager Entrance</summary>
    public SwitchEntity LightManagerEntrance => new(_haContext, "switch.light_manager_entrance");
    ///<summary>Light Manager Fish</summary>
    public SwitchEntity LightManagerFish => new(_haContext, "switch.light_manager_fish");
    ///<summary>Light Manager Garage</summary>
    public SwitchEntity LightManagerGarage => new(_haContext, "switch.light_manager_garage");
    ///<summary>Light Manager Garden</summary>
    public SwitchEntity LightManagerGarden => new(_haContext, "switch.light_manager_garden");
    ///<summary>Light Manager Hallway</summary>
    public SwitchEntity LightManagerHallway => new(_haContext, "switch.light_manager_hallway");
    ///<summary>Light Manager Jayden</summary>
    public SwitchEntity LightManagerJayden => new(_haContext, "switch.light_manager_jayden");
    ///<summary>Light Manager Kitchen</summary>
    public SwitchEntity LightManagerKitchen => new(_haContext, "switch.light_manager_kitchen");
    ///<summary>Light Manager Landing</summary>
    public SwitchEntity LightManagerLanding => new(_haContext, "switch.light_manager_landing");
    ///<summary>Light Manager Lounge</summary>
    public SwitchEntity LightManagerLounge => new(_haContext, "switch.light_manager_lounge");
    ///<summary>Light Manager Master</summary>
    public SwitchEntity LightManagerMaster => new(_haContext, "switch.light_manager_master");
    ///<summary>Light Manager Playroom</summary>
    public SwitchEntity LightManagerPlayroom => new(_haContext, "switch.light_manager_playroom");
    ///<summary>Light Manager Porch</summary>
    public SwitchEntity LightManagerPorch => new(_haContext, "switch.light_manager_porch");
    ///<summary>Light Manager Study</summary>
    public SwitchEntity LightManagerStudy => new(_haContext, "switch.light_manager_study");
    ///<summary>Light Manager Toilet</summary>
    public SwitchEntity LightManagerToilet => new(_haContext, "switch.light_manager_toilet");
    ///<summary>Light Manager Utility</summary>
    public SwitchEntity LightManagerUtility => new(_haContext, "switch.light_manager_utility");
    ///<summary>Dining do not disturb switch</summary>
    public SwitchEntity LoungeGroupDoNotDisturbSwitch => new(_haContext, "switch.lounge_group_do_not_disturb_switch");
    ///<summary>Dining repeat switch</summary>
    public SwitchEntity LoungeGroupRepeatSwitch => new(_haContext, "switch.lounge_group_repeat_switch");
    ///<summary>Dining shuffle switch</summary>
    public SwitchEntity LoungeGroupShuffleSwitch => new(_haContext, "switch.lounge_group_shuffle_switch");
    ///<summary>Lounge Loudness</summary>
    public SwitchEntity LoungeLoudness => new(_haContext, "switch.lounge_loudness");
    ///<summary>Lounge Sonos do not disturb switch</summary>
    public SwitchEntity LoungeSonosDoNotDisturbSwitch => new(_haContext, "switch.lounge_sonos_do_not_disturb_switch");
    ///<summary>Lounge Sonos repeat switch</summary>
    public SwitchEntity LoungeSonosRepeatSwitch => new(_haContext, "switch.lounge_sonos_repeat_switch");
    ///<summary>Lounge Sonos shuffle switch</summary>
    public SwitchEntity LoungeSonosShuffleSwitch => new(_haContext, "switch.lounge_sonos_shuffle_switch");
    ///<summary>Lounge Surround music full volume</summary>
    public SwitchEntity LoungeSurroundMusicFullVolume => new(_haContext, "switch.lounge_surround_music_full_volume");
    ///<summary>Lounge TV Socket</summary>
    public SwitchEntity LoungeTvSocket => new(_haContext, "switch.lounge_tv_socket");
    ///<summary>Massage</summary>
    public SwitchEntity Massage => new(_haContext, "switch.massage");
    ///<summary>Master do not disturb switch</summary>
    public SwitchEntity MasterDoNotDisturbSwitch => new(_haContext, "switch.master_do_not_disturb_switch");
    ///<summary>Master repeat switch</summary>
    public SwitchEntity MasterRepeatSwitch => new(_haContext, "switch.master_repeat_switch");
    ///<summary>Master shuffle switch</summary>
    public SwitchEntity MasterShuffleSwitch => new(_haContext, "switch.master_shuffle_switch");
    ///<summary>netdaemon_lightsmanager</summary>
    public SwitchEntity NetdaemonLightsmanager => new(_haContext, "switch.netdaemon_lightsmanager");
    ///<summary>Niemand Drive Event Stream</summary>
    public SwitchEntity NiemandDriveEventStream => new(_haContext, "switch.niemand_drive_event_stream");
    ///<summary>Niemand Drive Live Stream</summary>
    public SwitchEntity NiemandDriveLiveStream => new(_haContext, "switch.niemand_drive_live_stream");
    ///<summary>Niemand Drive siren</summary>
    public SwitchEntity NiemandDriveSiren => new(_haContext, "switch.niemand_drive_siren");
    ///<summary>Niemand Drive Siren</summary>
    public SwitchEntity NiemandDriveSiren2 => new(_haContext, "switch.niemand_drive_siren_2");
    ///<summary>Niemand Front Door Event Stream</summary>
    public SwitchEntity NiemandFrontDoorEventStream => new(_haContext, "switch.niemand_front_door_event_stream");
    ///<summary>Niemand Front Door Live Stream</summary>
    public SwitchEntity NiemandFrontDoorLiveStream => new(_haContext, "switch.niemand_front_door_live_stream");
    ///<summary>Niemand Garage Event Stream</summary>
    public SwitchEntity NiemandGarageEventStream => new(_haContext, "switch.niemand_garage_event_stream");
    ///<summary>Niemand Garage Live Stream</summary>
    public SwitchEntity NiemandGarageLiveStream => new(_haContext, "switch.niemand_garage_live_stream");
    ///<summary>Niemand Garage siren</summary>
    public SwitchEntity NiemandGarageSiren => new(_haContext, "switch.niemand_garage_siren");
    ///<summary>Niemand Garage Siren</summary>
    public SwitchEntity NiemandGarageSiren2 => new(_haContext, "switch.niemand_garage_siren_2");
    ///<summary>Niemand Garden Event Stream</summary>
    public SwitchEntity NiemandGardenEventStream => new(_haContext, "switch.niemand_garden_event_stream");
    ///<summary>Niemand Garden Live Stream</summary>
    public SwitchEntity NiemandGardenLiveStream => new(_haContext, "switch.niemand_garden_live_stream");
    ///<summary>Niemand Garden siren</summary>
    public SwitchEntity NiemandGardenSiren => new(_haContext, "switch.niemand_garden_siren");
    ///<summary>Niemand Garden Siren</summary>
    public SwitchEntity NiemandGardenSiren2 => new(_haContext, "switch.niemand_garden_siren_2");
    ///<summary>Niemand Side Event Stream</summary>
    public SwitchEntity NiemandSideEventStream => new(_haContext, "switch.niemand_side_event_stream");
    ///<summary>Niemand Side Live Stream</summary>
    public SwitchEntity NiemandSideLiveStream => new(_haContext, "switch.niemand_side_live_stream");
    ///<summary>Niemand Side siren</summary>
    public SwitchEntity NiemandSideSiren => new(_haContext, "switch.niemand_side_siren");
    ///<summary>Niemand Side Siren</summary>
    public SwitchEntity NiemandSideSiren2 => new(_haContext, "switch.niemand_side_siren_2");
    ///<summary>Office do not disturb switch</summary>
    public SwitchEntity OfficeDoNotDisturbSwitch => new(_haContext, "switch.office_do_not_disturb_switch");
    ///<summary>Office repeat switch</summary>
    public SwitchEntity OfficeRepeatSwitch => new(_haContext, "switch.office_repeat_switch");
    ///<summary>Office shuffle switch</summary>
    public SwitchEntity OfficeShuffleSwitch => new(_haContext, "switch.office_shuffle_switch");
    ///<summary>Office Skylight</summary>
    public SwitchEntity OfficeSkylight => new(_haContext, "switch.office_skylight");
    ///<summary>Pi-Hole</summary>
    public SwitchEntity PiHole => new(_haContext, "switch.pi_hole");
    ///<summary>Plug 1</summary>
    public SwitchEntity Plug1 => new(_haContext, "switch.plug_1");
    ///<summary>Plug 2</summary>
    public SwitchEntity Plug2 => new(_haContext, "switch.plug_2");
    ///<summary>Plug 4</summary>
    public SwitchEntity Plug4 => new(_haContext, "switch.plug_4");
    ///<summary>Schedule #3e786f</summary>
    public SwitchEntity Schedule3e786f => new(_haContext, "switch.schedule_3e786f");
    ///<summary>Schedule #5a4aba</summary>
    public SwitchEntity Schedule5a4aba2 => new(_haContext, "switch.schedule_5a4aba_2");
    ///<summary>Schedule #5ed2d5</summary>
    public SwitchEntity Schedule5ed2d5 => new(_haContext, "switch.schedule_5ed2d5");
    ///<summary>Schedule #9c76ab</summary>
    public SwitchEntity Schedule9c76ab => new(_haContext, "switch.schedule_9c76ab");
    ///<summary>Schedule #c14b0a</summary>
    public SwitchEntity ScheduleC14b0a => new(_haContext, "switch.schedule_c14b0a");
    ///<summary>Schedule #cba0b8</summary>
    public SwitchEntity ScheduleCba0b8 => new(_haContext, "switch.schedule_cba0b8");
    ///<summary>Schedule #e31e38</summary>
    public SwitchEntity ScheduleE31e38 => new(_haContext, "switch.schedule_e31e38");
    ///<summary>Schedule #e58307</summary>
    public SwitchEntity ScheduleE58307 => new(_haContext, "switch.schedule_e58307");
    ///<summary>Schedule #e5d71d</summary>
    public SwitchEntity ScheduleE5d71d => new(_haContext, "switch.schedule_e5d71d");
    ///<summary>siren</summary>
    public SwitchEntity Siren => new(_haContext, "switch.siren");
    ///<summary>Lounge Crossfade</summary>
    public SwitchEntity SonosLoungeCrossfade => new(_haContext, "switch.sonos_lounge_crossfade");
    ///<summary>Lounge Night sound</summary>
    public SwitchEntity SonosLoungeNightSound => new(_haContext, "switch.sonos_lounge_night_sound");
    ///<summary>Lounge Speech enhancement</summary>
    public SwitchEntity SonosLoungeSpeechEnhancement => new(_haContext, "switch.sonos_lounge_speech_enhancement");
    ///<summary>Lounge Surround enabled</summary>
    public SwitchEntity SonosLoungeSurroundEnabled => new(_haContext, "switch.sonos_lounge_surround_enabled");
    ///<summary>This Device do not disturb switch</summary>
    public SwitchEntity ThisDeviceDoNotDisturbSwitch => new(_haContext, "switch.this_device_do_not_disturb_switch");
    ///<summary>This Device do not disturb switch</summary>
    public SwitchEntity ThisDeviceDoNotDisturbSwitch2 => new(_haContext, "switch.this_device_do_not_disturb_switch_2");
    ///<summary>Tumble dryer</summary>
    public SwitchEntity TumbleDryer => new(_haContext, "switch.tumble_dryer");
    ///<summary>Coffee Machine Socket</summary>
    public SwitchEntity TuyaSocket2 => new(_haContext, "switch.tuya_socket_2");
    ///<summary>Tuya Socket 3</summary>
    public SwitchEntity TuyaSocket3 => new(_haContext, "switch.tuya_socket_3");
    ///<summary>Upstairs do not disturb switch</summary>
    public SwitchEntity UpstairsDoNotDisturbSwitch => new(_haContext, "switch.upstairs_do_not_disturb_switch");
    ///<summary>Upstairs repeat switch</summary>
    public SwitchEntity UpstairsRepeatSwitch => new(_haContext, "switch.upstairs_repeat_switch");
    ///<summary>Upstairs shuffle switch</summary>
    public SwitchEntity UpstairsShuffleSwitch => new(_haContext, "switch.upstairs_shuffle_switch");
    ///<summary>Vacation Mode</summary>
    public SwitchEntity VacationModeEnabled => new(_haContext, "switch.vacation_mode_enabled");
    ///<summary>Wallpanel do not disturb switch</summary>
    public SwitchEntity WallpanelDoNotDisturbSwitch => new(_haContext, "switch.wallpanel_do_not_disturb_switch");
    ///<summary>Washing machine</summary>
    public SwitchEntity WashingMachine => new(_haContext, "switch.washing_machine");
    ///<summary>Water Pump</summary>
    public SwitchEntity WaterPump => new(_haContext, "switch.water_pump");
    ///<summary>Wiser Boys Window Detection</summary>
    public SwitchEntity WiserAaronWindowDetection => new(_haContext, "switch.wiser_aaron_window_detection");
    ///<summary>Wiser Away Mode</summary>
    public SwitchEntity WiserAwayMode => new(_haContext, "switch.wiser_away_mode");
    ///<summary>Wiser Away Mode Affects Hot Water</summary>
    public SwitchEntity WiserAwayModeAffectsHotWater => new(_haContext, "switch.wiser_away_mode_affects_hot_water");
    ///<summary>Wiser Comfort Mode</summary>
    public SwitchEntity WiserComfortMode => new(_haContext, "switch.wiser_comfort_mode");
    ///<summary>Wiser Daylight Saving</summary>
    public SwitchEntity WiserDaylightSaving => new(_haContext, "switch.wiser_daylight_saving");
    ///<summary>Wiser Dining Window Detection</summary>
    public SwitchEntity WiserDiningWindowDetection => new(_haContext, "switch.wiser_dining_window_detection");
    ///<summary>Wiser Eco Mode</summary>
    public SwitchEntity WiserEcoMode => new(_haContext, "switch.wiser_eco_mode");
    ///<summary>Wiser Entrance Window Detection</summary>
    public SwitchEntity WiserEntranceWindowDetection => new(_haContext, "switch.wiser_entrance_window_detection");
    ///<summary>Wiser iTRV Boys Device Lock</summary>
    public SwitchEntity WiserItrvAaronDeviceLock => new(_haContext, "switch.wiser_itrv_aaron_device_lock");
    ///<summary>Wiser iTRV Boys Identify</summary>
    public SwitchEntity WiserItrvAaronIdentify => new(_haContext, "switch.wiser_itrv_aaron_identify");
    ///<summary>Wiser iTRV Dining Device Lock</summary>
    public SwitchEntity WiserItrvDiningDeviceLock => new(_haContext, "switch.wiser_itrv_dining_device_lock");
    ///<summary>Wiser iTRV Dining Identify</summary>
    public SwitchEntity WiserItrvDiningIdentify => new(_haContext, "switch.wiser_itrv_dining_identify");
    ///<summary>Wiser iTRV Entrance Device Lock</summary>
    public SwitchEntity WiserItrvEntranceDeviceLock => new(_haContext, "switch.wiser_itrv_entrance_device_lock");
    ///<summary>Wiser iTRV Entrance Identify</summary>
    public SwitchEntity WiserItrvEntranceIdentify => new(_haContext, "switch.wiser_itrv_entrance_identify");
    ///<summary>Wiser iTRV Guest Room Device Lock</summary>
    public SwitchEntity WiserItrvJaydenDeviceLock => new(_haContext, "switch.wiser_itrv_jayden_device_lock");
    ///<summary>Wiser iTRV Guest Room Identify</summary>
    public SwitchEntity WiserItrvJaydenIdentify => new(_haContext, "switch.wiser_itrv_jayden_identify");
    ///<summary>Wiser iTRV Landing Device Lock</summary>
    public SwitchEntity WiserItrvLandingDeviceLock => new(_haContext, "switch.wiser_itrv_landing_device_lock");
    ///<summary>Wiser iTRV Landing Identify</summary>
    public SwitchEntity WiserItrvLandingIdentify => new(_haContext, "switch.wiser_itrv_landing_identify");
    ///<summary>Wiser iTRV Lounge Bay Device Lock</summary>
    public SwitchEntity WiserItrvLoungeBayDeviceLock => new(_haContext, "switch.wiser_itrv_lounge_bay_device_lock");
    ///<summary>Wiser iTRV Lounge Bay Identify</summary>
    public SwitchEntity WiserItrvLoungeBayIdentify => new(_haContext, "switch.wiser_itrv_lounge_bay_identify");
    ///<summary>Wiser iTRV Lounge  Device Lock</summary>
    public SwitchEntity WiserItrvLoungeDeviceLock => new(_haContext, "switch.wiser_itrv_lounge_device_lock");
    ///<summary>Wiser iTRV Lounge  Identify</summary>
    public SwitchEntity WiserItrvLoungeIdentify => new(_haContext, "switch.wiser_itrv_lounge_identify");
    ///<summary>Wiser iTRV Master Device Lock</summary>
    public SwitchEntity WiserItrvMasterDeviceLock => new(_haContext, "switch.wiser_itrv_master_device_lock");
    ///<summary>Wiser iTRV Master Identify</summary>
    public SwitchEntity WiserItrvMasterIdentify => new(_haContext, "switch.wiser_itrv_master_identify");
    ///<summary>Wiser iTRV Office Device Lock</summary>
    public SwitchEntity WiserItrvOfficeDeviceLock => new(_haContext, "switch.wiser_itrv_office_device_lock");
    ///<summary>Wiser iTRV Office Identify</summary>
    public SwitchEntity WiserItrvOfficeIdentify => new(_haContext, "switch.wiser_itrv_office_identify");
    ///<summary>Wiser iTRV Playroom Device Lock</summary>
    public SwitchEntity WiserItrvPlayroomDeviceLock => new(_haContext, "switch.wiser_itrv_playroom_device_lock");
    ///<summary>Wiser iTRV Playroom Identify</summary>
    public SwitchEntity WiserItrvPlayroomIdentify => new(_haContext, "switch.wiser_itrv_playroom_identify");
    ///<summary>Wiser iTRV Utility Device Lock</summary>
    public SwitchEntity WiserItrvUtilityDeviceLock => new(_haContext, "switch.wiser_itrv_utility_device_lock");
    ///<summary>Wiser iTRV Utility Identify</summary>
    public SwitchEntity WiserItrvUtilityIdentify => new(_haContext, "switch.wiser_itrv_utility_identify");
    ///<summary>Wiser Guest Room Window Detection</summary>
    public SwitchEntity WiserJaydenWindowDetection => new(_haContext, "switch.wiser_jayden_window_detection");
    ///<summary>Wiser Landing Window Detection</summary>
    public SwitchEntity WiserLandingWindowDetection => new(_haContext, "switch.wiser_landing_window_detection");
    ///<summary>Wiser Lounge Bay Window Detection</summary>
    public SwitchEntity WiserLoungeBayWindowDetection => new(_haContext, "switch.wiser_lounge_bay_window_detection");
    ///<summary>Wiser Lounge  Window Detection</summary>
    public SwitchEntity WiserLoungeWindowDetection => new(_haContext, "switch.wiser_lounge_window_detection");
    ///<summary>Wiser Master Window Detection</summary>
    public SwitchEntity WiserMasterWindowDetection => new(_haContext, "switch.wiser_master_window_detection");
    ///<summary>Wiser Office Window Detection</summary>
    public SwitchEntity WiserOfficeWindowDetection => new(_haContext, "switch.wiser_office_window_detection");
    ///<summary>Wiser Playroom Window Detection</summary>
    public SwitchEntity WiserPlayroomWindowDetection => new(_haContext, "switch.wiser_playroom_window_detection");
    ///<summary>Wiser RoomStat Utility Device Lock</summary>
    public SwitchEntity WiserRoomstatUtilityDeviceLock => new(_haContext, "switch.wiser_roomstat_utility_device_lock");
    ///<summary>Wiser RoomStat Utility Identify</summary>
    public SwitchEntity WiserRoomstatUtilityIdentify => new(_haContext, "switch.wiser_roomstat_utility_identify");
    ///<summary>Wiser Utility Window Detection</summary>
    public SwitchEntity WiserUtilityWindowDetection => new(_haContext, "switch.wiser_utility_window_detection");
    ///<summary>Wiser Valve Protection</summary>
    public SwitchEntity WiserValveProtection => new(_haContext, "switch.wiser_valve_protection");
}

public partial class TimerEntities
{
    private readonly IHaContext _haContext;
    public TimerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public TimerEntity BackDoor => new(_haContext, "timer.back_door");
    public TimerEntity Bathroom => new(_haContext, "timer.bathroom");
    public TimerEntity BoysBedroom => new(_haContext, "timer.boys_bedroom");
    public TimerEntity Dining => new(_haContext, "timer.dining");
    public TimerEntity DiningDoor => new(_haContext, "timer.dining_door");
    public TimerEntity Ensuite => new(_haContext, "timer.ensuite");
    public TimerEntity Entrance => new(_haContext, "timer.entrance");
    public TimerEntity Fish => new(_haContext, "timer.fish");
    public TimerEntity FrontDoor => new(_haContext, "timer.front_door");
    public TimerEntity GarageDoor => new(_haContext, "timer.garage_door");
    public TimerEntity GuestBedroom => new(_haContext, "timer.guest_bedroom");
    public TimerEntity Kitchen => new(_haContext, "timer.kitchen");
    public TimerEntity Landing => new(_haContext, "timer.landing");
    public TimerEntity Lounge => new(_haContext, "timer.lounge");
    public TimerEntity LoungeDoor => new(_haContext, "timer.lounge_door");
    public TimerEntity MasterBedroom => new(_haContext, "timer.master_bedroom");
    public TimerEntity Office => new(_haContext, "timer.office");
    public TimerEntity PlayRoom => new(_haContext, "timer.play_room");
    public TimerEntity Porch => new(_haContext, "timer.porch");
    public TimerEntity Toilet => new(_haContext, "timer.toilet");
    public TimerEntity Utility => new(_haContext, "timer.utility");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Lounge</summary>
    public UpdateEntity Lounge => new(_haContext, "update.lounge");
    ///<summary>Office</summary>
    public UpdateEntity Office => new(_haContext, "update.office");
    ///<summary>Pi-Hole Core update available</summary>
    public UpdateEntity PiHoleCoreUpdateAvailable => new(_haContext, "update.pi_hole_core_update_available");
    ///<summary>Pi-Hole FTL update available</summary>
    public UpdateEntity PiHoleFtlUpdateAvailable => new(_haContext, "update.pi_hole_ftl_update_available");
    ///<summary>Pi-Hole Web update available</summary>
    public UpdateEntity PiHoleWebUpdateAvailable => new(_haContext, "update.pi_hole_web_update_available");
    ///<summary>Upstairs</summary>
    public UpdateEntity Upstairs => new(_haContext, "update.upstairs");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>AccuWeather Home</summary>
    public WeatherEntity AccuweatherHome => new(_haContext, "weather.accuweather_home");
    ///<summary>OpenWeatherMap</summary>
    public WeatherEntity Openweathermap => new(_haContext, "weather.openweathermap");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Mum Home</summary>
    public ZoneEntity MumHome => new(_haContext, "zone.mum_home");
}

public partial class InputDatetimeEntities
{
    private readonly IHaContext _haContext;
    public InputDatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Clock Time</summary>
    public InputDatetimeEntity AlarmClockTime => new(_haContext, "input_datetime.alarm_clock_time");
    ///<summary>Energy 1 Hour Window</summary>
    public InputDatetimeEntity Energy1HourWindow => new(_haContext, "input_datetime.energy_1_hour_window");
    ///<summary>Energy 2 Hour Window</summary>
    public InputDatetimeEntity Energy2HourWindow => new(_haContext, "input_datetime.energy_2_hour_window");
    ///<summary>Energy 3 hour Window</summary>
    public InputDatetimeEntity Energy3HourWindow => new(_haContext, "input_datetime.energy_3_hour_window");
}

public partial record AlarmControlPanelEntity : Entity<AlarmControlPanelEntity, EntityState<AlarmControlPanelAttributes>, AlarmControlPanelAttributes>
{
    public AlarmControlPanelEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AlarmControlPanelEntity(Entity entity) : base(entity)
    {
    }
}

public partial record AlarmControlPanelAttributes
{
    [JsonPropertyName("code_format")]
    public object? CodeFormat { get; init; }

    [JsonPropertyName("changed_by")]
    public object? ChangedBy { get; init; }

    [JsonPropertyName("code_arm_required")]
    public bool? CodeArmRequired { get; init; }

    [JsonPropertyName("arm_mode")]
    public object? ArmMode { get; init; }

    [JsonPropertyName("open_sensors")]
    public object? OpenSensors { get; init; }

    [JsonPropertyName("bypassed_sensors")]
    public object? BypassedSensors { get; init; }

    [JsonPropertyName("delay")]
    public object? Delay { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(Entity entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("current_version")]
    public string? CurrentVersion { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("round_trip_time_avg")]
    public double? RoundTripTimeAvg { get; init; }

    [JsonPropertyName("round_trip_time_max")]
    public double? RoundTripTimeMax { get; init; }

    [JsonPropertyName("round_trip_time_mdev")]
    public string? RoundTripTimeMdev { get; init; }

    [JsonPropertyName("round_trip_time_min")]
    public double? RoundTripTimeMin { get; init; }

    [JsonPropertyName("workdays")]
    public IReadOnlyList<string>? Workdays { get; init; }

    [JsonPropertyName("excludes")]
    public IReadOnlyList<string>? Excludes { get; init; }

    [JsonPropertyName("days_offset")]
    public double? DaysOffset { get; init; }

    [JsonPropertyName("joined_events")]
    public IReadOnlyList<object>? JoinedEvents { get; init; }

    [JsonPropertyName("next_joined_event_start")]
    public object? NextJoinedEventStart { get; init; }

    [JsonPropertyName("next_joined_event_end")]
    public object? NextJoinedEventEnd { get; init; }

    [JsonPropertyName("next_joined_event_duration_in_minutes")]
    public object? NextJoinedEventDurationInMinutes { get; init; }

    [JsonPropertyName("migrated_to_cache")]
    public bool? MigratedToCache { get; init; }

    [JsonPropertyName("Manufacturer")]
    public string? Manufacturer { get; init; }

    [JsonPropertyName("Fast User Switched")]
    public bool? FastUserSwitched { get; init; }

    [JsonPropertyName("Idle")]
    public bool? Idle { get; init; }

    [JsonPropertyName("Locked")]
    public bool? Locked { get; init; }

    [JsonPropertyName("Screen Off")]
    public bool? ScreenOff { get; init; }

    [JsonPropertyName("Screensaver")]
    public bool? Screensaver { get; init; }

    [JsonPropertyName("Sleeping")]
    public bool? Sleeping { get; init; }

    [JsonPropertyName("Terminating")]
    public bool? Terminating { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("state")]
    public string? State { get; init; }

    [JsonPropertyName("expires_at")]
    public string? ExpiresAt { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("lastMotion")]
    public double? LastMotion { get; init; }

    [JsonPropertyName("lastMotionTime")]
    public string? LastMotionTime { get; init; }

    [JsonPropertyName("personDetected")]
    public bool? PersonDetected { get; init; }

    [JsonPropertyName("motionDetectionEnabled")]
    public bool? MotionDetectionEnabled { get; init; }

    [JsonPropertyName("lastDing")]
    public double? LastDing { get; init; }

    [JsonPropertyName("lastDingTime")]
    public string? LastDingTime { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Hours")]
    public double? Hours { get; init; }

    [JsonPropertyName("Type")]
    public string? Type { get; init; }

    [JsonPropertyName("MPAN")]
    public string? MPAN { get; init; }

    [JsonPropertyName("rolling_target")]
    public bool? RollingTarget { get; init; }

    [JsonPropertyName("is_target_export")]
    public bool? IsTargetExport { get; init; }

    [JsonPropertyName("target_times")]
    public IReadOnlyList<object>? TargetTimes { get; init; }

    [JsonPropertyName("next_time")]
    public object? NextTime { get; init; }

    [JsonPropertyName("current_duration_in_hours")]
    public double? CurrentDurationInHours { get; init; }

    [JsonPropertyName("next_duration_in_hours")]
    public double? NextDurationInHours { get; init; }

    [JsonPropertyName("last_rates")]
    public bool? LastRates { get; init; }

    [JsonPropertyName("overall_average_cost")]
    public string? OverallAverageCost { get; init; }

    [JsonPropertyName("overall_min_cost")]
    public object? OverallMinCost { get; init; }

    [JsonPropertyName("overall_max_cost")]
    public object? OverallMaxCost { get; init; }

    [JsonPropertyName("current_average_cost")]
    public object? CurrentAverageCost { get; init; }

    [JsonPropertyName("current_min_cost")]
    public object? CurrentMinCost { get; init; }

    [JsonPropertyName("current_max_cost")]
    public object? CurrentMaxCost { get; init; }

    [JsonPropertyName("next_average_cost")]
    public object? NextAverageCost { get; init; }

    [JsonPropertyName("next_min_cost")]
    public object? NextMinCost { get; init; }

    [JsonPropertyName("next_max_cost")]
    public object? NextMaxCost { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("offset_reached")]
    public bool? OffsetReached { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("all_day")]
    public bool? AllDay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("video_url")]
    public string? VideoUrl { get; init; }

    [JsonPropertyName("last_video_id")]
    public double? LastVideoId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("target_temp_step")]
    public double? TargetTempStep { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("window_state")]
    public string? WindowState { get; init; }

    [JsonPropertyName("window_detection_active")]
    public bool? WindowDetectionActive { get; init; }

    [JsonPropertyName("away_mode_supressed")]
    public object? AwayModeSupressed { get; init; }

    [JsonPropertyName("heating_type")]
    public string? HeatingType { get; init; }

    [JsonPropertyName("number_of_heating_actuators")]
    public double? NumberOfHeatingActuators { get; init; }

    [JsonPropertyName("demand_type")]
    public string? DemandType { get; init; }

    [JsonPropertyName("target_temperature_origin")]
    public string? TargetTemperatureOrigin { get; init; }

    [JsonPropertyName("is_boosted")]
    public bool? IsBoosted { get; init; }

    [JsonPropertyName("is_override")]
    public bool? IsOverride { get; init; }

    [JsonPropertyName("is_heating")]
    public bool? IsHeating { get; init; }

    [JsonPropertyName("control_output_state")]
    public string? ControlOutputState { get; init; }

    [JsonPropertyName("heating_rate")]
    public double? HeatingRate { get; init; }

    [JsonPropertyName("boost_time_remaining")]
    public double? BoostTimeRemaining { get; init; }

    [JsonPropertyName("percentage_demand")]
    public double? PercentageDemand { get; init; }

    [JsonPropertyName("comfort_mode_score")]
    public double? ComfortModeScore { get; init; }

    [JsonPropertyName("control_direction")]
    public string? ControlDirection { get; init; }

    [JsonPropertyName("displayed_setpoint")]
    public double? DisplayedSetpoint { get; init; }

    [JsonPropertyName("schedule_id")]
    public double? ScheduleId { get; init; }

    [JsonPropertyName("schedule_name")]
    public string? ScheduleName { get; init; }

    [JsonPropertyName("current_schedule_temp")]
    public double? CurrentScheduleTemp { get; init; }

    [JsonPropertyName("next_day_change")]
    public string? NextDayChange { get; init; }

    [JsonPropertyName("next_schedule_change")]
    public string? NextScheduleChange { get; init; }

    [JsonPropertyName("next_schedule_datetime")]
    public string? NextScheduleDatetime { get; init; }

    [JsonPropertyName("next_schedule_temp")]
    public double? NextScheduleTemp { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("current_humidity")]
    public double? CurrentHumidity { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("swing_modes")]
    public IReadOnlyList<string>? SwingModes { get; init; }

    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }

    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }

    [JsonPropertyName("vane_horizontal")]
    public string? VaneHorizontal { get; init; }

    [JsonPropertyName("vane_horizontal_positions")]
    public IReadOnlyList<string>? VaneHorizontalPositions { get; init; }

    [JsonPropertyName("vane_vertical")]
    public string? VaneVertical { get; init; }

    [JsonPropertyName("vane_vertical_positions")]
    public IReadOnlyList<string>? VaneVerticalPositions { get; init; }

    [JsonPropertyName("is_passive")]
    public bool? IsPassive { get; init; }
}

public partial record CoverEntity : Entity<CoverEntity, EntityState<CoverAttributes>, CoverAttributes>
{
    public CoverEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CoverEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CoverAttributes
{
    [JsonPropertyName("current_position")]
    public double? CurrentPosition { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    [JsonPropertyName("_is_guest_by_uap")]
    public bool? IsGuestByUap { get; init; }

    [JsonPropertyName("ap_mac")]
    public string? ApMac { get; init; }

    [JsonPropertyName("authorized")]
    public bool? Authorized { get; init; }

    [JsonPropertyName("essid")]
    public string? Essid { get; init; }

    [JsonPropertyName("is_11r")]
    public bool? Is11r { get; init; }

    [JsonPropertyName("is_guest")]
    public bool? IsGuest { get; init; }

    [JsonPropertyName("qos_policy_applied")]
    public bool? QosPolicyApplied { get; init; }

    [JsonPropertyName("radio")]
    public string? Radio { get; init; }

    [JsonPropertyName("radio_proto")]
    public string? RadioProto { get; init; }

    [JsonPropertyName("vlan")]
    public double? Vlan { get; init; }

    [JsonPropertyName("oui")]
    public string? Oui { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("note")]
    public string? Note { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }
}

public partial record GroupEntity : Entity<GroupEntity, EntityState<GroupAttributes>, GroupAttributes>
{
    public GroupEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public GroupEntity(Entity entity) : base(entity)
    {
    }
}

public partial record GroupAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("order")]
    public double? Order { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputButtonEntity : Entity<InputButtonEntity, EntityState<InputButtonAttributes>, InputButtonAttributes>
{
    public InputButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputButtonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputButtonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public double? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputSelectEntity : Entity<InputSelectEntity, EntityState<InputSelectAttributes>, InputSelectAttributes>
{
    public InputSelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputSelectEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputSelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(Entity entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("off_with_transition")]
    public bool? OffWithTransition { get; init; }

    [JsonPropertyName("off_brightness")]
    public double? OffBrightness { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("group_members")]
    public IReadOnlyList<string>? GroupMembers { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("available")]
    public bool? Available { get; init; }

    [JsonPropertyName("last_called")]
    public bool? LastCalled { get; init; }

    [JsonPropertyName("last_called_timestamp")]
    public double? LastCalledTimestamp { get; init; }

    [JsonPropertyName("last_called_summary")]
    public string? LastCalledSummary { get; init; }

    [JsonPropertyName("connected_bluetooth")]
    public object? ConnectedBluetooth { get; init; }

    [JsonPropertyName("bluetooth_list")]
    public IReadOnlyList<string>? BluetoothList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("queue_size")]
    public double? QueueSize { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(Entity entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ProximityEntity : NumericEntity<ProximityEntity, NumericEntityState<ProximityAttributes>, ProximityAttributes>
{
    public ProximityEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ProximityEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ProximityAttributes
{
    [JsonPropertyName("dir_of_travel")]
    public string? DirOfTravel { get; init; }

    [JsonPropertyName("nearest")]
    public string? Nearest { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(Entity entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("recordingUrl")]
    public string? RecordingUrl { get; init; }

    [JsonPropertyName("eventId")]
    public string? EventId { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("last_changed")]
    public string? LastChanged { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("current_bans")]
    public object? CurrentBans { get; init; }

    [JsonPropertyName("total_bans")]
    public IReadOnlyList<string>? TotalBans { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("number_of_loaded_apps")]
    public double? NumberOfLoadedApps { get; init; }

    [JsonPropertyName("number_of_running_apps")]
    public double? NumberOfRunningApps { get; init; }

    [JsonPropertyName("version")]
    public string? Version { get; init; }

    [JsonPropertyName("Resolver")]
    public string? Resolver { get; init; }

    [JsonPropertyName("Querytype")]
    public string? Querytype { get; init; }

    [JsonPropertyName("vendor")]
    public string? Vendor { get; init; }

    [JsonPropertyName("product_type")]
    public string? ProductType { get; init; }

    [JsonPropertyName("model_identifier")]
    public string? ModelIdentifier { get; init; }

    [JsonPropertyName("firmware")]
    public string? Firmware { get; init; }

    [JsonPropertyName("node_id")]
    public double? NodeId { get; init; }

    [JsonPropertyName("zigbee_channel")]
    public double? ZigbeeChannel { get; init; }

    [JsonPropertyName("displayed_signal_strength")]
    public string? DisplayedSignalStrength { get; init; }

    [JsonPropertyName("serial_number")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("hub_route")]
    public string? HubRoute { get; init; }

    [JsonPropertyName("device_reception_RSSI")]
    public double? DeviceReceptionRSSI { get; init; }

    [JsonPropertyName("device_reception_LQI")]
    public double? DeviceReceptionLQI { get; init; }

    [JsonPropertyName("device_reception_percent")]
    public double? DeviceReceptionPercent { get; init; }

    [JsonPropertyName("controller_reception_RSSI")]
    public double? ControllerReceptionRSSI { get; init; }

    [JsonPropertyName("controller_reception_LQI")]
    public double? ControllerReceptionLQI { get; init; }

    [JsonPropertyName("controller_reception_percent")]
    public double? ControllerReceptionPercent { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("last_updated")]
    public string? LastUpdated { get; init; }

    [JsonPropertyName("minutes_since_last_update")]
    public double? MinutesSinceLastUpdate { get; init; }

    [JsonPropertyName("last_update_status")]
    public string? LastUpdateStatus { get; init; }

    [JsonPropertyName("percentage_demand_Channel-1")]
    public double? PercentageDemandChannel1 { get; init; }

    [JsonPropertyName("room_ids_Channel-1")]
    public IReadOnlyList<double>? RoomIdsChannel1 { get; init; }

    [JsonPropertyName("is_smartvalve_preventing_demand_Channel-1")]
    public bool? IsSmartvalvePreventingDemandChannel1 { get; init; }

    [JsonPropertyName("boost_time_remaining")]
    public double? BoostTimeRemaining { get; init; }

    [JsonPropertyName("away_mode_supressed")]
    public string? AwayModeSupressed { get; init; }

    [JsonPropertyName("is_away_mode")]
    public bool? IsAwayMode { get; init; }

    [JsonPropertyName("is_boosted")]
    public bool? IsBoosted { get; init; }

    [JsonPropertyName("is_override")]
    public bool? IsOverride { get; init; }

    [JsonPropertyName("schedule_id")]
    public double? ScheduleId { get; init; }

    [JsonPropertyName("schedule_name")]
    public string? ScheduleName { get; init; }

    [JsonPropertyName("next_day_change")]
    public string? NextDayChange { get; init; }

    [JsonPropertyName("next_schedule_change")]
    public string? NextScheduleChange { get; init; }

    [JsonPropertyName("next_schedule_datetime")]
    public string? NextScheduleDatetime { get; init; }

    [JsonPropertyName("next_schedule_state")]
    public string? NextScheduleState { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("data")]
    public object? Data { get; init; }

    [JsonPropertyName("event")]
    public string? Event { get; init; }

    [JsonPropertyName("text")]
    public string? Text { get; init; }

    [JsonPropertyName("wifi_strength")]
    public double? WifiStrength { get; init; }

    [JsonPropertyName("wifi_strength_percent")]
    public double? WifiStrengthPercent { get; init; }

    [JsonPropertyName("wifi_SSID")]
    public string? WifiSSID { get; init; }

    [JsonPropertyName("wifi_IP")]
    public string? WifiIP { get; init; }

    [JsonPropertyName("api_version")]
    public string? ApiVersion { get; init; }

    [JsonPropertyName("integration_version")]
    public string? IntegrationVersion { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea { get; init; }

    [JsonPropertyName("Areas Of Interest")]
    public object? AreasOfInterest { get; init; }

    [JsonPropertyName("Country")]
    public string? Country { get; init; }

    [JsonPropertyName("Inland Water")]
    public string? InlandWater { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality { get; init; }

    [JsonPropertyName("Location")]
    public IReadOnlyList<double>? Location { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Ocean")]
    public string? Ocean { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare { get; init; }

    [JsonPropertyName("Time Zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("Zones")]
    public IReadOnlyList<string>? Zones { get; init; }

    [JsonPropertyName("Hardware Address")]
    public string? HardwareAddress { get; init; }

    [JsonPropertyName("Active Camera")]
    public IReadOnlyList<object>? ActiveCamera { get; init; }

    [JsonPropertyName("All Camera")]
    public IReadOnlyList<string>? AllCamera { get; init; }

    [JsonPropertyName("Active Audio Input")]
    public IReadOnlyList<object>? ActiveAudioInput { get; init; }

    [JsonPropertyName("All Audio Input")]
    public IReadOnlyList<string>? AllAudioInput { get; init; }

    [JsonPropertyName("Display IDs")]
    public IReadOnlyList<string>? DisplayIDs { get; init; }

    [JsonPropertyName("Display Names")]
    public IReadOnlyList<string>? DisplayNames { get; init; }

    [JsonPropertyName("Bundle Identifier")]
    public string? BundleIdentifier { get; init; }

    [JsonPropertyName("Is Hidden")]
    public bool? IsHidden { get; init; }

    [JsonPropertyName("Launch Date")]
    public string? LaunchDate { get; init; }

    [JsonPropertyName("Owns Menu Bar")]
    public bool? OwnsMenuBar { get; init; }

    [JsonPropertyName("Active Audio Output")]
    public IReadOnlyList<object>? ActiveAudioOutput { get; init; }

    [JsonPropertyName("All Audio Output")]
    public IReadOnlyList<string>? AllAudioOutput { get; init; }

    [JsonPropertyName("Confidence")]
    public string? Confidence { get; init; }

    [JsonPropertyName("Types")]
    public IReadOnlyList<string>? Types { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Battery Provides Time Remaining")]
    public bool? BatteryProvidesTimeRemaining { get; init; }

    [JsonPropertyName("BatteryHealth")]
    public string? BatteryHealth { get; init; }

    [JsonPropertyName("BatteryHealthCondition")]
    public string? BatteryHealthCondition { get; init; }

    [JsonPropertyName("Current")]
    public double? Current { get; init; }

    [JsonPropertyName("Current Capacity")]
    public double? CurrentCapacity { get; init; }

    [JsonPropertyName("DesignCycleCount")]
    public double? DesignCycleCount { get; init; }

    [JsonPropertyName("Hardware Serial Number")]
    public string? HardwareSerialNumber { get; init; }

    [JsonPropertyName("Is Charged")]
    public bool? IsCharged { get; init; }

    [JsonPropertyName("Is Charging")]
    public bool? IsCharging { get; init; }

    [JsonPropertyName("Is Present")]
    public bool? IsPresent { get; init; }

    [JsonPropertyName("LPM Active")]
    public bool? LPMActive { get; init; }

    [JsonPropertyName("Max Capacity")]
    public double? MaxCapacity { get; init; }

    [JsonPropertyName("Optimized Battery Charging Engaged")]
    public bool? OptimizedBatteryChargingEngaged { get; init; }

    [JsonPropertyName("Power Source ID")]
    public double? PowerSourceID { get; init; }

    [JsonPropertyName("Power Source State")]
    public string? PowerSourceState { get; init; }

    [JsonPropertyName("Time to Empty")]
    public double? TimetoEmpty { get; init; }

    [JsonPropertyName("Time to Full Charge")]
    public double? TimetoFullCharge { get; init; }

    [JsonPropertyName("Transport Type")]
    public string? TransportType { get; init; }

    [JsonPropertyName("Type")]
    public string? Type { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("2023-06-27T21:30:00Z")]
    public double? _20230627T213000Z { get; init; }

    [JsonPropertyName("2023-06-27T21:00:00Z")]
    public double? _20230627T210000Z { get; init; }

    [JsonPropertyName("2023-06-27T20:30:00Z")]
    public double? _20230627T203000Z { get; init; }

    [JsonPropertyName("2023-06-27T20:00:00Z")]
    public double? _20230627T200000Z { get; init; }

    [JsonPropertyName("2023-06-27T19:30:00Z")]
    public double? _20230627T193000Z { get; init; }

    [JsonPropertyName("2023-06-27T19:00:00Z")]
    public double? _20230627T190000Z { get; init; }

    [JsonPropertyName("2023-06-27T18:30:00Z")]
    public double? _20230627T183000Z { get; init; }

    [JsonPropertyName("2023-06-27T18:00:00Z")]
    public double? _20230627T180000Z { get; init; }

    [JsonPropertyName("2023-06-27T17:30:00Z")]
    public double? _20230627T173000Z { get; init; }

    [JsonPropertyName("2023-06-27T17:00:00Z")]
    public double? _20230627T170000Z { get; init; }

    [JsonPropertyName("2023-06-27T16:30:00Z")]
    public double? _20230627T163000Z { get; init; }

    [JsonPropertyName("2023-06-27T16:00:00Z")]
    public double? _20230627T160000Z { get; init; }

    [JsonPropertyName("2023-06-27T15:30:00Z")]
    public double? _20230627T153000Z { get; init; }

    [JsonPropertyName("2023-06-27T15:00:00Z")]
    public double? _20230627T150000Z { get; init; }

    [JsonPropertyName("2023-06-27T14:30:00Z")]
    public double? _20230627T143000Z { get; init; }

    [JsonPropertyName("2023-06-27T14:00:00Z")]
    public double? _20230627T140000Z { get; init; }

    [JsonPropertyName("2023-06-27T13:30:00Z")]
    public double? _20230627T133000Z { get; init; }

    [JsonPropertyName("2023-06-27T13:00:00Z")]
    public double? _20230627T130000Z { get; init; }

    [JsonPropertyName("2023-06-27T12:30:00Z")]
    public double? _20230627T123000Z { get; init; }

    [JsonPropertyName("2023-06-27T12:00:00Z")]
    public double? _20230627T120000Z { get; init; }

    [JsonPropertyName("2023-06-27T11:30:00Z")]
    public double? _20230627T113000Z { get; init; }

    [JsonPropertyName("2023-06-27T11:00:00Z")]
    public double? _20230627T110000Z { get; init; }

    [JsonPropertyName("2023-06-27T10:30:00Z")]
    public double? _20230627T103000Z { get; init; }

    [JsonPropertyName("2023-06-27T10:00:00Z")]
    public double? _20230627T100000Z { get; init; }

    [JsonPropertyName("2023-06-27T09:30:00Z")]
    public double? _20230627T093000Z { get; init; }

    [JsonPropertyName("2023-06-27T09:00:00Z")]
    public double? _20230627T090000Z { get; init; }

    [JsonPropertyName("2023-06-27T08:30:00Z")]
    public double? _20230627T083000Z { get; init; }

    [JsonPropertyName("2023-06-27T08:00:00Z")]
    public double? _20230627T080000Z { get; init; }

    [JsonPropertyName("2023-06-27T07:30:00Z")]
    public double? _20230627T073000Z { get; init; }

    [JsonPropertyName("2023-06-27T07:00:00Z")]
    public double? _20230627T070000Z { get; init; }

    [JsonPropertyName("2023-06-27T06:30:00Z")]
    public double? _20230627T063000Z { get; init; }

    [JsonPropertyName("2023-06-27T06:00:00Z")]
    public double? _20230627T060000Z { get; init; }

    [JsonPropertyName("2023-06-27T05:30:00Z")]
    public double? _20230627T053000Z { get; init; }

    [JsonPropertyName("2023-06-27T05:00:00Z")]
    public double? _20230627T050000Z { get; init; }

    [JsonPropertyName("2023-06-27T04:30:00Z")]
    public double? _20230627T043000Z { get; init; }

    [JsonPropertyName("2023-06-27T04:00:00Z")]
    public double? _20230627T040000Z { get; init; }

    [JsonPropertyName("2023-06-27T03:30:00Z")]
    public double? _20230627T033000Z { get; init; }

    [JsonPropertyName("2023-06-27T03:00:00Z")]
    public double? _20230627T030000Z { get; init; }

    [JsonPropertyName("2023-06-27T02:30:00Z")]
    public double? _20230627T023000Z { get; init; }

    [JsonPropertyName("2023-06-27T02:00:00Z")]
    public double? _20230627T020000Z { get; init; }

    [JsonPropertyName("2023-06-27T01:30:00Z")]
    public double? _20230627T013000Z { get; init; }

    [JsonPropertyName("2023-06-27T01:00:00Z")]
    public double? _20230627T010000Z { get; init; }

    [JsonPropertyName("2023-06-27T00:30:00Z")]
    public double? _20230627T003000Z { get; init; }

    [JsonPropertyName("2023-06-27T00:00:00Z")]
    public double? _20230627T000000Z { get; init; }

    [JsonPropertyName("2023-06-26T23:30:00Z")]
    public double? _20230626T233000Z { get; init; }

    [JsonPropertyName("2023-06-26T23:00:00Z")]
    public double? _20230626T230000Z { get; init; }

    [JsonPropertyName("2023-06-26T22:30:00Z")]
    public double? _20230626T223000Z { get; init; }

    [JsonPropertyName("2023-06-26T22:00:00Z")]
    public double? _20230626T220000Z { get; init; }

    [JsonPropertyName("2023-06-26T21:30:00Z")]
    public double? _20230626T213000Z { get; init; }

    [JsonPropertyName("created_at")]
    public string? CreatedAt { get; init; }

    [JsonPropertyName("answered")]
    public bool? Answered { get; init; }

    [JsonPropertyName("recording_status")]
    public string? RecordingStatus { get; init; }

    [JsonPropertyName("category")]
    public string? Category { get; init; }

    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    [JsonPropertyName("recurrence")]
    public object? Recurrence { get; init; }

    [JsonPropertyName("process_timestamp")]
    public string? ProcessTimestamp { get; init; }

    [JsonPropertyName("prior_value")]
    public object? PriorValue { get; init; }

    [JsonPropertyName("total_active")]
    public double? TotalActive { get; init; }

    [JsonPropertyName("total_all")]
    public double? TotalAll { get; init; }

    [JsonPropertyName("sorted_active")]
    public string? SortedActive { get; init; }

    [JsonPropertyName("sorted_all")]
    public string? SortedAll { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("dismissed")]
    public object? Dismissed { get; init; }

    [JsonPropertyName("reminder")]
    public object? Reminder { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("firmwareStatus")]
    public string? FirmwareStatus { get; init; }

    [JsonPropertyName("lastUpdate")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("wirelessNetwork")]
    public string? WirelessNetwork { get; init; }

    [JsonPropertyName("wirelessSignal")]
    public double? WirelessSignal { get; init; }

    [JsonPropertyName("stream_Source")]
    public string? StreamSource { get; init; }

    [JsonPropertyName("still_Image_URL")]
    public string? StillImageURL { get; init; }

    [JsonPropertyName("batteryLevel")]
    public object? BatteryLevel { get; init; }

    [JsonPropertyName("Cellular Technology")]
    public string? CellularTechnology { get; init; }

    [JsonPropertyName("2023-07-05T21:30:00Z")]
    public double? _20230705T213000Z { get; init; }

    [JsonPropertyName("2023-07-05T21:00:00Z")]
    public double? _20230705T210000Z { get; init; }

    [JsonPropertyName("2023-07-05T20:30:00Z")]
    public double? _20230705T203000Z { get; init; }

    [JsonPropertyName("2023-07-05T20:00:00Z")]
    public double? _20230705T200000Z { get; init; }

    [JsonPropertyName("2023-07-05T19:30:00Z")]
    public double? _20230705T193000Z { get; init; }

    [JsonPropertyName("2023-07-05T19:00:00Z")]
    public double? _20230705T190000Z { get; init; }

    [JsonPropertyName("2023-07-05T18:30:00Z")]
    public double? _20230705T183000Z { get; init; }

    [JsonPropertyName("2023-07-05T18:00:00Z")]
    public double? _20230705T180000Z { get; init; }

    [JsonPropertyName("2023-07-05T17:30:00Z")]
    public double? _20230705T173000Z { get; init; }

    [JsonPropertyName("2023-07-05T17:00:00Z")]
    public double? _20230705T170000Z { get; init; }

    [JsonPropertyName("2023-07-05T16:30:00Z")]
    public double? _20230705T163000Z { get; init; }

    [JsonPropertyName("2023-07-05T16:00:00Z")]
    public double? _20230705T160000Z { get; init; }

    [JsonPropertyName("2023-07-05T15:30:00Z")]
    public double? _20230705T153000Z { get; init; }

    [JsonPropertyName("2023-07-05T15:00:00Z")]
    public double? _20230705T150000Z { get; init; }

    [JsonPropertyName("2023-07-05T14:30:00Z")]
    public double? _20230705T143000Z { get; init; }

    [JsonPropertyName("2023-07-05T14:00:00Z")]
    public double? _20230705T140000Z { get; init; }

    [JsonPropertyName("2023-07-05T13:30:00Z")]
    public double? _20230705T133000Z { get; init; }

    [JsonPropertyName("2023-07-05T13:00:00Z")]
    public double? _20230705T130000Z { get; init; }

    [JsonPropertyName("2023-07-05T12:30:00Z")]
    public double? _20230705T123000Z { get; init; }

    [JsonPropertyName("2023-07-05T12:00:00Z")]
    public double? _20230705T120000Z { get; init; }

    [JsonPropertyName("2023-07-05T11:30:00Z")]
    public double? _20230705T113000Z { get; init; }

    [JsonPropertyName("2023-07-05T11:00:00Z")]
    public double? _20230705T110000Z { get; init; }

    [JsonPropertyName("2023-07-05T10:30:00Z")]
    public double? _20230705T103000Z { get; init; }

    [JsonPropertyName("2023-07-05T10:00:00Z")]
    public double? _20230705T100000Z { get; init; }

    [JsonPropertyName("2023-07-05T09:30:00Z")]
    public double? _20230705T093000Z { get; init; }

    [JsonPropertyName("2023-07-05T09:00:00Z")]
    public double? _20230705T090000Z { get; init; }

    [JsonPropertyName("2023-07-05T08:30:00Z")]
    public double? _20230705T083000Z { get; init; }

    [JsonPropertyName("2023-07-05T08:00:00Z")]
    public double? _20230705T080000Z { get; init; }

    [JsonPropertyName("2023-07-05T07:30:00Z")]
    public double? _20230705T073000Z { get; init; }

    [JsonPropertyName("2023-07-05T07:00:00Z")]
    public double? _20230705T070000Z { get; init; }

    [JsonPropertyName("2023-07-05T06:30:00Z")]
    public double? _20230705T063000Z { get; init; }

    [JsonPropertyName("2023-07-05T06:00:00Z")]
    public double? _20230705T060000Z { get; init; }

    [JsonPropertyName("2023-07-05T05:30:00Z")]
    public double? _20230705T053000Z { get; init; }

    [JsonPropertyName("2023-07-05T05:00:00Z")]
    public double? _20230705T050000Z { get; init; }

    [JsonPropertyName("2023-07-05T04:30:00Z")]
    public double? _20230705T043000Z { get; init; }

    [JsonPropertyName("2023-07-05T04:00:00Z")]
    public double? _20230705T040000Z { get; init; }

    [JsonPropertyName("2023-07-05T03:30:00Z")]
    public double? _20230705T033000Z { get; init; }

    [JsonPropertyName("2023-07-05T03:00:00Z")]
    public double? _20230705T030000Z { get; init; }

    [JsonPropertyName("2023-07-05T02:30:00Z")]
    public double? _20230705T023000Z { get; init; }

    [JsonPropertyName("2023-07-05T02:00:00Z")]
    public double? _20230705T020000Z { get; init; }

    [JsonPropertyName("2023-07-05T01:30:00Z")]
    public double? _20230705T013000Z { get; init; }

    [JsonPropertyName("2023-07-05T01:00:00Z")]
    public double? _20230705T010000Z { get; init; }

    [JsonPropertyName("2023-07-05T00:30:00Z")]
    public double? _20230705T003000Z { get; init; }

    [JsonPropertyName("2023-07-05T00:00:00Z")]
    public double? _20230705T000000Z { get; init; }

    [JsonPropertyName("2023-07-04T23:30:00Z")]
    public double? _20230704T233000Z { get; init; }

    [JsonPropertyName("2023-07-04T23:00:00Z")]
    public double? _20230704T230000Z { get; init; }

    [JsonPropertyName("2023-07-04T22:30:00Z")]
    public double? _20230704T223000Z { get; init; }

    [JsonPropertyName("2023-07-04T22:00:00Z")]
    public double? _20230704T220000Z { get; init; }

    [JsonPropertyName("2023-07-26T21:30:00Z")]
    public double? _20230726T213000Z { get; init; }

    [JsonPropertyName("2023-07-26T21:00:00Z")]
    public double? _20230726T210000Z { get; init; }

    [JsonPropertyName("2023-07-26T20:30:00Z")]
    public double? _20230726T203000Z { get; init; }

    [JsonPropertyName("2023-07-26T20:00:00Z")]
    public double? _20230726T200000Z { get; init; }

    [JsonPropertyName("2023-07-26T19:30:00Z")]
    public double? _20230726T193000Z { get; init; }

    [JsonPropertyName("2023-07-26T19:00:00Z")]
    public double? _20230726T190000Z { get; init; }

    [JsonPropertyName("2023-07-26T18:30:00Z")]
    public double? _20230726T183000Z { get; init; }

    [JsonPropertyName("2023-07-26T18:00:00Z")]
    public double? _20230726T180000Z { get; init; }

    [JsonPropertyName("2023-07-26T17:30:00Z")]
    public double? _20230726T173000Z { get; init; }

    [JsonPropertyName("2023-07-26T17:00:00Z")]
    public double? _20230726T170000Z { get; init; }

    [JsonPropertyName("2023-07-26T16:30:00Z")]
    public double? _20230726T163000Z { get; init; }

    [JsonPropertyName("2023-07-26T16:00:00Z")]
    public double? _20230726T160000Z { get; init; }

    [JsonPropertyName("2023-07-26T15:30:00Z")]
    public double? _20230726T153000Z { get; init; }

    [JsonPropertyName("2023-07-26T15:00:00Z")]
    public double? _20230726T150000Z { get; init; }

    [JsonPropertyName("2023-07-26T14:30:00Z")]
    public double? _20230726T143000Z { get; init; }

    [JsonPropertyName("2023-07-26T14:00:00Z")]
    public double? _20230726T140000Z { get; init; }

    [JsonPropertyName("2023-07-26T13:30:00Z")]
    public double? _20230726T133000Z { get; init; }

    [JsonPropertyName("2023-07-26T13:00:00Z")]
    public double? _20230726T130000Z { get; init; }

    [JsonPropertyName("2023-07-26T12:30:00Z")]
    public double? _20230726T123000Z { get; init; }

    [JsonPropertyName("2023-07-26T12:00:00Z")]
    public double? _20230726T120000Z { get; init; }

    [JsonPropertyName("2023-07-26T11:30:00Z")]
    public double? _20230726T113000Z { get; init; }

    [JsonPropertyName("2023-07-26T11:00:00Z")]
    public double? _20230726T110000Z { get; init; }

    [JsonPropertyName("2023-07-26T10:30:00Z")]
    public double? _20230726T103000Z { get; init; }

    [JsonPropertyName("2023-07-26T10:00:00Z")]
    public double? _20230726T100000Z { get; init; }

    [JsonPropertyName("2023-07-26T09:30:00Z")]
    public double? _20230726T093000Z { get; init; }

    [JsonPropertyName("2023-07-26T09:00:00Z")]
    public double? _20230726T090000Z { get; init; }

    [JsonPropertyName("2023-07-26T08:30:00Z")]
    public double? _20230726T083000Z { get; init; }

    [JsonPropertyName("2023-07-26T08:00:00Z")]
    public double? _20230726T080000Z { get; init; }

    [JsonPropertyName("2023-07-26T07:30:00Z")]
    public double? _20230726T073000Z { get; init; }

    [JsonPropertyName("Is Finishing Charge")]
    public bool? IsFinishingCharge { get; init; }

    [JsonPropertyName("2023-07-29T21:30:00Z")]
    public double? _20230729T213000Z { get; init; }

    [JsonPropertyName("2023-07-29T21:00:00Z")]
    public double? _20230729T210000Z { get; init; }

    [JsonPropertyName("2023-07-29T20:30:00Z")]
    public double? _20230729T203000Z { get; init; }

    [JsonPropertyName("2023-07-29T20:00:00Z")]
    public double? _20230729T200000Z { get; init; }

    [JsonPropertyName("2023-07-29T19:30:00Z")]
    public double? _20230729T193000Z { get; init; }

    [JsonPropertyName("2023-07-29T19:00:00Z")]
    public double? _20230729T190000Z { get; init; }

    [JsonPropertyName("2023-07-29T18:30:00Z")]
    public double? _20230729T183000Z { get; init; }

    [JsonPropertyName("2023-07-29T18:00:00Z")]
    public double? _20230729T180000Z { get; init; }

    [JsonPropertyName("2023-07-29T17:30:00Z")]
    public double? _20230729T173000Z { get; init; }

    [JsonPropertyName("2023-07-29T17:00:00Z")]
    public double? _20230729T170000Z { get; init; }

    [JsonPropertyName("2023-07-29T16:30:00Z")]
    public double? _20230729T163000Z { get; init; }

    [JsonPropertyName("2023-07-29T16:00:00Z")]
    public double? _20230729T160000Z { get; init; }

    [JsonPropertyName("2023-07-29T15:30:00Z")]
    public double? _20230729T153000Z { get; init; }

    [JsonPropertyName("2023-07-29T15:00:00Z")]
    public double? _20230729T150000Z { get; init; }

    [JsonPropertyName("2023-07-29T14:30:00Z")]
    public double? _20230729T143000Z { get; init; }

    [JsonPropertyName("2023-07-29T14:00:00Z")]
    public double? _20230729T140000Z { get; init; }

    [JsonPropertyName("2023-07-29T13:30:00Z")]
    public double? _20230729T133000Z { get; init; }

    [JsonPropertyName("2023-07-29T13:00:00Z")]
    public double? _20230729T130000Z { get; init; }

    [JsonPropertyName("2023-07-29T12:30:00Z")]
    public double? _20230729T123000Z { get; init; }

    [JsonPropertyName("2023-07-29T12:00:00Z")]
    public double? _20230729T120000Z { get; init; }

    [JsonPropertyName("2023-07-29T11:30:00Z")]
    public double? _20230729T113000Z { get; init; }

    [JsonPropertyName("2023-07-29T11:00:00Z")]
    public double? _20230729T110000Z { get; init; }

    [JsonPropertyName("2023-07-29T10:30:00Z")]
    public double? _20230729T103000Z { get; init; }

    [JsonPropertyName("2023-07-29T10:00:00Z")]
    public double? _20230729T100000Z { get; init; }

    [JsonPropertyName("2023-07-29T09:30:00Z")]
    public double? _20230729T093000Z { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("last_period")]
    public string? LastPeriod { get; init; }

    [JsonPropertyName("last_valid_state")]
    public string? LastValidState { get; init; }

    [JsonPropertyName("meter_period")]
    public string? MeterPeriod { get; init; }

    [JsonPropertyName("cron pattern")]
    public string? Cronpattern { get; init; }

    [JsonPropertyName("battery_voltage")]
    public double? BatteryVoltage { get; init; }

    [JsonPropertyName("battery_level")]
    public string? BatteryLevel_0 { get; init; }

    [JsonPropertyName("batteryLevel")]
    public object? BatteryLevel_1 { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("type")]
    public object? Type_0 { get; init; }

    [JsonPropertyName("Type")]
    public string? Type_1 { get; init; }

    [JsonPropertyName("level")]
    public string? Level { get; init; }

    [JsonPropertyName("direction")]
    public string? Direction { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("power_consumption_start")]
    public string? PowerConsumptionStart { get; init; }

    [JsonPropertyName("power_consumption_end")]
    public string? PowerConsumptionEnd { get; init; }

    [JsonPropertyName("server_name")]
    public string? ServerName { get; init; }

    [JsonPropertyName("server_country")]
    public string? ServerCountry { get; init; }

    [JsonPropertyName("server_id")]
    public string? ServerId { get; init; }

    [JsonPropertyName("bytes_received")]
    public double? BytesReceived { get; init; }

    [JsonPropertyName("bytes_sent")]
    public double? BytesSent { get; init; }

    [JsonPropertyName("years_at_next_anniversary")]
    public double? YearsAtNextAnniversary { get; init; }

    [JsonPropertyName("current_years")]
    public double? CurrentYears { get; init; }

    [JsonPropertyName("date")]
    public string? Date { get; init; }

    [JsonPropertyName("weeks_remaining")]
    public double? WeeksRemaining { get; init; }

    [JsonPropertyName("battery_size")]
    public string? BatterySize { get; init; }

    [JsonPropertyName("battery_quantity")]
    public double? BatteryQuantity { get; init; }

    [JsonPropertyName("Battery Provides Time Remaining")]
    public bool? BatteryProvidesTimeRemaining { get; init; }

    [JsonPropertyName("BatteryHealth")]
    public string? BatteryHealth { get; init; }

    [JsonPropertyName("BatteryHealthCondition")]
    public string? BatteryHealthCondition { get; init; }

    [JsonPropertyName("Current")]
    public double? Current { get; init; }

    [JsonPropertyName("Current Capacity")]
    public double? CurrentCapacity { get; init; }

    [JsonPropertyName("DesignCycleCount")]
    public double? DesignCycleCount { get; init; }

    [JsonPropertyName("Hardware Serial Number")]
    public string? HardwareSerialNumber { get; init; }

    [JsonPropertyName("Is Charged")]
    public bool? IsCharged { get; init; }

    [JsonPropertyName("Is Charging")]
    public bool? IsCharging { get; init; }

    [JsonPropertyName("Is Present")]
    public bool? IsPresent { get; init; }

    [JsonPropertyName("LPM Active")]
    public bool? LPMActive { get; init; }

    [JsonPropertyName("Max Capacity")]
    public double? MaxCapacity { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Optimized Battery Charging Engaged")]
    public bool? OptimizedBatteryChargingEngaged { get; init; }

    [JsonPropertyName("Power Source ID")]
    public double? PowerSourceID { get; init; }

    [JsonPropertyName("Power Source State")]
    public string? PowerSourceState { get; init; }

    [JsonPropertyName("Time to Empty")]
    public double? TimetoEmpty { get; init; }

    [JsonPropertyName("Time to Full Charge")]
    public double? TimetoFullCharge { get; init; }

    [JsonPropertyName("Transport Type")]
    public string? TransportType { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total_0 { get; init; }

    [JsonPropertyName("total")]
    public object? Total_1 { get; init; }

    [JsonPropertyName("mpan")]
    public string? Mpan { get; init; }

    [JsonPropertyName("serial_number")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("is_export")]
    public bool? IsExport { get; init; }

    [JsonPropertyName("is_smart_meter")]
    public bool? IsSmartMeter { get; init; }

    [JsonPropertyName("tariff_code")]
    public string? TariffCode { get; init; }

    [JsonPropertyName("standing_charge")]
    public string? StandingCharge { get; init; }

    [JsonPropertyName("total_without_standing_charge")]
    public string? TotalWithoutStandingCharge { get; init; }

    [JsonPropertyName("last_calculated_timestamp")]
    public string? LastCalculatedTimestamp { get; init; }

    [JsonPropertyName("charges")]
    public IReadOnlyList<object>? Charges { get; init; }

    [JsonPropertyName("rate")]
    public object? Rate { get; init; }

    [JsonPropertyName("mprn")]
    public string? Mprn { get; init; }

    [JsonPropertyName("is_estimated")]
    public bool? IsEstimated { get; init; }

    [JsonPropertyName("rates")]
    public IReadOnlyList<object>? Rates { get; init; }

    [JsonPropertyName("total_kwh")]
    public double? TotalKwh { get; init; }

    [JsonPropertyName("total_m3")]
    public double? TotalM3 { get; init; }

    [JsonPropertyName("calculation_mode")]
    public string? CalculationMode { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("source_entity")]
    public string? SourceEntity { get; init; }

    [JsonPropertyName("source_domain")]
    public string? SourceDomain { get; init; }

    [JsonPropertyName("energy_sensor_entity_id")]
    public string? EnergySensorEntityId { get; init; }

    [JsonPropertyName("valid_from")]
    public string? ValidFrom { get; init; }

    [JsonPropertyName("valid_to")]
    public string? ValidTo { get; init; }

    [JsonPropertyName("entities")]
    public IReadOnlyList<string>? Entities { get; init; }

    [JsonPropertyName("is_group")]
    public bool? IsGroup { get; init; }

    [JsonPropertyName("value_exc_vat")]
    public double? ValueExcVat { get; init; }

    [JsonPropertyName("value_inc_vat")]
    public double? ValueIncVat { get; init; }

    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("wirelessNetwork")]
    public string? WirelessNetwork { get; init; }

    [JsonPropertyName("wirelessSignal")]
    public double? WirelessSignal { get; init; }

    [JsonPropertyName("years_at_anniversary")]
    public double? YearsAtAnniversary { get; init; }

    [JsonPropertyName("next_date")]
    public string? NextDate { get; init; }

    [JsonPropertyName("current_day_min_rate")]
    public double? CurrentDayMinRate { get; init; }

    [JsonPropertyName("current_day_max_rate")]
    public double? CurrentDayMaxRate { get; init; }

    [JsonPropertyName("current_day_average_rate")]
    public double? CurrentDayAverageRate { get; init; }

    [JsonPropertyName("is_capped")]
    public bool? IsCapped { get; init; }

    [JsonPropertyName("calorific_value")]
    public double? CalorificValue { get; init; }

    [JsonPropertyName("Is Finishing Charge")]
    public bool? IsFinishingCharge { get; init; }
}

public partial record SirenEntity : Entity<SirenEntity, EntityState<SirenAttributes>, SirenAttributes>
{
    public SirenEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SirenEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SirenAttributes
{
    [JsonPropertyName("available_tones")]
    public IReadOnlyList<string>? AvailableTones { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("sun_position")]
    public double? SunPosition { get; init; }

    [JsonPropertyName("manual_control")]
    public IReadOnlyList<object>? ManualControl { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("weekdays")]
    public IReadOnlyList<string>? Weekdays { get; init; }

    [JsonPropertyName("timeslots")]
    public IReadOnlyList<string>? Timeslots { get; init; }

    [JsonPropertyName("entities")]
    public IReadOnlyList<string>? Entities { get; init; }

    [JsonPropertyName("actions")]
    public IReadOnlyList<object>? Actions { get; init; }

    [JsonPropertyName("current_slot")]
    public object? CurrentSlot { get; init; }

    [JsonPropertyName("next_slot")]
    public double? NextSlot { get; init; }

    [JsonPropertyName("next_trigger")]
    public string? NextTrigger { get; init; }

    [JsonPropertyName("tags")]
    public IReadOnlyList<object>? Tags { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("current_consumption")]
    public double? CurrentConsumption { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("raw_state")]
    public bool? RawState { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("away_mode_temperature")]
    public double? AwayModeTemperature { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("OverrideActive")]
    public bool? OverrideActive { get; init; }

    [JsonPropertyName("TurningOff")]
    public string? TurningOff { get; init; }

    [JsonPropertyName("DynamicTimeout")]
    public string? DynamicTimeout { get; init; }

    [JsonPropertyName("IsOccupied")]
    public bool? IsOccupied { get; init; }

    [JsonPropertyName("IsTooBright")]
    public bool? IsTooBright { get; init; }

    [JsonPropertyName("ConditionEntityStateMet")]
    public string? ConditionEntityStateMet { get; init; }

    [JsonPropertyName("ConditionEntity")]
    public string? ConditionEntity { get; init; }

    [JsonPropertyName("ConditionEntityState")]
    public string? ConditionEntityState { get; init; }

    [JsonPropertyName("LastUpdated")]
    public string? LastUpdated { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("minutes_remaining")]
    public double? MinutesRemaining { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("configuration")]
    public object? Configuration { get; init; }

    [JsonPropertyName("color_temp_mired")]
    public double? ColorTempMired { get; init; }

    [JsonPropertyName("autoreset_time_remaining")]
    public object? AutoresetTimeRemaining { get; init; }
}

public partial record TimerEntity : Entity<TimerEntity, EntityState<TimerAttributes>, TimerAttributes>
{
    public TimerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record TimerAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(Entity entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public object? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(Entity entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("visibility")]
    public double? Visibility { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputDatetimeEntity : Entity<InputDatetimeEntity, EntityState<InputDatetimeAttributes>, InputDatetimeAttributes>
{
    public InputDatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputDatetimeEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputDatetimeAttributes
{
    [JsonPropertyName("has_date")]
    public bool? HasDate { get; init; }

    [JsonPropertyName("has_time")]
    public bool? HasTime { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("hour")]
    public double? Hour { get; init; }

    [JsonPropertyName("minute")]
    public double? Minute { get; init; }

    [JsonPropertyName("second")]
    public double? Second { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AdaptiveLightingServices AdaptiveLighting { get; }

    AlarmControlPanelServices AlarmControlPanel { get; }

    AlarmoServices Alarmo { get; }

    AlexaMediaServices AlexaMedia { get; }

    AutomationServices Automation { get; }

    BackupServices Backup { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GenericThermostatServices GenericThermostat { get; }

    GroupServices Group { get; }

    HistoryStatsServices HistoryStats { get; }

    HomeConnectServices HomeConnect { get; }

    HomeassistantServices Homeassistant { get; }

    HumidifierServices Humidifier { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LocaltuyaServices Localtuya { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MelcloudServices Melcloud { get; }

    MinMaxServices MinMax { get; }

    MqttServices Mqtt { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    OctopusEnergyServices OctopusEnergy { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    PiHoleServices PiHole { get; }

    PingServices Ping { get; }

    PowercalcServices Powercalc { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    RingServices Ring { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    SchedulerServices Scheduler { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SonosServices Sonos { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TelegramServices Telegram { get; }

    TelegramBotServices TelegramBot { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UnifiServices Unifi { get; }

    UpdateServices Update { get; }

    UtilityMeterServices UtilityMeter { get; }

    VacuumServices Vacuum { get; }

    WakeOnLanServices WakeOnLan { get; }

    WaterHeaterServices WaterHeater { get; }

    WebostvServices Webostv { get; }

    WebrtcServices Webrtc { get; }

    WiserServices Wiser { get; }

    ZhaServices Zha { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AdaptiveLightingServices AdaptiveLighting => new(_haContext);
    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AlarmoServices Alarmo => new(_haContext);
    public AlexaMediaServices AlexaMedia => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BackupServices Backup => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GenericThermostatServices GenericThermostat => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HistoryStatsServices HistoryStats => new(_haContext);
    public HomeConnectServices HomeConnect => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LocaltuyaServices Localtuya => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MelcloudServices Melcloud => new(_haContext);
    public MinMaxServices MinMax => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public OctopusEnergyServices OctopusEnergy => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public PiHoleServices PiHole => new(_haContext);
    public PingServices Ping => new(_haContext);
    public PowercalcServices Powercalc => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public RingServices Ring => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public SchedulerServices Scheduler => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SonosServices Sonos => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TelegramServices Telegram => new(_haContext);
    public TelegramBotServices TelegramBot => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UnifiServices Unifi => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public UtilityMeterServices UtilityMeter => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public WakeOnLanServices WakeOnLan => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WebostvServices Webostv => new(_haContext);
    public WebrtcServices Webrtc => new(_haContext);
    public WiserServices Wiser => new(_haContext);
    public ZhaServices Zha => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AdaptiveLightingServices
{
    private readonly IHaContext _haContext;
    public AdaptiveLightingServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Applies the current Adaptive Lighting settings to lights.</summary>
    public void Apply(AdaptiveLightingApplyParameters data)
    {
        _haContext.CallService("adaptive_lighting", "apply", null, data);
    }

    ///<summary>Applies the current Adaptive Lighting settings to lights.</summary>
    ///<param name="entityId">The `entity_id` of the switch with the settings to apply. 📝</param>
    ///<param name="lights">A light (or list of lights) to apply the settings to. 💡</param>
    ///<param name="transition">Duration of transition when lights change, in seconds. 🕑 eg: 10</param>
    ///<param name="adaptBrightness">Whether to adapt the brightness of the light. 🌞 eg: True</param>
    ///<param name="adaptColor">Whether to adapt the color on supporting lights. 🌈 eg: True</param>
    ///<param name="preferRgbColor">Whether to prefer RGB color adjustment over light color temperature when possible. 🌈 eg: False</param>
    ///<param name="turnOnLights">Whether to turn on lights that are currently off. 🔆 eg: False</param>
    public void Apply(string? entityId = null, string? lights = null, string? transition = null, bool? adaptBrightness = null, bool? adaptColor = null, bool? preferRgbColor = null, bool? turnOnLights = null)
    {
        _haContext.CallService("adaptive_lighting", "apply", null, new AdaptiveLightingApplyParameters { EntityId = entityId, Lights = lights, Transition = transition, AdaptBrightness = adaptBrightness, AdaptColor = adaptColor, PreferRgbColor = preferRgbColor, TurnOnLights = turnOnLights });
    }

    ///<summary>Change any settings you&apos;d like in the switch. All options here are the same as in the config flow.</summary>
    public void ChangeSwitchSettings(AdaptiveLightingChangeSwitchSettingsParameters data)
    {
        _haContext.CallService("adaptive_lighting", "change_switch_settings", null, data);
    }

    ///<summary>Change any settings you&apos;d like in the switch. All options here are the same as in the config flow.</summary>
    ///<param name="entityId">Entity ID of the switch. 📝</param>
    ///<param name="useDefaults">Sets the default values not specified in this service call. Options: &quot;current&quot; (default, retains current values), &quot;factory&quot; (resets to documented defaults), or &quot;configuration&quot; (reverts to switch config defaults). ⚙️ eg: current</param>
    ///<param name="includeConfigInAttributes">Show all options as attributes on the switch in Home Assistant when set to `true`. 📝</param>
    ///<param name="turnOnLights">Whether to turn on lights that are currently off. 🔆 eg: False</param>
    ///<param name="initialTransition">Duration of the first transition when lights turn from `off` to `on` in seconds. ⏲️ eg: 1</param>
    ///<param name="sleepTransition">Duration of transition when &quot;sleep mode&quot; is toggled in seconds. 😴 eg: 1</param>
    ///<param name="maxBrightness">Maximum brightness percentage. 💡 eg: 100</param>
    ///<param name="maxColorTemp">Coldest color temperature in Kelvin. ❄️ eg: 5500</param>
    ///<param name="minBrightness">Minimum brightness percentage. 💡 eg: 1</param>
    ///<param name="minColorTemp">Warmest color temperature in Kelvin. 🔥 eg: 2000</param>
    ///<param name="onlyOnce">Adapt lights only when they are turned on (`true`) or keep adapting them (`false`). 🔄 eg: False</param>
    ///<param name="preferRgbColor">Whether to prefer RGB color adjustment over light color temperature when possible. 🌈 eg: False</param>
    ///<param name="separateTurnOnCommands">Use separate `light.turn_on` calls for color and brightness, needed for some light types. 🔀 eg: False</param>
    ///<param name="sendSplitDelay">Delay (ms) between `separate_turn_on_commands` for lights that don&apos;t support simultaneous brightness and color setting. ⏲️ eg: 0</param>
    ///<param name="sleepBrightness">Brightness percentage of lights in sleep mode. 😴 eg: 1</param>
    ///<param name="sleepRgbOrColorTemp">Use either `&quot;rgb_color&quot;` or `&quot;color_temp&quot;` in sleep mode. 🌙 eg: color_temp</param>
    ///<param name="sleepRgbColor">RGB color in sleep mode (used when `sleep_rgb_or_color_temp` is &quot;rgb_color&quot;). 🌈</param>
    ///<param name="sleepColorTemp">Color temperature in sleep mode (used when `sleep_rgb_or_color_temp` is `color_temp`) in Kelvin. 😴 eg: 1000</param>
    ///<param name="sunriseOffset">Adjust sunrise time with a positive or negative offset in seconds. ⏰ eg: 0</param>
    ///<param name="sunriseTime">Set a fixed time (HH:MM:SS) for sunrise. 🌅</param>
    ///<param name="sunsetOffset">Adjust sunset time with a positive or negative offset in seconds. ⏰</param>
    ///<param name="sunsetTime">Set a fixed time (HH:MM:SS) for sunset. 🌇</param>
    ///<param name="maxSunriseTime">Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier real sunrises. 🌅</param>
    ///<param name="minSunsetTime">Set the earliest virtual sunset time (HH:MM:SS), allowing for later real sunsets. 🌇</param>
    ///<param name="takeOverControl">Disable Adaptive Lighting if another source calls `light.turn_on` while lights are on and being adapted. Note that this calls `homeassistant.update_entity` every `interval`! 🔒 eg: True</param>
    ///<param name="detectNonHaChanges">Detect non-`light.turn_on` state changes and stop adapting lights. Requires `take_over_control`. 🕵️ eg: False</param>
    ///<param name="transition">Duration of transition when lights change, in seconds. 🕑 eg: 45</param>
    ///<param name="adaptDelay">Wait time (seconds) between light turn on and Adaptive Lighting applying changes. Might help to avoid flickering. ⏲️ eg: 0</param>
    ///<param name="autoresetControlSeconds">Automatically reset the manual control after a number of seconds. Set to 0 to disable. ⏲️ eg: 0</param>
    public void ChangeSwitchSettings(string entityId, object? useDefaults = null, bool? includeConfigInAttributes = null, bool? turnOnLights = null, string? initialTransition = null, string? sleepTransition = null, string? maxBrightness = null, string? maxColorTemp = null, string? minBrightness = null, string? minColorTemp = null, bool? onlyOnce = null, bool? preferRgbColor = null, bool? separateTurnOnCommands = null, bool? sendSplitDelay = null, string? sleepBrightness = null, object? sleepRgbOrColorTemp = null, object? sleepRgbColor = null, string? sleepColorTemp = null, long? sunriseOffset = null, DateTime? sunriseTime = null, long? sunsetOffset = null, DateTime? sunsetTime = null, DateTime? maxSunriseTime = null, DateTime? minSunsetTime = null, bool? takeOverControl = null, bool? detectNonHaChanges = null, string? transition = null, string? adaptDelay = null, string? autoresetControlSeconds = null)
    {
        _haContext.CallService("adaptive_lighting", "change_switch_settings", null, new AdaptiveLightingChangeSwitchSettingsParameters { EntityId = entityId, UseDefaults = useDefaults, IncludeConfigInAttributes = includeConfigInAttributes, TurnOnLights = turnOnLights, InitialTransition = initialTransition, SleepTransition = sleepTransition, MaxBrightness = maxBrightness, MaxColorTemp = maxColorTemp, MinBrightness = minBrightness, MinColorTemp = minColorTemp, OnlyOnce = onlyOnce, PreferRgbColor = preferRgbColor, SeparateTurnOnCommands = separateTurnOnCommands, SendSplitDelay = sendSplitDelay, SleepBrightness = sleepBrightness, SleepRgbOrColorTemp = sleepRgbOrColorTemp, SleepRgbColor = sleepRgbColor, SleepColorTemp = sleepColorTemp, SunriseOffset = sunriseOffset, SunriseTime = sunriseTime, SunsetOffset = sunsetOffset, SunsetTime = sunsetTime, MaxSunriseTime = maxSunriseTime, MinSunsetTime = minSunsetTime, TakeOverControl = takeOverControl, DetectNonHaChanges = detectNonHaChanges, Transition = transition, AdaptDelay = adaptDelay, AutoresetControlSeconds = autoresetControlSeconds });
    }

    ///<summary>Mark whether a light is &apos;manually controlled&apos;.</summary>
    public void SetManualControl(AdaptiveLightingSetManualControlParameters data)
    {
        _haContext.CallService("adaptive_lighting", "set_manual_control", null, data);
    }

    ///<summary>Mark whether a light is &apos;manually controlled&apos;.</summary>
    ///<param name="entityId">The `entity_id` of the switch in which to (un)mark the light as being `manually controlled`. 📝</param>
    ///<param name="lights">entity_id(s) of lights, if not specified, all lights in the switch are selected. 💡</param>
    ///<param name="manualControl">Whether to add (&quot;true&quot;) or remove (&quot;false&quot;) the light from the &quot;manual_control&quot; list. 🔒 eg: True</param>
    public void SetManualControl(string? entityId = null, string? lights = null, bool? manualControl = null)
    {
        _haContext.CallService("adaptive_lighting", "set_manual_control", null, new AdaptiveLightingSetManualControlParameters { EntityId = entityId, Lights = lights, ManualControl = manualControl });
    }
}

public partial record AdaptiveLightingApplyParameters
{
    ///<summary>The `entity_id` of the switch with the settings to apply. 📝</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>A light (or list of lights) to apply the settings to. 💡</summary>
    [JsonPropertyName("lights")]
    public string? Lights { get; init; }

    ///<summary>Duration of transition when lights change, in seconds. 🕑 eg: 10</summary>
    [JsonPropertyName("transition")]
    public string? Transition { get; init; }

    ///<summary>Whether to adapt the brightness of the light. 🌞 eg: True</summary>
    [JsonPropertyName("adapt_brightness")]
    public bool? AdaptBrightness { get; init; }

    ///<summary>Whether to adapt the color on supporting lights. 🌈 eg: True</summary>
    [JsonPropertyName("adapt_color")]
    public bool? AdaptColor { get; init; }

    ///<summary>Whether to prefer RGB color adjustment over light color temperature when possible. 🌈 eg: False</summary>
    [JsonPropertyName("prefer_rgb_color")]
    public bool? PreferRgbColor { get; init; }

    ///<summary>Whether to turn on lights that are currently off. 🔆 eg: False</summary>
    [JsonPropertyName("turn_on_lights")]
    public bool? TurnOnLights { get; init; }
}

public partial record AdaptiveLightingChangeSwitchSettingsParameters
{
    ///<summary>Entity ID of the switch. 📝</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Sets the default values not specified in this service call. Options: &quot;current&quot; (default, retains current values), &quot;factory&quot; (resets to documented defaults), or &quot;configuration&quot; (reverts to switch config defaults). ⚙️ eg: current</summary>
    [JsonPropertyName("use_defaults")]
    public object? UseDefaults { get; init; }

    ///<summary>Show all options as attributes on the switch in Home Assistant when set to `true`. 📝</summary>
    [JsonPropertyName("include_config_in_attributes")]
    public bool? IncludeConfigInAttributes { get; init; }

    ///<summary>Whether to turn on lights that are currently off. 🔆 eg: False</summary>
    [JsonPropertyName("turn_on_lights")]
    public bool? TurnOnLights { get; init; }

    ///<summary>Duration of the first transition when lights turn from `off` to `on` in seconds. ⏲️ eg: 1</summary>
    [JsonPropertyName("initial_transition")]
    public string? InitialTransition { get; init; }

    ///<summary>Duration of transition when &quot;sleep mode&quot; is toggled in seconds. 😴 eg: 1</summary>
    [JsonPropertyName("sleep_transition")]
    public string? SleepTransition { get; init; }

    ///<summary>Maximum brightness percentage. 💡 eg: 100</summary>
    [JsonPropertyName("max_brightness")]
    public string? MaxBrightness { get; init; }

    ///<summary>Coldest color temperature in Kelvin. ❄️ eg: 5500</summary>
    [JsonPropertyName("max_color_temp")]
    public string? MaxColorTemp { get; init; }

    ///<summary>Minimum brightness percentage. 💡 eg: 1</summary>
    [JsonPropertyName("min_brightness")]
    public string? MinBrightness { get; init; }

    ///<summary>Warmest color temperature in Kelvin. 🔥 eg: 2000</summary>
    [JsonPropertyName("min_color_temp")]
    public string? MinColorTemp { get; init; }

    ///<summary>Adapt lights only when they are turned on (`true`) or keep adapting them (`false`). 🔄 eg: False</summary>
    [JsonPropertyName("only_once")]
    public bool? OnlyOnce { get; init; }

    ///<summary>Whether to prefer RGB color adjustment over light color temperature when possible. 🌈 eg: False</summary>
    [JsonPropertyName("prefer_rgb_color")]
    public bool? PreferRgbColor { get; init; }

    ///<summary>Use separate `light.turn_on` calls for color and brightness, needed for some light types. 🔀 eg: False</summary>
    [JsonPropertyName("separate_turn_on_commands")]
    public bool? SeparateTurnOnCommands { get; init; }

    ///<summary>Delay (ms) between `separate_turn_on_commands` for lights that don&apos;t support simultaneous brightness and color setting. ⏲️ eg: 0</summary>
    [JsonPropertyName("send_split_delay")]
    public bool? SendSplitDelay { get; init; }

    ///<summary>Brightness percentage of lights in sleep mode. 😴 eg: 1</summary>
    [JsonPropertyName("sleep_brightness")]
    public string? SleepBrightness { get; init; }

    ///<summary>Use either `&quot;rgb_color&quot;` or `&quot;color_temp&quot;` in sleep mode. 🌙 eg: color_temp</summary>
    [JsonPropertyName("sleep_rgb_or_color_temp")]
    public object? SleepRgbOrColorTemp { get; init; }

    ///<summary>RGB color in sleep mode (used when `sleep_rgb_or_color_temp` is &quot;rgb_color&quot;). 🌈</summary>
    [JsonPropertyName("sleep_rgb_color")]
    public object? SleepRgbColor { get; init; }

    ///<summary>Color temperature in sleep mode (used when `sleep_rgb_or_color_temp` is `color_temp`) in Kelvin. 😴 eg: 1000</summary>
    [JsonPropertyName("sleep_color_temp")]
    public string? SleepColorTemp { get; init; }

    ///<summary>Adjust sunrise time with a positive or negative offset in seconds. ⏰ eg: 0</summary>
    [JsonPropertyName("sunrise_offset")]
    public long? SunriseOffset { get; init; }

    ///<summary>Set a fixed time (HH:MM:SS) for sunrise. 🌅</summary>
    [JsonPropertyName("sunrise_time")]
    public DateTime? SunriseTime { get; init; }

    ///<summary>Adjust sunset time with a positive or negative offset in seconds. ⏰</summary>
    [JsonPropertyName("sunset_offset")]
    public long? SunsetOffset { get; init; }

    ///<summary>Set a fixed time (HH:MM:SS) for sunset. 🌇</summary>
    [JsonPropertyName("sunset_time")]
    public DateTime? SunsetTime { get; init; }

    ///<summary>Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier real sunrises. 🌅</summary>
    [JsonPropertyName("max_sunrise_time")]
    public DateTime? MaxSunriseTime { get; init; }

    ///<summary>Set the earliest virtual sunset time (HH:MM:SS), allowing for later real sunsets. 🌇</summary>
    [JsonPropertyName("min_sunset_time")]
    public DateTime? MinSunsetTime { get; init; }

    ///<summary>Disable Adaptive Lighting if another source calls `light.turn_on` while lights are on and being adapted. Note that this calls `homeassistant.update_entity` every `interval`! 🔒 eg: True</summary>
    [JsonPropertyName("take_over_control")]
    public bool? TakeOverControl { get; init; }

    ///<summary>Detect non-`light.turn_on` state changes and stop adapting lights. Requires `take_over_control`. 🕵️ eg: False</summary>
    [JsonPropertyName("detect_non_ha_changes")]
    public bool? DetectNonHaChanges { get; init; }

    ///<summary>Duration of transition when lights change, in seconds. 🕑 eg: 45</summary>
    [JsonPropertyName("transition")]
    public string? Transition { get; init; }

    ///<summary>Wait time (seconds) between light turn on and Adaptive Lighting applying changes. Might help to avoid flickering. ⏲️ eg: 0</summary>
    [JsonPropertyName("adapt_delay")]
    public string? AdaptDelay { get; init; }

    ///<summary>Automatically reset the manual control after a number of seconds. Set to 0 to disable. ⏲️ eg: 0</summary>
    [JsonPropertyName("autoreset_control_seconds")]
    public string? AutoresetControlSeconds { get; init; }
}

public partial record AdaptiveLightingSetManualControlParameters
{
    ///<summary>The `entity_id` of the switch in which to (un)mark the light as being `manually controlled`. 📝</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>entity_id(s) of lights, if not specified, all lights in the switch are selected. 💡</summary>
    [JsonPropertyName("lights")]
    public string? Lights { get; init; }

    ///<summary>Whether to add (&quot;true&quot;) or remove (&quot;false&quot;) the light from the &quot;manual_control&quot; list. 🔒 eg: True</summary>
    [JsonPropertyName("manual_control")]
    public bool? ManualControl { get; init; }
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm away the alarm control panel with. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Send arm custom bypass command.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Send arm custom bypass command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm custom bypass the alarm control panel with. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm home the alarm control panel with. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm night the alarm control panel with. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm vacation the alarm control panel with. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to disarm the alarm control panel with. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to trigger the alarm control panel with. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>An optional code to arm away the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>An optional code to arm custom bypass the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>An optional code to arm home the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>An optional code to arm night the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>An optional code to arm vacation the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>An optional code to disarm the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>An optional code to trigger the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AlarmoServices
{
    private readonly IHaContext _haContext;
    public AlarmoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Arm an Alarmo entity with custom settings.</summary>
    public void Arm(AlarmoArmParameters data)
    {
        _haContext.CallService("alarmo", "arm", null, data);
    }

    ///<summary>Arm an Alarmo entity with custom settings.</summary>
    ///<param name="entityId">Name of entity that should be armed. eg: alarm_control_panel.alarm</param>
    ///<param name="code">Code to arm the alarm with. eg: 1234</param>
    ///<param name="mode">Mode to arm the alarm in. eg: away</param>
    ///<param name="skipDelay">Skip the exit delay. eg: True</param>
    ///<param name="force">Automatically bypass all sensors that prevent the arming operation. eg: True</param>
    public void Arm(string entityId, string? code = null, object? mode = null, bool? skipDelay = null, bool? force = null)
    {
        _haContext.CallService("alarmo", "arm", null, new AlarmoArmParameters { EntityId = entityId, Code = code, Mode = mode, SkipDelay = skipDelay, Force = force });
    }

    ///<summary>Block a user from arming/disarming alarmo.</summary>
    public void DisableUser(AlarmoDisableUserParameters data)
    {
        _haContext.CallService("alarmo", "disable_user", null, data);
    }

    ///<summary>Block a user from arming/disarming alarmo.</summary>
    ///<param name="name">Name of the user to disable. eg: Frank</param>
    public void DisableUser(string name)
    {
        _haContext.CallService("alarmo", "disable_user", null, new AlarmoDisableUserParameters { Name = name });
    }

    ///<summary>Disarm an Alarmo entity.</summary>
    public void Disarm(AlarmoDisarmParameters data)
    {
        _haContext.CallService("alarmo", "disarm", null, data);
    }

    ///<summary>Disarm an Alarmo entity.</summary>
    ///<param name="entityId">Name of entity that should be disarmed. eg: alarm_control_panel.alarm</param>
    ///<param name="code">Code to disarm the alarm with. eg: 1234</param>
    public void Disarm(string entityId, string? code = null)
    {
        _haContext.CallService("alarmo", "disarm", null, new AlarmoDisarmParameters { EntityId = entityId, Code = code });
    }

    ///<summary>Allow a user to arm/disarm alarmo.</summary>
    public void EnableUser(AlarmoEnableUserParameters data)
    {
        _haContext.CallService("alarmo", "enable_user", null, data);
    }

    ///<summary>Allow a user to arm/disarm alarmo.</summary>
    ///<param name="name">Name of the user to enable. eg: Frank</param>
    public void EnableUser(string name)
    {
        _haContext.CallService("alarmo", "enable_user", null, new AlarmoEnableUserParameters { Name = name });
    }
}

public partial record AlarmoArmParameters
{
    ///<summary>Name of entity that should be armed. eg: alarm_control_panel.alarm</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Code to arm the alarm with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }

    ///<summary>Mode to arm the alarm in. eg: away</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }

    ///<summary>Skip the exit delay. eg: True</summary>
    [JsonPropertyName("skip_delay")]
    public bool? SkipDelay { get; init; }

    ///<summary>Automatically bypass all sensors that prevent the arming operation. eg: True</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }
}

public partial record AlarmoDisableUserParameters
{
    ///<summary>Name of the user to disable. eg: Frank</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record AlarmoDisarmParameters
{
    ///<summary>Name of entity that should be disarmed. eg: alarm_control_panel.alarm</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Code to disarm the alarm with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmoEnableUserParameters
{
    ///<summary>Name of the user to enable. eg: Frank</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial class AlexaMediaServices
{
    private readonly IHaContext _haContext;
    public AlexaMediaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clear last entries from Alexa history for each Alexa account.</summary>
    public void ClearHistory(AlexaMediaClearHistoryParameters data)
    {
        _haContext.CallService("alexa_media", "clear_history", null, data);
    }

    ///<summary>Clear last entries from Alexa history for each Alexa account.</summary>
    ///<param name="email">List of Alexa accounts to update. If empty, will delete from all known accounts. eg: my_email@alexa.com</param>
    ///<param name="entries">Number of entries to clear from 1 to 50. If empty, clear 50. eg: 50</param>
    public void ClearHistory(object? email = null, object? entries = null)
    {
        _haContext.CallService("alexa_media", "clear_history", null, new AlexaMediaClearHistoryParameters { Email = email, Entries = entries });
    }

    ///<summary>Force logout of Alexa Login account and deletion of .pickle. Intended for debugging use.</summary>
    public void ForceLogout(AlexaMediaForceLogoutParameters data)
    {
        _haContext.CallService("alexa_media", "force_logout", null, data);
    }

    ///<summary>Force logout of Alexa Login account and deletion of .pickle. Intended for debugging use.</summary>
    ///<param name="email">List of Alexa accounts to log out. If empty, will log out from all known accounts. eg: my_email@alexa.com</param>
    public void ForceLogout(object? email = null)
    {
        _haContext.CallService("alexa_media", "force_logout", null, new AlexaMediaForceLogoutParameters { Email = email });
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    public void UpdateLastCalled(AlexaMediaUpdateLastCalledParameters data)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, data);
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    ///<param name="email">List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</param>
    public void UpdateLastCalled(object? email = null)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, new AlexaMediaUpdateLastCalledParameters { Email = email });
    }
}

public partial record AlexaMediaClearHistoryParameters
{
    ///<summary>List of Alexa accounts to update. If empty, will delete from all known accounts. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }

    ///<summary>Number of entries to clear from 1 to 50. If empty, clear 50. eg: 50</summary>
    [JsonPropertyName("entries")]
    public object? Entries { get; init; }
}

public partial record AlexaMediaForceLogoutParameters
{
    ///<summary>List of Alexa accounts to log out. If empty, will log out from all known accounts. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial record AlexaMediaUpdateLastCalledParameters
{
    ///<summary>List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggle (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stop currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enable an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stop currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BackupServices
{
    private readonly IHaContext _haContext;
    public BackupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a new backup.</summary>
    public void Create()
    {
        _haContext.CallService("backup", "create", null);
    }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Defines the short summary or subject for the event eg: Department Party</param>
    ///<param name="description">A more complete description of the event than that provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than that provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disable the motion detection in a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enable the motion detection in a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Play camera stream on supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Play camera stream on supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Name(s) of media player to stream to.</param>
    ///<param name="format">Stream format supported by media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Record live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Record live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Target recording length.</param>
    ///<param name="lookback">Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Take a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Take a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turn off camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turn on camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Name(s) of media player to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a Filename. Variable is entity_id. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Target recording length.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a Filename. Variable is entity_id. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Set fan operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Set fan operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">New value of fan mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Set target humidity of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Set target humidity of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">New target humidity for climate device.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">New value of operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Set preset mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Set preset mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">New value of preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Set swing operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Set swing operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">New value of swing mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Set target temperature of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Set target temperature of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for HVAC.</param>
    ///<param name="targetTempHigh">New target high temperature for HVAC.</param>
    ///<param name="targetTempLow">New target low temperature for HVAC.</param>
    ///<param name="hvacMode">HVAC operation mode to set temperature to.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Turn climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turn climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>New value of fan mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>New target humidity for climate device.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>New value of operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>New value of preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>New value of swing mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>New target temperature for HVAC.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New target high temperature for HVAC.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>New target low temperature for HVAC.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode to set temperature to.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Make instance UI available outside over NabuCasa cloud</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnect UI from NabuCasa cloud</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launch a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launch a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language eg: NL</param>
    ///<param name="agentId">Assist engine to process your request eg: homeassistant</param>
    public void Process(string? text = null, string? language = null, string? agentId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId });
    }

    public void Reload()
    {
        _haContext.CallService("conversation", "reload", null);
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Assist engine to process your request eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public string? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void Configure()
    {
        _haContext.CallService("counter", "configure", null);
    }

    ///<summary>Decrement a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increment a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Reset a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }

    ///<summary>Set the counter value</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Set the counter value</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Close all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Close all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Open all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Open all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Position of the cover</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Tilt position of the cover.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stop all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stop all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggle a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggle a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Position of the cover</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Tilt position of the cover.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Control tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Control tracked device.</summary>
    ///<param name="mac">MAC address of device eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">Id of device (find id in known_devices.yaml). eg: phonedave</param>
    ///<param name="hostName">Hostname of device eg: Dave</param>
    ///<param name="locationName">Name of location where device is located (not_home is away). eg: home</param>
    ///<param name="gps">GPS coordinates where device is located (latitude, longitude). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of GPS coordinates.</param>
    ///<param name="battery">Battery level of device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of device eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>Id of device (find id in known_devices.yaml). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of device eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of location where device is located (not_home is away). eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where device is located (latitude, longitude). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrease the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decrease the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Decrease speed by a percentage.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increase the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increase the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Increase speed by a percentage.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Oscillate the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Oscillate the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Flag to turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Set the fan rotation.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Set the fan rotation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">The direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Set fan speed percentage.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Set fan speed percentage.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Percentage speed setting.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Set preset mode for a fan device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Set preset mode for a fan device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">New value of preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggle the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turn fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turn fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turn fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="speed">Speed setting. eg: high</param>
    ///<param name="percentage">Percentage speed setting.</param>
    ///<param name="presetMode">Preset mode setting. eg: auto</param>
    public void TurnOn(ServiceTarget target, string? speed = null, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Speed = speed, Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decrease speed by a percentage.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increase speed by a percentage.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Flag to turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>The direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Percentage speed setting.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>New value of preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed setting. eg: high</summary>
    [JsonPropertyName("speed")]
    public string? Speed { get; init; }

    ///<summary>Percentage speed setting.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset mode setting. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Send a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Send a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Send a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Send a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Send a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload themes from YAML configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Set a theme unless the client selected per-device theme.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Set a theme unless the client selected per-device theme.</summary>
    ///<param name="name">Name of a predefined theme eg: default</param>
    ///<param name="mode">The mode the theme is for.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a predefined theme eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>The mode the theme is for.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GenericThermostatServices
{
    private readonly IHaContext _haContext;
    public GenericThermostatServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload all generic_thermostat entities.</summary>
    public void Reload()
    {
        _haContext.CallService("generic_thermostat", "reload", null);
    }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload group configuration, entities, and notify services.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Remove a user group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Remove a user group.</summary>
    ///<param name="objectId">Group id and part of entity id. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Create/Update a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Create/Update a user group.</summary>
    ///<param name="objectId">Group id and part of entity id. eg: test_group</param>
    ///<param name="name">Name of group eg: My test group</param>
    ///<param name="icon">Name of icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Not compatible with &apos;delta&apos;. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members that will change on group listening. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members that will be removed from group listening. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only turn on when all entities are on.</param>
    public void Set(string objectId, string? name = null, object? icon = null, object? entities = null, object? addEntities = null, object? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Group id and part of entity id. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Group id and part of entity id. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of group eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Not compatible with &apos;delta&apos;. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of members that will change on group listening. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public object? AddEntities { get; init; }

    ///<summary>List of members that will be removed from group listening. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public object? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only turn on when all entities are on.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HistoryStatsServices
{
    private readonly IHaContext _haContext;
    public HistoryStatsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload all history_stats entities.</summary>
    public void Reload()
    {
        _haContext.CallService("history_stats", "reload", null);
    }
}

public partial class HomeConnectServices
{
    private readonly IHaContext _haContext;
    public HomeConnectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Changes a setting.</summary>
    public void ChangeSetting(HomeConnectChangeSettingParameters data)
    {
        _haContext.CallService("home_connect", "change_setting", null, data);
    }

    ///<summary>Changes a setting.</summary>
    ///<param name="deviceId">Id of the device.</param>
    ///<param name="key">Key of the setting. eg: BSH.Common.Setting.ChildLock</param>
    ///<param name="value">Value of the setting. eg: true</param>
    public void ChangeSetting(string deviceId, string key, object value)
    {
        _haContext.CallService("home_connect", "change_setting", null, new HomeConnectChangeSettingParameters { DeviceId = deviceId, Key = key, Value = value });
    }

    ///<summary>Pauses the current running program.</summary>
    public void PauseProgram(HomeConnectPauseProgramParameters data)
    {
        _haContext.CallService("home_connect", "pause_program", null, data);
    }

    ///<summary>Pauses the current running program.</summary>
    ///<param name="deviceId">Id of the device.</param>
    public void PauseProgram(string deviceId)
    {
        _haContext.CallService("home_connect", "pause_program", null, new HomeConnectPauseProgramParameters { DeviceId = deviceId });
    }

    ///<summary>Resumes a paused program.</summary>
    public void ResumeProgram(HomeConnectResumeProgramParameters data)
    {
        _haContext.CallService("home_connect", "resume_program", null, data);
    }

    ///<summary>Resumes a paused program.</summary>
    ///<param name="deviceId">Id of the device.</param>
    public void ResumeProgram(string deviceId)
    {
        _haContext.CallService("home_connect", "resume_program", null, new HomeConnectResumeProgramParameters { DeviceId = deviceId });
    }

    ///<summary>Selects a program without starting it.</summary>
    public void SelectProgram(HomeConnectSelectProgramParameters data)
    {
        _haContext.CallService("home_connect", "select_program", null, data);
    }

    ///<summary>Selects a program without starting it.</summary>
    ///<param name="deviceId">Id of the device.</param>
    ///<param name="program">Program to select eg: Dishcare.Dishwasher.Program.Auto2</param>
    ///<param name="key">Key of the option. eg: BSH.Common.Option.StartInRelative</param>
    ///<param name="value">Value of the option. eg: 1800</param>
    ///<param name="unit">Unit for the option. eg: seconds</param>
    public void SelectProgram(string deviceId, string program, string? key = null, object? value = null, string? unit = null)
    {
        _haContext.CallService("home_connect", "select_program", null, new HomeConnectSelectProgramParameters { DeviceId = deviceId, Program = program, Key = key, Value = value, Unit = unit });
    }

    ///<summary>Sets an option for the active program.</summary>
    public void SetOptionActive(HomeConnectSetOptionActiveParameters data)
    {
        _haContext.CallService("home_connect", "set_option_active", null, data);
    }

    ///<summary>Sets an option for the active program.</summary>
    ///<param name="deviceId">Id of the device.</param>
    ///<param name="key">Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</param>
    ///<param name="value">Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</param>
    public void SetOptionActive(string deviceId, string key, object value)
    {
        _haContext.CallService("home_connect", "set_option_active", null, new HomeConnectSetOptionActiveParameters { DeviceId = deviceId, Key = key, Value = value });
    }

    ///<summary>Sets an option for the selected program.</summary>
    public void SetOptionSelected(HomeConnectSetOptionSelectedParameters data)
    {
        _haContext.CallService("home_connect", "set_option_selected", null, data);
    }

    ///<summary>Sets an option for the selected program.</summary>
    ///<param name="deviceId">Id of the device.</param>
    ///<param name="key">Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</param>
    ///<param name="value">Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</param>
    public void SetOptionSelected(string deviceId, string key, object value)
    {
        _haContext.CallService("home_connect", "set_option_selected", null, new HomeConnectSetOptionSelectedParameters { DeviceId = deviceId, Key = key, Value = value });
    }

    ///<summary>Selects a program and starts it.</summary>
    public void StartProgram(HomeConnectStartProgramParameters data)
    {
        _haContext.CallService("home_connect", "start_program", null, data);
    }

    ///<summary>Selects a program and starts it.</summary>
    ///<param name="deviceId">Id of the device.</param>
    ///<param name="program">Program to select eg: Dishcare.Dishwasher.Program.Auto2</param>
    ///<param name="key">Key of the option. eg: BSH.Common.Option.StartInRelative</param>
    ///<param name="value">Value of the option. eg: 1800</param>
    ///<param name="unit">Unit for the option. eg: seconds</param>
    public void StartProgram(string deviceId, string program, string? key = null, object? value = null, string? unit = null)
    {
        _haContext.CallService("home_connect", "start_program", null, new HomeConnectStartProgramParameters { DeviceId = deviceId, Program = program, Key = key, Value = value, Unit = unit });
    }
}

public partial record HomeConnectChangeSettingParameters
{
    ///<summary>Id of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Key of the setting. eg: BSH.Common.Setting.ChildLock</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the setting. eg: true</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record HomeConnectPauseProgramParameters
{
    ///<summary>Id of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record HomeConnectResumeProgramParameters
{
    ///<summary>Id of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record HomeConnectSelectProgramParameters
{
    ///<summary>Id of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Program to select eg: Dishcare.Dishwasher.Program.Auto2</summary>
    [JsonPropertyName("program")]
    public string? Program { get; init; }

    ///<summary>Key of the option. eg: BSH.Common.Option.StartInRelative</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: 1800</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>Unit for the option. eg: seconds</summary>
    [JsonPropertyName("unit")]
    public string? Unit { get; init; }
}

public partial record HomeConnectSetOptionActiveParameters
{
    ///<summary>Id of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record HomeConnectSetOptionSelectedParameters
{
    ///<summary>Id of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record HomeConnectStartProgramParameters
{
    ///<summary>Id of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Program to select eg: Dishcare.Dishwasher.Program.Auto2</summary>
    [JsonPropertyName("program")]
    public string? Program { get; init; }

    ///<summary>Key of the option. eg: BSH.Common.Option.StartInRelative</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: 1800</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>Unit for the option. eg: seconds</summary>
    [JsonPropertyName("unit")]
    public string? Unit { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Check the Home Assistant configuration files for errors. Errors will be displayed in the Home Assistant log.</summary>
    public void CheckConfig()
    {
        _haContext.CallService("homeassistant", "check_config", null);
    }

    public void ReloadAll()
    {
        _haContext.CallService("homeassistant", "reload_all", null);
    }

    ///<summary>Reload a config entry that matches a target.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reload a config entry that matches a target.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entryId">A configuration entry id eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reload the core configuration.</summary>
    public void ReloadCoreConfig()
    {
        _haContext.CallService("homeassistant", "reload_core_config", null);
    }

    ///<summary>Reload Jinja2 templates found in the custom_templates folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates()
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null);
    }

    ///<summary>Restart the Home Assistant service.</summary>
    public void Restart()
    {
        _haContext.CallService("homeassistant", "restart", null);
    }

    ///<summary>Save the persistent states (for entities derived from RestoreEntity) immediately. Maintain the normal periodic saving interval.</summary>
    public void SavePersistentStates()
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null);
    }

    ///<summary>Update the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Update the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    public void SetLocation(string latitude, string longitude)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude });
    }

    ///<summary>Stop the Home Assistant service.</summary>
    public void Stop()
    {
        _haContext.CallService("homeassistant", "stop", null);
    }

    ///<summary>Generic service to toggle devices on/off under any domain</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "toggle", target);
    }

    ///<summary>Generic service to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_off", target);
    }

    ///<summary>Generic service to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_on", target);
    }

    ///<summary>Force one or more entities to update its data</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateEntity(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "update_entity", target);
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>A configuration entry id eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public string? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public string? Longitude { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set target humidity of humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Set target humidity of humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">New target humidity for humidifier device.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Set mode for humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Set mode for humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">New mode eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles a humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "toggle", target);
    }

    ///<summary>Turn humidifier device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_off", target);
    }

    ///<summary>Turn humidifier device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_on", target);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>New target humidity for humidifier device.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>New mode eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_boolean configuration</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggle an input boolean</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turn off an input boolean</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turn on an input boolean</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the input button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_datetime configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date the entity should be set to. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time the entity should be set to. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time the entity should be set to. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time the entity should be set to as expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, string? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date the entity should be set to. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time the entity should be set to. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public string? Time { get; init; }

    ///<summary>The target date &amp; time the entity should be set to. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time the entity should be set to as expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrement the value of an input number entity by its stepping.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("input_number", "decrement", target);
    }

    ///<summary>Increment the value of an input number entity by its stepping.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("input_number", "increment", target);
    }

    ///<summary>Reload the input_number configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Set the value of an input number entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Set the value of an input number entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_select configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Select the first option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Select the last option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select an option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Select an option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Set the options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Set the options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">Options for the input select entity. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>Options for the input select entity. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_text configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Set the value of an input text entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Set the value of an input text entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value the entity should be set to. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value the entity should be set to. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">If the light should flash.</param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color for the light (based on RGB - red, green, blue).</param>
    ///<param name="rgbwColor">A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Color for the light in RGB-format. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A human readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color for the light in XY-format. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature for the light in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature for the light in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>If the light should flash.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>If the light should flash.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color for the light (based on RGB - red, green, blue).</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color for the light in XY-format. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature for the light in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature for the light in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by an amount.</summary>
    [JsonPropertyName("brightness_step")]
    public long? BrightnessStep { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>If the light should flash.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial class LocaltuyaServices
{
    private readonly IHaContext _haContext;
    public LocaltuyaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload localtuya and reconnect to all devices.</summary>
    public void Reload()
    {
        _haContext.CallService("localtuya", "reload", null);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    public void SetDp(LocaltuyaSetDpParameters data)
    {
        _haContext.CallService("localtuya", "set_dp", null, data);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    ///<param name="deviceId">Device ID of device to change datapoint value for eg: 11100118278aab4de001</param>
    ///<param name="dp">Datapoint index eg: 1</param>
    ///<param name="value">New value to set eg: False</param>
    public void SetDp(object? deviceId = null, object? dp = null, object? value = null)
    {
        _haContext.CallService("localtuya", "set_dp", null, new LocaltuyaSetDpParameters { DeviceId = deviceId, Dp = dp, Value = value });
    }
}

public partial record LocaltuyaSetDpParameters
{
    ///<summary>Device ID of device to change datapoint value for eg: 11100118278aab4de001</summary>
    [JsonPropertyName("device_id")]
    public object? DeviceId { get; init; }

    ///<summary>Datapoint index eg: 1</summary>
    [JsonPropertyName("dp")]
    public object? Dp { get; init; }

    ///<summary>New value to set eg: False</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Lock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Lock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to lock the lock with. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Open all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Open all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to open the lock with. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to unlock the lock with. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>An optional code to lock the lock with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>An optional code to open the lock with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>An optional code to unlock the lock with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a custom entry in your logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Create a custom entry in your logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced with entity_id. eg: Kitchen</param>
    ///<param name="message">Message of the custom logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in custom logbook entry.</param>
    ///<param name="domain">Icon of domain to display in custom logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced with entity_id. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the custom logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in custom logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Icon of domain to display in custom logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Set the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Set log level for integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send the media player the command to clear players playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, string groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Send the media player the command for next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Send the media player the command for pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Send the media player the command for play.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggle media player play/pause state.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Send the media player the command for previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Position to seek to. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Send the media player the stop command.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">True/false for enabling/disabling shuffle.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player power state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turn a media player power off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turn a media player power on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Unjoin the player from a group. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turn a media player volume down.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">True/false for mute/unmute.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">Volume level to set as float.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turn a media player volume up.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public string? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Position to seek to. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>True/false for enabling/disabling shuffle.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>True/false for mute/unmute.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>Volume level to set as float.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MelcloudServices
{
    private readonly IHaContext _haContext;
    public MelcloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets horizontal vane position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetVaneHorizontal(ServiceTarget target, MelcloudSetVaneHorizontalParameters data)
    {
        _haContext.CallService("melcloud", "set_vane_horizontal", target, data);
    }

    ///<summary>Sets horizontal vane position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute.  eg: auto</param>
    public void SetVaneHorizontal(ServiceTarget target, string position)
    {
        _haContext.CallService("melcloud", "set_vane_horizontal", target, new MelcloudSetVaneHorizontalParameters { Position = position });
    }

    ///<summary>Sets vertical vane position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetVaneVertical(ServiceTarget target, MelcloudSetVaneVerticalParameters data)
    {
        _haContext.CallService("melcloud", "set_vane_vertical", target, data);
    }

    ///<summary>Sets vertical vane position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute.  eg: auto</param>
    public void SetVaneVertical(ServiceTarget target, string position)
    {
        _haContext.CallService("melcloud", "set_vane_vertical", target, new MelcloudSetVaneVerticalParameters { Position = position });
    }
}

public partial record MelcloudSetVaneHorizontalParameters
{
    ///<summary>Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute.  eg: auto</summary>
    [JsonPropertyName("position")]
    public string? Position { get; init; }
}

public partial record MelcloudSetVaneVerticalParameters
{
    ///<summary>Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute.  eg: auto</summary>
    [JsonPropertyName("position")]
    public string? Position { get; init; }
}

public partial class MinMaxServices
{
    private readonly IHaContext _haContext;
    public MinMaxServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload all min_max entities.</summary>
    public void Reload()
    {
        _haContext.CallService("min_max", "reload", null);
    }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Dump messages on a topic selector to the &apos;mqtt_dump.txt&apos; file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Dump messages on a topic selector to the &apos;mqtt_dump.txt&apos; file in your configuration folder.</summary>
    ///<param name="topic">topic to listen to eg: OpenZWave/#</param>
    ///<param name="duration">how long we should listen for messages in seconds</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publish a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publish a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish payload. eg: /homeassistant/hello</param>
    ///<param name="payload">Payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as payload value. Ignored if payload given. eg: {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="qos">Quality of Service to use.</param>
    ///<param name="retain">If message should have the retain flag set.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain });
    }

    ///<summary>Reload all MQTT entities from YAML.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>topic to listen to eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>how long we should listen for messages in seconds</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish payload. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>Payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as payload value. Ignored if payload given. eg: {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If message should have the retain flag set.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps()
    {
        _haContext.CallService("netdaemon", "reload_apps", null);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    public void AlexaMedia(NotifyAlexaMediaParameters data)
    {
        _haContext.CallService("notify", "alexa_media", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMedia(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media", null, new NotifyAlexaMediaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_aaron integration.</summary>
    public void AlexaMediaAaron(NotifyAlexaMediaAaronParameters data)
    {
        _haContext.CallService("notify", "alexa_media_aaron", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_aaron integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaAaron(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_aaron", null, new NotifyAlexaMediaAaronParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_bose_qc35_ii integration.</summary>
    public void AlexaMediaBoseQc35Ii(NotifyAlexaMediaBoseQc35IiParameters data)
    {
        _haContext.CallService("notify", "alexa_media_bose_qc35_ii", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_bose_qc35_ii integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaBoseQc35Ii(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_bose_qc35_ii", null, new NotifyAlexaMediaBoseQc35IiParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_dining integration.</summary>
    public void AlexaMediaDining(NotifyAlexaMediaDiningParameters data)
    {
        _haContext.CallService("notify", "alexa_media_dining", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_dining integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaDining(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_dining", null, new NotifyAlexaMediaDiningParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_downstairs integration.</summary>
    public void AlexaMediaDownstairs(NotifyAlexaMediaDownstairsParameters data)
    {
        _haContext.CallService("notify", "alexa_media_downstairs", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_downstairs integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaDownstairs(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_downstairs", null, new NotifyAlexaMediaDownstairsParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_2nd_echo_dot integration.</summary>
    public void AlexaMediaEugeneS2ndEchoDot(NotifyAlexaMediaEugeneS2ndEchoDotParameters data)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_2nd_echo_dot", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_2nd_echo_dot integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaEugeneS2ndEchoDot(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_2nd_echo_dot", null, new NotifyAlexaMediaEugeneS2ndEchoDotParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_5th_echo_dot integration.</summary>
    public void AlexaMediaEugeneS5thEchoDot(NotifyAlexaMediaEugeneS5thEchoDotParameters data)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_5th_echo_dot", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_5th_echo_dot integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaEugeneS5thEchoDot(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_5th_echo_dot", null, new NotifyAlexaMediaEugeneS5thEchoDotParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_fire integration.</summary>
    public void AlexaMediaEugeneSFire(NotifyAlexaMediaEugeneSFireParameters data)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_fire", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_fire integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaEugeneSFire(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_fire", null, new NotifyAlexaMediaEugeneSFireParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_lg_oled_webos_2021_tv integration.</summary>
    public void AlexaMediaEugeneSLgOledWebos2021Tv(NotifyAlexaMediaEugeneSLgOledWebos2021TvParameters data)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_lg_oled_webos_2021_tv", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_lg_oled_webos_2021_tv integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaEugeneSLgOledWebos2021Tv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_lg_oled_webos_2021_tv", null, new NotifyAlexaMediaEugeneSLgOledWebos2021TvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_sonos_arc integration.</summary>
    public void AlexaMediaEugeneSSonosArc(NotifyAlexaMediaEugeneSSonosArcParameters data)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_sonos_arc", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_eugene_s_sonos_arc integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaEugeneSSonosArc(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_eugene_s_sonos_arc", null, new NotifyAlexaMediaEugeneSSonosArcParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere_2 integration.</summary>
    public void AlexaMediaEverywhere2(NotifyAlexaMediaEverywhere2Parameters data)
    {
        _haContext.CallService("notify", "alexa_media_everywhere_2", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere_2 integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaEverywhere2(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_everywhere_2", null, new NotifyAlexaMediaEverywhere2Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_jayden integration.</summary>
    public void AlexaMediaJayden(NotifyAlexaMediaJaydenParameters data)
    {
        _haContext.CallService("notify", "alexa_media_jayden", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_jayden integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaJayden(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_jayden", null, new NotifyAlexaMediaJaydenParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen integration.</summary>
    public void AlexaMediaKitchen(NotifyAlexaMediaKitchenParameters data)
    {
        _haContext.CallService("notify", "alexa_media_kitchen", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaKitchen(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_kitchen", null, new NotifyAlexaMediaKitchenParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_last_called integration.</summary>
    public void AlexaMediaLastCalled(NotifyAlexaMediaLastCalledParameters data)
    {
        _haContext.CallService("notify", "alexa_media_last_called", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_last_called integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaLastCalled(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_last_called", null, new NotifyAlexaMediaLastCalledParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_lounge_sonos integration.</summary>
    public void AlexaMediaLoungeSonos(NotifyAlexaMediaLoungeSonosParameters data)
    {
        _haContext.CallService("notify", "alexa_media_lounge_sonos", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_lounge_sonos integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaLoungeSonos(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_lounge_sonos", null, new NotifyAlexaMediaLoungeSonosParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_master integration.</summary>
    public void AlexaMediaMaster(NotifyAlexaMediaMasterParameters data)
    {
        _haContext.CallService("notify", "alexa_media_master", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_master integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaMaster(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_master", null, new NotifyAlexaMediaMasterParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_master_tv_alexa integration.</summary>
    public void AlexaMediaMasterTvAlexa(NotifyAlexaMediaMasterTvAlexaParameters data)
    {
        _haContext.CallService("notify", "alexa_media_master_tv_alexa", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_master_tv_alexa integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaMasterTvAlexa(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_master_tv_alexa", null, new NotifyAlexaMediaMasterTvAlexaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_office integration.</summary>
    public void AlexaMediaOffice(NotifyAlexaMediaOfficeParameters data)
    {
        _haContext.CallService("notify", "alexa_media_office", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_office integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaOffice(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_office", null, new NotifyAlexaMediaOfficeParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_playroom integration.</summary>
    public void AlexaMediaPlayroom(NotifyAlexaMediaPlayroomParameters data)
    {
        _haContext.CallService("notify", "alexa_media_playroom", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_playroom integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaPlayroom(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_playroom", null, new NotifyAlexaMediaPlayroomParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    public void AlexaMediaThisDevice(NotifyAlexaMediaThisDeviceParameters data)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaThisDevice(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, new NotifyAlexaMediaThisDeviceParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_this_device_3 integration.</summary>
    public void AlexaMediaThisDevice3(NotifyAlexaMediaThisDevice3Parameters data)
    {
        _haContext.CallService("notify", "alexa_media_this_device_3", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_this_device_3 integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaThisDevice3(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_this_device_3", null, new NotifyAlexaMediaThisDevice3Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_upstairs integration.</summary>
    public void AlexaMediaUpstairs(NotifyAlexaMediaUpstairsParameters data)
    {
        _haContext.CallService("notify", "alexa_media_upstairs", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_upstairs integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void AlexaMediaUpstairs(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_upstairs", null, new NotifyAlexaMediaUpstairsParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the eugene service.</summary>
    public void Eugene(NotifyEugeneParameters data)
    {
        _haContext.CallService("notify", "eugene", null, data);
    }

    ///<summary>Sends a notification message using the eugene service.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void Eugene(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "eugene", null, new NotifyEugeneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the hailey service.</summary>
    public void Hailey(NotifyHaileyParameters data)
    {
        _haContext.CallService("notify", "hailey", null, data);
    }

    ///<summary>Sends a notification message using the hailey service.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void Hailey(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "hailey", null, new NotifyHaileyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the lounge_tv service.</summary>
    public void LoungeTv(NotifyLoungeTvParameters data)
    {
        _haContext.CallService("notify", "lounge_tv", null, data);
    }

    ///<summary>Sends a notification message using the lounge_tv service.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void LoungeTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "lounge_tv", null, new NotifyLoungeTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the master_tv service.</summary>
    public void MasterTv(NotifyMasterTvParameters data)
    {
        _haContext.CallService("notify", "master_tv", null, data);
    }

    ///<summary>Sends a notification message using the master_tv service.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MasterTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "master_tv", null, new NotifyMasterTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_eugene_s_iphone integration.</summary>
    public void MobileAppEugeneSIphone(NotifyMobileAppEugeneSIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_eugene_s_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_eugene_s_iphone integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppEugeneSIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_eugene_s_iphone", null, new NotifyMobileAppEugeneSIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_hailey_s_iphone integration.</summary>
    public void MobileAppHaileySIphone(NotifyMobileAppHaileySIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_hailey_s_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_hailey_s_iphone integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppHaileySIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_hailey_s_iphone", null, new NotifyMobileAppHaileySIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_haileys_macbook_air integration.</summary>
    public void MobileAppHaileysMacbookAir(NotifyMobileAppHaileysMacbookAirParameters data)
    {
        _haContext.CallService("notify", "mobile_app_haileys_macbook_air", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_haileys_macbook_air integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppHaileysMacbookAir(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_haileys_macbook_air", null, new NotifyMobileAppHaileysMacbookAirParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_iphone integration.</summary>
    public void MobileAppIphone(NotifyMobileAppIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_iphone integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_iphone", null, new NotifyMobileAppIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_iphone8p integration.</summary>
    public void MobileAppIphone8p(NotifyMobileAppIphone8pParameters data)
    {
        _haContext.CallService("notify", "mobile_app_iphone8p", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_iphone8p integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppIphone8p(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_iphone8p", null, new NotifyMobileAppIphone8pParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_jayden_s_ipad integration.</summary>
    public void MobileAppJaydenSIpad(NotifyMobileAppJaydenSIpadParameters data)
    {
        _haContext.CallService("notify", "mobile_app_jayden_s_ipad", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_jayden_s_ipad integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppJaydenSIpad(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_jayden_s_ipad", null, new NotifyMobileAppJaydenSIpadParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_jayden_s_iphone integration.</summary>
    public void MobileAppJaydenSIphone(NotifyMobileAppJaydenSIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_jayden_s_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_jayden_s_iphone integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppJaydenSIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_jayden_s_iphone", null, new NotifyMobileAppJaydenSIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_ml_nx07kg671n integration.</summary>
    public void MobileAppMlNx07kg671n(NotifyMobileAppMlNx07kg671nParameters data)
    {
        _haContext.CallService("notify", "mobile_app_ml_nx07kg671n", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_ml_nx07kg671n integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppMlNx07kg671n(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_ml_nx07kg671n", null, new NotifyMobileAppMlNx07kg671nParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the front-end.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the front-end.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    public void PersistentNotification(string message, string? title = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title });
    }

    ///<summary>Sends a notification message using the twinstead service.</summary>
    public void Twinstead(NotifyTwinsteadParameters data)
    {
        _haContext.CallService("notify", "twinstead", null, data);
    }

    ///<summary>Sends a notification message using the twinstead service.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void Twinstead(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "twinstead", null, new NotifyTwinsteadParameters { Message = message, Title = title, Target = target, Data = data });
    }
}

public partial record NotifyAlexaMediaParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaAaronParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaBoseQc35IiParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDiningParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDownstairsParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEugeneS2ndEchoDotParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEugeneS5thEchoDotParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEugeneSFireParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEugeneSLgOledWebos2021TvParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEugeneSSonosArcParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEverywhere2Parameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaJaydenParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaKitchenParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLastCalledParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLoungeSonosParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMasterParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMasterTvAlexaParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaOfficeParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaPlayroomParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaThisDeviceParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaThisDevice3Parameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaUpstairsParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyEugeneParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyHaileyParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyLoungeTvParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMasterTvParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppEugeneSIphoneParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppHaileySIphoneParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppHaileysMacbookAirParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppIphoneParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppIphone8pParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppJaydenSIpadParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppJaydenSIphoneParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppMlNx07kg671nParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial record NotifyTwinsteadParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value the entity should be set to. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value the entity should be set to. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class OctopusEnergyServices
{
    private readonly IHaContext _haContext;
    public OctopusEnergyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateTargetConfig(ServiceTarget target, OctopusEnergyUpdateTargetConfigParameters data)
    {
        _haContext.CallService("octopus_energy", "update_target_config", target, data);
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="targetHours">The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</param>
    ///<param name="targetStartTime">The optional time the evaluation period should start. eg: 06:00</param>
    ///<param name="targetEndTime">The optional time the evaluation period should end. eg: 19:00</param>
    ///<param name="targetOffset">The optional offset to apply to the target rate when it starts</param>
    public void UpdateTargetConfig(ServiceTarget target, string? targetHours = null, string? targetStartTime = null, string? targetEndTime = null, string? targetOffset = null)
    {
        _haContext.CallService("octopus_energy", "update_target_config", target, new OctopusEnergyUpdateTargetConfigParameters { TargetHours = targetHours, TargetStartTime = targetStartTime, TargetEndTime = targetEndTime, TargetOffset = targetOffset });
    }
}

public partial record OctopusEnergyUpdateTargetConfigParameters
{
    ///<summary>The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</summary>
    [JsonPropertyName("target_hours")]
    public string? TargetHours { get; init; }

    ///<summary>The optional time the evaluation period should start. eg: 06:00</summary>
    [JsonPropertyName("target_start_time")]
    public string? TargetStartTime { get; init; }

    ///<summary>The optional time the evaluation period should end. eg: 19:00</summary>
    [JsonPropertyName("target_end_time")]
    public string? TargetEndTime { get; init; }

    ///<summary>The optional offset to apply to the target rate when it starts</summary>
    [JsonPropertyName("target_offset")]
    public string? TargetOffset { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Show a notification in the frontend.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Show a notification in the frontend.</summary>
    ///<param name="message">Message body of the notification. [Templates accepted] eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title for your notification. [Templates accepted] eg: Test notification</param>
    ///<param name="notificationId">Target ID of the notification, will replace a notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Remove a notification from the frontend.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Remove a notification from the frontend.</summary>
    ///<param name="notificationId">Target ID of the notification, which should be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. [Templates accepted] eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title for your notification. [Templates accepted] eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Target ID of the notification, will replace a notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>Target ID of the notification, which should be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the person configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class PiHoleServices
{
    private readonly IHaContext _haContext;
    public PiHoleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    ///<param name="target">The target for this service call</param>
    public void Disable(ServiceTarget target, PiHoleDisableParameters data)
    {
        _haContext.CallService("pi_hole", "disable", target, data);
    }

    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for eg: 00:00:15</param>
    public void Disable(ServiceTarget target, string duration)
    {
        _haContext.CallService("pi_hole", "disable", target, new PiHoleDisableParameters { Duration = duration });
    }
}

public partial record PiHoleDisableParameters
{
    ///<summary>Time that the Pi-hole should be disabled for eg: 00:00:15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class PingServices
{
    private readonly IHaContext _haContext;
    public PingServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload all ping entities.</summary>
    public void Reload()
    {
        _haContext.CallService("ping", "reload", null);
    }
}

public partial class PowercalcServices
{
    private readonly IHaContext _haContext;
    public PowercalcServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activate playbook</summary>
    ///<param name="target">The target for this service call</param>
    public void ActivatePlaybook(ServiceTarget target, PowercalcActivatePlaybookParameters data)
    {
        _haContext.CallService("powercalc", "activate_playbook", target, data);
    }

    ///<summary>Activate playbook</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="playbookId">Playbook identifier eg: program1</param>
    public void ActivatePlaybook(ServiceTarget target, string playbookId)
    {
        _haContext.CallService("powercalc", "activate_playbook", target, new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The target for this service call</param>
    public void CalibrateEnergy(ServiceTarget target, PowercalcCalibrateEnergyParameters data)
    {
        _haContext.CallService("powercalc", "calibrate_energy", target, data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public void CalibrateEnergy(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "calibrate_energy", target, new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    public void CalibrateUtilityMeter(ServiceTarget target, PowercalcCalibrateUtilityMeterParameters data)
    {
        _haContext.CallService("powercalc", "calibrate_utility_meter", target, data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public void CalibrateUtilityMeter(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "calibrate_utility_meter", target, new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Increases the sensor with a given amount</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseDailyEnergy(ServiceTarget target, PowercalcIncreaseDailyEnergyParameters data)
    {
        _haContext.CallService("powercalc", "increase_daily_energy", target, data);
    }

    ///<summary>Increases the sensor with a given amount</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Amount to add to the sensor eg: 100</param>
    public void IncreaseDailyEnergy(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "increase_daily_energy", target, new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Reset an energy sensor to zero kWh</summary>
    ///<param name="target">The target for this service call</param>
    public void ResetEnergy(ServiceTarget target)
    {
        _haContext.CallService("powercalc", "reset_energy", target);
    }

    ///<summary>Stop active playbook</summary>
    ///<param name="target">The target for this service call</param>
    public void StopPlaybook(ServiceTarget target)
    {
        _haContext.CallService("powercalc", "stop_playbook", target);
    }
}

public partial record PowercalcActivatePlaybookParameters
{
    ///<summary>Playbook identifier eg: program1</summary>
    [JsonPropertyName("playbook_id")]
    public string? PlaybookId { get; init; }
}

public partial record PowercalcCalibrateEnergyParameters
{
    ///<summary>Value to which set the meter eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcCalibrateUtilityMeterParameters
{
    ///<summary>Value to which set the meter eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcIncreaseDailyEnergyParameters
{
    ///<summary>Amount to add to the sensor eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stop the recording of events and state changes</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Start the recording of events and state changes</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Start purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Start purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of history days to keep in database after purge.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply entity_id and event_type filter in addition to time based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Start purge task to remove specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    public void PurgeEntities(ServiceTarget target, RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", target, data);
    }

    ///<summary>Start purge task to remove specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="domains">List the domains that need to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List the glob patterns to select entities for removal from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of history days to keep in database of matching rows. The default of 0 days will remove all matching rows.</param>
    public void PurgeEntities(ServiceTarget target, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", target, new RecorderPurgeEntitiesParameters { Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of history days to keep in database after purge.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply entity_id and event_type filter in addition to time based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List the domains that need to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List the glob patterns to select entities for removal from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of history days to keep in database of matching rows. The default of 0 days will remove all matching rows.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Name of the device from which commands will be deleted. eg: television</param>
    ///<param name="command">A single command or a list of commands to delete. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as alternative (useful for discrete remotes).</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the command(s).</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("remote", "toggle", target);
    }

    ///<summary>Sends the Power Off Command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("remote", "turn_off", target);
    }

    ///<summary>Sends the Power On Command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the Power On Command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="activity">Activity ID or Activity Name to start. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Name of the device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to delete. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as alternative (useful for discrete remotes).</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the command(s).</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or Activity Name to start. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class RingServices
{
    private readonly IHaContext _haContext;
    public RingServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Updates the data we have for all your ring devices</summary>
    public void Update()
    {
        _haContext.CallService("ring", "update", null);
    }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activate a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activate a scene with configuration.</summary>
    ///<param name="entities">The entities and the state that they need to be. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity_id of the new scene. eg: all_lights</param>
    ///<param name="entities">The entities to control with the scene. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">The entities of which a snapshot is to be taken eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, object? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Reload the scene configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>The entities and the state that they need to be. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity_id of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>The entities to control with the scene. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>The entities of which a snapshot is to be taken eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public object? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the schedule configuration</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class SchedulerServices
{
    private readonly IHaContext _haContext;
    public SchedulerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a new schedule entity</summary>
    public void Add(SchedulerAddParameters data)
    {
        _haContext.CallService("scheduler", "add", null, data);
    }

    ///<summary>Create a new schedule entity</summary>
    ///<param name="weekdays">Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</param>
    ///<param name="startDate">Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</param>
    ///<param name="endDate">Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</param>
    ///<param name="timeslots">list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</param>
    ///<param name="repeatType">Control what happens after the schedule is triggered eg: &quot;repeat&quot;</param>
    ///<param name="name">Friendly name for the schedule eg: My schedule</param>
    public void Add(object timeslots, object repeatType, object? weekdays = null, object? startDate = null, object? endDate = null, string? name = null)
    {
        _haContext.CallService("scheduler", "add", null, new SchedulerAddParameters { Weekdays = weekdays, StartDate = startDate, EndDate = endDate, Timeslots = timeslots, RepeatType = repeatType, Name = name });
    }

    ///<summary>Duplicate a schedule entity</summary>
    public void Copy(SchedulerCopyParameters data)
    {
        _haContext.CallService("scheduler", "copy", null, data);
    }

    ///<summary>Duplicate a schedule entity</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    ///<param name="name">Friendly name for the copied schedule eg: My schedule</param>
    public void Copy(string entityId, string? name = null)
    {
        _haContext.CallService("scheduler", "copy", null, new SchedulerCopyParameters { EntityId = entityId, Name = name });
    }

    ///<summary>Edit a schedule entity</summary>
    public void Edit(SchedulerEditParameters data)
    {
        _haContext.CallService("scheduler", "edit", null, data);
    }

    ///<summary>Edit a schedule entity</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    ///<param name="weekdays">Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</param>
    ///<param name="startDate">Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</param>
    ///<param name="endDate">Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</param>
    ///<param name="timeslots">list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</param>
    ///<param name="repeatType">Control what happens after the schedule is triggered eg: &quot;repeat&quot;</param>
    ///<param name="name">Friendly name for the schedule eg: My schedule</param>
    public void Edit(string entityId, object? weekdays = null, object? startDate = null, object? endDate = null, object? timeslots = null, object? repeatType = null, string? name = null)
    {
        _haContext.CallService("scheduler", "edit", null, new SchedulerEditParameters { EntityId = entityId, Weekdays = weekdays, StartDate = startDate, EndDate = endDate, Timeslots = timeslots, RepeatType = repeatType, Name = name });
    }

    ///<summary>Remove a schedule entity</summary>
    public void Remove(SchedulerRemoveParameters data)
    {
        _haContext.CallService("scheduler", "remove", null, data);
    }

    ///<summary>Remove a schedule entity</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    public void Remove(string entityId)
    {
        _haContext.CallService("scheduler", "remove", null, new SchedulerRemoveParameters { EntityId = entityId });
    }

    ///<summary>Execute the action of a schedule, optionally at a given time.</summary>
    public void RunAction(SchedulerRunActionParameters data)
    {
        _haContext.CallService("scheduler", "run_action", null, data);
    }

    ///<summary>Execute the action of a schedule, optionally at a given time.</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    ///<param name="time">Time for which to evaluate the action (only useful for schedules with multiple timeslot) eg: &quot;12:00&quot;</param>
    public void RunAction(string entityId, DateTime? time = null)
    {
        _haContext.CallService("scheduler", "run_action", null, new SchedulerRunActionParameters { EntityId = entityId, Time = time });
    }
}

public partial record SchedulerAddParameters
{
    ///<summary>Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</summary>
    [JsonPropertyName("weekdays")]
    public object? Weekdays { get; init; }

    ///<summary>Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</summary>
    [JsonPropertyName("timeslots")]
    public object? Timeslots { get; init; }

    ///<summary>Control what happens after the schedule is triggered eg: &quot;repeat&quot;</summary>
    [JsonPropertyName("repeat_type")]
    public object? RepeatType { get; init; }

    ///<summary>Friendly name for the schedule eg: My schedule</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record SchedulerCopyParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Friendly name for the copied schedule eg: My schedule</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record SchedulerEditParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</summary>
    [JsonPropertyName("weekdays")]
    public object? Weekdays { get; init; }

    ///<summary>Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</summary>
    [JsonPropertyName("timeslots")]
    public object? Timeslots { get; init; }

    ///<summary>Control what happens after the schedule is triggered eg: &quot;repeat&quot;</summary>
    [JsonPropertyName("repeat_type")]
    public object? RepeatType { get; init; }

    ///<summary>Friendly name for the schedule eg: My schedule</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record SchedulerRemoveParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record SchedulerRunActionParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Time for which to evaluate the action (only useful for schedules with multiple timeslot) eg: &quot;12:00&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates an actionable notification on a specific echo device</summary>
    public void ActivateAlexaActionableNotification(ScriptActivateAlexaActionableNotificationParameters data)
    {
        _haContext.CallService("script", "activate_alexa_actionable_notification", null, data);
    }

    ///<summary>Activates an actionable notification on a specific echo device</summary>
    ///<param name="text">The text you would like alexa to speak. eg: What would you like the thermostat set to?</param>
    ///<param name="eventId">Correlation ID for event responses eg: ask_for_temperature</param>
    ///<param name="alexaDevice">Alexa device you want to trigger eg: media_player.bedroom_echo</param>
    public void ActivateAlexaActionableNotification(object? text = null, object? eventId = null, object? alexaDevice = null)
    {
        _haContext.CallService("script", "activate_alexa_actionable_notification", null, new ScriptActivateAlexaActionableNotificationParameters { Text = text, EventId = eventId, AlexaDevice = alexaDevice });
    }

    public void ArriveHome()
    {
        _haContext.CallService("script", "arrive_home", null);
    }

    public void ImText()
    {
        _haContext.CallService("script", "im_text", null);
    }

    public void PlayYoutubeOnLg()
    {
        _haContext.CallService("script", "play_youtube_on_lg", null);
    }

    ///<summary>Reload all the available scripts</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    public void RingMqttInterval()
    {
        _haContext.CallService("script", "ring_mqtt_interval", null);
    }

    ///<summary>Toggle script</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    public void Tts()
    {
        _haContext.CallService("script", "tts", null);
    }

    public void TtsText()
    {
        _haContext.CallService("script", "tts_text", null);
    }

    ///<summary>Turn off script</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Turn on script</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }

    public void TurnOnLgTeleLounge()
    {
        _haContext.CallService("script", "turn_on_lg_tele_lounge", null);
    }

    public void TurnOnLgTeleMaster()
    {
        _haContext.CallService("script", "turn_on_lg_tele_master", null);
    }

    public void Weather()
    {
        _haContext.CallService("script", "weather", null);
    }
}

public partial record ScriptActivateAlexaActionableNotificationParameters
{
    ///<summary>The text you would like alexa to speak. eg: What would you like the thermostat set to?</summary>
    [JsonPropertyName("text")]
    public object? Text { get; init; }

    ///<summary>Correlation ID for event responses eg: ask_for_temperature</summary>
    [JsonPropertyName("event_id")]
    public object? EventId { get; init; }

    ///<summary>Alexa device you want to trigger eg: media_player.bedroom_echo</summary>
    [JsonPropertyName("alexa_device")]
    public object? AlexaDevice { get; init; }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Select the first option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Select the last option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a siren.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("siren", "toggle", target);
    }

    ///<summary>Turn siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("siren", "turn_off", target);
    }

    ///<summary>Turn siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turn siren on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tone">The tone to emit when turning the siren on. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume level of the noise to emit when turning the siren on. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">The duration in seconds of the noise to emit when turning the siren on. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit when turning the siren on. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume level of the noise to emit when turning the siren on. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>The duration in seconds of the noise to emit when turning the siren on. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SonosServices
{
    private readonly IHaContext _haContext;
    public SonosServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clear a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSleepTimer(ServiceTarget target)
    {
        _haContext.CallService("sonos", "clear_sleep_timer", target);
    }

    ///<summary>Start playing the queue from the first item.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayQueue(ServiceTarget target, SonosPlayQueueParameters data)
    {
        _haContext.CallService("sonos", "play_queue", target, data);
    }

    ///<summary>Start playing the queue from the first item.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="queuePosition">Position of the song in the queue to start playing from.</param>
    public void PlayQueue(ServiceTarget target, long? queuePosition = null)
    {
        _haContext.CallService("sonos", "play_queue", target, new SonosPlayQueueParameters { QueuePosition = queuePosition });
    }

    ///<summary>Removes an item from the queue.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveFromQueue(ServiceTarget target, SonosRemoveFromQueueParameters data)
    {
        _haContext.CallService("sonos", "remove_from_queue", target, data);
    }

    ///<summary>Removes an item from the queue.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="queuePosition">Position in the queue to remove.</param>
    public void RemoveFromQueue(ServiceTarget target, long? queuePosition = null)
    {
        _haContext.CallService("sonos", "remove_from_queue", target, new SonosRemoveFromQueueParameters { QueuePosition = queuePosition });
    }

    ///<summary>Restore a snapshot of the media player.</summary>
    public void Restore(SonosRestoreParameters data)
    {
        _haContext.CallService("sonos", "restore", null, data);
    }

    ///<summary>Restore a snapshot of the media player.</summary>
    ///<param name="entityId">Name of entity that will be restored.</param>
    ///<param name="withGroup">True or False. Also restore the group layout.</param>
    public void Restore(string? entityId = null, bool? withGroup = null)
    {
        _haContext.CallService("sonos", "restore", null, new SonosRestoreParameters { EntityId = entityId, WithGroup = withGroup });
    }

    ///<summary>Set a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSleepTimer(ServiceTarget target, SonosSetSleepTimerParameters data)
    {
        _haContext.CallService("sonos", "set_sleep_timer", target, data);
    }

    ///<summary>Set a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="sleepTime">Number of seconds to set the timer.</param>
    public void SetSleepTimer(ServiceTarget target, long? sleepTime = null)
    {
        _haContext.CallService("sonos", "set_sleep_timer", target, new SonosSetSleepTimerParameters { SleepTime = sleepTime });
    }

    ///<summary>Take a snapshot of the media player.</summary>
    public void Snapshot(SonosSnapshotParameters data)
    {
        _haContext.CallService("sonos", "snapshot", null, data);
    }

    ///<summary>Take a snapshot of the media player.</summary>
    ///<param name="entityId">Name of entity that will be snapshot.</param>
    ///<param name="withGroup">True or False. Also snapshot the group layout.</param>
    public void Snapshot(string? entityId = null, bool? withGroup = null)
    {
        _haContext.CallService("sonos", "snapshot", null, new SonosSnapshotParameters { EntityId = entityId, WithGroup = withGroup });
    }

    ///<summary>Updates an alarm with new time and volume settings.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateAlarm(ServiceTarget target, SonosUpdateAlarmParameters data)
    {
        _haContext.CallService("sonos", "update_alarm", target, data);
    }

    ///<summary>Updates an alarm with new time and volume settings.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="alarmId">ID for the alarm to be updated.</param>
    ///<param name="time">Set time for the alarm. eg: 07:00</param>
    ///<param name="volume">Set alarm volume level.</param>
    ///<param name="enabled">Enable or disable the alarm.</param>
    ///<param name="includeLinkedZones">Enable or disable including grouped rooms.</param>
    public void UpdateAlarm(ServiceTarget target, long alarmId, DateTime? time = null, double? volume = null, bool? enabled = null, bool? includeLinkedZones = null)
    {
        _haContext.CallService("sonos", "update_alarm", target, new SonosUpdateAlarmParameters { AlarmId = alarmId, Time = time, Volume = volume, Enabled = enabled, IncludeLinkedZones = includeLinkedZones });
    }
}

public partial record SonosPlayQueueParameters
{
    ///<summary>Position of the song in the queue to start playing from.</summary>
    [JsonPropertyName("queue_position")]
    public long? QueuePosition { get; init; }
}

public partial record SonosRemoveFromQueueParameters
{
    ///<summary>Position in the queue to remove.</summary>
    [JsonPropertyName("queue_position")]
    public long? QueuePosition { get; init; }
}

public partial record SonosRestoreParameters
{
    ///<summary>Name of entity that will be restored.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>True or False. Also restore the group layout.</summary>
    [JsonPropertyName("with_group")]
    public bool? WithGroup { get; init; }
}

public partial record SonosSetSleepTimerParameters
{
    ///<summary>Number of seconds to set the timer.</summary>
    [JsonPropertyName("sleep_time")]
    public long? SleepTime { get; init; }
}

public partial record SonosSnapshotParameters
{
    ///<summary>Name of entity that will be snapshot.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>True or False. Also snapshot the group layout.</summary>
    [JsonPropertyName("with_group")]
    public bool? WithGroup { get; init; }
}

public partial record SonosUpdateAlarmParameters
{
    ///<summary>ID for the alarm to be updated.</summary>
    [JsonPropertyName("alarm_id")]
    public long? AlarmId { get; init; }

    ///<summary>Set time for the alarm. eg: 07:00</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>Set alarm volume level.</summary>
    [JsonPropertyName("volume")]
    public double? Volume { get; init; }

    ///<summary>Enable or disable the alarm.</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }

    ///<summary>Enable or disable including grouped rooms.</summary>
    [JsonPropertyName("include_linked_zones")]
    public bool? IncludeLinkedZones { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch state</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turn a switch off</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turn a switch on</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clear all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to &apos;system_log.external&apos;. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to &apos;system_log.external&apos;. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TelegramServices
{
    private readonly IHaContext _haContext;
    public TelegramServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload telegram notify services.</summary>
    public void Reload()
    {
        _haContext.CallService("telegram", "reload", null);
    }
}

public partial class TelegramBotServices
{
    private readonly IHaContext _haContext;
    public TelegramBotServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Respond to a callback query originated by clicking on an online keyboard button. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.</summary>
    public void AnswerCallbackQuery(TelegramBotAnswerCallbackQueryParameters data)
    {
        _haContext.CallService("telegram_bot", "answer_callback_query", null, data);
    }

    ///<summary>Respond to a callback query originated by clicking on an online keyboard button. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.</summary>
    ///<param name="message">Unformatted text message body of the notification. eg: OK, I&apos;m listening</param>
    ///<param name="callbackQueryId">Unique id of the callback response. eg: {{ trigger.event.data.id }}</param>
    ///<param name="showAlert">Show a permanent notification.</param>
    ///<param name="timeout">Timeout for sending the answer. Will help with timeout errors (poor internet connection, etc)</param>
    public void AnswerCallbackQuery(string message, string callbackQueryId, bool showAlert, long? timeout = null)
    {
        _haContext.CallService("telegram_bot", "answer_callback_query", null, new TelegramBotAnswerCallbackQueryParameters { Message = message, CallbackQueryId = callbackQueryId, ShowAlert = showAlert, Timeout = timeout });
    }

    ///<summary>Delete a previously sent message.</summary>
    public void DeleteMessage(TelegramBotDeleteMessageParameters data)
    {
        _haContext.CallService("telegram_bot", "delete_message", null, data);
    }

    ///<summary>Delete a previously sent message.</summary>
    ///<param name="messageId">id of the message to delete. eg: {{ trigger.event.data.message.message_id }}</param>
    ///<param name="chatId">The chat_id where to delete the message. eg: 12345</param>
    public void DeleteMessage(string messageId, string chatId)
    {
        _haContext.CallService("telegram_bot", "delete_message", null, new TelegramBotDeleteMessageParameters { MessageId = messageId, ChatId = chatId });
    }

    ///<summary>Edit the caption of a previously sent message.</summary>
    public void EditCaption(TelegramBotEditCaptionParameters data)
    {
        _haContext.CallService("telegram_bot", "edit_caption", null, data);
    }

    ///<summary>Edit the caption of a previously sent message.</summary>
    ///<param name="messageId">id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</param>
    ///<param name="chatId">The chat_id where to edit the caption. eg: 12345</param>
    ///<param name="caption">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    public void EditCaption(string messageId, string chatId, string caption, object? inlineKeyboard = null)
    {
        _haContext.CallService("telegram_bot", "edit_caption", null, new TelegramBotEditCaptionParameters { MessageId = messageId, ChatId = chatId, Caption = caption, InlineKeyboard = inlineKeyboard });
    }

    ///<summary>Edit a previously sent message.</summary>
    public void EditMessage(TelegramBotEditMessageParameters data)
    {
        _haContext.CallService("telegram_bot", "edit_message", null, data);
    }

    ///<summary>Edit a previously sent message.</summary>
    ///<param name="messageId">id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</param>
    ///<param name="chatId">The chat_id where to edit the message. eg: 12345</param>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Optional title for your notification. Will be composed as &apos;%title\n%message&apos; eg: Your Garage Door Friend</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableWebPagePreview">Disables link previews for links in the message.</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    public void EditMessage(string messageId, string chatId, string? message = null, string? title = null, object? parseMode = null, bool? disableWebPagePreview = null, object? inlineKeyboard = null)
    {
        _haContext.CallService("telegram_bot", "edit_message", null, new TelegramBotEditMessageParameters { MessageId = messageId, ChatId = chatId, Message = message, Title = title, ParseMode = parseMode, DisableWebPagePreview = disableWebPagePreview, InlineKeyboard = inlineKeyboard });
    }

    ///<summary>Edit the inline keyboard of a previously sent message.</summary>
    public void EditReplymarkup(TelegramBotEditReplymarkupParameters data)
    {
        _haContext.CallService("telegram_bot", "edit_replymarkup", null, data);
    }

    ///<summary>Edit the inline keyboard of a previously sent message.</summary>
    ///<param name="messageId">id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</param>
    ///<param name="chatId">The chat_id where to edit the reply_markup. eg: 12345</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    public void EditReplymarkup(string messageId, string chatId, object inlineKeyboard)
    {
        _haContext.CallService("telegram_bot", "edit_replymarkup", null, new TelegramBotEditReplymarkupParameters { MessageId = messageId, ChatId = chatId, InlineKeyboard = inlineKeyboard });
    }

    public void LeaveChat()
    {
        _haContext.CallService("telegram_bot", "leave_chat", null);
    }

    ///<summary>Send an anmiation.</summary>
    public void SendAnimation(TelegramBotSendAnimationParameters data)
    {
        _haContext.CallService("telegram_bot", "send_animation", null, data);
    }

    ///<summary>Send an anmiation.</summary>
    ///<param name="url">Remote path to a GIF or H.264/MPEG-4 AVC video without sound. eg: http://example.org/path/to/the/animation.gif</param>
    ///<param name="file">Local path to a GIF or H.264/MPEG-4 AVC video without sound. eg: /path/to/the/animation.gif</param>
    ///<param name="caption">The title of the animation. eg: My animation</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Timeout for send sticker. Will help with timeout errors (poor internet connection, etc)</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    public void SendAnimation(string? url = null, string? @file = null, string? caption = null, string? username = null, string? password = null, object? authentication = null, object? target = null, object? parseMode = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null)
    {
        _haContext.CallService("telegram_bot", "send_animation", null, new TelegramBotSendAnimationParameters { Url = url, File = @file, Caption = caption, Username = username, Password = password, Authentication = authentication, Target = target, ParseMode = parseMode, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard });
    }

    ///<summary>Send a document.</summary>
    public void SendDocument(TelegramBotSendDocumentParameters data)
    {
        _haContext.CallService("telegram_bot", "send_document", null, data);
    }

    ///<summary>Send a document.</summary>
    ///<param name="url">Remote path to a document. eg: http://example.org/path/to/the/document.odf</param>
    ///<param name="file">Local path to a document. eg: /tmp/whatever.odf</param>
    ///<param name="caption">The title of the document. eg: Document Title xy</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Timeout for send document. Will help with timeout errors (poor internet connection, etc)</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</param>
    public void SendDocument(string? url = null, string? @file = null, string? caption = null, string? username = null, string? password = null, object? authentication = null, object? target = null, object? parseMode = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null)
    {
        _haContext.CallService("telegram_bot", "send_document", null, new TelegramBotSendDocumentParameters { Url = url, File = @file, Caption = caption, Username = username, Password = password, Authentication = authentication, Target = target, ParseMode = parseMode, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag });
    }

    ///<summary>Send a location.</summary>
    public void SendLocation(TelegramBotSendLocationParameters data)
    {
        _haContext.CallService("telegram_bot", "send_location", null, data);
    }

    ///<summary>Send a location.</summary>
    ///<param name="latitude">The latitude to send.</param>
    ///<param name="longitude">The longitude to send.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="timeout">Timeout for send photo. Will help with timeout errors (poor internet connection, etc)</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</param>
    public void SendLocation(double latitude, double longitude, object? target = null, bool? disableNotification = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null)
    {
        _haContext.CallService("telegram_bot", "send_location", null, new TelegramBotSendLocationParameters { Latitude = latitude, Longitude = longitude, Target = target, DisableNotification = disableNotification, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag });
    }

    ///<summary>Send a notification.</summary>
    public void SendMessage(TelegramBotSendMessageParameters data)
    {
        _haContext.CallService("telegram_bot", "send_message", null, data);
    }

    ///<summary>Send a notification.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Optional title for your notification. Will be composed as &apos;%title\n%message&apos; eg: Your Garage Door Friend</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the notification to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="disableWebPagePreview">Disables link previews for links in the message.</param>
    ///<param name="timeout">Timeout for send message. Will help with timeout errors (poor internet connection, etc)s</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. Empty list clears a previously set keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [&quot;Text button1:/button1, Text button2:/button2&quot;, &quot;Text button3:/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</param>
    public void SendMessage(string message, string? title = null, object? target = null, object? parseMode = null, bool? disableNotification = null, bool? disableWebPagePreview = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null)
    {
        _haContext.CallService("telegram_bot", "send_message", null, new TelegramBotSendMessageParameters { Message = message, Title = title, Target = target, ParseMode = parseMode, DisableNotification = disableNotification, DisableWebPagePreview = disableWebPagePreview, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag });
    }

    ///<summary>Send a photo.</summary>
    public void SendPhoto(TelegramBotSendPhotoParameters data)
    {
        _haContext.CallService("telegram_bot", "send_photo", null, data);
    }

    ///<summary>Send a photo.</summary>
    ///<param name="url">Remote path to an image. eg: http://example.org/path/to/the/image.png</param>
    ///<param name="file">Local path to an image. eg: /path/to/the/image.png</param>
    ///<param name="caption">The title of the image. eg: My image</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Timeout for send photo. Will help with timeout errors (poor internet connection, etc)</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</param>
    public void SendPhoto(string? url = null, string? @file = null, string? caption = null, string? username = null, string? password = null, object? authentication = null, object? target = null, object? parseMode = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null)
    {
        _haContext.CallService("telegram_bot", "send_photo", null, new TelegramBotSendPhotoParameters { Url = url, File = @file, Caption = caption, Username = username, Password = password, Authentication = authentication, Target = target, ParseMode = parseMode, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag });
    }

    ///<summary>Send a poll.</summary>
    public void SendPoll(TelegramBotSendPollParameters data)
    {
        _haContext.CallService("telegram_bot", "send_poll", null, data);
    }

    ///<summary>Send a poll.</summary>
    ///<param name="target">An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="question">Poll question, 1-300 characters</param>
    ///<param name="options">List of answer options, 2-10 strings 1-100 characters each</param>
    ///<param name="isAnonymous">If the poll needs to be anonymous, defaults to True</param>
    ///<param name="allowsMultipleAnswers">If the poll allows multiple answers, defaults to False</param>
    ///<param name="openPeriod">Amount of time in seconds the poll will be active after creation, 5-600.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="timeout">Timeout for send poll. Will help with timeout errors (poor internet connection, etc)</param>
    public void SendPoll(string question, object options, object? target = null, bool? isAnonymous = null, bool? allowsMultipleAnswers = null, long? openPeriod = null, bool? disableNotification = null, long? timeout = null)
    {
        _haContext.CallService("telegram_bot", "send_poll", null, new TelegramBotSendPollParameters { Target = target, Question = question, Options = options, IsAnonymous = isAnonymous, AllowsMultipleAnswers = allowsMultipleAnswers, OpenPeriod = openPeriod, DisableNotification = disableNotification, Timeout = timeout });
    }

    ///<summary>Send a sticker.</summary>
    public void SendSticker(TelegramBotSendStickerParameters data)
    {
        _haContext.CallService("telegram_bot", "send_sticker", null, data);
    }

    ///<summary>Send a sticker.</summary>
    ///<param name="url">Remote path to a static .webp or animated .tgs sticker. eg: http://example.org/path/to/the/sticker.webp</param>
    ///<param name="file">Local path to a static .webp or animated .tgs sticker. eg: /path/to/the/sticker.webp</param>
    ///<param name="stickerId">ID of a sticker that exists on telegram servers eg: CAACAgIAAxkBAAEDDldhZD-hqWclr6krLq-FWSfCrGNmOQAC9gAD9HsZAAFeYY-ltPYnrCEE</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Timeout for send sticker. Will help with timeout errors (poor internet connection, etc)</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</param>
    public void SendSticker(string? url = null, string? @file = null, string? stickerId = null, string? username = null, string? password = null, object? authentication = null, object? target = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null)
    {
        _haContext.CallService("telegram_bot", "send_sticker", null, new TelegramBotSendStickerParameters { Url = url, File = @file, StickerId = stickerId, Username = username, Password = password, Authentication = authentication, Target = target, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag });
    }

    ///<summary>Send a video.</summary>
    public void SendVideo(TelegramBotSendVideoParameters data)
    {
        _haContext.CallService("telegram_bot", "send_video", null, data);
    }

    ///<summary>Send a video.</summary>
    ///<param name="url">Remote path to a video. eg: http://example.org/path/to/the/video.mp4</param>
    ///<param name="file">Local path to a video. eg: /path/to/the/video.mp4</param>
    ///<param name="caption">The title of the video. eg: My video</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="parseMode">Parser for the message text.</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Timeout for send video. Will help with timeout errors (poor internet connection, etc)</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</param>
    public void SendVideo(string? url = null, string? @file = null, string? caption = null, string? username = null, string? password = null, object? authentication = null, object? target = null, object? parseMode = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null)
    {
        _haContext.CallService("telegram_bot", "send_video", null, new TelegramBotSendVideoParameters { Url = url, File = @file, Caption = caption, Username = username, Password = password, Authentication = authentication, Target = target, ParseMode = parseMode, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag });
    }

    ///<summary>Send a voice message.</summary>
    public void SendVoice(TelegramBotSendVoiceParameters data)
    {
        _haContext.CallService("telegram_bot", "send_voice", null, data);
    }

    ///<summary>Send a voice message.</summary>
    ///<param name="url">Remote path to a voice message. eg: http://example.org/path/to/the/voice.opus</param>
    ///<param name="file">Local path to a voice message. eg: /path/to/the/voice.opus</param>
    ///<param name="caption">The title of the voice message. eg: My microphone recording</param>
    ///<param name="username">Username for a URL which require HTTP authentication. eg: myuser</param>
    ///<param name="password">Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</param>
    ///<param name="authentication">Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</param>
    ///<param name="target">An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</param>
    ///<param name="disableNotification">Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</param>
    ///<param name="verifySsl">Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</param>
    ///<param name="timeout">Timeout for send voice. Will help with timeout errors (poor internet connection, etc)</param>
    ///<param name="keyboard">List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</param>
    ///<param name="inlineKeyboard">List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</param>
    ///<param name="messageTag">Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</param>
    public void SendVoice(string? url = null, string? @file = null, string? caption = null, string? username = null, string? password = null, object? authentication = null, object? target = null, bool? disableNotification = null, bool? verifySsl = null, long? timeout = null, object? keyboard = null, object? inlineKeyboard = null, string? messageTag = null)
    {
        _haContext.CallService("telegram_bot", "send_voice", null, new TelegramBotSendVoiceParameters { Url = url, File = @file, Caption = caption, Username = username, Password = password, Authentication = authentication, Target = target, DisableNotification = disableNotification, VerifySsl = verifySsl, Timeout = timeout, Keyboard = keyboard, InlineKeyboard = inlineKeyboard, MessageTag = messageTag });
    }
}

public partial record TelegramBotAnswerCallbackQueryParameters
{
    ///<summary>Unformatted text message body of the notification. eg: OK, I&apos;m listening</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Unique id of the callback response. eg: {{ trigger.event.data.id }}</summary>
    [JsonPropertyName("callback_query_id")]
    public string? CallbackQueryId { get; init; }

    ///<summary>Show a permanent notification.</summary>
    [JsonPropertyName("show_alert")]
    public bool? ShowAlert { get; init; }

    ///<summary>Timeout for sending the answer. Will help with timeout errors (poor internet connection, etc)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record TelegramBotDeleteMessageParameters
{
    ///<summary>id of the message to delete. eg: {{ trigger.event.data.message.message_id }}</summary>
    [JsonPropertyName("message_id")]
    public string? MessageId { get; init; }

    ///<summary>The chat_id where to delete the message. eg: 12345</summary>
    [JsonPropertyName("chat_id")]
    public string? ChatId { get; init; }
}

public partial record TelegramBotEditCaptionParameters
{
    ///<summary>id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</summary>
    [JsonPropertyName("message_id")]
    public string? MessageId { get; init; }

    ///<summary>The chat_id where to edit the caption. eg: 12345</summary>
    [JsonPropertyName("chat_id")]
    public string? ChatId { get; init; }

    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }
}

public partial record TelegramBotEditMessageParameters
{
    ///<summary>id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</summary>
    [JsonPropertyName("message_id")]
    public string? MessageId { get; init; }

    ///<summary>The chat_id where to edit the message. eg: 12345</summary>
    [JsonPropertyName("chat_id")]
    public string? ChatId { get; init; }

    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title for your notification. Will be composed as &apos;%title\n%message&apos; eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Disables link previews for links in the message.</summary>
    [JsonPropertyName("disable_web_page_preview")]
    public bool? DisableWebPagePreview { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }
}

public partial record TelegramBotEditReplymarkupParameters
{
    ///<summary>id of the message to edit. eg: {{ trigger.event.data.message.message_id }}</summary>
    [JsonPropertyName("message_id")]
    public string? MessageId { get; init; }

    ///<summary>The chat_id where to edit the reply_markup. eg: 12345</summary>
    [JsonPropertyName("chat_id")]
    public string? ChatId { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }
}

public partial record TelegramBotSendAnimationParameters
{
    ///<summary>Remote path to a GIF or H.264/MPEG-4 AVC video without sound. eg: http://example.org/path/to/the/animation.gif</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to a GIF or H.264/MPEG-4 AVC video without sound. eg: /path/to/the/animation.gif</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>The title of the animation. eg: My animation</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Timeout for send sticker. Will help with timeout errors (poor internet connection, etc)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }
}

public partial record TelegramBotSendDocumentParameters
{
    ///<summary>Remote path to a document. eg: http://example.org/path/to/the/document.odf</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to a document. eg: /tmp/whatever.odf</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>The title of the document. eg: Document Title xy</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Timeout for send document. Will help with timeout errors (poor internet connection, etc)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }
}

public partial record TelegramBotSendLocationParameters
{
    ///<summary>The latitude to send.</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>The longitude to send.</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Timeout for send photo. Will help with timeout errors (poor internet connection, etc)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }
}

public partial record TelegramBotSendMessageParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title for your notification. Will be composed as &apos;%title\n%message&apos; eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the notification to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Disables link previews for links in the message.</summary>
    [JsonPropertyName("disable_web_page_preview")]
    public bool? DisableWebPagePreview { get; init; }

    ///<summary>Timeout for send message. Will help with timeout errors (poor internet connection, etc)s</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. Empty list clears a previously set keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [&quot;Text button1:/button1, Text button2:/button2&quot;, &quot;Text button3:/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }
}

public partial record TelegramBotSendPhotoParameters
{
    ///<summary>Remote path to an image. eg: http://example.org/path/to/the/image.png</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to an image. eg: /path/to/the/image.png</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>The title of the image. eg: My image</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Timeout for send photo. Will help with timeout errors (poor internet connection, etc)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }
}

public partial record TelegramBotSendPollParameters
{
    ///<summary>An array of pre-authorized chat_ids to send the location to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Poll question, 1-300 characters</summary>
    [JsonPropertyName("question")]
    public string? Question { get; init; }

    ///<summary>List of answer options, 2-10 strings 1-100 characters each</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>If the poll needs to be anonymous, defaults to True</summary>
    [JsonPropertyName("is_anonymous")]
    public bool? IsAnonymous { get; init; }

    ///<summary>If the poll allows multiple answers, defaults to False</summary>
    [JsonPropertyName("allows_multiple_answers")]
    public bool? AllowsMultipleAnswers { get; init; }

    ///<summary>Amount of time in seconds the poll will be active after creation, 5-600.</summary>
    [JsonPropertyName("open_period")]
    public long? OpenPeriod { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Timeout for send poll. Will help with timeout errors (poor internet connection, etc)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record TelegramBotSendStickerParameters
{
    ///<summary>Remote path to a static .webp or animated .tgs sticker. eg: http://example.org/path/to/the/sticker.webp</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to a static .webp or animated .tgs sticker. eg: /path/to/the/sticker.webp</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>ID of a sticker that exists on telegram servers eg: CAACAgIAAxkBAAEDDldhZD-hqWclr6krLq-FWSfCrGNmOQAC9gAD9HsZAAFeYY-ltPYnrCEE</summary>
    [JsonPropertyName("sticker_id")]
    public string? StickerId { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Timeout for send sticker. Will help with timeout errors (poor internet connection, etc)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }
}

public partial record TelegramBotSendVideoParameters
{
    ///<summary>Remote path to a video. eg: http://example.org/path/to/the/video.mp4</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to a video. eg: /path/to/the/video.mp4</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>The title of the video. eg: My video</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Parser for the message text.</summary>
    [JsonPropertyName("parse_mode")]
    public object? ParseMode { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Timeout for send video. Will help with timeout errors (poor internet connection, etc)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }
}

public partial record TelegramBotSendVoiceParameters
{
    ///<summary>Remote path to a voice message. eg: http://example.org/path/to/the/voice.opus</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Local path to a voice message. eg: /path/to/the/voice.opus</summary>
    [JsonPropertyName("file")]
    public string? File { get; init; }

    ///<summary>The title of the voice message. eg: My microphone recording</summary>
    [JsonPropertyName("caption")]
    public string? Caption { get; init; }

    ///<summary>Username for a URL which require HTTP authentication. eg: myuser</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>Password (or bearer token) for a URL which require HTTP authentication. eg: myuser_pwd</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Define which authentication method to use. Set to `digest` to use HTTP digest authentication, or `bearer_token` for OAuth 2.0 bearer token authentication. Defaults to `basic`.</summary>
    [JsonPropertyName("authentication")]
    public object? Authentication { get; init; }

    ///<summary>An array of pre-authorized chat_ids to send the document to. If not present, first allowed chat_id is the default. eg: [12345, 67890] or 12345</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Sends the message silently. iOS users and Web users will not receive a notification, Android users will receive a notification with no sound.</summary>
    [JsonPropertyName("disable_notification")]
    public bool? DisableNotification { get; init; }

    ///<summary>Enable or disable SSL certificate verification. Set to false if you&apos;re downloading the file from a URL and you don&apos;t want to validate the SSL certificate of the server.</summary>
    [JsonPropertyName("verify_ssl")]
    public bool? VerifySsl { get; init; }

    ///<summary>Timeout for send voice. Will help with timeout errors (poor internet connection, etc)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom keyboard. eg: [&quot;/command1, /command2&quot;, &quot;/command3&quot;]</summary>
    [JsonPropertyName("keyboard")]
    public object? Keyboard { get; init; }

    ///<summary>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. eg: [&quot;/button1, /button2&quot;, &quot;/button3&quot;] or [[[&quot;Text button1&quot;, &quot;/button1&quot;], [&quot;Text button2&quot;, &quot;/button2&quot;]], [[&quot;Text button3&quot;, &quot;/button3&quot;]]]</summary>
    [JsonPropertyName("inline_keyboard")]
    public object? InlineKeyboard { get; init; }

    ///<summary>Tag for sent message. In telegram_sent event data: {{trigger.event.data.message_tag}} eg: msg_to_edit</summary>
    [JsonPropertyName("message_tag")]
    public string? MessageTag { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload all template entities.</summary>
    public void Reload()
    {
        _haContext.CallService("template", "reload", null);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set value of a text entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Set value of a text entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Value to set. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Value to set. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancel a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Change a timer</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Change a timer</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration to add or subtract to the running timer eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finish a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pause a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Start a timer</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Start a timer</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration the timer requires to finish. [optional] eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional] eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Remove all text-to-speech cache files and RAM cache.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId">Name(s) of media player entities.</param>
    ///<param name="message">Text to speak on devices. eg: My name is hanna</param>
    ///<param name="cache">Control file cache of this message.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleTranslateSay(TtsGoogleTranslateSayParameters data)
    {
        _haContext.CallService("tts", "google_translate_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId">Name(s) of media player entities.</param>
    ///<param name="message">Text to speak on devices. eg: My name is hanna</param>
    ///<param name="cache">Control file cache of this message.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</param>
    public void GoogleTranslateSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_translate_say", null, new TtsGoogleTranslateSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speak something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speak something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayerEntityId">Name(s) of media player entities.</param>
    ///<param name="message">Text to speak on devices. eg: My name is hanna</param>
    ///<param name="cache">Control file cache of this message.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    ///<summary>Name(s) of media player entities.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Text to speak on devices. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Control file cache of this message.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleTranslateSayParameters
{
    ///<summary>Name(s) of media player entities.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Text to speak on devices. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Control file cache of this message.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Name(s) of media player entities.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>Text to speak on devices. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Control file cache of this message.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UnifiServices
{
    private readonly IHaContext _haContext;
    public UnifiServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Try to get wireless client to reconnect to UniFi Network</summary>
    public void ReconnectClient(UnifiReconnectClientParameters data)
    {
        _haContext.CallService("unifi", "reconnect_client", null, data);
    }

    ///<summary>Try to get wireless client to reconnect to UniFi Network</summary>
    ///<param name="deviceId">Try reconnect client to wireless network</param>
    public void ReconnectClient(string deviceId)
    {
        _haContext.CallService("unifi", "reconnect_client", null, new UnifiReconnectClientParameters { DeviceId = deviceId });
    }

    ///<summary>Clean up clients that has only been associated with the controller for a short period of time.</summary>
    public void RemoveClients()
    {
        _haContext.CallService("unifi", "remove_clients", null);
    }
}

public partial record UnifiReconnectClientParameters
{
    ///<summary>Try reconnect client to wireless network</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">Version to install, if omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">Backup before installing the update, if supported by the integration.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Mark currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>Version to install, if omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>Backup before installing the update, if supported by the integration.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class UtilityMeterServices
{
    private readonly IHaContext _haContext;
    public UtilityMeterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    public void Calibrate(ServiceTarget target, UtilityMeterCalibrateParameters data)
    {
        _haContext.CallService("utility_meter", "calibrate", target, data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public void Calibrate(ServiceTarget target, string value)
    {
        _haContext.CallService("utility_meter", "calibrate", target, new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("utility_meter", "reset", target);
    }
}

public partial record UtilityMeterCalibrateParameters
{
    ///<summary>Value to which set the meter eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tell the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "clean_spot", target);
    }

    ///<summary>Locate the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "locate", target);
    }

    ///<summary>Pause the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "pause", target);
    }

    ///<summary>Tell the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "return_to_base", target);
    }

    ///<summary>Send a raw command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Send a raw command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to execute. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Set the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Set the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanSpeed">Platform dependent vacuum cleaner fan speed, with speed steps, like &apos;medium&apos; or by percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Start or resume the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start", target);
    }

    ///<summary>Start, pause, or resume the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartPause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start_pause", target);
    }

    ///<summary>Stop the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "stop", target);
    }

    public void Toggle()
    {
        _haContext.CallService("vacuum", "toggle", null);
    }

    ///<summary>Stop the current cleaning task and return to home.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_off", target);
    }

    ///<summary>Start a new cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_on", target);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Platform dependent vacuum cleaner fan speed, with speed steps, like &apos;medium&apos; or by percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class WakeOnLanServices
{
    private readonly IHaContext _haContext;
    public WakeOnLanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    public void SendMagicPacket(WakeOnLanSendMagicPacketParameters data)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, data);
    }

    ///<summary>Send a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    ///<param name="mac">MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</param>
    ///<param name="broadcastAddress">Broadcast IP where to send the magic packet. eg: 192.168.255.255</param>
    ///<param name="broadcastPort">Port where to send the magic packet.</param>
    public void SendMagicPacket(string mac, string? broadcastAddress = null, long? broadcastPort = null)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, new WakeOnLanSendMagicPacketParameters { Mac = mac, BroadcastAddress = broadcastAddress, BroadcastPort = broadcastPort });
    }
}

public partial record WakeOnLanSendMagicPacketParameters
{
    ///<summary>MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>Broadcast IP where to send the magic packet. eg: 192.168.255.255</summary>
    [JsonPropertyName("broadcast_address")]
    public string? BroadcastAddress { get; init; }

    ///<summary>Port where to send the magic packet.</summary>
    [JsonPropertyName("broadcast_port")]
    public long? BroadcastPort { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turn away mode on/off for water_heater device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turn away mode on/off for water_heater device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Set operation mode for water_heater device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Set operation mode for water_heater device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="operationMode">New value of operation mode. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Set target temperature of water_heater device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Set target temperature of water_heater device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for water heater.</param>
    ///<param name="operationMode">New value of operation mode. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    public void TurnOff()
    {
        _haContext.CallService("water_heater", "turn_off", null);
    }

    public void TurnOn()
    {
        _haContext.CallService("water_heater", "turn_on", null);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of operation mode. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of operation mode. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WebostvServices
{
    private readonly IHaContext _haContext;
    public WebostvServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send a button press command.</summary>
    public void Button(WebostvButtonParameters data)
    {
        _haContext.CallService("webostv", "button", null, data);
    }

    ///<summary>Send a button press command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="button">Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 eg: LEFT</param>
    public void Button(string entityId, string button)
    {
        _haContext.CallService("webostv", "button", null, new WebostvButtonParameters { EntityId = entityId, Button = button });
    }

    ///<summary>Send a command.</summary>
    public void Command(WebostvCommandParameters data)
    {
        _haContext.CallService("webostv", "command", null, data);
    }

    ///<summary>Send a command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="command">Endpoint of the command. eg: system.launcher/open</param>
    ///<param name="payload">An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</param>
    public void Command(string entityId, string command, object? payload = null)
    {
        _haContext.CallService("webostv", "command", null, new WebostvCommandParameters { EntityId = entityId, Command = command, Payload = payload });
    }

    ///<summary>Send the TV the command to change sound output.</summary>
    public void SelectSoundOutput(WebostvSelectSoundOutputParameters data)
    {
        _haContext.CallService("webostv", "select_sound_output", null, data);
    }

    ///<summary>Send the TV the command to change sound output.</summary>
    ///<param name="entityId">Name(s) of the webostv entities to change sound output on.</param>
    ///<param name="soundOutput">Name of the sound output to switch to. eg: external_speaker</param>
    public void SelectSoundOutput(string entityId, string soundOutput)
    {
        _haContext.CallService("webostv", "select_sound_output", null, new WebostvSelectSoundOutputParameters { EntityId = entityId, SoundOutput = soundOutput });
    }
}

public partial record WebostvButtonParameters
{
    ///<summary>Name(s) of the webostv entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 eg: LEFT</summary>
    [JsonPropertyName("button")]
    public string? Button { get; init; }
}

public partial record WebostvCommandParameters
{
    ///<summary>Name(s) of the webostv entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Endpoint of the command. eg: system.launcher/open</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }
}

public partial record WebostvSelectSoundOutputParameters
{
    ///<summary>Name(s) of the webostv entities to change sound output on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the sound output to switch to. eg: external_speaker</summary>
    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }
}

public partial class WebrtcServices
{
    private readonly IHaContext _haContext;
    public WebrtcServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a temporary or permanent link to a stream (enter &quot;url&quot; or &quot;entity&quot;)</summary>
    public void CreateLink(WebrtcCreateLinkParameters data)
    {
        _haContext.CallService("webrtc", "create_link", null, data);
    }

    ///<summary>Create a temporary or permanent link to a stream (enter &quot;url&quot; or &quot;entity&quot;)</summary>
    ///<param name="linkId">Create a random or permanent ID for your link eg: fd0a53ca-e9ab-4e7a-86a2-441642b16ae1</param>
    ///<param name="url">Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</param>
    ///<param name="entity">Camera entity eg: camera.generic_stream</param>
    ///<param name="openLimit">How many times a link can be opened (0 - unlimit) eg: 1</param>
    ///<param name="timeToLive">How many seconds will the link live (0 - unlimit) eg: 60</param>
    public void CreateLink(string linkId, string? url = null, string? entity = null, long? openLimit = null, long? timeToLive = null)
    {
        _haContext.CallService("webrtc", "create_link", null, new WebrtcCreateLinkParameters { LinkId = linkId, Url = url, Entity = entity, OpenLimit = openLimit, TimeToLive = timeToLive });
    }

    ///<summary>Cast stream to Chromecast device via DashCast application</summary>
    public void DashCast(WebrtcDashCastParameters data)
    {
        _haContext.CallService("webrtc", "dash_cast", null, data);
    }

    ///<summary>Cast stream to Chromecast device via DashCast application</summary>
    ///<param name="entityId">Media player entity eg: media_player.mibox4</param>
    ///<param name="url">Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</param>
    ///<param name="entity">Camera entity eg: camera.generic_stream</param>
    public void DashCast(string entityId, string? url = null, string? entity = null)
    {
        _haContext.CallService("webrtc", "dash_cast", null, new WebrtcDashCastParameters { EntityId = entityId, Url = url, Entity = entity });
    }
}

public partial record WebrtcCreateLinkParameters
{
    ///<summary>Create a random or permanent ID for your link eg: fd0a53ca-e9ab-4e7a-86a2-441642b16ae1</summary>
    [JsonPropertyName("link_id")]
    public string? LinkId { get; init; }

    ///<summary>Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Camera entity eg: camera.generic_stream</summary>
    [JsonPropertyName("entity")]
    public string? Entity { get; init; }

    ///<summary>How many times a link can be opened (0 - unlimit) eg: 1</summary>
    [JsonPropertyName("open_limit")]
    public long? OpenLimit { get; init; }

    ///<summary>How many seconds will the link live (0 - unlimit) eg: 60</summary>
    [JsonPropertyName("time_to_live")]
    public long? TimeToLive { get; init; }
}

public partial record WebrtcDashCastParameters
{
    ///<summary>Media player entity eg: media_player.mibox4</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Camera entity eg: camera.generic_stream</summary>
    [JsonPropertyName("entity")]
    public string? Entity { get; init; }
}

public partial class WiserServices
{
    private readonly IHaContext _haContext;
    public WiserServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Assign the schedule to other rooms or devices in the same type</summary>
    public void AssignSchedule(WiserAssignScheduleParameters data)
    {
        _haContext.CallService("wiser", "assign_schedule", null, data);
    }

    ///<summary>Assign the schedule to other rooms or devices in the same type</summary>
    ///<param name="entityId">A wiser entity</param>
    ///<param name="scheduleId">A wiser schedule id</param>
    ///<param name="scheduleName">A wiser schedule name</param>
    ///<param name="toEntityId">Enter the entity_id for the room or device to assign the same schedule to. eg: climate.wiser_kitchen</param>
    public void AssignSchedule(string toEntityId, string? entityId = null, long? scheduleId = null, string? scheduleName = null)
    {
        _haContext.CallService("wiser", "assign_schedule", null, new WiserAssignScheduleParameters { EntityId = entityId, ScheduleId = scheduleId, ScheduleName = scheduleName, ToEntityId = toEntityId });
    }

    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    ///<param name="target">The target for this service call</param>
    public void BoostHeating(ServiceTarget target, WiserBoostHeatingParameters data)
    {
        _haContext.CallService("wiser", "boost_heating", target, data);
    }

    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="timePeriod">Set the time period for the boost in minutes eg: 60</param>
    ///<param name="temperatureDelta">Set the increase in temperature for the boost period eg: 3.0</param>
    ///<param name="temperature">Set the room target temperature for the boost period eg: 21.0</param>
    public void BoostHeating(ServiceTarget target, long timePeriod, double? temperatureDelta = null, double? temperature = null)
    {
        _haContext.CallService("wiser", "boost_heating", target, new WiserBoostHeatingParameters { TimePeriod = timePeriod, TemperatureDelta = temperatureDelta, Temperature = temperature });
    }

    ///<summary>Boost the hot water for time specified </summary>
    public void BoostHotwater(WiserBoostHotwaterParameters data)
    {
        _haContext.CallService("wiser", "boost_hotwater", null, data);
    }

    ///<summary>Boost the hot water for time specified </summary>
    ///<param name="timePeriod">Set the time period for the boost eg: 60</param>
    ///<param name="hub">Only needs to be set if you have multiple Wiser hubs</param>
    public void BoostHotwater(long timePeriod, object? hub = null)
    {
        _haContext.CallService("wiser", "boost_hotwater", null, new WiserBoostHotwaterParameters { TimePeriod = timePeriod, Hub = hub });
    }

    ///<summary>Copy the schedule from one to another in the same type</summary>
    public void CopySchedule(WiserCopyScheduleParameters data)
    {
        _haContext.CallService("wiser", "copy_schedule", null, data);
    }

    ///<summary>Copy the schedule from one to another in the same type</summary>
    ///<param name="entityId">A wiser entity</param>
    ///<param name="toEntityId">Enter the entity_id for the room to copy the schedule to. eg: climate.wiser_kitchen</param>
    public void CopySchedule(string entityId, string toEntityId)
    {
        _haContext.CallService("wiser", "copy_schedule", null, new WiserCopyScheduleParameters { EntityId = entityId, ToEntityId = toEntityId });
    }

    ///<summary>Read the schedule from a room or device and write to an output file in yaml </summary>
    public void GetSchedule(WiserGetScheduleParameters data)
    {
        _haContext.CallService("wiser", "get_schedule", null, data);
    }

    ///<summary>Read the schedule from a room or device and write to an output file in yaml </summary>
    ///<param name="entityId">A wiser entity</param>
    ///<param name="filename">The filename to write out the yaml. See README.MD if running within a docker container  eg: config/schedules/{{ entity_id.name }}.yaml</param>
    public void GetSchedule(string entityId, string? filename = null)
    {
        _haContext.CallService("wiser", "get_schedule", null, new WiserGetScheduleParameters { EntityId = entityId, Filename = filename });
    }

    ///<summary>Sets the device mode to auto or manual</summary>
    public void SetDeviceMode(WiserSetDeviceModeParameters data)
    {
        _haContext.CallService("wiser", "set_device_mode", null, data);
    }

    ///<summary>Sets the device mode to auto or manual</summary>
    ///<param name="entityId">A wiser mode entity</param>
    ///<param name="mode">Enter the mode which can be manual or auto. eg: auto</param>
    public void SetDeviceMode(string entityId, object mode)
    {
        _haContext.CallService("wiser", "set_device_mode", null, new WiserSetDeviceModeParameters { EntityId = entityId, Mode = mode });
    }

    ///<summary>Allows changing of opentherm parameters on the Wiser Hub</summary>
    public void SetOpenthermParameter(WiserSetOpenthermParameterParameters data)
    {
        _haContext.CallService("wiser", "set_opentherm_parameter", null, data);
    }

    ///<summary>Allows changing of opentherm parameters on the Wiser Hub</summary>
    ///<param name="endpoint">Endpoint if not at opentherm root.  Ie. preDefinedRemoteBoilerParameters</param>
    ///<param name="parameter">Parameter to change</param>
    ///<param name="parameterValue">Parameter value to set</param>
    ///<param name="hub">Only needs to be set if you have multiple Wiser hubs</param>
    public void SetOpenthermParameter(string parameter, string parameterValue, string? endpoint = null, object? hub = null)
    {
        _haContext.CallService("wiser", "set_opentherm_parameter", null, new WiserSetOpenthermParameterParameters { Endpoint = endpoint, Parameter = parameter, ParameterValue = parameterValue, Hub = hub });
    }

    ///<summary>Read in the yaml schedule file and set the schedule</summary>
    public void SetSchedule(WiserSetScheduleParameters data)
    {
        _haContext.CallService("wiser", "set_schedule", null, data);
    }

    ///<summary>Read in the yaml schedule file and set the schedule</summary>
    ///<param name="entityId">A wiser entity</param>
    ///<param name="filename">The filename to read the yaml schedule from. eg: schedules/schedule1.yaml</param>
    public void SetSchedule(string entityId, string filename)
    {
        _haContext.CallService("wiser", "set_schedule", null, new WiserSetScheduleParameters { EntityId = entityId, Filename = filename });
    }

    ///<summary>Set a schedule from a template supported string</summary>
    public void SetScheduleFromString(WiserSetScheduleFromStringParameters data)
    {
        _haContext.CallService("wiser", "set_schedule_from_string", null, data);
    }

    ///<summary>Set a schedule from a template supported string</summary>
    ///<param name="entityId">A wiser entity</param>
    ///<param name="schedule">The schedule data (supports templates)</param>
    public void SetScheduleFromString(string entityId, string schedule)
    {
        _haContext.CallService("wiser", "set_schedule_from_string", null, new WiserSetScheduleFromStringParameters { EntityId = entityId, Schedule = schedule });
    }
}

public partial record WiserAssignScheduleParameters
{
    ///<summary>A wiser entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>A wiser schedule id</summary>
    [JsonPropertyName("schedule_id")]
    public long? ScheduleId { get; init; }

    ///<summary>A wiser schedule name</summary>
    [JsonPropertyName("schedule_name")]
    public string? ScheduleName { get; init; }

    ///<summary>Enter the entity_id for the room or device to assign the same schedule to. eg: climate.wiser_kitchen</summary>
    [JsonPropertyName("to_entity_id")]
    public string? ToEntityId { get; init; }
}

public partial record WiserBoostHeatingParameters
{
    ///<summary>Set the time period for the boost in minutes eg: 60</summary>
    [JsonPropertyName("time_period")]
    public long? TimePeriod { get; init; }

    ///<summary>Set the increase in temperature for the boost period eg: 3.0</summary>
    [JsonPropertyName("temperature_delta")]
    public double? TemperatureDelta { get; init; }

    ///<summary>Set the room target temperature for the boost period eg: 21.0</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }
}

public partial record WiserBoostHotwaterParameters
{
    ///<summary>Set the time period for the boost eg: 60</summary>
    [JsonPropertyName("time_period")]
    public long? TimePeriod { get; init; }

    ///<summary>Only needs to be set if you have multiple Wiser hubs</summary>
    [JsonPropertyName("hub")]
    public object? Hub { get; init; }
}

public partial record WiserCopyScheduleParameters
{
    ///<summary>A wiser entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Enter the entity_id for the room to copy the schedule to. eg: climate.wiser_kitchen</summary>
    [JsonPropertyName("to_entity_id")]
    public string? ToEntityId { get; init; }
}

public partial record WiserGetScheduleParameters
{
    ///<summary>A wiser entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The filename to write out the yaml. See README.MD if running within a docker container  eg: config/schedules/{{ entity_id.name }}.yaml</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial record WiserSetDeviceModeParameters
{
    ///<summary>A wiser mode entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Enter the mode which can be manual or auto. eg: auto</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial record WiserSetOpenthermParameterParameters
{
    ///<summary>Endpoint if not at opentherm root.  Ie. preDefinedRemoteBoilerParameters</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>Parameter to change</summary>
    [JsonPropertyName("parameter")]
    public string? Parameter { get; init; }

    ///<summary>Parameter value to set</summary>
    [JsonPropertyName("parameter_value")]
    public string? ParameterValue { get; init; }

    ///<summary>Only needs to be set if you have multiple Wiser hubs</summary>
    [JsonPropertyName("hub")]
    public object? Hub { get; init; }
}

public partial record WiserSetScheduleParameters
{
    ///<summary>A wiser entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The filename to read the yaml schedule from. eg: schedules/schedule1.yaml</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial record WiserSetScheduleFromStringParameters
{
    ///<summary>A wiser entity</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The schedule data (supports templates)</summary>
    [JsonPropertyName("schedule")]
    public string? Schedule { get; init; }
}

public partial class ZhaServices
{
    private readonly IHaContext _haContext;
    public ZhaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clear a user code from a lock</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUserCode(ServiceTarget target, ZhaClearLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, data);
    }

    ///<summary>Clear a user code from a lock</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to clear code from eg: 1</param>
    public void ClearLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disable a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableLockUserCode(ServiceTarget target, ZhaDisableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, data);
    }

    ///<summary>Disable a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to disable eg: 1</param>
    public void DisableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enable a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableLockUserCode(ServiceTarget target, ZhaEnableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, data);
    }

    ///<summary>Enable a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to enable eg: 1</param>
    public void EnableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Issue command on the specified cluster on the specified entity.</summary>
    public void IssueZigbeeClusterCommand(ZhaIssueZigbeeClusterCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, data);
    }

    ///<summary>Issue command on the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint id for the cluster</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for</param>
    ///<param name="clusterType">type of the cluster</param>
    ///<param name="command">id of the command to execute</param>
    ///<param name="commandType">type of the command to execute</param>
    ///<param name="args">args to pass to the command eg: [arg1, arg2, argN]</param>
    ///<param name="params">parameters to pass to the command</param>
    ///<param name="manufacturer">manufacturer code eg: 252</param>
    public void IssueZigbeeClusterCommand(string ieee, long endpointId, long clusterId, long command, object commandType, object? clusterType = null, object? args = null, object? @params = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, new ZhaIssueZigbeeClusterCommandParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Command = command, CommandType = commandType, Args = args, Params = @params, Manufacturer = manufacturer });
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    public void IssueZigbeeGroupCommand(ZhaIssueZigbeeGroupCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, data);
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    ///<param name="group">Hexadecimal address of the group eg: 546</param>
    ///<param name="clusterId">ZCL cluster to send command to</param>
    ///<param name="clusterType">type of the cluster</param>
    ///<param name="command">id of the command to execute</param>
    ///<param name="args">args to pass to the command eg: [arg1, arg2, argN]</param>
    ///<param name="manufacturer">manufacturer code eg: 252</param>
    public void IssueZigbeeGroupCommand(string @group, long clusterId, long command, object? clusterType = null, object? args = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, new ZhaIssueZigbeeGroupCommandParameters { Group = @group, ClusterId = clusterId, ClusterType = clusterType, Command = command, Args = args, Manufacturer = manufacturer });
    }

    ///<summary>Allow nodes to join the Zigbee network.</summary>
    public void Permit(ZhaPermitParameters data)
    {
        _haContext.CallService("zha", "permit", null, data);
    }

    ///<summary>Allow nodes to join the Zigbee network.</summary>
    ///<param name="duration">Time to permit joins, in seconds</param>
    ///<param name="ieee">IEEE address of the node permitting new joins eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="sourceIeee">IEEE address of the joining device (must be used with install code) eg: 00:0a:bf:00:01:10:23:35</param>
    ///<param name="installCode">Install code of the joining device (must be used with source_ieee) eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</param>
    ///<param name="qrCode">value of the QR install code (different between vendors) eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</param>
    public void Permit(long? duration = null, string? ieee = null, string? sourceIeee = null, string? installCode = null, string? qrCode = null)
    {
        _haContext.CallService("zha", "permit", null, new ZhaPermitParameters { Duration = duration, Ieee = ieee, SourceIeee = sourceIeee, InstallCode = installCode, QrCode = qrCode });
    }

    ///<summary>Remove a node from the Zigbee network.</summary>
    public void Remove(ZhaRemoveParameters data)
    {
        _haContext.CallService("zha", "remove", null, data);
    }

    ///<summary>Remove a node from the Zigbee network.</summary>
    ///<param name="ieee">IEEE address of the node to remove eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void Remove(string ieee)
    {
        _haContext.CallService("zha", "remove", null, new ZhaRemoveParameters { Ieee = ieee });
    }

    ///<summary>Set a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUserCode(ServiceTarget target, ZhaSetLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, data);
    }

    ///<summary>Set a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to set the code in eg: 1</param>
    ///<param name="userCode">Code to set eg: 1234</param>
    public void SetLockUserCode(ServiceTarget target, string codeSlot, string userCode)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Set attribute value for the specified cluster on the specified entity.</summary>
    public void SetZigbeeClusterAttribute(ZhaSetZigbeeClusterAttributeParameters data)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, data);
    }

    ///<summary>Set attribute value for the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint id for the cluster</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for</param>
    ///<param name="clusterType">type of the cluster</param>
    ///<param name="attribute">id of the attribute to set eg: 0</param>
    ///<param name="value">value to write to the attribute eg: 1</param>
    ///<param name="manufacturer">manufacturer code eg: 252</param>
    public void SetZigbeeClusterAttribute(string ieee, long endpointId, long clusterId, long attribute, string value, object? clusterType = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, new ZhaSetZigbeeClusterAttributeParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Attribute = attribute, Value = value, Manufacturer = manufacturer });
    }

    ///<summary>This service uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    public void WarningDeviceSquawk(ZhaWarningDeviceSquawkParameters data)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, data);
    }

    ///<summary>This service uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    ///<param name="ieee">IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</param>
    ///<param name="strobe">The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</param>
    ///<param name="level">The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</param>
    public void WarningDeviceSquawk(string ieee, long? mode = null, long? strobe = null, long? level = null)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, new ZhaWarningDeviceSquawkParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level });
    }

    ///<summary>This service starts the WD operation. The WD alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    public void WarningDeviceWarn(ZhaWarningDeviceWarnParameters data)
    {
        _haContext.CallService("zha", "warning_device_warn", null, data);
    }

    ///<summary>This service starts the WD operation. The WD alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    ///<param name="ieee">IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Warning Mode field is used as an 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the WD device in each mode is according to the relevant security standards.</param>
    ///<param name="strobe">The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”) then only the strobe is activated.</param>
    ///<param name="level">The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</param>
    ///<param name="duration">Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field SHALL be ignored.</param>
    ///<param name="dutyCycle">Indicates the length of the flash cycle. This provides a means of varying the flash duration for different alarm types (e.g., fire, police, burglar). Valid range is 0-100 in increments of 10. All other values SHALL be rounded to the nearest valid value. Strobe SHALL calculate duty cycle over a duration of one second. The ON state SHALL precede the OFF state. For example, if Strobe Duty Cycle Field specifies “40,” then the strobe SHALL flash ON for 4/10ths of a second and then turn OFF for 6/10ths of a second.</param>
    ///<param name="intensity">Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</param>
    public void WarningDeviceWarn(string ieee, long? mode = null, long? strobe = null, long? level = null, long? duration = null, long? dutyCycle = null, long? intensity = null)
    {
        _haContext.CallService("zha", "warning_device_warn", null, new ZhaWarningDeviceWarnParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level, Duration = duration, DutyCycle = dutyCycle, Intensity = intensity });
    }
}

public partial record ZhaClearLockUserCodeParameters
{
    ///<summary>Code slot to clear code from eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaDisableLockUserCodeParameters
{
    ///<summary>Code slot to disable eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaEnableLockUserCodeParameters
{
    ///<summary>Code slot to enable eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaIssueZigbeeClusterCommandParameters
{
    ///<summary>IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint id for the cluster</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>type of the cluster</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>id of the command to execute</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>type of the command to execute</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>args to pass to the command eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>parameters to pass to the command</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }

    ///<summary>manufacturer code eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaIssueZigbeeGroupCommandParameters
{
    ///<summary>Hexadecimal address of the group eg: 546</summary>
    [JsonPropertyName("group")]
    public string? Group { get; init; }

    ///<summary>ZCL cluster to send command to</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>type of the cluster</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>id of the command to execute</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>args to pass to the command eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>manufacturer code eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaPermitParameters
{
    ///<summary>Time to permit joins, in seconds</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>IEEE address of the node permitting new joins eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>IEEE address of the joining device (must be used with install code) eg: 00:0a:bf:00:01:10:23:35</summary>
    [JsonPropertyName("source_ieee")]
    public string? SourceIeee { get; init; }

    ///<summary>Install code of the joining device (must be used with source_ieee) eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</summary>
    [JsonPropertyName("install_code")]
    public string? InstallCode { get; init; }

    ///<summary>value of the QR install code (different between vendors) eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</summary>
    [JsonPropertyName("qr_code")]
    public string? QrCode { get; init; }
}

public partial record ZhaRemoveParameters
{
    ///<summary>IEEE address of the node to remove eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }
}

public partial record ZhaSetLockUserCodeParameters
{
    ///<summary>Code slot to set the code in eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Code to set eg: 1234</summary>
    [JsonPropertyName("user_code")]
    public string? UserCode { get; init; }
}

public partial record ZhaSetZigbeeClusterAttributeParameters
{
    ///<summary>IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint id for the cluster</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>type of the cluster</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>id of the attribute to set eg: 0</summary>
    [JsonPropertyName("attribute")]
    public long? Attribute { get; init; }

    ///<summary>value to write to the attribute eg: 1</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }

    ///<summary>manufacturer code eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaWarningDeviceSquawkParameters
{
    ///<summary>IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }
}

public partial record ZhaWarningDeviceWarnParameters
{
    ///<summary>IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Warning Mode field is used as an 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the WD device in each mode is according to the relevant security standards.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”) then only the strobe is activated.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }

    ///<summary>Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field SHALL be ignored.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Indicates the length of the flash cycle. This provides a means of varying the flash duration for different alarm types (e.g., fire, police, burglar). Valid range is 0-100 in increments of 10. All other values SHALL be rounded to the nearest valid value. Strobe SHALL calculate duty cycle over a duration of one second. The ON state SHALL precede the OFF state. For example, if Strobe Duty Cycle Field specifies “40,” then the strobe SHALL flash ON for 4/10ths of a second and then turn OFF for 6/10ths of a second.</summary>
    [JsonPropertyName("duty_cycle")]
    public long? DutyCycle { get; init; }

    ///<summary>Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</summary>
    [JsonPropertyName("intensity")]
    public long? Intensity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the YAML-based zone configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }
}

public static class AlarmControlPanelEntityExtensionMethods
{
    ///<summary>Send the alarm the command for arm away.</summary>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to arm away the alarm control panel with. eg: 1234</param>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to arm away the alarm control panel with. eg: 1234</param>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Send arm custom bypass command.</summary>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Send arm custom bypass command.</summary>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Send arm custom bypass command.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to arm custom bypass the alarm control panel with. eg: 1234</param>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Send arm custom bypass command.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to arm custom bypass the alarm control panel with. eg: 1234</param>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to arm home the alarm control panel with. eg: 1234</param>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to arm home the alarm control panel with. eg: 1234</param>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to arm night the alarm control panel with. eg: 1234</param>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to arm night the alarm control panel with. eg: 1234</param>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to arm vacation the alarm control panel with. eg: 1234</param>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to arm vacation the alarm control panel with. eg: 1234</param>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to disarm the alarm control panel with. eg: 1234</param>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to disarm the alarm control panel with. eg: 1234</param>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to trigger the alarm control panel with. eg: 1234</param>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to trigger the alarm control panel with. eg: 1234</param>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggle (enable / disable) an automation.</summary>
    public static void Toggle(this AutomationEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<AutomationEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Trigger the actions of an automation.</summary>
    public static void Trigger(this AutomationEntity target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<AutomationEntity> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The AutomationEntity to call this service for</param>
    ///<param name="skipCondition">Whether or not the conditions will be skipped.</param>
    public static void Trigger(this AutomationEntity target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;AutomationEntity&gt; to call this service for</param>
    ///<param name="skipCondition">Whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<AutomationEntity> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disable an automation.</summary>
    public static void TurnOff(this AutomationEntity target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disable an automation.</summary>
    public static void TurnOff(this IEnumerable<AutomationEntity> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The AutomationEntity to call this service for</param>
    ///<param name="stopActions">Stop currently running actions.</param>
    public static void TurnOff(this AutomationEntity target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The IEnumerable&lt;AutomationEntity&gt; to call this service for</param>
    ///<param name="stopActions">Stop currently running actions.</param>
    public static void TurnOff(this IEnumerable<AutomationEntity> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enable an automation.</summary>
    public static void TurnOn(this AutomationEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enable an automation.</summary>
    public static void TurnOn(this IEnumerable<AutomationEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this ButtonEntity target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<ButtonEntity> target)
    {
        target.CallService("press");
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Add a new calendar event.</summary>
    public static void CreateEvent(this CalendarEntity target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Add a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<CalendarEntity> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The CalendarEntity to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event eg: Department Party</param>
    ///<param name="description">A more complete description of the event than that provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this CalendarEntity target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;CalendarEntity&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event eg: Department Party</param>
    ///<param name="description">A more complete description of the event than that provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<CalendarEntity> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disable the motion detection in a camera.</summary>
    public static void DisableMotionDetection(this CameraEntity target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disable the motion detection in a camera.</summary>
    public static void DisableMotionDetection(this IEnumerable<CameraEntity> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enable the motion detection in a camera.</summary>
    public static void EnableMotionDetection(this CameraEntity target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enable the motion detection in a camera.</summary>
    public static void EnableMotionDetection(this IEnumerable<CameraEntity> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Play camera stream on supported media player.</summary>
    public static void PlayStream(this CameraEntity target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Play camera stream on supported media player.</summary>
    public static void PlayStream(this IEnumerable<CameraEntity> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Play camera stream on supported media player.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="mediaPlayer">Name(s) of media player to stream to.</param>
    ///<param name="format">Stream format supported by media player.</param>
    public static void PlayStream(this CameraEntity target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Play camera stream on supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="mediaPlayer">Name(s) of media player to stream to.</param>
    ///<param name="format">Stream format supported by media player.</param>
    public static void PlayStream(this IEnumerable<CameraEntity> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Record live camera feed.</summary>
    public static void Record(this CameraEntity target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Record live camera feed.</summary>
    public static void Record(this IEnumerable<CameraEntity> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Record live camera feed.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Target recording length.</param>
    ///<param name="lookback">Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.</param>
    public static void Record(this CameraEntity target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Record live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Target recording length.</param>
    ///<param name="lookback">Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.</param>
    public static void Record(this IEnumerable<CameraEntity> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Take a snapshot from a camera.</summary>
    public static void Snapshot(this CameraEntity target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Take a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<CameraEntity> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Take a snapshot from a camera.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this CameraEntity target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Take a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<CameraEntity> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turn off camera.</summary>
    public static void TurnOff(this CameraEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn off camera.</summary>
    public static void TurnOff(this IEnumerable<CameraEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn on camera.</summary>
    public static void TurnOn(this CameraEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn on camera.</summary>
    public static void TurnOn(this IEnumerable<CameraEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    public static void SetAuxHeat(this ClimateEntity target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    public static void SetAuxHeat(this IEnumerable<ClimateEntity> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this ClimateEntity target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<ClimateEntity> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Set fan operation for climate device.</summary>
    public static void SetFanMode(this ClimateEntity target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Set fan operation for climate device.</summary>
    public static void SetFanMode(this IEnumerable<ClimateEntity> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Set fan operation for climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="fanMode">New value of fan mode. eg: low</param>
    public static void SetFanMode(this ClimateEntity target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Set fan operation for climate device.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="fanMode">New value of fan mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<ClimateEntity> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Set target humidity of climate device.</summary>
    public static void SetHumidity(this ClimateEntity target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Set target humidity of climate device.</summary>
    public static void SetHumidity(this IEnumerable<ClimateEntity> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Set target humidity of climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="humidity">New target humidity for climate device.</param>
    public static void SetHumidity(this ClimateEntity target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Set target humidity of climate device.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="humidity">New target humidity for climate device.</param>
    public static void SetHumidity(this IEnumerable<ClimateEntity> target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    public static void SetHvacMode(this ClimateEntity target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    public static void SetHvacMode(this IEnumerable<ClimateEntity> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="hvacMode">New value of operation mode.</param>
    public static void SetHvacMode(this ClimateEntity target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="hvacMode">New value of operation mode.</param>
    public static void SetHvacMode(this IEnumerable<ClimateEntity> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Set preset mode for climate device.</summary>
    public static void SetPresetMode(this ClimateEntity target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Set preset mode for climate device.</summary>
    public static void SetPresetMode(this IEnumerable<ClimateEntity> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Set preset mode for climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="presetMode">New value of preset mode. eg: away</param>
    public static void SetPresetMode(this ClimateEntity target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Set preset mode for climate device.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="presetMode">New value of preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<ClimateEntity> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Set swing operation for climate device.</summary>
    public static void SetSwingMode(this ClimateEntity target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Set swing operation for climate device.</summary>
    public static void SetSwingMode(this IEnumerable<ClimateEntity> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Set swing operation for climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="swingMode">New value of swing mode. eg: horizontal</param>
    public static void SetSwingMode(this ClimateEntity target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Set swing operation for climate device.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="swingMode">New value of swing mode. eg: horizontal</param>
    public static void SetSwingMode(this IEnumerable<ClimateEntity> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Set target temperature of climate device.</summary>
    public static void SetTemperature(this ClimateEntity target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Set target temperature of climate device.</summary>
    public static void SetTemperature(this IEnumerable<ClimateEntity> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Set target temperature of climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="temperature">New target temperature for HVAC.</param>
    ///<param name="targetTempHigh">New target high temperature for HVAC.</param>
    ///<param name="targetTempLow">New target low temperature for HVAC.</param>
    ///<param name="hvacMode">HVAC operation mode to set temperature to.</param>
    public static void SetTemperature(this ClimateEntity target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Set target temperature of climate device.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="temperature">New target temperature for HVAC.</param>
    ///<param name="targetTempHigh">New target high temperature for HVAC.</param>
    ///<param name="targetTempLow">New target low temperature for HVAC.</param>
    ///<param name="hvacMode">HVAC operation mode to set temperature to.</param>
    public static void SetTemperature(this IEnumerable<ClimateEntity> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Turn climate device off.</summary>
    public static void TurnOff(this ClimateEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn climate device off.</summary>
    public static void TurnOff(this IEnumerable<ClimateEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn climate device on.</summary>
    public static void TurnOn(this ClimateEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn climate device on.</summary>
    public static void TurnOn(this IEnumerable<ClimateEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class CoverEntityExtensionMethods
{
    ///<summary>Close all or specified cover.</summary>
    public static void CloseCover(this CoverEntity target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Close all or specified cover.</summary>
    public static void CloseCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Close all or specified cover tilt.</summary>
    public static void CloseCoverTilt(this CoverEntity target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Close all or specified cover tilt.</summary>
    public static void CloseCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Open all or specified cover.</summary>
    public static void OpenCover(this CoverEntity target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Open all or specified cover.</summary>
    public static void OpenCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Open all or specified cover tilt.</summary>
    public static void OpenCoverTilt(this CoverEntity target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Open all or specified cover tilt.</summary>
    public static void OpenCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    public static void SetCoverPosition(this CoverEntity target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    public static void SetCoverPosition(this IEnumerable<CoverEntity> target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    ///<param name="target">The CoverEntity to call this service for</param>
    ///<param name="position">Position of the cover</param>
    public static void SetCoverPosition(this CoverEntity target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    ///<param name="target">The IEnumerable&lt;CoverEntity&gt; to call this service for</param>
    ///<param name="position">Position of the cover</param>
    public static void SetCoverPosition(this IEnumerable<CoverEntity> target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    public static void SetCoverTiltPosition(this CoverEntity target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    public static void SetCoverTiltPosition(this IEnumerable<CoverEntity> target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    ///<param name="target">The CoverEntity to call this service for</param>
    ///<param name="tiltPosition">Tilt position of the cover.</param>
    public static void SetCoverTiltPosition(this CoverEntity target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    ///<param name="target">The IEnumerable&lt;CoverEntity&gt; to call this service for</param>
    ///<param name="tiltPosition">Tilt position of the cover.</param>
    public static void SetCoverTiltPosition(this IEnumerable<CoverEntity> target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stop all or specified cover.</summary>
    public static void StopCover(this CoverEntity target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stop all or specified cover.</summary>
    public static void StopCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stop all or specified cover.</summary>
    public static void StopCoverTilt(this CoverEntity target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Stop all or specified cover.</summary>
    public static void StopCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Toggle a cover open/closed.</summary>
    public static void Toggle(this CoverEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle a cover open/closed.</summary>
    public static void Toggle(this IEnumerable<CoverEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this CoverEntity target)
    {
        target.CallService("toggle_cover_tilt");
    }

    ///<summary>Toggle a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("toggle_cover_tilt");
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggle an input boolean</summary>
    public static void Toggle(this InputBooleanEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle an input boolean</summary>
    public static void Toggle(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn off an input boolean</summary>
    public static void TurnOff(this InputBooleanEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn off an input boolean</summary>
    public static void TurnOff(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn on an input boolean</summary>
    public static void TurnOn(this InputBooleanEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn on an input boolean</summary>
    public static void TurnOn(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputButtonEntityExtensionMethods
{
    ///<summary>Press the input button entity.</summary>
    public static void Press(this InputButtonEntity target)
    {
        target.CallService("press");
    }

    ///<summary>Press the input button entity.</summary>
    public static void Press(this IEnumerable<InputButtonEntity> target)
    {
        target.CallService("press");
    }
}

public static class InputDatetimeEntityExtensionMethods
{
    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    public static void SetDatetime(this InputDatetimeEntity target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    public static void SetDatetime(this IEnumerable<InputDatetimeEntity> target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    ///<param name="target">The InputDatetimeEntity to call this service for</param>
    ///<param name="date">The target date the entity should be set to. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time the entity should be set to. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time the entity should be set to. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time the entity should be set to as expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this InputDatetimeEntity target, string? date = null, string? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    ///<param name="target">The IEnumerable&lt;InputDatetimeEntity&gt; to call this service for</param>
    ///<param name="date">The target date the entity should be set to. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time the entity should be set to. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time the entity should be set to. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time the entity should be set to as expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IEnumerable<InputDatetimeEntity> target, string? date = null, string? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrement the value of an input number entity by its stepping.</summary>
    public static void Decrement(this InputNumberEntity target)
    {
        target.CallService("decrement");
    }

    ///<summary>Decrement the value of an input number entity by its stepping.</summary>
    public static void Decrement(this IEnumerable<InputNumberEntity> target)
    {
        target.CallService("decrement");
    }

    ///<summary>Increment the value of an input number entity by its stepping.</summary>
    public static void Increment(this InputNumberEntity target)
    {
        target.CallService("increment");
    }

    ///<summary>Increment the value of an input number entity by its stepping.</summary>
    public static void Increment(this IEnumerable<InputNumberEntity> target)
    {
        target.CallService("increment");
    }

    ///<summary>Set the value of an input number entity.</summary>
    public static void SetValue(this InputNumberEntity target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of an input number entity.</summary>
    public static void SetValue(this IEnumerable<InputNumberEntity> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of an input number entity.</summary>
    ///<param name="target">The InputNumberEntity to call this service for</param>
    ///<param name="value">The target value the entity should be set to.</param>
    public static void SetValue(this InputNumberEntity target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Set the value of an input number entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputNumberEntity&gt; to call this service for</param>
    ///<param name="value">The target value the entity should be set to.</param>
    public static void SetValue(this IEnumerable<InputNumberEntity> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputSelectEntityExtensionMethods
{
    ///<summary>Select the first option of an input select entity.</summary>
    public static void SelectFirst(this InputSelectEntity target)
    {
        target.CallService("select_first");
    }

    ///<summary>Select the first option of an input select entity.</summary>
    public static void SelectFirst(this IEnumerable<InputSelectEntity> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Select the last option of an input select entity.</summary>
    public static void SelectLast(this InputSelectEntity target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the last option of an input select entity.</summary>
    public static void SelectLast(this IEnumerable<InputSelectEntity> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the next options of an input select entity.</summary>
    public static void SelectNext(this InputSelectEntity target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next options of an input select entity.</summary>
    public static void SelectNext(this IEnumerable<InputSelectEntity> target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next options of an input select entity.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this InputSelectEntity target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next options of an input select entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<InputSelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select an option of an input select entity.</summary>
    public static void SelectOption(this InputSelectEntity target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Select an option of an input select entity.</summary>
    public static void SelectOption(this IEnumerable<InputSelectEntity> target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Select an option of an input select entity.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this InputSelectEntity target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select an option of an input select entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<InputSelectEntity> target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    public static void SelectPrevious(this InputSelectEntity target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    public static void SelectPrevious(this IEnumerable<InputSelectEntity> target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this InputSelectEntity target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<InputSelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Set the options of an input select entity.</summary>
    public static void SetOptions(this InputSelectEntity target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Set the options of an input select entity.</summary>
    public static void SetOptions(this IEnumerable<InputSelectEntity> target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Set the options of an input select entity.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="options">Options for the input select entity. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this InputSelectEntity target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Set the options of an input select entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="options">Options for the input select entity. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IEnumerable<InputSelectEntity> target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Set the value of an input text entity.</summary>
    public static void SetValue(this InputTextEntity target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of an input text entity.</summary>
    public static void SetValue(this IEnumerable<InputTextEntity> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of an input text entity.</summary>
    ///<param name="target">The InputTextEntity to call this service for</param>
    ///<param name="value">The target value the entity should be set to. eg: This is an example text</param>
    public static void SetValue(this InputTextEntity target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Set the value of an input text entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputTextEntity&gt; to call this service for</param>
    ///<param name="value">The target value the entity should be set to. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<InputTextEntity> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    public static void Toggle(this LightEntity target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    public static void Toggle(this IEnumerable<LightEntity> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this LightEntity target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this IEnumerable<LightEntity> target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this LightEntity target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<LightEntity> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">If the light should flash.</param>
    public static void TurnOff(this LightEntity target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">If the light should flash.</param>
    public static void TurnOff(this IEnumerable<LightEntity> target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    public static void TurnOn(this LightEntity target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    public static void TurnOn(this IEnumerable<LightEntity> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color for the light (based on RGB - red, green, blue).</param>
    ///<param name="rgbwColor">A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this LightEntity target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color for the light (based on RGB - red, green, blue).</param>
    ///<param name="rgbwColor">A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this IEnumerable<LightEntity> target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Send the media player the command to clear players playlist.</summary>
    public static void ClearPlaylist(this MediaPlayerEntity target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Send the media player the command to clear players playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    public static void Join(this MediaPlayerEntity target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    public static void Join(this IEnumerable<MediaPlayerEntity> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this MediaPlayerEntity target, string groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<MediaPlayerEntity> target, string groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Send the media player the command for next track.</summary>
    public static void MediaNextTrack(this MediaPlayerEntity target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Send the media player the command for next track.</summary>
    public static void MediaNextTrack(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Send the media player the command for pause.</summary>
    public static void MediaPause(this MediaPlayerEntity target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Send the media player the command for pause.</summary>
    public static void MediaPause(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Send the media player the command for play.</summary>
    public static void MediaPlay(this MediaPlayerEntity target)
    {
        target.CallService("media_play");
    }

    ///<summary>Send the media player the command for play.</summary>
    public static void MediaPlay(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggle media player play/pause state.</summary>
    public static void MediaPlayPause(this MediaPlayerEntity target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggle media player play/pause state.</summary>
    public static void MediaPlayPause(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Send the media player the command for previous track.</summary>
    public static void MediaPreviousTrack(this MediaPlayerEntity target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Send the media player the command for previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    public static void MediaSeek(this MediaPlayerEntity target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    public static void MediaSeek(this IEnumerable<MediaPlayerEntity> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="seekPosition">Position to seek to. The format is platform dependent.</param>
    public static void MediaSeek(this MediaPlayerEntity target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="seekPosition">Position to seek to. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<MediaPlayerEntity> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Send the media player the stop command.</summary>
    public static void MediaStop(this MediaPlayerEntity target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Send the media player the stop command.</summary>
    public static void MediaStop(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Send the media player the command for playing media.</summary>
    public static void PlayMedia(this MediaPlayerEntity target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    public static void PlayMedia(this IEnumerable<MediaPlayerEntity> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this MediaPlayerEntity target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<MediaPlayerEntity> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Set repeat mode</summary>
    public static void RepeatSet(this MediaPlayerEntity target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Set repeat mode</summary>
    public static void RepeatSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this MediaPlayerEntity target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<MediaPlayerEntity> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    public static void SelectSoundMode(this MediaPlayerEntity target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<MediaPlayerEntity> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this MediaPlayerEntity target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<MediaPlayerEntity> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Send the media player the command to change input source.</summary>
    public static void SelectSource(this MediaPlayerEntity target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Send the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<MediaPlayerEntity> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this MediaPlayerEntity target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<MediaPlayerEntity> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Set shuffling state.</summary>
    public static void ShuffleSet(this MediaPlayerEntity target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Set shuffling state.</summary>
    public static void ShuffleSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="shuffle">True/false for enabling/disabling shuffle.</param>
    public static void ShuffleSet(this MediaPlayerEntity target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="shuffle">True/false for enabling/disabling shuffle.</param>
    public static void ShuffleSet(this IEnumerable<MediaPlayerEntity> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player power state.</summary>
    public static void Toggle(this MediaPlayerEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player power state.</summary>
    public static void Toggle(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn a media player power off.</summary>
    public static void TurnOff(this MediaPlayerEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a media player power off.</summary>
    public static void TurnOff(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a media player power on.</summary>
    public static void TurnOn(this MediaPlayerEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn a media player power on.</summary>
    public static void TurnOn(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Unjoin the player from a group. Only works on platforms with support for player groups.</summary>
    public static void Unjoin(this MediaPlayerEntity target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Unjoin the player from a group. Only works on platforms with support for player groups.</summary>
    public static void Unjoin(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turn a media player volume down.</summary>
    public static void VolumeDown(this MediaPlayerEntity target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turn a media player volume down.</summary>
    public static void VolumeDown(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    public static void VolumeMute(this MediaPlayerEntity target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    public static void VolumeMute(this IEnumerable<MediaPlayerEntity> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="isVolumeMuted">True/false for mute/unmute.</param>
    public static void VolumeMute(this MediaPlayerEntity target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="isVolumeMuted">True/false for mute/unmute.</param>
    public static void VolumeMute(this IEnumerable<MediaPlayerEntity> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    public static void VolumeSet(this MediaPlayerEntity target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    public static void VolumeSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="volumeLevel">Volume level to set as float.</param>
    public static void VolumeSet(this MediaPlayerEntity target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="volumeLevel">Volume level to set as float.</param>
    public static void VolumeSet(this IEnumerable<MediaPlayerEntity> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turn a media player volume up.</summary>
    public static void VolumeUp(this MediaPlayerEntity target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turn a media player volume up.</summary>
    public static void VolumeUp(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("volume_up");
    }
}

public static class MelcloudEntityExtensionMethods
{
    ///<summary>Sets horizontal vane position.</summary>
    public static void SetVaneHorizontal(this ClimateEntity target, MelcloudSetVaneHorizontalParameters data)
    {
        target.CallService("set_vane_horizontal", data);
    }

    ///<summary>Sets horizontal vane position.</summary>
    public static void SetVaneHorizontal(this IEnumerable<ClimateEntity> target, MelcloudSetVaneHorizontalParameters data)
    {
        target.CallService("set_vane_horizontal", data);
    }

    ///<summary>Sets horizontal vane position.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="position">Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute.  eg: auto</param>
    public static void SetVaneHorizontal(this ClimateEntity target, string position)
    {
        target.CallService("set_vane_horizontal", new MelcloudSetVaneHorizontalParameters { Position = position });
    }

    ///<summary>Sets horizontal vane position.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="position">Horizontal vane position. Possible options can be found in the vane_horizontal_positions state attribute.  eg: auto</param>
    public static void SetVaneHorizontal(this IEnumerable<ClimateEntity> target, string position)
    {
        target.CallService("set_vane_horizontal", new MelcloudSetVaneHorizontalParameters { Position = position });
    }

    ///<summary>Sets vertical vane position.</summary>
    public static void SetVaneVertical(this ClimateEntity target, MelcloudSetVaneVerticalParameters data)
    {
        target.CallService("set_vane_vertical", data);
    }

    ///<summary>Sets vertical vane position.</summary>
    public static void SetVaneVertical(this IEnumerable<ClimateEntity> target, MelcloudSetVaneVerticalParameters data)
    {
        target.CallService("set_vane_vertical", data);
    }

    ///<summary>Sets vertical vane position.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="position">Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute.  eg: auto</param>
    public static void SetVaneVertical(this ClimateEntity target, string position)
    {
        target.CallService("set_vane_vertical", new MelcloudSetVaneVerticalParameters { Position = position });
    }

    ///<summary>Sets vertical vane position.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="position">Vertical vane position. Possible options can be found in the vane_vertical_positions state attribute.  eg: auto</param>
    public static void SetVaneVertical(this IEnumerable<ClimateEntity> target, string position)
    {
        target.CallService("set_vane_vertical", new MelcloudSetVaneVerticalParameters { Position = position });
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Set the value of a Number entity.</summary>
    public static void SetValue(this NumberEntity target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of a Number entity.</summary>
    public static void SetValue(this IEnumerable<NumberEntity> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The NumberEntity to call this service for</param>
    ///<param name="value">The target value the entity should be set to. eg: 42</param>
    public static void SetValue(this NumberEntity target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The IEnumerable&lt;NumberEntity&gt; to call this service for</param>
    ///<param name="value">The target value the entity should be set to. eg: 42</param>
    public static void SetValue(this IEnumerable<NumberEntity> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class OctopusEnergyEntityExtensionMethods
{
    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    public static void UpdateTargetConfig(this BinarySensorEntity target, OctopusEnergyUpdateTargetConfigParameters data)
    {
        target.CallService("update_target_config", data);
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    public static void UpdateTargetConfig(this IEnumerable<BinarySensorEntity> target, OctopusEnergyUpdateTargetConfigParameters data)
    {
        target.CallService("update_target_config", data);
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    ///<param name="target">The BinarySensorEntity to call this service for</param>
    ///<param name="targetHours">The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</param>
    ///<param name="targetStartTime">The optional time the evaluation period should start. eg: 06:00</param>
    ///<param name="targetEndTime">The optional time the evaluation period should end. eg: 19:00</param>
    ///<param name="targetOffset">The optional offset to apply to the target rate when it starts</param>
    public static void UpdateTargetConfig(this BinarySensorEntity target, string? targetHours = null, string? targetStartTime = null, string? targetEndTime = null, string? targetOffset = null)
    {
        target.CallService("update_target_config", new OctopusEnergyUpdateTargetConfigParameters { TargetHours = targetHours, TargetStartTime = targetStartTime, TargetEndTime = targetEndTime, TargetOffset = targetOffset });
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    ///<param name="target">The IEnumerable&lt;BinarySensorEntity&gt; to call this service for</param>
    ///<param name="targetHours">The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</param>
    ///<param name="targetStartTime">The optional time the evaluation period should start. eg: 06:00</param>
    ///<param name="targetEndTime">The optional time the evaluation period should end. eg: 19:00</param>
    ///<param name="targetOffset">The optional offset to apply to the target rate when it starts</param>
    public static void UpdateTargetConfig(this IEnumerable<BinarySensorEntity> target, string? targetHours = null, string? targetStartTime = null, string? targetEndTime = null, string? targetOffset = null)
    {
        target.CallService("update_target_config", new OctopusEnergyUpdateTargetConfigParameters { TargetHours = targetHours, TargetStartTime = targetStartTime, TargetEndTime = targetEndTime, TargetOffset = targetOffset });
    }
}

public static class PiHoleEntityExtensionMethods
{
    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    public static void Disable(this SwitchEntity target, PiHoleDisableParameters data)
    {
        target.CallService("disable", data);
    }

    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    public static void Disable(this IEnumerable<SwitchEntity> target, PiHoleDisableParameters data)
    {
        target.CallService("disable", data);
    }

    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    ///<param name="target">The SwitchEntity to call this service for</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for eg: 00:00:15</param>
    public static void Disable(this SwitchEntity target, string duration)
    {
        target.CallService("disable", new PiHoleDisableParameters { Duration = duration });
    }

    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    ///<param name="target">The IEnumerable&lt;SwitchEntity&gt; to call this service for</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for eg: 00:00:15</param>
    public static void Disable(this IEnumerable<SwitchEntity> target, string duration)
    {
        target.CallService("disable", new PiHoleDisableParameters { Duration = duration });
    }
}

public static class PowercalcEntityExtensionMethods
{
    ///<summary>Activate playbook</summary>
    public static void ActivatePlaybook(this SensorEntity target, PowercalcActivatePlaybookParameters data)
    {
        target.CallService("activate_playbook", data);
    }

    ///<summary>Activate playbook</summary>
    public static void ActivatePlaybook(this IEnumerable<SensorEntity> target, PowercalcActivatePlaybookParameters data)
    {
        target.CallService("activate_playbook", data);
    }

    ///<summary>Activate playbook</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="playbookId">Playbook identifier eg: program1</param>
    public static void ActivatePlaybook(this SensorEntity target, string playbookId)
    {
        target.CallService("activate_playbook", new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Activate playbook</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="playbookId">Playbook identifier eg: program1</param>
    public static void ActivatePlaybook(this IEnumerable<SensorEntity> target, string playbookId)
    {
        target.CallService("activate_playbook", new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    public static void CalibrateEnergy(this SensorEntity target, PowercalcCalibrateEnergyParameters data)
    {
        target.CallService("calibrate_energy", data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    public static void CalibrateEnergy(this IEnumerable<SensorEntity> target, PowercalcCalibrateEnergyParameters data)
    {
        target.CallService("calibrate_energy", data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public static void CalibrateEnergy(this SensorEntity target, string value)
    {
        target.CallService("calibrate_energy", new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public static void CalibrateEnergy(this IEnumerable<SensorEntity> target, string value)
    {
        target.CallService("calibrate_energy", new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void CalibrateUtilityMeter(this SensorEntity target, PowercalcCalibrateUtilityMeterParameters data)
    {
        target.CallService("calibrate_utility_meter", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void CalibrateUtilityMeter(this IEnumerable<SensorEntity> target, PowercalcCalibrateUtilityMeterParameters data)
    {
        target.CallService("calibrate_utility_meter", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public static void CalibrateUtilityMeter(this SensorEntity target, string value)
    {
        target.CallService("calibrate_utility_meter", new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public static void CalibrateUtilityMeter(this IEnumerable<SensorEntity> target, string value)
    {
        target.CallService("calibrate_utility_meter", new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Increases the sensor with a given amount</summary>
    public static void IncreaseDailyEnergy(this SensorEntity target, PowercalcIncreaseDailyEnergyParameters data)
    {
        target.CallService("increase_daily_energy", data);
    }

    ///<summary>Increases the sensor with a given amount</summary>
    public static void IncreaseDailyEnergy(this IEnumerable<SensorEntity> target, PowercalcIncreaseDailyEnergyParameters data)
    {
        target.CallService("increase_daily_energy", data);
    }

    ///<summary>Increases the sensor with a given amount</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="value">Amount to add to the sensor eg: 100</param>
    public static void IncreaseDailyEnergy(this SensorEntity target, string value)
    {
        target.CallService("increase_daily_energy", new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Increases the sensor with a given amount</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="value">Amount to add to the sensor eg: 100</param>
    public static void IncreaseDailyEnergy(this IEnumerable<SensorEntity> target, string value)
    {
        target.CallService("increase_daily_energy", new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Reset an energy sensor to zero kWh</summary>
    public static void ResetEnergy(this SensorEntity target)
    {
        target.CallService("reset_energy");
    }

    ///<summary>Reset an energy sensor to zero kWh</summary>
    public static void ResetEnergy(this IEnumerable<SensorEntity> target)
    {
        target.CallService("reset_energy");
    }

    ///<summary>Stop active playbook</summary>
    public static void StopPlaybook(this SensorEntity target)
    {
        target.CallService("stop_playbook");
    }

    ///<summary>Stop active playbook</summary>
    public static void StopPlaybook(this IEnumerable<SensorEntity> target)
    {
        target.CallService("stop_playbook");
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this RemoteEntity target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<RemoteEntity> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Name of the device from which commands will be deleted. eg: television</param>
    ///<param name="command">A single command or a list of commands to delete. eg: Mute</param>
    public static void DeleteCommand(this RemoteEntity target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Name of the device from which commands will be deleted. eg: television</param>
    ///<param name="command">A single command or a list of commands to delete. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<RemoteEntity> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this RemoteEntity target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<RemoteEntity> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as alternative (useful for discrete remotes).</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this RemoteEntity target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as alternative (useful for discrete remotes).</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<RemoteEntity> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this RemoteEntity target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<RemoteEntity> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the command(s).</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this RemoteEntity target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the command(s).</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<RemoteEntity> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device.</summary>
    public static void Toggle(this RemoteEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a device.</summary>
    public static void Toggle(this IEnumerable<RemoteEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Sends the Power Off Command.</summary>
    public static void TurnOff(this RemoteEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the Power Off Command.</summary>
    public static void TurnOff(this IEnumerable<RemoteEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the Power On Command.</summary>
    public static void TurnOn(this RemoteEntity target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the Power On Command.</summary>
    public static void TurnOn(this IEnumerable<RemoteEntity> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the Power On Command.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="activity">Activity ID or Activity Name to start. eg: BedroomTV</param>
    public static void TurnOn(this RemoteEntity target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the Power On Command.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="activity">Activity ID or Activity Name to start. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<RemoteEntity> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Activate a scene.</summary>
    public static void TurnOn(this SceneEntity target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activate a scene.</summary>
    public static void TurnOn(this IEnumerable<SceneEntity> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The SceneEntity to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public static void TurnOn(this SceneEntity target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The IEnumerable&lt;SceneEntity&gt; to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public static void TurnOn(this IEnumerable<SceneEntity> target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Toggle script</summary>
    public static void Toggle(this ScriptEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle script</summary>
    public static void Toggle(this IEnumerable<ScriptEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn off script</summary>
    public static void TurnOff(this ScriptEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn off script</summary>
    public static void TurnOff(this IEnumerable<ScriptEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn on script</summary>
    public static void TurnOn(this ScriptEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn on script</summary>
    public static void TurnOn(this IEnumerable<ScriptEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Select the first option of an select entity.</summary>
    public static void SelectFirst(this SelectEntity target)
    {
        target.CallService("select_first");
    }

    ///<summary>Select the first option of an select entity.</summary>
    public static void SelectFirst(this IEnumerable<SelectEntity> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Select the last option of an select entity.</summary>
    public static void SelectLast(this SelectEntity target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the last option of an select entity.</summary>
    public static void SelectLast(this IEnumerable<SelectEntity> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the next options of an select entity.</summary>
    public static void SelectNext(this SelectEntity target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    public static void SelectNext(this IEnumerable<SelectEntity> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this SelectEntity target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<SelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select an option of an select entity.</summary>
    public static void SelectOption(this SelectEntity target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Select an option of an select entity.</summary>
    public static void SelectOption(this IEnumerable<SelectEntity> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this SelectEntity target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<SelectEntity> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select the previous options of an select entity.</summary>
    public static void SelectPrevious(this SelectEntity target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Select the previous options of an select entity.</summary>
    public static void SelectPrevious(this IEnumerable<SelectEntity> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this SelectEntity target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<SelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SirenEntityExtensionMethods
{
    ///<summary>Toggles a siren.</summary>
    public static void Toggle(this SirenEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a siren.</summary>
    public static void Toggle(this IEnumerable<SirenEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn siren off.</summary>
    public static void TurnOff(this SirenEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn siren off.</summary>
    public static void TurnOff(this IEnumerable<SirenEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn siren on.</summary>
    public static void TurnOn(this SirenEntity target, SirenTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn siren on.</summary>
    public static void TurnOn(this IEnumerable<SirenEntity> target, SirenTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn siren on.</summary>
    ///<param name="target">The SirenEntity to call this service for</param>
    ///<param name="tone">The tone to emit when turning the siren on. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume level of the noise to emit when turning the siren on. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">The duration in seconds of the noise to emit when turning the siren on. Must be supported by the integration. eg: 15</param>
    public static void TurnOn(this SirenEntity target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        target.CallService("turn_on", new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }

    ///<summary>Turn siren on.</summary>
    ///<param name="target">The IEnumerable&lt;SirenEntity&gt; to call this service for</param>
    ///<param name="tone">The tone to emit when turning the siren on. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume level of the noise to emit when turning the siren on. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">The duration in seconds of the noise to emit when turning the siren on. Must be supported by the integration. eg: 15</param>
    public static void TurnOn(this IEnumerable<SirenEntity> target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        target.CallService("turn_on", new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch state</summary>
    public static void Toggle(this SwitchEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch state</summary>
    public static void Toggle(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn a switch off</summary>
    public static void TurnOff(this SwitchEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a switch off</summary>
    public static void TurnOff(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a switch on</summary>
    public static void TurnOn(this SwitchEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn a switch on</summary>
    public static void TurnOn(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class TimerEntityExtensionMethods
{
    ///<summary>Cancel a timer.</summary>
    public static void Cancel(this TimerEntity target)
    {
        target.CallService("cancel");
    }

    ///<summary>Cancel a timer.</summary>
    public static void Cancel(this IEnumerable<TimerEntity> target)
    {
        target.CallService("cancel");
    }

    ///<summary>Change a timer</summary>
    public static void Change(this TimerEntity target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Change a timer</summary>
    public static void Change(this IEnumerable<TimerEntity> target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Change a timer</summary>
    ///<param name="target">The TimerEntity to call this service for</param>
    ///<param name="duration">Duration to add or subtract to the running timer eg: 00:01:00, 60 or -60</param>
    public static void Change(this TimerEntity target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Change a timer</summary>
    ///<param name="target">The IEnumerable&lt;TimerEntity&gt; to call this service for</param>
    ///<param name="duration">Duration to add or subtract to the running timer eg: 00:01:00, 60 or -60</param>
    public static void Change(this IEnumerable<TimerEntity> target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finish a timer.</summary>
    public static void Finish(this TimerEntity target)
    {
        target.CallService("finish");
    }

    ///<summary>Finish a timer.</summary>
    public static void Finish(this IEnumerable<TimerEntity> target)
    {
        target.CallService("finish");
    }

    ///<summary>Pause a timer.</summary>
    public static void Pause(this TimerEntity target)
    {
        target.CallService("pause");
    }

    ///<summary>Pause a timer.</summary>
    public static void Pause(this IEnumerable<TimerEntity> target)
    {
        target.CallService("pause");
    }

    ///<summary>Start a timer</summary>
    public static void Start(this TimerEntity target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Start a timer</summary>
    public static void Start(this IEnumerable<TimerEntity> target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Start a timer</summary>
    ///<param name="target">The TimerEntity to call this service for</param>
    ///<param name="duration">Duration the timer requires to finish. [optional] eg: 00:01:00 or 60</param>
    public static void Start(this TimerEntity target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }

    ///<summary>Start a timer</summary>
    ///<param name="target">The IEnumerable&lt;TimerEntity&gt; to call this service for</param>
    ///<param name="duration">Duration the timer requires to finish. [optional] eg: 00:01:00 or 60</param>
    public static void Start(this IEnumerable<TimerEntity> target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this UpdateEntity target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<UpdateEntity> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Install an update for this device or service</summary>
    public static void Install(this UpdateEntity target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Install an update for this device or service</summary>
    public static void Install(this IEnumerable<UpdateEntity> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The UpdateEntity to call this service for</param>
    ///<param name="version">Version to install, if omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">Backup before installing the update, if supported by the integration.</param>
    public static void Install(this UpdateEntity target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The IEnumerable&lt;UpdateEntity&gt; to call this service for</param>
    ///<param name="version">Version to install, if omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">Backup before installing the update, if supported by the integration.</param>
    public static void Install(this IEnumerable<UpdateEntity> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Mark currently available update as skipped.</summary>
    public static void Skip(this UpdateEntity target)
    {
        target.CallService("skip");
    }

    ///<summary>Mark currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<UpdateEntity> target)
    {
        target.CallService("skip");
    }
}

public static class UtilityMeterEntityExtensionMethods
{
    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this SensorEntity target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this IEnumerable<SensorEntity> target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public static void Calibrate(this SensorEntity target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public static void Calibrate(this IEnumerable<SensorEntity> target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this SelectEntity target)
    {
        target.CallService("reset");
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this IEnumerable<SelectEntity> target)
    {
        target.CallService("reset");
    }
}

public static class WiserEntityExtensionMethods
{
    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    public static void BoostHeating(this ClimateEntity target, WiserBoostHeatingParameters data)
    {
        target.CallService("boost_heating", data);
    }

    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    public static void BoostHeating(this IEnumerable<ClimateEntity> target, WiserBoostHeatingParameters data)
    {
        target.CallService("boost_heating", data);
    }

    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="timePeriod">Set the time period for the boost in minutes eg: 60</param>
    ///<param name="temperatureDelta">Set the increase in temperature for the boost period eg: 3.0</param>
    ///<param name="temperature">Set the room target temperature for the boost period eg: 21.0</param>
    public static void BoostHeating(this ClimateEntity target, long timePeriod, double? temperatureDelta = null, double? temperature = null)
    {
        target.CallService("boost_heating", new WiserBoostHeatingParameters { TimePeriod = timePeriod, TemperatureDelta = temperatureDelta, Temperature = temperature });
    }

    ///<summary>Boost the temperature in the selected rooms/areas </summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="timePeriod">Set the time period for the boost in minutes eg: 60</param>
    ///<param name="temperatureDelta">Set the increase in temperature for the boost period eg: 3.0</param>
    ///<param name="temperature">Set the room target temperature for the boost period eg: 21.0</param>
    public static void BoostHeating(this IEnumerable<ClimateEntity> target, long timePeriod, double? temperatureDelta = null, double? temperature = null)
    {
        target.CallService("boost_heating", new WiserBoostHeatingParameters { TimePeriod = timePeriod, TemperatureDelta = temperatureDelta, Temperature = temperature });
    }
}